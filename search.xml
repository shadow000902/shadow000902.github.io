<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java学习笔记</title>
    <url>/2016/01/01/2016-01-01-Java-Learning-Notes/</url>
    <content><![CDATA[<h5 id="泛型-lt-T-extends-Animal-lt-T-gt-gt-的简单使用"><a href="#泛型-lt-T-extends-Animal-lt-T-gt-gt-的简单使用" class="headerlink" title="泛型&lt;T extends Animal&lt;T&gt;&gt;的简单使用"></a>泛型<code>&lt;T extends Animal&lt;T&gt;&gt;</code>的简单使用</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Animal</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"奔跑"</span>);</span><br><span class="line">        <span class="keyword">return</span> (T)<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span>&lt;<span class="title">Cat</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃东西"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"准备睡觉"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    Cat cat = <span class="keyword">new</span> Cat();</span><br><span class="line">    <span class="comment">// 链式调用</span></span><br><span class="line">    cat.eat().run().sleep();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="For-Each循环"><a href="#For-Each循环" class="headerlink" title="For-Each循环"></a><code>For-Each</code>循环</h5><p>语法格式如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(type element: array)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(element);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArray</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">double</span>[] myList = &#123;<span class="number">1.9</span>, <span class="number">2.9</span>, <span class="number">3.4</span>, <span class="number">3.5</span>&#125;;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 打印所有数组元素</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">double</span> element: myList) &#123;</span><br><span class="line">         System.out.println(element);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="配置文件的使用"><a href="#配置文件的使用" class="headerlink" title="配置文件的使用"></a>配置文件的使用</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseConfig</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">testEnv</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String testEnv = <span class="keyword">null</span>;</span><br><span class="line">        testEnv = System.getProperty(<span class="string">"testEnv"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == testEnv) &#123;</span><br><span class="line">            testEnv = BT.GetProv(<span class="string">"/config/application.properties"</span>, <span class="string">"testEnv"</span>);</span><br><span class="line">            System.setProperty(<span class="string">"testEnv"</span>, testEnv);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> testEnv.trim();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认从<code>mvn</code>命令执行时，通过<code>-DtestEnv=test</code>传入的变量，来读取<code>testEnv</code>字段的配置</li><li>如果传入的配置为空，就从配置文件中读取默认设置的值，并设置到系统配置中</li></ul>]]></content>
      <categories>
        <category>学习笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-Studio连接夜神模拟器</title>
    <url>/2016/03/14/2016-03-14-Android-Studio-Connect-yeshen/</url>
    <content><![CDATA[<ol><li>安装并启动夜神模拟器</li><li>运行cmd命令，cd到夜神模拟器的安装目录的bin目录下，执行命令：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb connect 127.0.0.1:62001</span><br></pre></td></tr></table></figure></li><li>此时在Android-Studio的设备位置就能看到已经连接到了夜神模拟器。</li></ol>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android-studio</tag>
      </tags>
  </entry>
  <entry>
    <title>在Github和Git上fork之简单指南</title>
    <url>/2016/03/12/2016-03-12-fork-between-Github-and-Git/</url>
    <content><![CDATA[<p>以我的经验来看，刚接触Git和GitHub时，最困扰的一件事情就是尝试解决下面的问题：<strong>在Git和GitHub上，我能做什么？</strong><br>Git教程往往不会解决这个问题，因为它集中篇幅来教你Git命令和概念，并且不认为你会使用GitHub。<a href="https://help.github.com/" target="_blank" rel="noopener">GitHub帮助教程</a>一定程度上弥补了这一缺陷，但是它每篇文章的关注点都较为狭隘，而且没有提供关于”Git vs GitHub”问题的概念性概述。<br><strong>如果你是习惯于先理解概念，再着手代码的学习者</strong>，而且你也是Git和GitHub的初学者，我建议你先理解清楚什么是fork。为什么呢 ？</p><ol><li><p>Fork是在GitHub起步最普遍的方式。</p></li><li><p>Fork只需要很少的Git命令，但是起得作用却非常大。</p></li><li><p>Fork提供了对Git和GitHub最基础的了解，有益于你之后的工作。</p><a id="more"></a></li></ol><img src="/2016/03/12/2016-03-12-fork-between-Github-and-Git/github.gif" title="github"><p><strong>本篇指南使用两张简单的图表，来教会你fork的两种主要工作流程。</strong> 我并不打算涉及任何代码，但是在结论中，我会把你需要使用的代码的链接给你。</p><h2 id="fork并且更新一个仓库"><a href="#fork并且更新一个仓库" class="headerlink" title="fork并且更新一个仓库"></a>fork并且更新一个仓库</h2><p>现在有这样一种情形：有一个叫做Joe的程序猿写了一个游戏程序，而你可能要去改进它。并且Joe将他的代码放在了GitHub仓库上。下面是你要做的事情：</p><img src="/2016/03/12/2016-03-12-fork-between-Github-and-Git/ForkandUpdate.png" title="ForkandUpdate"><p><strong>fork并且更新GitHub仓库的图表演示</strong></p><ol><li><p><strong>Fork他的仓库</strong>：这是GitHub操作，这个操作会复制Joe的仓库（包括文件，提交历史，issues，和其余一些东西）。复制后的仓库在你自己的GitHub帐号下。目前，你本地计算机对这个仓库没有任何操作。</p></li><li><p><strong>Clone你的仓库</strong>：这是Git操作。使用该操作让你发送”请给我发一份我仓库的复制文件”的命令给GitHub。现在这个仓库就会存储在你本地计算机上。</p></li><li><p><strong>更新某些文件</strong>：现在，你可以在任何程序或者环境下更新仓库里的文件。</p></li><li><p><strong>提交你的更改</strong>：这是Git操作。使用该操作让你发送”记录我的更改”的命令至GitHub。此操作只在你的本地计算机上完成。</p></li><li><p><strong>将你的更改push到你的GitHub仓库</strong>：这是Git操作。使用该操作让你发送”这是我的修改”的信息给GitHub。Push操作不会自动完成，所以直到你做了push操作，GitHub才知道你的提交。</p></li><li><p><strong>给Joe发送一个pull request</strong>：如果你认为Joe会接受你的修改，你就可以给他发送一个pull request。这是GitHub操作，使用此操作可以帮助你和Joe交流你的修改，并且询问Joe是否愿意接受你的”pull request”，当然，接不接受完全取决于他自己。</p></li></ol><p>如果Joe接受了你的pull request，他将把那些修改拉到自己的仓库。胜利！</p><h2 id="同步一个fork"><a href="#同步一个fork" class="headerlink" title="同步一个fork"></a>同步一个fork</h2><p>Joe和其余贡献者已经对这个项目做了一些修改，而你将在他们的修改的基础上，还要再做一些修改。在你开始之前，你最好”同步你的fork”，以确保在最新的复制版本里工作。下面是你要做的：</p><img src="/2016/03/12/2016-03-12-fork-between-Github-and-Git/%E5%90%8C%E6%AD%A5%E4%B8%80%E4%B8%AAfork.png" title="同步一个fork"><ol><li><p><strong>从Joe的仓库中取出那些变化的文件</strong>：这是Git操作，使用该命令让你可以从Joe的仓库获取最新的文件。</p></li><li><p><strong>将这些修改合并到你自己的仓库</strong>：这是Git操作，使用该命令使得那些修改更新到你的本地计算机（那些修改暂时存放在一个”分支”中）。记住：步骤1和2经常结合为一个命令使用，合并后的Git命令叫做”pull”。</p></li><li><p><strong>将那些修改更新推送到你的GitHub仓库（可选）</strong>：记住，你本地计算机不会自动更新你的GitHub仓库。所以，唯一更新GitHub仓库的办法就是将那些修改推送上去。你可以在步骤2完成后立即执行push，也可以等到你做了自己的一些修改，并已经本地提交后再执行推送操作。</p></li></ol><p><strong>比较一下fork和同步工作流程的区别</strong>：当你最初fork一个仓库的时候，信息的流向是从Joe的仓库到你的仓库，然后再到你本地计算机。但是最初的过程之后，信息的流向是从Joe的仓库到你的本地计算机，之后再到你的仓库。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>我希望这是一篇关于GitHub和Git的<a href="https://help.github.com/articles/fork-a-repo" target="_blank" rel="noopener">fork</a>有用概述。现在，你已经理解了那些概念，你将会更容易地在实际中执行你的代码。GitHub关于fork和<a href="https://help.github.com/articles/syncing-a-fork" target="_blank" rel="noopener">同步</a>的文章将会给你大部分你需要的代码。</p><p>如果你是Git的初学者，而且你很喜欢这种学习方式，那么我极力推荐书籍<a href="http://git-scm.com/book" target="_blank" rel="noopener">Pro Git</a>的前两个章节，网上是可以免费查阅的。</p><p>如果你喜欢视频学习，我创建了一个<a href="http://www.dataschool.io/git-and-github-videos-for-beginners/" target="_blank" rel="noopener">11部分的视频系列</a>（总共36分钟），来向初学者介绍Git和GitHub。</p><hr><p>via: <a href="http://www.dataschool.io/simple-guide-to-forks-in-github-and-git/" target="_blank" rel="noopener">http://www.dataschool.io/simple-guide-to-forks-in-github-and-git/</a></p><p>作者：Kevin Markham 译者：su-kaiyao 校对：wxy</p><p>本文由 <a href="https://github.com/LCTT/TranslateProject" target="_blank" rel="noopener">LCTT</a> 原创翻译，Linux中国 荣誉推出</p>]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>常用Adb命令列表</title>
    <url>/2016/03/16/2016-03-16-Common-Adb-command-list/</url>
    <content><![CDATA[<ol><li><p>安装APK（如果加 -r 参数，保留已设定数据，重新安装filename.apk）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb install XXX.apk</span><br><span class="line">adb install -r XXX.apk</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>卸载APK（如果加 -k 参数，为卸载软件但是保留配置和缓存文件）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb uninstall 包名(如：cn.highing.hichat)</span><br><span class="line">adb uninstall -k 包名(如：cn.highing.hichat)</span><br></pre></td></tr></table></figure></li><li><p>查看当前所有连接的设备id</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure></li><li><p>对某一设备操作</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb -s 设备id 命令</span><br></pre></td></tr></table></figure></li><li><p>导入文件到设备（该命令也可以实现安装APK，只要把APK导入到”/system/app”或者”/data/app”就OK）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb push 文件 设备路径</span><br></pre></td></tr></table></figure></li><li><p>从设备导出文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb pull 设备文件 本地路径</span><br></pre></td></tr></table></figure></li><li><p>查看log信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb logcat</span><br><span class="line">adb logcat -v time</span><br><span class="line">logcat -v time &gt; /mnt/sdcard/aa.txt 2&gt;&amp;1 &amp;                                  <span class="comment"># 离线抓取log保存在手机</span></span><br><span class="line">adb logcat -b main -v threadtime &gt; /sdcard/main.log                         <span class="comment"># 抓取应用程序的日志</span></span><br><span class="line">adb logcat -b radio -v threadtime &gt; /sdcard/radio.log                       <span class="comment"># 抓取跟 radio/telephony 相关的信息</span></span><br><span class="line">adb logcat -b events -v threadtime &gt; /sdcard/events.log                     <span class="comment"># 抓取系统事件日志，如触屏事件</span></span><br><span class="line">adb logcat -b kernel &gt; /sdcard/kernel.log                                   <span class="comment"># 抓取kernel log</span></span><br><span class="line">adb shell dmesg &gt; /sdcard/dmesg.log                                         <span class="comment"># 导出当前缓存的 kernel log</span></span><br><span class="line">adb shell kmsgcat                                                           <span class="comment"># 实时查看kernel log</span></span><br><span class="line">adb shell cat /proc/kmsg &gt; kernel.log                                       <span class="comment"># 抓取 printk生成的内核消息</span></span><br><span class="line">adb shell tcpdump -s 10000 -w /sdcard/tcpip.pcap                            <span class="comment"># 抓取 TCP/IP协议相关的日志</span></span><br></pre></td></tr></table></figure></li><li><p>进入shell模式</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell</span><br></pre></td></tr></table></figure></li><li><p>启动activity（可能需要root权限）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell am start -n 包名/包名+类名（-n 类名,-a action,-d date,-m MIME-TYPE,-c category,-e 扩展数据,等） （cn.highing.hichat/.ui.MainActivity）</span><br></pre></td></tr></table></figure></li><li><p>获取设备ID号</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb get-serialno</span><br></pre></td></tr></table></figure></li><li><p>开启/关闭adb服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb <span class="built_in">kill</span>-server</span><br><span class="line">adb start-server</span><br></pre></td></tr></table></figure></li><li><p>访问sqlite3</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell sqlite3</span><br></pre></td></tr></table></figure></li><li><p>重启设备</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb reboot</span><br></pre></td></tr></table></figure></li><li><p>挂载分区（可使系统分区重新可写）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb remount</span><br></pre></td></tr></table></figure></li><li><p>发布端口（可以设置任意的端口号，做为主机向模拟器或设备的请求端口）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb forward tcp:5555 tcp:8000</span><br></pre></td></tr></table></figure></li><li><p>查看最上层的Activity名字</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Linux</span></span><br><span class="line">adb shell dumpsys activity | grep <span class="string">"mFocusedActivity"</span></span><br><span class="line">adb shell <span class="string">"dumpsys window w| grep \/|grep name=|sed 's/mSurface=Surface(name=//g'|sed 's/)//g'|sed 's/ //g'"</span></span><br><span class="line"><span class="comment"># Windows</span></span><br><span class="line">adb shell dumpsys activity | findstr <span class="string">"mFocusedActivity"</span></span><br><span class="line">adb shell dumpsys window windows | grep -E <span class="string">"mCurrentFlcus|mFocuseApp"</span></span><br></pre></td></tr></table></figure></li><li><p>抓取重启的log</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /proc/kmsg &gt; /mnt/sdcard/kmsg.txt 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></li><li><p>查找占用指定端口的pid（进程id）（查找电脑被占用的端口，不是手机）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -ano|findstr 80                                 <span class="comment"># windows 查找占用80端口的进程</span></span><br><span class="line">netstat -aonp |grep <span class="string">":80[ ]\+"</span>|awk -F<span class="string">" "</span> &#123;<span class="string">'print $0'</span>&#125;   <span class="comment"># linux 查找占用80端口的进程</span></span><br><span class="line">netstat -aonp |grep <span class="string">"^[a-z]\+[ ]\+0[ ]\+0[ ]\+[0-9\.]\+:80[ ]\+"</span>|awk -F<span class="string">" "</span> &#123;<span class="string">'print $0'</span>&#125;                 <span class="comment"># 优化后</span></span><br><span class="line">netstat -aonp |grep <span class="string">"^[a-z]\+[ ]\+0[ ]\+0[ ]\+[0-9\.]\+:80[ ]\+"</span>|awk -F<span class="string">" "</span> &#123;<span class="string">'print $7'</span>&#125;|cut -d<span class="string">"/"</span> -f1    <span class="comment"># 只显示pid</span></span><br></pre></td></tr></table></figure></li><li><p>monkey命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell monkey -v time 500</span><br><span class="line">adb shell monkey -p cn.highing.hichat --ignore-crashes  --ignore-timeouts --ignore-security-exceptions  --pct-trackball 0 --pct-nav 0 --pct-majornav 0 --pct-syskeys 0 --pct-anyevent 0  -v -v -v --throttle 500 1200000000 -v time &gt; /mnt/sdcard/monkeysys.txt 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></li><li><p>adb录屏</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell screenrecord /mnt/sdcard/test0001.mp4</span><br></pre></td></tr></table></figure></li><li><p>获取Android版本号</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell getprop ro.build.version.release</span><br></pre></td></tr></table></figure></li><li><p>获取SDK版本号</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell getprop ro.build.version.sdk</span><br></pre></td></tr></table></figure></li><li><p>获取设备型号</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell getprop ro.product.model</span><br></pre></td></tr></table></figure></li><li><p>获取指定pid的应用包名</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">windows: ps | findstr cn.highing.hichat</span><br><span class="line">linux: ps | grep -w cn.highing.hichat</span><br></pre></td></tr></table></figure></li><li><p>获取电池状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys battery</span><br></pre></td></tr></table></figure></li><li><p>进入bootloader</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb reboot bootloader</span><br></pre></td></tr></table></figure></li><li><p><strong>获取系统中安装的系统应用包名列表</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell pm list packages -s</span><br></pre></td></tr></table></figure></li><li><p><strong>获取系统中安装的第三方应用包名列表</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell pm list packages -3</span><br></pre></td></tr></table></figure></li><li><p><strong>模糊查询应用包名</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell pm list packages qq</span><br></pre></td></tr></table></figure></li><li><p>获取启动应用所花时间</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell am start -W -n 包名/包名+类名</span><br></pre></td></tr></table></figure></li><li><p>清除应用用户数据</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell pm clear cn.highing.hichat</span><br></pre></td></tr></table></figure></li><li><p>获取设备当前显示的所有分辨率信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys window displays</span><br></pre></td></tr></table></figure></li><li><p>查看内存限制</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ adb shell getprop | grep heapgrowthlimit               		<span class="comment"># 查看单个应用程序最大内存限制</span></span><br><span class="line">[dalvik.vm.heapgrowthlimit]: [192m]</span><br><span class="line">➜  ~ adb shell getprop | grep dalvik.vm.heapstartsize       		<span class="comment"># 应用启动后分配的初始内存</span></span><br><span class="line">[dalvik.vm.heapstartsize]: [16m]</span><br><span class="line">➜  ~ adb shell getprop | grep dalvik.vm.heapsize            		<span class="comment"># 单个java虚拟机最大的内存限制</span></span><br><span class="line">[dalvik.vm.heapsize]: [512m]</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>adb</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Hexo在Github Page上部署个人博客</title>
    <url>/2016/03/18/2016-03-18-Use-Hexo-to-deploy-a-personal-blog-on-Github-Page/</url>
    <content><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li><p>安装node.js</p></li><li><p>安装git客户端</p></li><li><p>安装github for windows客户端</p></li><li><p>安装hexo框架</p><a id="more"></a></li></ol><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><h4 id="创建一个hexo安装目录，比如：E-hexo"><a href="#创建一个hexo安装目录，比如：E-hexo" class="headerlink" title="创建一个hexo安装目录，比如：E:/hexo"></a>创建一个hexo安装目录，比如：E:/hexo</h4><h4 id="安装hexo框架"><a href="#安装hexo框架" class="headerlink" title="安装hexo框架"></a>安装hexo框架</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo</span><br><span class="line"><span class="built_in">cd</span> E:/hexo</span><br><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h4 id="在本地查看博客"><a href="#在本地查看博客" class="headerlink" title="在本地查看博客"></a>在本地查看博客</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>现在用浏览器访问：<a href="http://localhost:4000/，效果如下图" target="_blank" rel="noopener">http://localhost:4000/，效果如下图</a></p><img src="/2016/03/18/2016-03-18-Use-Hexo-to-deploy-a-personal-blog-on-Github-Page/%E9%BB%98%E8%AE%A4%E6%A8%A1%E6%9D%BF%E6%95%88%E6%9E%9C.jpg" title="默认模板效果"><p>如果要停止 hexo 服务：在 Git Bash 下按 Ctrl + C 即可</p><h4 id="安装next主题"><a href="#安装next主题" class="headerlink" title="安装next主题"></a>安装next主题</h4><p>在E:/hexo下，打开git bash，</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/MOxFIVE/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure><h4 id="应用next主题"><a href="#应用next主题" class="headerlink" title="应用next主题"></a>应用next主题</h4><p>在E:/hexo下，打开_config.yml，修改：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">theme: landscape    -&gt;</span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure><h4 id="重新生成静态网页"><a href="#重新生成静态网页" class="headerlink" title="重新生成静态网页"></a>重新生成静态网页</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><h3 id="创建-Github-pages-并-SSH-授权"><a href="#创建-Github-pages-并-SSH-授权" class="headerlink" title="创建 Github pages 并 SSH 授权"></a>创建 Github pages 并 SSH 授权</h3><ol><li>创建名为 <strong>shadow000902</strong>.github.io的新的仓库（repository），<strong>shadow000902</strong> 必须为自己的用户名</li><li>在本地生成SSH密钥，用于提交本地代码到github上：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"shadow000902@gmail.com"</span></span><br></pre></td></tr></table></figure></li><li>默认密钥生成后,存放于C:/Users/shadow/.ssh/中，打开id_rsa.pub文件，复制其中的所有内容</li><li>在自己创建的shadow000902.github.io仓库的setting中，打开Deploy keys, 点击add deploy key，把刚才复制的内容黏贴进去保存，Title任意取</li></ol><h3 id="上传本地博客内容到github上"><a href="#上传本地博客内容到github上" class="headerlink" title="上传本地博客内容到github上"></a>上传本地博客内容到github上</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo -server --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="更新博客"><a href="#更新博客" class="headerlink" title="更新博客"></a>更新博客</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean          <span class="comment"># 清楚本地静态网页public文件夹</span></span><br><span class="line">hexo generate       <span class="comment"># 重新生成静态网页</span></span><br><span class="line">hexo deploy         <span class="comment"># 部署本地静态网页到github上，以便在shadow000902.github.io域名下访问</span></span><br></pre></td></tr></table></figure><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><ol><li>在E:/hexo/source下新建一个CNAME文件，把自己申请的域名（比如我申请的：shadow000902.space）填写在该文件里保存</li><li>在<a href="https://www.dnspod.cn/" target="_blank" rel="noopener">DNSPOD</a>网站里，设置域名解析：<img src="/2016/03/18/2016-03-18-Use-Hexo-to-deploy-a-personal-blog-on-Github-Page/%E8%AE%BE%E7%BD%AE%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90.png" title="设置域名解析"></li><li>修改域名提供商下的域名DNS服务器为github提供的DNS：<img src="/2016/03/18/2016-03-18-Use-Hexo-to-deploy-a-personal-blog-on-Github-Page/%E4%BF%AE%E6%94%B9%E5%9F%9F%E5%90%8D%E6%8F%90%E4%BE%9B%E5%95%86%E4%B8%8B%E7%9A%84%E5%9F%9F%E5%90%8DDNS%E6%9C%8D%E5%8A%A1%E5%99%A8.jpg" title="修改域名提供商下的域名DNS服务器"></li></ol><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><h4 id="插件基本命令"><a href="#插件基本命令" class="headerlink" title="插件基本命令"></a>插件基本命令</h4><p>1.1 安装插件： npm install 插件名 –save<br>1.2 卸载插件： npm uninstall 插件名 –save<br>1.3 更新插件和博客框架（需要在 E:\hexo 目录下）： npm update<br>它实质上是通过项目根目录下 package.json 文件更新各大组件</p><h4 id="必备插件"><a href="#必备插件" class="headerlink" title="必备插件"></a>必备插件</h4><p>2.1 支持RSS： npm install hexo-generator-feed –save<br>2.2 生成站点地图： npm install hexo-generator-sitemap –save<br>2.3 生成百度站点地图： npm install hexo-generator-baidu-sitemap –save<br><del>2.4 HTML 压缩： npm install hexo-html-minifier –save</del><br><del>2.5 JavaScript 压缩： npm install hexo-uglify –save</del><br><del>2.6 CSS 压缩插件： npm install hexo-clean-css –save</del><br>2.7 SEO优化： npm install hexo-generator-seo-friendly-sitemap –save<br>2.8 文章字数统计 npm install hexo-wordcount –save</p><h3 id="统计功能"><a href="#统计功能" class="headerlink" title="统计功能"></a>统计功能</h3><p><a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">为hexo博客添加访问次数统计功能</a></p><h3 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h3><p><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="noopener">Hexo你的博客</a></p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><h4 id="执行任何一条含hexo的命令都会报以下错误："><a href="#执行任何一条含hexo的命令都会报以下错误：" class="headerlink" title="执行任何一条含hexo的命令都会报以下错误："></a>执行任何一条含<code>hexo</code>的命令都会报以下错误：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; Error: Cannot find module &#39;.&#x2F;build&#x2F;Release&#x2F;DTraceProviderBindings&#39;</span><br><span class="line">    ...</span><br><span class="line">    at Module.load (module.js:458:32) code: &#39;MODULE_NOT_FOUND&#39; &#125;</span><br></pre></td></tr></table></figure><p>解决办法：<br>Try to install <code>hexo</code> with <code>--no-optional</code> option.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo --no-optional --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  blog_source git:(master) hexo -v</span><br><span class="line">hexo: 3.2.2</span><br><span class="line">hexo-cli: 1.0.2</span><br><span class="line">os: Darwin 16.3.0 darwin x64</span><br><span class="line">http_parser: 2.7.0</span><br><span class="line">node: 6.9.0</span><br><span class="line">v8: 5.1.281.84</span><br><span class="line">uv: 1.9.1</span><br><span class="line">zlib: 1.2.8</span><br><span class="line">ares: 1.10.1-DEV</span><br><span class="line">icu: 57.1</span><br><span class="line">modules: 48</span><br><span class="line">openssl: 1.0.2j</span><br><span class="line">➜  blog_source git:(master)</span><br></pre></td></tr></table></figure><h4 id="执行每条命令都会报以下错误："><a href="#执行每条命令都会报以下错误：" class="headerlink" title="执行每条命令都会报以下错误："></a>执行每条命令都会报以下错误：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  blog_source git:(master) ✗ hexo -v</span><br><span class="line">ERROR Plugin load failed: hexo-generator-baidu-sitemap</span><br><span class="line">ReferenceError: hexo is not defined</span><br><span class="line">    at Object.&lt;anonymous&gt; (&#x2F;usr&#x2F;local&#x2F;git_projects&#x2F;blog_source&#x2F;node_modules&#x2F;hexo-generator-baidu-sitemap&#x2F;baidusitemap.js:4:10)</span><br><span class="line">    at Module._compile (module.js:541:32)</span><br><span class="line">    at Object.Module._extensions..js (module.js:550:10)</span><br><span class="line">    at Module.load (module.js:458:32)</span><br><span class="line">    at tryModuleLoad (module.js:417:12)</span><br><span class="line">    at Function.Module._load (module.js:409:3)</span><br><span class="line">    at Module.require (module.js:468:17)</span><br><span class="line">    at require (&#x2F;usr&#x2F;local&#x2F;git_projects&#x2F;blog_source&#x2F;node_modules&#x2F;hexo&#x2F;lib&#x2F;hexo&#x2F;index.js:213:21)</span><br><span class="line">    at &#x2F;usr&#x2F;local&#x2F;git_projects&#x2F;blog_source&#x2F;node_modules&#x2F;hexo-generator-baidu-sitemap&#x2F;index.js:6:38</span><br><span class="line">    at &#x2F;usr&#x2F;local&#x2F;git_projects&#x2F;blog_source&#x2F;node_modules&#x2F;hexo&#x2F;lib&#x2F;hexo&#x2F;index.js:229:12</span><br><span class="line">    at tryCatcher (&#x2F;usr&#x2F;local&#x2F;git_projects&#x2F;blog_source&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;util.js:16:23)</span><br><span class="line">    at Promise._settlePromiseFromHandler (&#x2F;usr&#x2F;local&#x2F;git_projects&#x2F;blog_source&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:502:31)</span><br><span class="line">    at Promise._settlePromise (&#x2F;usr&#x2F;local&#x2F;git_projects&#x2F;blog_source&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:559:18)</span><br><span class="line">    at Promise._settlePromise0 (&#x2F;usr&#x2F;local&#x2F;git_projects&#x2F;blog_source&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:604:10)</span><br><span class="line">    at Promise._settlePromises (&#x2F;usr&#x2F;local&#x2F;git_projects&#x2F;blog_source&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:683:18)</span><br><span class="line">    at Promise._fulfill (&#x2F;usr&#x2F;local&#x2F;git_projects&#x2F;blog_source&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:628:18)</span><br><span class="line">    at Promise._resolveCallback (&#x2F;usr&#x2F;local&#x2F;git_projects&#x2F;blog_source&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:423:57)</span><br><span class="line">    at Promise._settlePromiseFromHandler (&#x2F;usr&#x2F;local&#x2F;git_projects&#x2F;blog_source&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:514:17)</span><br><span class="line">    at Promise._settlePromise (&#x2F;usr&#x2F;local&#x2F;git_projects&#x2F;blog_source&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:559:18)</span><br><span class="line">    at Promise._settlePromise0 (&#x2F;usr&#x2F;local&#x2F;git_projects&#x2F;blog_source&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:604:10)</span><br><span class="line">    at Promise._settlePromises (&#x2F;usr&#x2F;local&#x2F;git_projects&#x2F;blog_source&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:683:18)</span><br><span class="line">    at Promise._fulfill (&#x2F;usr&#x2F;local&#x2F;git_projects&#x2F;blog_source&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:628:18)</span><br></pre></td></tr></table></figure><p>解决方法：<br><code>if your hexo version is 2.x.x, you should install as follow:</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-baidu-sitemap@0.0.8 --save</span><br></pre></td></tr></table></figure><p><code>if your hexo version is 3.x.x, you should install as follow:</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-baidu-sitemap@0.1.1 --save</span><br></pre></td></tr></table></figure><p><code>Maybe response is &quot;hexo is not definded&quot;,then you should:</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd node_modules&#x2F;hexo-generator-baidu-sitemap&#x2F;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h4 id="hexo-generate报错处理"><a href="#hexo-generate报错处理" class="headerlink" title="hexo generate报错处理"></a><code>hexo generate</code>报错处理</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ taoyi-mac in ~/git_projects/GitHub/blog_source on git:master x [18:11:36] </span></span><br><span class="line">$ hexo generate</span><br><span class="line">(node:51431) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.</span><br><span class="line">INFO  Start processing</span><br><span class="line">FATAL Something<span class="string">'s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span></span><br><span class="line"><span class="string">Error: Cannot find module '</span>highlight.js/lib/languages/shell<span class="string">'</span></span><br><span class="line"><span class="string">    at Function.Module._resolveFilename (module.js:555:15)</span></span><br><span class="line"><span class="string">    at Function.Module._load (module.js:482:25)</span></span><br><span class="line"><span class="string">    at Module.require (module.js:604:17)</span></span><br><span class="line"><span class="string">    at require (internal/module.js:11:18)</span></span><br><span class="line"><span class="string">    at loadLanguage (/Users/taoyi/git_projects/GitHub/blog_source/node_modules/hexo/node_modules/hexo-util/lib/highlight.js:93:31)</span></span><br><span class="line"><span class="string">    at tryLanguage (/Users/taoyi/git_projects/GitHub/blog_source/node_modules/hexo/node_modules/hexo-util/lib/highlight.js:100:3)</span></span><br><span class="line"><span class="string">    at highlight (/Users/taoyi/git_projects/GitHub/blog_source/node_modules/hexo/node_modules/hexo-util/lib/highlight.js:136:8)</span></span><br><span class="line"><span class="string">    at highlightUtil (/Users/taoyi/git_projects/GitHub/blog_source/node_modules/hexo/node_modules/hexo-util/lib/highlight.js:22:14)</span></span><br><span class="line"><span class="string">    at /Users/taoyi/git_projects/GitHub/blog_source/node_modules/hexo/lib/plugins/filter/before_post_render/backtick_code_block.js:62:15</span></span><br><span class="line"><span class="string">    at String.replace (&lt;anonymous&gt;)</span></span><br><span class="line"><span class="string">    at Hexo.backtickCodeBlock (/Users/taoyi/git_projects/GitHub/blog_source/node_modules/hexo/lib/plugins/filter/before_post_render/backtick_code_block.js:15:31)</span></span><br><span class="line"><span class="string">    at Hexo.tryCatcher (/Users/taoyi/git_projects/GitHub/blog_source/node_modules/bluebird/js/release/util.js:16:23)</span></span><br><span class="line"><span class="string">    at Hexo.&lt;anonymous&gt; (/Users/taoyi/git_projects/GitHub/blog_source/node_modules/bluebird/js/release/method.js:15:34)</span></span><br><span class="line"><span class="string">    at /Users/taoyi/git_projects/GitHub/blog_source/node_modules/hexo/lib/extend/filter.js:68:35</span></span><br><span class="line"><span class="string">    at tryCatcher (/Users/taoyi/git_projects/GitHub/blog_source/node_modules/bluebird/js/release/util.js:16:23)</span></span><br><span class="line"><span class="string">    at Object.gotValue (/Users/taoyi/git_projects/GitHub/blog_source/node_modules/bluebird/js/release/reduce.js:145:18)</span></span><br><span class="line"><span class="string">    at Object.gotAccum (/Users/taoyi/git_projects/GitHub/blog_source/node_modules/bluebird/js/release/reduce.js:134:25)</span></span><br><span class="line"><span class="string">    at Object.tryCatcher (/Users/taoyi/git_projects/GitHub/blog_source/node_modules/bluebird/js/release/util.js:16:23)</span></span><br><span class="line"><span class="string">    at Promise._settlePromiseFromHandler (/Users/taoyi/git_projects/GitHub/blog_source/node_modules/bluebird/js/release/promise.js:502:31)</span></span><br><span class="line"><span class="string">    at Promise._settlePromise (/Users/taoyi/git_projects/GitHub/blog_source/node_modules/bluebird/js/release/promise.js:559:18)</span></span><br><span class="line"><span class="string">    at Promise._settlePromiseCtx (/Users/taoyi/git_projects/GitHub/blog_source/node_modules/bluebird/js/release/promise.js:596:10)</span></span><br><span class="line"><span class="string">    at Async._drainQueue (/Users/taoyi/git_projects/GitHub/blog_source/node_modules/bluebird/js/release/async.js:143:12)</span></span><br><span class="line"><span class="string">    at Async._drainQueues (/Users/taoyi/git_projects/GitHub/blog_source/node_modules/bluebird/js/release/async.js:148:10)</span></span><br><span class="line"><span class="string">    at Immediate.Async.drainQueues [as _onImmediate] (/Users/taoyi/git_projects/GitHub/blog_source/node_modules/bluebird/js/release/async.js:17:14)</span></span><br><span class="line"><span class="string">    at runCallback (timers.js:773:18)</span></span><br><span class="line"><span class="string">    at tryOnImmediate (timers.js:734:5)</span></span><br><span class="line"><span class="string">    at processImmediate [as _immediateCallback] (timers.js:711:5)</span></span><br></pre></td></tr></table></figure><p>解决方法：安装<code>highlight.js</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install highlight.js</span><br></pre></td></tr></table></figure><h4 id="解决fs-SyncWriteStream报错问题"><a href="#解决fs-SyncWriteStream报错问题" class="headerlink" title="解决fs.SyncWriteStream报错问题"></a>解决<code>fs.SyncWriteStream</code>报错问题</h4><p>调试找出问题出现点</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ taoyi-mac in ~/git_projects/GitHub/blog_source on git:master x [18:57:19] </span></span><br><span class="line">$ hexo clean --debug                  </span><br><span class="line">10:57:38.353 DEBUG Hexo version: 3.4.4</span><br><span class="line">10:57:38.356 DEBUG Working directory: ~/git_projects/GitHub/blog_source/</span><br><span class="line">10:57:38.577 DEBUG Config loaded: ~/git_projects/GitHub/blog_source/_config.yml</span><br><span class="line">10:57:38.642 DEBUG Plugin loaded: hexo-algolia</span><br><span class="line">10:57:38.644 DEBUG Plugin loaded: hexo-algoliasearch</span><br><span class="line">10:57:38.779 DEBUG Plugin loaded: hexo-clean-css</span><br><span class="line">10:57:38.792 DEBUG Plugin loaded: hexo-deployer-git</span><br><span class="line">(node:55696) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.</span><br><span class="line">10:57:38.796 DEBUG Plugin loaded: hexo-fs</span><br><span class="line">10:57:38.816 DEBUG Plugin loaded: hexo-cli</span><br><span class="line">10:57:38.824 DEBUG Plugin loaded: hexo-generator-baidu-sitemap</span><br><span class="line">10:57:38.829 DEBUG Plugin loaded: hexo-generator-archive</span><br><span class="line">10:57:38.831 DEBUG Plugin loaded: hexo-generator-category</span><br><span class="line">10:57:38.879 DEBUG Plugin loaded: hexo-generator-feed</span><br><span class="line">10:57:38.881 DEBUG Plugin loaded: hexo-generator-index</span><br><span class="line">10:57:38.882 DEBUG Plugin loaded: hexo-generator-tag</span><br><span class="line">10:57:38.910 DEBUG Plugin loaded: hexo-generator-seo-friendly-sitemap</span><br><span class="line">10:57:38.919 DEBUG Plugin loaded: hexo-html-minifier</span><br><span class="line">10:57:38.922 DEBUG Plugin loaded: hexo-generator-sitemap</span><br><span class="line">10:57:38.924 DEBUG Plugin loaded: hexo-renderer-ejs</span><br><span class="line">10:57:38.948 DEBUG Plugin loaded: hexo-renderer-marked</span><br><span class="line">10:57:38.976 DEBUG Plugin loaded: hexo-renderer-stylus</span><br><span class="line">10:57:39.078 DEBUG Plugin loaded: hexo-server</span><br><span class="line">10:57:39.170 DEBUG Plugin loaded: hexo-wordcount</span><br><span class="line">10:57:39.177 DEBUG Script loaded: themes/next-5/scripts/tags/button.js</span><br><span class="line">10:57:39.180 DEBUG Script loaded: themes/next-5/scripts/merge-configs.js</span><br><span class="line">10:57:39.180 DEBUG Script loaded: themes/next-5/scripts/tags/center-quote.js</span><br><span class="line">10:57:39.183 DEBUG Script loaded: themes/next-5/scripts/merge.js</span><br><span class="line">10:57:39.183 DEBUG Script loaded: themes/next-5/scripts/tags/full-image.js</span><br><span class="line">10:57:39.183 DEBUG Script loaded: themes/next-5/scripts/tags/label.js</span><br><span class="line">10:57:39.184 DEBUG Script loaded: themes/next-5/scripts/tags/lazy-image.js</span><br><span class="line">10:57:39.184 DEBUG Script loaded: themes/next-5/scripts/tags/note.js</span><br><span class="line">10:57:39.185 DEBUG Script loaded: themes/next-5/scripts/tags/group-pictures.js</span><br><span class="line">10:57:39.200 DEBUG Script loaded: themes/next-5/scripts/tags/exturl.js</span><br><span class="line">10:57:39.201 DEBUG Script loaded: themes/next-5/scripts/tags/tabs.js</span><br><span class="line">10:57:39.203 INFO  Deleted database.</span><br><span class="line">10:57:39.205 DEBUG Database saved</span><br></pre></td></tr></table></figure><p>由此可以看出，问题出现在<code>hexo-deployer-git</code>中，在其中搜索：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ taoyi-mac in ~/git_projects/GitHub/blog_source on git:master x [19:01:51] </span></span><br><span class="line">$ grep -irn <span class="string">"SyncWriteStream"</span> ./node_modules/hexo-deployer-git/  </span><br><span class="line">./node_modules/hexo-deployer-git//node_modules/hexo-fs/lib/fs.js:718:// exports.SyncWriteStream = fs.SyncWriteStream;</span><br></pre></td></tr></table></figure><p>可以看到是<code>./node_modules/hexo-deployer-git//node_modules/hexo-fs/lib/fs.js</code>文件的第718行用到，直接编辑文件注释掉该行就可以解决问题，不会再报错了。<br>hexo命令中，可以通过<code>--debug</code>参数看下详细的运行记录，从而定位问题。</p><h4 id="ERROR-Asset-render-failed-lib-canvas-ribbon-canvas-ribbon-js"><a href="#ERROR-Asset-render-failed-lib-canvas-ribbon-canvas-ribbon-js" class="headerlink" title="ERROR Asset render failed: lib/canvas-ribbon/canvas-ribbon.js"></a>ERROR Asset render failed: lib/canvas-ribbon/canvas-ribbon.js</h4><p>这个错主要是安装了 JS 压缩的插件引起的<br>所以要做的就是卸载所有相关的插件。</p><h4 id="博客部署很慢的问题解决"><a href="#博客部署很慢的问题解决" class="headerlink" title="博客部署很慢的问题解决"></a>博客部署很慢的问题解决</h4><p>这个还是 JS 压缩引起的。<br>所以主要做的还是卸载所有相关的插件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-uglify</span><br><span class="line">npm uninstall uglify</span><br><span class="line">npm uninstall uglify-js</span><br></pre></td></tr></table></figure><p>卸载该插件后，60篇博客，部署时间大概在30s左右，generate时间在10<del>20s，比之前的5</del>6min好了不知道多少。</p><h3 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="keyword">if</span>(<span class="string">"123456"</span>==prompt(<span class="string">"Please input password"</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		alert(<span class="string">"Right"</span>); </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		alert(<span class="string">"Wrong"</span>); </span><br><span class="line">		location=<span class="string">"http://shadow000902.space"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文章字数统计"><a href="#文章字数统计" class="headerlink" title="文章字数统计"></a>文章字数统计</h3><p>主要代码：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字数统计</span></span><br><span class="line">&lt;span class=<span class="string">"post-count"</span>&gt;&#123;&#123; wordcount(post.content) &#125;&#125;&lt;/span&gt;</span><br><span class="line"><span class="comment"># 阅读时长预计</span></span><br><span class="line">&lt;span class=<span class="string">"post-count"</span>&gt;&#123;&#123; min2read(post.content) &#125;&#125;&lt;/span&gt;</span><br><span class="line"><span class="comment"># 总字数统计</span></span><br><span class="line">&lt;span class=<span class="string">"post-count"</span>&gt;&#123;&#123; totalcount(site, <span class="string">'0,0.0a'</span>) &#125;&#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure><h3 id="增加文章的宽度"><a href="#增加文章的宽度" class="headerlink" title="增加文章的宽度"></a>增加文章的宽度</h3><p>编辑<code>blog_source/themes/next/source/css/_variables/custom.styl</code>文件，加入如下代码：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">//</span> <span class="string">修改成你期望的宽度</span></span><br><span class="line"><span class="string">$content-desktop</span> <span class="string">=</span> <span class="string">800px</span></span><br><span class="line"><span class="string">//</span> <span class="string">当视窗超过</span> <span class="string">1600px</span> <span class="string">后的宽度</span></span><br><span class="line"><span class="string">$content-desktop-large</span> <span class="string">=</span> <span class="string">1000px</span></span><br></pre></td></tr></table></figure><h3 id="文本内容上色"><a href="#文本内容上色" class="headerlink" title="文本内容上色"></a>文本内容上色</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;span</span> <span class="string">class="inline-span</span> <span class="string">red"&gt;red&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;span</span> <span class="string">class="inline-span</span> <span class="string">blue"&gt;blue&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;span</span> <span class="string">class="inline-span</span> <span class="string">yellow"&gt;yellow&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;span</span> <span class="string">class="inline-span</span> <span class="string">green"&gt;green&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;span</span> <span class="string">class="inline-span</span> <span class="string">purple"&gt;purple&lt;/span&gt;</span></span><br></pre></td></tr></table></figure><p>示例：<span class="inline-span red">red</span>、<span class="inline-span blue">blue</span>、<span class="inline-span yellow">yellow</span>、<span class="inline-span green">green</span>、<span class="inline-span purple">purple</span></p><h3 id="文本段落上色"><a href="#文本段落上色" class="headerlink" title="文本段落上色"></a>文本段落上色</h3><p>编辑<code>blog_source/themes/next/source/css/_custom/custom.styl</code>文件，加入如下代码即可：</p><figure class="highlight styl"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-class">.inline-span</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>:inline;</span><br><span class="line">    padding:.3em .4em;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">80%</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>:bold;</span><br><span class="line">    <span class="attribute">line-height</span>:<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">    <span class="attribute">white-space</span>:nowrap;</span><br><span class="line">    <span class="attribute">vertical-align</span>:baseline;</span><br><span class="line">    border-radius:.2em;</span><br><span class="line">    margin: auto .5em;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.yellow</span> &#123; </span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f0ad4e</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.green</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#5cb85c</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.blue</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#2780e3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.purple</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#9954bb</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.red</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#df3e3e</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.div-border</span> &#123;   </span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.left-red</span> &#123;</span><br><span class="line">    <span class="attribute">border-left-width</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-left-color</span>: <span class="number">#df3e3e</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.left-yellow</span> &#123;</span><br><span class="line">    <span class="attribute">border-left-width</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-left-color</span>: <span class="number">#f0ad4e</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.left-green</span> &#123;</span><br><span class="line">    <span class="attribute">border-left-width</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-left-color</span>: <span class="number">#5cb85c</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.left-blue</span> &#123;</span><br><span class="line">    <span class="attribute">border-left-width</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-left-color</span>: <span class="number">#2780e3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.left-purple</span> &#123;</span><br><span class="line">    <span class="attribute">border-left-width</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-left-color</span>: <span class="number">#9954bb</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.right-red</span> &#123;</span><br><span class="line">    <span class="attribute">border-right-width</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-right-color</span>: <span class="number">#df3e3e</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.right-yellow</span> &#123;</span><br><span class="line">    <span class="attribute">border-right-width</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-right-color</span>: <span class="number">#f0ad4e</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.right-green</span> &#123;</span><br><span class="line">    <span class="attribute">border-right-width</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-right-color</span>: <span class="number">#5cb85c</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.right-blue</span> &#123;</span><br><span class="line">    <span class="attribute">border-right-width</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-right-color</span>: <span class="number">#2780e3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.right-purple</span> &#123;</span><br><span class="line">    <span class="attribute">border-right-width</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-right-color</span>: <span class="number">#9954bb</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.top-red</span> &#123;</span><br><span class="line">    <span class="attribute">border-top-width</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-top-color</span>: <span class="number">#df3e3e</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.top-yellow</span> &#123;</span><br><span class="line">    <span class="attribute">border-top-width</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-top-color</span>: <span class="number">#f0ad4e</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.top-green</span> &#123;</span><br><span class="line">    <span class="attribute">border-top-width</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-top-color</span>: <span class="number">#5cb85c</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.top-blue</span> &#123;</span><br><span class="line">    <span class="attribute">border-top-width</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-top-color</span>: <span class="number">#2780e3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.top-purple</span> &#123;</span><br><span class="line">    <span class="attribute">border-top-width</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-top-color</span>: <span class="number">#9954bb</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><div class="div-border left-red">这是边框带颜色的文本段落 位置可选: left | right | top 颜色可选: red | blue | yellow | green | purple</div><p>实现代码：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div-border left-red"</span>&gt;</span></span></span><br><span class="line">这是边框带颜色的文本段落</span><br><span class="line">位置可选: left | right | top</span><br><span class="line">颜色可选: red | blue | yellow | green | purple</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="解决Hexo中的markdown文档使用HTML标签多出空行的问题"><a href="#解决Hexo中的markdown文档使用HTML标签多出空行的问题" class="headerlink" title="解决Hexo中的markdown文档使用HTML标签多出空行的问题"></a>解决<code>Hexo</code>中的<code>markdown</code>文档使用HTML标签多出空行的问题</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 表格开始前加</span></span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">html tags &amp; content</span><br><span class="line"><span class="section"># 表格结尾后加</span></span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><h3 id="Next主题使用Algolia搜索"><a href="#Next主题使用Algolia搜索" class="headerlink" title="Next主题使用Algolia搜索"></a><code>Next</code>主题使用<code>Algolia</code>搜索</h3><p>Change dir to NexT directory, Install module to <code>source/lib</code> directory:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/next</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-algolia-instant-search <span class="built_in">source</span>/lib/algolia-instant-search</span><br></pre></td></tr></table></figure><p>Enable module in NexT _config.yml file:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">algolia_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>Update:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/next/<span class="built_in">source</span>/lib/algolia-instant-search</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h3 id="npm第三方模块升级"><a href="#npm第三方模块升级" class="headerlink" title="npm第三方模块升级"></a><code>npm</code>第三方模块升级</h3><p>局部模块管理</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm outdated        <span class="comment"># 列出当前目录下的第三方模块</span></span><br><span class="line">Package  Current   Wanted   Latest  Location</span><br><span class="line">appium    1.16.0   1.17.0   1.17.0</span><br><span class="line">node      12.6.0  12.16.1  13.12.0</span><br><span class="line">npm       6.10.1   6.14.4   6.14.4</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo            <span class="comment"># 升级当前目录下的hexo</span></span><br></pre></td></tr></table></figure><p>该方法只能单个升级模块</p><p><code>npm</code>高效升级插件<code>npm-check-updates</code>安装：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g npm-check-updates</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ncu                         <span class="comment"># 同``npm-check-updates``命令</span></span><br></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ncu</span><br><span class="line">Using /Users/taoyi/git_projects/GitHub/blog_source/package.json</span><br><span class="line">⸨░░░░░░░░░░░░░░░░░░⸩ ⠴ :</span><br><span class="line"> hexo-algolia                          ^0.1.1  →  ^1.2.5</span><br><span class="line"> hexo-algoliasearch                    ^0.2.3  →  ^0.3.0</span><br><span class="line"> hexo-clean-css                         0.0.2  →   0.0.3</span><br><span class="line"> hexo-deployer-git                     ^0.1.0  →  ^0.3.1</span><br><span class="line"> hexo-generator-seo-friendly-sitemap   0.0.19  →  0.0.21</span><br><span class="line"> hexo-html-minifier                     0.0.1  →   0.0.2</span><br><span class="line"> hexo-renderer-ejs                     ^0.2.0  →  ^0.3.1</span><br><span class="line"> hexo-renderer-marked                 ^0.2.10  →  ^0.3.2</span><br><span class="line"> hexo-server                           ^0.2.2  →  ^0.3.2</span><br><span class="line"></span><br><span class="line">The following dependencies are satisfied by their declared version range, but the installed versions are behind. You can install the latest versions without modifying your package file by using npm update. If you want to update the dependencies <span class="keyword">in</span> your package file anyway, run ncu -a.</span><br><span class="line"></span><br><span class="line"> hexo-fs                       ^0.2.2  →  ^0.2.3</span><br><span class="line"> hexo-generator-baidu-sitemap  ^0.1.1  →  ^0.1.2</span><br><span class="line"></span><br><span class="line">Run ncu with -u to upgrade package.json</span><br></pre></td></tr></table></figure><p>升级所有的包：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ncu -a</span><br></pre></td></tr></table></figure><p><code>npm</code>高级升级插件<code>npm-check</code>安装：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g npm-check</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm-check -u -g             <span class="comment"># 检查系统级npm安装的node第三方包</span></span><br></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm-check -u -g</span><br><span class="line">The global path you are searching is: /usr/<span class="built_in">local</span>/lib/node_modules</span><br><span class="line">? Choose <span class="built_in">which</span> packages to update. (Press &lt;space&gt; to select)</span><br><span class="line">  </span><br><span class="line"> Minor Update New backwards-compatible features.</span><br><span class="line">❯◯ appium  1.16.0  ❯  1.17.0  https://github.com/appium/appium<span class="comment">#readme</span></span><br><span class="line"> ◯ npm     6.10.1  ❯  6.14.4  https://docs.npmjs.com/</span><br><span class="line">  </span><br><span class="line"> Major Update Potentially breaking API changes. Use caution.</span><br><span class="line"> ◯ node  12.6.0  ❯  13.12.0  https://github.com/aredridel/node-bin-gen<span class="comment">#readme</span></span><br><span class="line">  </span><br><span class="line"> Space to select. Enter to start upgrading. Control-C to cancel.</span><br></pre></td></tr></table></figure><p>通过上下键移动光标，通过空格键选中需要升级的包，支持多选，按回车即可升级选中的包。</p><h3 id="next主题使用gitment评论"><a href="#next主题使用gitment评论" class="headerlink" title="next主题使用gitment评论"></a><code>next</code>主题使用<code>gitment</code>评论</h3><p>安装<code>gitment</code>模块：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save gitment</span><br></pre></td></tr></table></figure><p>去<code>Github</code>的<code>New OAuth Appication</code>为博客评论申请一个密钥：</p><p>得到<code>Client ID</code>和<code>Client Secret</code>。<br>在主题的<code>_config.xml</code>中配置<code>gitment</code>：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">gitment:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mint:</span> <span class="literal">true</span> <span class="comment"># RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">true</span> <span class="comment"># Show comments count in post meta area</span></span><br><span class="line">  <span class="attr">lazy:</span> <span class="literal">false</span> <span class="comment"># Comments lazy loading with a button</span></span><br><span class="line">  <span class="attr">cleanly:</span> <span class="literal">false</span> <span class="comment"># Hide 'Powered by ...' on footer, and more</span></span><br><span class="line">  <span class="attr">language:</span> <span class="comment"># Force language, or auto switch by theme</span></span><br><span class="line">  <span class="attr">github_user:</span> <span class="string">shadow000902</span> <span class="comment"># 必填，填入你GitHub的用户名</span></span><br><span class="line">  <span class="attr">github_repo:</span> <span class="string">shadow000902.github.io</span> <span class="comment"># 必填，填入你的任意一个GitHub仓库的仓库名，用于存放评论</span></span><br><span class="line">  <span class="attr">client_id:</span> <span class="string">&#123;刚才申请的ClientID&#125;</span> <span class="comment"># MUST HAVE, Github client id for the Gitment</span></span><br><span class="line">  <span class="attr">client_secret:</span> <span class="string">&#123;刚才申请的Client</span> <span class="string">Secret&#125;</span> <span class="comment"># EITHER this or proxy_gateway, Github access secret token for the Gitment</span></span><br><span class="line">  <span class="attr">proxy_gateway:</span> <span class="comment"># Address of api proxy, See: https://github.com/aimingoo/intersect</span></span><br><span class="line">  <span class="attr">redirect_protocol:</span> <span class="comment"># Protocol of redirect_uri with force_redirect_protocol when mint enabled</span></span><br></pre></td></tr></table></figure><h3 id="修改NexT的Picses主题中空白过多的布局"><a href="#修改NexT的Picses主题中空白过多的布局" class="headerlink" title="修改NexT的Picses主题中空白过多的布局"></a>修改<code>NexT</code>的<code>Picses</code>主题中空白过多的布局</h3><p>修改主题中的<code>source/css/_schemes/Picses/_layout.styl</code>文件，添加如下脚本内容</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 以下为新增代码！！</span><br><span class="line">header&#123; width: 90% !important; &#125;</span><br><span class="line">header.post-header &#123;</span><br><span class="line">  width: auto !important;</span><br><span class="line">&#125;</span><br><span class="line">.container .main-inner &#123; width: 90%; &#125;</span><br><span class="line">.content-wrap &#123; width: calc(100% - 260px); &#125;</span><br><span class="line"></span><br><span class="line">.header &#123;</span><br><span class="line">  +tablet() &#123;</span><br><span class="line">    width: auto !important;</span><br><span class="line">  &#125;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    width: auto !important;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.container .main-inner &#123;</span><br><span class="line">  +tablet() &#123;</span><br><span class="line">    width: auto !important;</span><br><span class="line">  &#125;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    width: auto !important;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content-wrap &#123;</span><br><span class="line">  +tablet() &#123;</span><br><span class="line">    width: 100% !important;</span><br><span class="line">  &#125;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    width: 100% !important;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的<code>width</code>还可以根据自己的喜好再做调整。</p>]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Adb连接夜神模拟器&amp;网易MuMu模拟器</title>
    <url>/2016/03/21/2016-03-21-ADB-connect-yeshen/</url>
    <content><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li><p>需要adb，电脑当然要有Android-sdk，且配置了~/Android-sdk/platform-tools/的环境变量，以便adb可以在任意位置使用</p></li><li><p>安装<a href="http://www.yeshen.com/" target="_blank" rel="noopener">夜神模拟器</a></p><a id="more"></a></li></ol><h3 id="实际步骤"><a href="#实际步骤" class="headerlink" title="实际步骤"></a>实际步骤</h3><p>其实很简单：</p><ol><li>打开夜神模拟器</li><li>打开CMD命令窗口，输入<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb connect 127.0.0.1:62001</span><br></pre></td></tr></table></figure>结果如下图就说明连接成功了<img src="/2016/03/21/2016-03-21-ADB-connect-yeshen/adb-connected.png" title="adb-connected"></li></ol><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>网上很多说，CMD到夜神模拟器的安装位置~/Nox/bin/下，输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">box_adb.exe connect 127.0.0.1:62001</span><br></pre></td></tr></table></figure><p>这个命令使用的是夜神模拟器自带的nox_adb.exe来连接的，这样的话就导致Android-sdk的adb，也就是你自己系统的adb还是没法和夜神模拟器连接，导致很多系统的adb命令依旧没法使用<br>所以还是建议使用:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb connect 127.0.0.1:62001</span><br></pre></td></tr></table></figure><p>来连接。</p><h3 id="adb连接网易MuMu模拟器"><a href="#adb连接网易MuMu模拟器" class="headerlink" title="adb连接网易MuMu模拟器"></a>adb连接网易MuMu模拟器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Mac下</span></span><br><span class="line">adb connect 127.0.0.1:5555</span><br><span class="line"><span class="comment"># Windows下</span></span><br><span class="line">adb connect 127.0.0.1:7555</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>adb</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo学习</title>
    <url>/2016/03/12/2016-03-12-Learning-Hexo/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post-新建文章"><a href="#Create-a-new-post-新建文章" class="headerlink" title="Create a new post   新建文章"></a>Create a new post 新建文章</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Create-a-new-photo-post-新建照片文章"><a href="#Create-a-new-photo-post-新建照片文章" class="headerlink" title="Create a new photo post   新建照片文章"></a>Create a new photo post 新建照片文章</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new photo <span class="string">"photoPostName"</span></span><br></pre></td></tr></table></figure><h3 id="文章摘要"><a href="#文章摘要" class="headerlink" title="文章摘要"></a>文章摘要</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">以上是摘要</span><br><span class="line">  &lt;!--more--&gt;</span><br><span class="line">以下是余下全文</span><br></pre></td></tr></table></figure><h3 id="插入本地图片"><a href="#插入本地图片" class="headerlink" title="插入本地图片"></a>插入本地图片</h3><img src="/2016/03/12/2016-03-12-Learning-Hexo/tree.jpg" title="This is an example image"><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Clean-static-files"><a href="#Clean-static-files" class="headerlink" title="Clean static files"></a>Clean static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>appium运行sample-code示例</title>
    <url>/2016/03/23/2016-03-23-appium-run-sample-code/</url>
    <content><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol start="0"><li><p>android-sdk，jdk，python啥的就不说了，自己解决</p></li><li><p>安装node.js</p></li><li><p>安装appium</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g appium   <span class="comment"># npm --registry http://registry.cnpmjs.org install -g appium (推荐这种,npm的国内镜像)</span></span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>检查appium运行环境是否可用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\shadow&gt;appium</span><br><span class="line">[Appium] Welcome to Appium v1.5.0</span><br><span class="line">[Appium] Appium REST http interface listener started on 0.0.0.0:4723</span><br></pre></td></tr></table></figure></li><li><p>安装selenium (前提已安装好python)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install selenium    <span class="comment"># pip install selenium -i http://pypi.douban.com/simple （使用国内地址）</span></span><br></pre></td></tr></table></figure></li><li><p>安装appium-python-client</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install Appium-Python-Client</span><br></pre></td></tr></table></figure><p>至此，需要的软件和环境都已经安装完毕，下面就可以开始去运行sample-code的脚本了</p></li></ol><h3 id="运行Appium"><a href="#运行Appium" class="headerlink" title="运行Appium"></a>运行Appium</h3><ol><li><p>默认方式运行appium</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\shadow&gt;appium</span><br><span class="line">[Appium] Welcome to Appium v1.5.0</span><br><span class="line">[Appium] Appium REST http interface listener started on 0.0.0.0:4723</span><br></pre></td></tr></table></figure><p>默认运行在本地ip的4723端口，每次运行用例都会重置app</p></li><li><p>指定方式运行appium</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\shadow&gt;appium -a 127.0.0.1 -p 4723 -U 8XV5T15A20009865 --no-reset</span><br><span class="line">[Appium] Welcome to Appium v1.5.0</span><br><span class="line">[Appium] Non-default server args:</span><br><span class="line">[Appium]   address: <span class="string">'127.0.0.1'</span></span><br><span class="line">[Appium]   udid: <span class="string">'8XV5T15A20009865'</span></span><br><span class="line">[Appium]   noReset: <span class="literal">true</span></span><br><span class="line">[Appium] Deprecated server args:</span><br><span class="line">[Appium]   -U,--udid =&gt; --default-capabilities <span class="string">'&#123;"udid":"8XV5T15A20009865"&#125;'</span></span><br><span class="line">[Appium]   --no-reset =&gt; --default-capabilities <span class="string">'&#123;"noReset":true&#125;'</span></span><br><span class="line">[Appium] Default capabilities, <span class="built_in">which</span> will be added to each request unless overridden by desired capabilities:</span><br><span class="line">[Appium]   udid: <span class="string">'8XV5T15A20009865'</span></span><br><span class="line">[Appium]   noReset: <span class="literal">true</span></span><br><span class="line">[Appium] Appium REST http interface listener started on 127.0.0.1:4723</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-a 127.0.0.1                                                    <span class="comment"># 指定服务器</span></span><br><span class="line">-p 4723                                                         <span class="comment"># 指定端口</span></span><br><span class="line">-U 8XV5T15A20009865                                             <span class="comment"># 指定设备，U指设备的udid</span></span><br><span class="line">--no-reset                                                      <span class="comment"># 直接运行app，而不重置app</span></span><br></pre></td></tr></table></figure><h3 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h3><h4 id="编辑sample-code中的python脚本，以适应自己的机器运行"><a href="#编辑sample-code中的python脚本，以适应自己的机器运行" class="headerlink" title="编辑sample-code中的python脚本，以适应自己的机器运行"></a>编辑sample-code中的python脚本，以适应自己的机器运行</h4><p>脚本存放位置：<br>在安装appium的时候，同时就下载好了示例脚本和需要的apk文件，存放在C:\Users\shadow\AppData\Roaming\npm\node_modules\appium\sample-code目录中</p><p>脚本如下(截取了配置部分)：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">PATH = <span class="keyword">lambda</span> p: os.path.abspath(</span><br><span class="line">    os.path.join(os.path.dirname(__file__), p)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComplexAndroidTests</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line">        desired_caps = &#123;&#125;</span><br><span class="line">        desired_caps[<span class="string">'platformName'</span>] = <span class="string">'Android'</span></span><br><span class="line">        desired_caps[<span class="string">'platformVersion'</span>] = <span class="string">'4.4.2'</span>   <span class="comment"># 设备的安卓版本</span></span><br><span class="line">        desired_caps[<span class="string">'deviceName'</span>] = <span class="string">'Nexus_6P'</span>     <span class="comment"># 设备的型号，可以在设置-关于里查看</span></span><br><span class="line">        desired_caps[<span class="string">'app'</span>] = PATH(                 <span class="comment"># apk存放的相对路径，也可使用绝对路径</span></span><br><span class="line">            <span class="string">'../../../sample-code/apps/ApiDemos/bin/ApiDemos-debug.apk'</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self.driver = webdriver.Remote(<span class="string">'http://localhost:4723/wd/hub'</span>, desired_caps)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.driver.quit()</span><br></pre></td></tr></table></figure><h4 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h4><p>2.1 打开appium</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\shadow&gt;appium</span><br><span class="line">[Appium] Welcome to Appium v1.5.0</span><br><span class="line">[Appium] Appium REST http interface listener started on 0.0.0.0:4723</span><br></pre></td></tr></table></figure><p>2.2 运行python脚本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">py.test andrid_complex.py</span><br></pre></td></tr></table></figure><p>如果成功的话就能在打开appium的cmd窗口中看到有log不断的打印出来，结束后，在运行python脚本的cmd窗口就能看到用例的运行结果</p><p>我是在git bash下运行的，结果如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shadow@shadow MINGW64 ~/AppData/Roaming/npm/node_modules/appium/sample-code/examples/python</span><br><span class="line">$ py.test android_complex.py</span><br><span class="line">============================= <span class="built_in">test</span> session starts =============================</span><br><span class="line">platform win32 -- Python 3.5.1, pytest-2.8.1, py-1.4.30, pluggy-0.3.1</span><br><span class="line">rootdir: C:\Users\shadow\AppData\Roaming\npm\node_modules\appium\sample-code\examples\python, inifile:</span><br><span class="line">collected 3 items</span><br><span class="line"></span><br><span class="line">android_complex.py F..</span><br><span class="line"></span><br><span class="line">================================== FAILURES ===================================</span><br><span class="line">___________________ ComplexAndroidTests.test_find_elements ____________________</span><br><span class="line"></span><br><span class="line">self = &lt;android_complex.ComplexAndroidTests testMethod=test_find_elements&gt;</span><br><span class="line"></span><br><span class="line">.........</span><br><span class="line"><span class="comment"># 失败项的log</span></span><br><span class="line"></span><br><span class="line">C:\Anaconda3\lib\site-packages\selenium\webdriver\remote\errorhandler.py:194: WebDriverException</span><br><span class="line">==================== 1 failed, 2 passed <span class="keyword">in</span> 214.41 seconds =====================</span><br></pre></td></tr></table></figure><p>appium下的结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shadow@shadow MINGW64 ~/Desktop</span><br><span class="line">$ appium</span><br><span class="line">[Appium] Welcome to Appium v1.5.0</span><br><span class="line">[Appium] Appium REST http interface listener started on 0.0.0.0:4723</span><br><span class="line">[HTTP] --&gt; POST /wd/hub/session</span><br><span class="line">[MJSONWP] Calling AppiumDriver.createSession() with args: [&#123;<span class="string">"platformName"</span>:<span class="string">"Android"</span>,<span class="string">"deviceName"</span>:<span class="string">"Nexus_6P"</span>,<span class="string">"platformVersion"</span>:<span class="string">"4.4.2"</span>,<span class="string">"app"</span>:<span class="string">"C:\\Users\\shadow\\AppData\\Roaming\\npm\\node_modules\\appium\...</span></span><br><span class="line"><span class="string">[Appium] Creating new AndroidDriver session</span></span><br><span class="line"><span class="string">[Appium] Capabilities:</span></span><br><span class="line"><span class="string">[Appium]   platformName: 'Android'</span></span><br><span class="line"><span class="string">[Appium]   deviceName: 'Nexus_6P'</span></span><br><span class="line"><span class="string">[Appium]   platformVersion: '4.4.2'</span></span><br><span class="line"><span class="string">[Appium]   app: 'C:\\Users\\shadow\\AppData\\Roaming\\npm\\node_modules\\appium\\sample-code\\apps\\ApiDemos\\bin\\ApiDemos-debug.apk'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">......</span></span><br><span class="line"><span class="string"># appium执行的log</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[debug] [MJSONWP] Received response: null</span></span><br><span class="line"><span class="string">[debug] [MJSONWP] But deleting session, so not returning</span></span><br><span class="line"><span class="string">[MJSONWP] Responding to client with driver.deleteSession() result: null</span></span><br><span class="line"><span class="string">[HTTP] &lt;-- DELETE /wd/hub/session/f58223b0-4ab0-47b2-b092-e165da16d5f7 200 1943 ms - 76</span></span><br></pre></td></tr></table></figure><p>如此，一个用例就成功的运行了</p><p>接下来的任务就是如何有效高效的编写高质量的自动化测试用例了~</p>]]></content>
      <categories>
        <category>Appium</category>
      </categories>
      <tags>
        <tag>appium</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-Studio使用</title>
    <url>/2016/03/13/2016-03-13-Useing-Android-Studio/</url>
    <content><![CDATA[<h3 id="离线升级Android-Studio"><a href="#离线升级Android-Studio" class="headerlink" title="离线升级Android-Studio"></a>离线升级Android-Studio</h3><h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -classpath 离线安装包位置完整路径 com.intellij.updater.Runner install android-studio安装位置</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\shadow&gt;java -classpath C:\QMDownload\AI-141.2456560-143.2609919-patch-win.jar  com.intellij.updater.Runner install C:\android-studio</span><br></pre></td></tr></table></figure><h3 id="Gradle-sync-failed："><a href="#Gradle-sync-failed：" class="headerlink" title="Gradle sync failed："></a>Gradle sync failed：</h3><p>Unable to load class ‘org.codehaus.groovy.runtime.typehandling.ShortTypeHandling’.<br>Consult IDE log for more details (Help | Show Log)</p><h4 id="修改build-gradle"><a href="#修改build-gradle" class="headerlink" title="修改build.gradle"></a>修改build.gradle</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dependencies &#123;classpath <span class="string">'com.android.tools.build:gradle:1.2.+'</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="修改gradle-wrapper-properties"><a href="#修改gradle-wrapper-properties" class="headerlink" title="修改gradle-wrapper.properties"></a>修改gradle-wrapper.properties</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">distributionUrl=https://services.gradle.org/distributions/gradle-2.3-all.zip</span><br></pre></td></tr></table></figure><h3 id="android-studio项目添加robotium测试框架支持"><a href="#android-studio项目添加robotium测试框架支持" class="headerlink" title="android studio项目添加robotium测试框架支持"></a>android studio项目添加robotium测试框架支持</h3><h4 id="robotium-solo-5-4-1-jar文件复制到libs文件夹下"><a href="#robotium-solo-5-4-1-jar文件复制到libs文件夹下" class="headerlink" title="robotium-solo-5.4.1.jar文件复制到libs文件夹下"></a>robotium-solo-5.4.1.jar文件复制到libs文件夹下</h4><h4 id="在build-gradle文件中添加："><a href="#在build-gradle文件中添加：" class="headerlink" title="在build.gradle文件中添加："></a>在build.gradle文件中添加：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">androidTestCompile fileTree(dir: <span class="string">'libs'</span>, include: <span class="string">'robotium-solo-5.4.1.jar'</span>)</span><br></pre></td></tr></table></figure><h4 id="右键robotium-solo-5-4-1-jar，“add-to-library”"><a href="#右键robotium-solo-5-4-1-jar，“add-to-library”" class="headerlink" title="右键robotium-solo-5.4.1.jar，“add to library”"></a>右键robotium-solo-5.4.1.jar，<strong>“add to library”</strong></h4>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android-studio</tag>
        <tag>robotium</tag>
      </tags>
  </entry>
  <entry>
    <title>MarkDown语法学习</title>
    <url>/2016/03/12/2016-03-12-Learning-MarkDown/</url>
    <content><![CDATA[<h3 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h3><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><a id="more"></a><h3 id="二、有序列表"><a href="#二、有序列表" class="headerlink" title="二、有序列表"></a>二、有序列表</h3><ol><li>文本1</li><li>文本2</li><li>文本3</li></ol><h3 id="三、无序列表"><a href="#三、无序列表" class="headerlink" title="三、无序列表"></a>三、无序列表</h3><ul><li>文本1</li><li>文本2</li><li>文本3</li></ul><h3 id="四、链接和图片"><a href="#四、链接和图片" class="headerlink" title="四、链接和图片"></a>四、链接和图片</h3><p><a href="www.jianshu.com">简书</a><br><img src="http://o6lw1c1bf.bkt.clouddn.com/tree.jpg" alt="This is an example image"></p><h3 id="五、引用"><a href="#五、引用" class="headerlink" title="五、引用"></a>五、引用</h3><blockquote><p>一盏灯， 一片昏黄； 一简书， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p></blockquote><h3 id="六、诗的引用"><a href="#六、诗的引用" class="headerlink" title="六、诗的引用"></a>六、诗的引用</h3><blockquote><p>朝辞白帝彩云间<br>千里江陵一日还<br>两岸猿声啼不住<br>轻舟已过万重山</p></blockquote><h3 id="七、斜体和粗体"><a href="#七、斜体和粗体" class="headerlink" title="七、斜体和粗体"></a>七、斜体和粗体</h3><p><em>一盏灯</em>， 一片昏黄；<strong>一简书</strong>， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p><h3 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| Tables        | Are           | Cool  |</span><br><span class="line">| ------------- |:-------------:| -----:|</span><br><span class="line">| col 3 is      | right-aligned | $1600 |</span><br><span class="line">| col 2 is      | centered      | $12   |</span><br><span class="line">| zebra stripes | are neat      | $1    |</span><br></pre></td></tr></table></figure><table><thead><tr><th>Tables</th><th align="center">Are</th><th align="right">Cool</th></tr></thead><tbody><tr><td>col 3 is</td><td align="center">right-aligned</td><td align="right">$1600</td></tr><tr><td>col 2 is</td><td align="center">centered</td><td align="right">$12</td></tr><tr><td>zebra stripes</td><td align="center">are neat</td><td align="right">$1</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dog | bird | cat</span><br><span class="line">----|------|----</span><br><span class="line">foo | foo  | foo</span><br><span class="line">bar | bar  | bar</span><br><span class="line">baz | baz  | baz</span><br></pre></td></tr></table></figure><table><thead><tr><th>dog</th><th>bird</th><th>cat</th></tr></thead><tbody><tr><td>foo</td><td>foo</td><td>foo</td></tr><tr><td>bar</td><td>bar</td><td>bar</td></tr><tr><td>baz</td><td>baz</td><td>baz</td></tr></tbody></table><p><strong>Excel转markDown</strong><br><a href="http://fanfeilong.github.io/" target="_blank" rel="noopener">下载地址</a><br><code>MAC</code>下下载<a href="https://raw.githubusercontent.com/fanfeilong/exceltk/master/pub/exceltk.0.1.3.pkg" target="_blank" rel="noopener">exceltk.0.1.3.pkg</a>安装<br>执行命令方式：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">exceltk -t md -xls example.xls</span><br><span class="line">exceltk -t md -xls example.xls -sheet sheetname</span><br><span class="line">exceltk -t md -xls example.xlsx</span><br><span class="line">exceltk -t md -xls example.xlsx -sheet sheetname</span><br><span class="line">exceltk -t md -p 2 -xls example.xls, <span class="built_in">where</span> -p 2 setting the decimal precision to 2</span><br><span class="line">exceltk -t md -bhead -xls example.xls, <span class="built_in">which</span> will use the first row to replace table header, and keep the head empty, so that the table will auto response <span class="keyword">in</span> small screen device, this is just a simply solution.</span><br><span class="line">exceltk -t cm, Now you can copy sheet from excel, <span class="keyword">then</span> paster to any editor, <span class="built_in">which</span> will be Markdown table.</span><br><span class="line">exceltk -t md -a r -xls example.xlsx, <span class="built_in">where</span> the -a option can be followd by a aligin character</span><br></pre></td></tr></table></figure><pre><code>-a l: aligin left
-a r: aligin right
-a c: aligin center</code></pre><p><strong>Convert Excel to Json</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">exceltk -t json -xls example.xls</span><br></pre></td></tr></table></figure><p><strong>Convert Excel to TeX</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">exceltk -t tex -xls example.xls</span><br></pre></td></tr></table></figure><pre><code>using -st n option to split table into multitable
using -sn option to adjust number, for example, 1234656 will be split into 1 2 3 4 5 6, it the table width is too large, this is useful</code></pre><h3 id="九、显示链接中带括号的图片"><a href="#九、显示链接中带括号的图片" class="headerlink" title="九、显示链接中带括号的图片"></a>九、显示链接中带括号的图片</h3><p>![][1]<br>[1]: <a href="http://latex.codecogs.com/gif.latex?\prod%20\(n_{i}\)+1" target="_blank" rel="noopener">http://latex.codecogs.com/gif.latex?\prod%20\(n_{i}\)+1</a></p><h3 id="十、分割线"><a href="#十、分割线" class="headerlink" title="十、分割线"></a>十、分割线</h3><hr><hr><hr><h3 id="十一、代码区块"><a href="#十一、代码区块" class="headerlink" title="十一、代码区块"></a>十一、代码区块</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">print (<span class="string">"I like jianshu! "</span>)</span><br></pre></td></tr></table></figure><h5 id="正常代码"><a href="#正常代码" class="headerlink" title="正常代码"></a>正常代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 是否有手势密码</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isHasGesture</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (HiApplcation.getInstance().getUser() == <span class="keyword">null</span></span><br><span class="line">			|| StringUtil.isEmpty(HiApplcation.getInstance().getUser()</span><br><span class="line">					.getId()))</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	String gesture = SharedPreferencesUtil.getInstance(<span class="keyword">this</span>)</span><br><span class="line">			.loadStringSharedPreference(</span><br><span class="line">					HiConfig.GESTURE_PWD</span><br><span class="line">							+ HiApplcation.getInstance().getUser().getId());</span><br><span class="line">	<span class="keyword">if</span> (StringUtil.isNotEmpty(gesture)) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Jmeter和shell的接口自动化及性能</title>
    <url>/2016/03/14/2016-03-14-autotest-based-on-Jmeter-and-Shell/</url>
    <content><![CDATA[<h3 id="主要目标"><a href="#主要目标" class="headerlink" title="主要目标"></a>主要目标</h3><p>由于接口数量较多，测试人员在功能测试中比较难覆盖到所有的接口，该教程主要用于对服务端所有接口做遍历测试，修改线程数及单用例执行时间后还可用作接口性能测试。</p><h3 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h3><p>自动化的场景模拟真实手工测试，操作步骤和手工测试一样。</p><a id="more"></a> <img src="/2016/03/14/2016-03-14-autotest-based-on-Jmeter-and-Shell/%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%9B%BE.png" title="测试流程图"><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li>系统环境：CentOS</li><li>测试工具：<a href="http://jmeter.apache.org/download_jmeter.cgi" target="_blank" rel="noopener">apache-jmeter-2.13</a></li><li>运行环境：<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">JDK</a></li><li>Python环境</li><li>服务器监控：<a href="http://nmon.sourceforge.net/pmwiki.php?n=Site.Download" target="_blank" rel="noopener">nmon</a></li></ol><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><h4 id="自动化脚本文件管理"><a href="#自动化脚本文件管理" class="headerlink" title="自动化脚本文件管理"></a>自动化脚本文件管理</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@root ~]<span class="comment"># cd ..</span></span><br><span class="line">[root@root /]<span class="comment"># cd data</span></span><br><span class="line">[root@root data]<span class="comment"># cd loadtest/</span></span><br><span class="line">[root@root loadtest]<span class="comment"># ll -l</span></span><br><span class="line">total 68</span><br><span class="line">-rw-r--r-- 1 root root  3327 Mar  7 17:54 genHTML.sh            <span class="comment"># 生成html报告</span></span><br><span class="line">drwxr-xr-x 2 root root  4096 Mar 14 20:05 <span class="built_in">log</span>                   <span class="comment"># 日志存放目录</span></span><br><span class="line">-rw-r--r-- 1 root root  1382 Mar  8 14:52 MainThreadScript.sh   <span class="comment"># 主流程脚本</span></span><br><span class="line">-rw-r--r-- 1 root root   871 Mar  7 17:10 monitor.sh            <span class="comment"># 服务器监控脚本</span></span><br><span class="line">drwxr-xr-x 2 root root  4096 Mar  5 21:13 report</span><br><span class="line">-rw-r--r-- 1 root root  1174 Mar  5 10:55 sendmail.py           <span class="comment"># 发送测试报告邮件脚本</span></span><br><span class="line">-rw-r--r-- 1 root root    42 Mar  5 11:08 serverlist            <span class="comment"># 接口所在服务器列表</span></span><br><span class="line">-rw-r--r-- 1 root root   787 Mar  5 10:50 style.css             <span class="comment"># html样式</span></span><br><span class="line">-rw-r--r-- 1 root root  1156 Mar 14 20:05 summary.txt           <span class="comment"># 测试结果数据输出文件</span></span><br><span class="line">drwxr-xr-x 2 root root  4096 Mar 14 18:05 testcase              <span class="comment"># 测试用例存放文件夹</span></span><br></pre></td></tr></table></figure><h4 id="主流程脚本-MainThreadScript-sh"><a href="#主流程脚本-MainThreadScript-sh" class="headerlink" title="主流程脚本 MainThreadScript.sh"></a>主流程脚本 MainThreadScript.sh</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line">Jmeter_Home=<span class="string">'/usr/local/apache-jmeter-2.13'</span></span><br><span class="line">TestReport=<span class="string">'/data/loadtest/report'</span></span><br><span class="line">LogDIR=<span class="string">'/data/loadtest/log'</span></span><br><span class="line">Date=`date +<span class="string">"%F"</span>`</span><br><span class="line"><span class="built_in">cd</span> /data/loadtest/</span><br><span class="line">&gt;summary.txt</span><br><span class="line"><span class="comment">#清理上次执行结果</span></span><br><span class="line">run_test()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">#获取测试用例</span></span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> `find <span class="string">"./testcase"</span> -name <span class="string">"*.jmx"</span> | awk -F <span class="string">'.'</span> <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$i</span> <span class="string">"用例执行中。。。"</span></span><br><span class="line">  casename=`<span class="built_in">echo</span> <span class="string">"<span class="variable">$i</span>"</span> | awk -F <span class="string">'/'</span> <span class="string">'&#123;print $3&#125;'</span>`&gt;<span class="built_in">log</span>/<span class="variable">$&#123;casename&#125;</span>.txt</span><br><span class="line">  <span class="built_in">echo</span> -n <span class="string">"<span class="variable">$i</span> "</span>&gt;&gt;summary.txt</span><br><span class="line">  <span class="comment">#发起监控</span></span><br><span class="line">  ./monitor.sh &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">  <span class="comment">#开始执行测试</span></span><br><span class="line">  <span class="variable">$Jmeter_Home</span>/bin/jmeter -n -t /data/loadtest<span class="variable">$&#123;i&#125;</span>.jmx&gt;&gt;<span class="built_in">log</span>/<span class="variable">$&#123;casename&#125;</span>.txt</span><br><span class="line">  sleep 31</span><br><span class="line">  <span class="comment">#如果执行31s还未结束，强制终止执行</span></span><br><span class="line">  ps -ef | grep java |grep -v grep | awk <span class="string">'&#123;print $2&#125;'</span> |xargs <span class="built_in">kill</span> -9 2&gt;/dev/null</span><br><span class="line">  sleep 3</span><br><span class="line">  <span class="comment">#提取结果</span></span><br><span class="line">  grep <span class="string">'summary ='</span> <span class="built_in">log</span>/<span class="variable">$&#123;casename&#125;</span>.txt| tail -1 |awk -F <span class="string">'[\t / (]+'</span> <span class="string">'&#123;if($7&gt;5 &amp;&amp; $17&lt;1.00)&#123;printf("%s %d %d %d %.2f% pass ",$7,$10,$3,$16,100-$17)&#125;else&#123;printf("%s %d %d %d %.2f%% fail ",$7,$10,$3,$16,100-$17)&#125;&#125;'</span>&gt;&gt;summary.txt</span><br><span class="line">  <span class="comment">#cat monitor.txt &gt;&gt;summary.txt</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">''</span> &gt;&gt; summary.txt</span><br><span class="line"><span class="comment">#echo '' &gt;&gt; summary.txt</span></span><br><span class="line">  <span class="comment">#获取关键日志</span></span><br><span class="line">  <span class="comment">#echo "$&#123;LogDIR&#125;$&#123;i&#125;.log"</span></span><br><span class="line"><span class="comment">#echo "start ssh catalina.out &gt; log.#"</span></span><br><span class="line">  <span class="comment">#ssh 120.26.136.232 'tail -n 300 /mnt2/tomcat_content_me/logs/catalina.out'&gt;"$&#123;LogDIR&#125;/$&#123;casename&#125;$&#123;Date&#125;.log"</span></span><br><span class="line"> <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line">run_test</span><br><span class="line">sleep 3</span><br><span class="line"><span class="comment">#生成html报告</span></span><br><span class="line">sh genHTML.sh</span><br><span class="line">sleep 1</span><br><span class="line"><span class="comment">#发送邮件</span></span><br><span class="line">python sendmail.py</span><br></pre></td></tr></table></figure><h4 id="服务器监控"><a href="#服务器监控" class="headerlink" title="服务器监控"></a>服务器监控</h4><p>服务器日志收集方面，使用nmon监控工具，因为它可以后台收集结果保存到文件。由于每个用例只执行30秒，所以只需要监控30秒，每5秒监控一次，对应命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmon -f -t -s5 -c60 -F /data/test.nmon</span><br></pre></td></tr></table></figure><p>每个测试用例执行完后再读取这个结果文件，获取有用的信息。<br>当前只统计了磁盘IO和CPU的占用率信息，原始文件保存在本地目录，如果需要，可以手动改查找到。</p><h4 id="服务器监控脚本-monitor-sh"><a href="#服务器监控脚本-monitor-sh" class="headerlink" title="服务器监控脚本 monitor.sh"></a>服务器监控脚本 monitor.sh</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#读取监控服务器列表</span></span><br><span class="line">SERVERLIST=`cat serverlist`</span><br><span class="line">DATE=`date +<span class="string">'%F'</span>`</span><br><span class="line">mkdir -p /data/loadtest/monitor/<span class="variable">$DATE</span></span><br><span class="line">TIME=`date +<span class="string">'%T'</span>`</span><br><span class="line"><span class="comment">#发起监控</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$SERVERLIST</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  ssh <span class="variable">$i</span> <span class="string">'nmon -f -t -s5 -c60 -F /data/test.nmon &gt;/dev/null 2&gt;&amp;1 &amp;'</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#监控30秒</span></span><br><span class="line">sleep 30</span><br><span class="line">&gt;monitor.txt</span><br><span class="line"><span class="comment">#收集监控结果，保存到monitor.txt</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$SERVERLIST</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"> scp <span class="variable">$i</span>:/data/test.nmon /data/loadtest/monitor/<span class="variable">$DATE</span>/<span class="variable">$&#123;i&#125;</span>_<span class="variable">$&#123;TIME&#125;</span>.nmon</span><br><span class="line"> io=`cat /data/loadtest/monitor/<span class="variable">$DATE</span>/<span class="variable">$&#123;i&#125;</span>_<span class="variable">$&#123;TIME&#125;</span>.nmon|grep <span class="string">"DISKBUSY,T"</span> | awk -F <span class="string">','</span> <span class="string">'&#123;sum+=$3&#125; END &#123;printf("%.2f%",sum/NR)&#125;'</span>`</span><br><span class="line"> cpu=`cat /data/loadtest/monitor/<span class="variable">$DATE</span>/<span class="variable">$&#123;i&#125;</span>_<span class="variable">$&#123;TIME&#125;</span>.nmon|grep <span class="string">"CPU_ALL,T"</span> | awk -F <span class="string">','</span> <span class="string">'&#123;sum+=$6&#125; END &#123;printf("%.2f%",100-sum/NR)&#125;'</span>`</span><br><span class="line"> <span class="comment">#net=`cat /data/loadtest/monitor/$DATE/$&#123;i&#125;_$&#123;TIME&#125;.nmon|grep "NET,T"|awk -F ',' '&#123;sum_r+=$4&#125;&#123;sum_w+=$6&#125; END &#123;print sum_r/NR,sum_w/NR&#125;'`</span></span><br><span class="line"> <span class="built_in">echo</span> -n <span class="string">"<span class="variable">$&#123;cpu&#125;</span> <span class="variable">$&#123;io&#125;</span> "</span>&gt;&gt;monitor.txt</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>将用例执行结果和监控结果都汇总到summary.txt里，方面后续生成html格式的报告</p><h4 id="生成html报告-genHTML-sh"><a href="#生成html报告-genHTML-sh" class="headerlink" title="生成html报告 genHTML.sh"></a>生成html报告 genHTML.sh</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">&gt;index.html</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;html&gt;&lt;head&gt;&lt;META http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/&gt;&lt;title&gt;用户端自动化性能测试报告&lt;/title&gt;"</span>&gt;&gt;index.html</span><br><span class="line"><span class="built_in">echo</span> `cat style.css`&gt;&gt;index.html</span><br><span class="line">(</span><br><span class="line">cat &lt;&lt;EOF</span><br><span class="line">&lt;script language=<span class="string">"JavaScript"</span>&gt;</span><br><span class="line">               <span class="keyword">function</span> show_detail(detail)&#123;</span><br><span class="line">                           <span class="keyword">if</span>(detail.style.display==<span class="string">"none"</span>)&#123;</span><br><span class="line">                           detail.style.display=<span class="string">""</span>;</span><br><span class="line">                           &#125;</span><br><span class="line">                           <span class="keyword">else</span>&#123;</span><br><span class="line">                           detail.style.display=<span class="string">"none"</span>;</span><br><span class="line">                           &#125;</span><br><span class="line">                           &#125;</span><br><span class="line">                           &lt;/script&gt;</span><br><span class="line">EOF</span><br><span class="line">)&gt;&gt;index.html</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;/head&gt;&lt;body&gt;&lt;h1&gt;用户端自动化性能测试报告&lt;/h1&gt;&lt;hr size="</span>1<span class="string">"&gt;"</span>&gt;&gt;index.html</span><br><span class="line">sum=`cat summary.txt | wc -l`</span><br><span class="line">sucess=`cat summary.txt|grep pass |grep -v grep|wc -l`</span><br><span class="line">fail=`expr <span class="variable">$sum</span> - <span class="variable">$sucess</span>`</span><br><span class="line">rate=`<span class="built_in">echo</span> <span class="string">"<span class="variable">$sucess</span> <span class="variable">$sum</span>"</span>|awk <span class="string">'&#123;printf("%.2f%%",$1/$2*100)&#125;'</span>`</span><br><span class="line">(</span><br><span class="line">cat &lt;&lt;EOF</span><br><span class="line">&lt;table&gt;&lt;tr&gt;&lt;td&gt;</span><br><span class="line">&lt;h2&gt;结果汇总&lt;/h2&gt;</span><br><span class="line">&lt;table width=<span class="string">"60%"</span> cellspacing=<span class="string">"2"</span> cellpadding=<span class="string">"5"</span> border=<span class="string">"0"</span> class=<span class="string">"details"</span> align=<span class="string">"left"</span>&gt;</span><br><span class="line">&lt;tr&gt;&lt;th&gt;总接口数&lt;/th&gt;&lt;th&gt;成功接口数&lt;/th&gt;&lt;th&gt;失败接口数&lt;/th&gt;&lt;th&gt;测试通过率&lt;/th&gt;&lt;/tr&gt;</span><br><span class="line">&lt;tr align=<span class="string">"center"</span>&gt;&lt;td&gt;<span class="variable">$sum</span>&lt;/td&gt;&lt;td&gt;<span class="variable">$sucess</span>&lt;/td&gt;&lt;td&gt;<span class="variable">$fail</span>&lt;/td&gt;&lt;td&gt;<span class="variable">$rate</span>&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">&lt;/tr&gt;&lt;/table&gt;</span><br><span class="line">&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">EOF</span><br><span class="line">)&gt;&gt;index.html</span><br><span class="line">(</span><br><span class="line">cat &lt;&lt;EOF</span><br><span class="line">&lt;tr&gt;&lt;td&gt;</span><br><span class="line">&lt;h2&gt;概要结果&lt;/h2&gt;</span><br><span class="line">&lt;table width=<span class="string">"95%"</span> cellspacing=<span class="string">"2"</span> cellpadding=<span class="string">"5"</span> border=<span class="string">"0"</span> class=<span class="string">"details"</span> align=<span class="string">"left"</span>&gt;</span><br><span class="line">&lt;tr valign=<span class="string">"top"</span>&gt;</span><br><span class="line">&lt;th&gt;测试接口&lt;/th&gt;&lt;th&gt;每秒请求数(tps)&lt;/th&gt;&lt;th&gt;平均响应时间(ms)&lt;/th&gt;&lt;th&gt;总事务数&lt;/th&gt;&lt;th&gt;失败事务数&lt;/th&gt;&lt;th&gt;事务成功率&lt;/th&gt;&lt;th&gt;测试结果&lt;/th&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr valign=<span class="string">"top"</span> class=<span class="string">""</span>&gt;</span><br><span class="line">EOF</span><br><span class="line">)&gt;&gt;index.html</span><br><span class="line">cat summary.txt |<span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$line</span> | awk <span class="string">'&#123;if($7=="pass")&#123;print "&lt;tr&gt;&lt;td&gt;"$1"&lt;/td&gt;&lt;td&gt;"$2"&lt;/td&gt;&lt;td&gt;"$3"&lt;/td&gt;&lt;td&gt;"$4"&lt;/td&gt;&lt;td&gt;"$5"&lt;/td&gt;&lt;td&gt;"$6"&lt;/td&gt;&lt;td class=\"Pass\"&gt;"$7"&lt;/td&gt;&lt;/tr&gt;"&#125;else&#123;print "&lt;tr&gt;&lt;td&gt;"$1"&lt;/td&gt;&lt;td&gt;"$2"&lt;/td&gt;&lt;td&gt;"$3"&lt;/td&gt;&lt;td&gt;"$4"&lt;/td&gt;&lt;td&gt;"$5"&lt;/td&gt;&lt;td&gt;"$6"&lt;/td&gt;&lt;td class=\"Failure\"&gt;"$7"&lt;/td&gt;&lt;/tr&gt;"&#125;&#125;'</span>&gt;&gt;index.html</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;"</span>&gt;&gt;index.html</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;font color="</span>red<span class="string">"&gt;&lt;b&gt;测试结果pass标准：tps&gt;10000且事务成功率&gt;90%&lt;/b&gt;&lt;/font&gt;&lt;td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;h2&gt;&lt;a href=\"javascript:show_detail(detail)\"&gt;详细结果查看附件&lt;/a&gt;&lt;/h2&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;"</span>&gt;&gt;index.html</span><br><span class="line"><span class="comment">#echo "&lt;div class=\"page_details_expanded\" id=\"detail\" style=\"display:none;\" width=\"95%\"&gt;"&gt;&gt;index.html</span></span><br><span class="line">(</span><br><span class="line">cat &lt;&lt;EOF</span><br><span class="line">&lt;table width=<span class="string">"95%"</span> cellspacing=<span class="string">"2"</span> cellpadding=<span class="string">"5"</span> border=<span class="string">"0"</span> class=<span class="string">"details"</span> align=<span class="string">"left"</span> id=<span class="string">"detail"</span> style=<span class="string">"display:none"</span>&gt;</span><br><span class="line">&lt;tr valign=<span class="string">"top"</span>&gt;</span><br><span class="line">&lt;th&gt;测试接口&lt;/th&gt;&lt;th&gt;每秒请求数tps&lt;/th&gt;&lt;th&gt;平均响应时间(ms)&lt;/th&gt;&lt;th&gt;总事务数&lt;/th&gt;&lt;th&gt;失败事务数&lt;/th&gt;&lt;th&gt;成功率&lt;/th&gt;&lt;th&gt;测试结果&lt;/th&gt;&lt;th&gt;nginx服务器cpu&lt;/th&gt;&lt;th&gt;nginx服务器io&lt;/th&gt;&lt;th&gt;web服务器cpu&lt;/th&gt;&lt;th&gt;web服务器io&lt;/th&gt;&lt;th&gt;service服务器cpu&lt;/th&gt;&lt;th&gt;service服务器io&lt;/th&gt;&lt;th&gt;主数据库服务器cpu&lt;/th&gt;&lt;th&gt;主数据库服务器io&lt;/th&gt;&lt;th&gt;从数据库服务器cpu&lt;/th&gt;&lt;th&gt;从数据库服务器io&lt;/th&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr valign=<span class="string">"top"</span> class=<span class="string">""</span>&gt;</span><br><span class="line">EOF</span><br><span class="line">)&gt;&gt;index.html</span><br><span class="line">j=1</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `cat summary.txt`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   <span class="keyword">if</span> [ `expr <span class="variable">$j</span> % 17 ` != 0 ]; <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">'&lt;td align="left"&gt;'</span><span class="variable">$i</span><span class="string">'&lt;/td&gt;'</span>&gt;&gt;index.html</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">'&lt;td align="left"&gt;'</span><span class="variable">$i</span><span class="string">'&lt;/td&gt;&lt;/tr&gt;'</span>&gt;&gt;index.html</span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line">   j=`expr <span class="variable">$j</span> + 1`</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;"</span>&gt;&gt;index.html</span><br></pre></td></tr></table></figure><h4 id="html样式-style-css"><a href="#html样式-style-css" class="headerlink" title="html样式 style.css"></a>html样式 style.css</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">body &#123;</span><br><span class="line"><span class="css">        <span class="selector-tag">font</span><span class="selector-pseudo">:normal</span> 68% <span class="selector-tag">verdana</span>,<span class="selector-tag">arial</span>,<span class="selector-tag">helvetica</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>:<span class="selector-id">#000000</span>;</span></span><br><span class="line">     &#125;</span><br><span class="line">table tr td, table tr th &#123;</span><br><span class="line">         font-size: 78%;</span><br><span class="line">     &#125;</span><br><span class="line"><span class="css"><span class="selector-tag">table</span><span class="selector-class">.details</span> <span class="selector-tag">tr</span> <span class="selector-tag">th</span>&#123;</span></span><br><span class="line"><span class="css">         <span class="selector-tag">color</span>: <span class="selector-id">#ffffff</span>;</span></span><br><span class="line">         font-weight: bold;</span><br><span class="line"><span class="css">         <span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</span></span><br><span class="line"><span class="css">         <span class="selector-tag">background</span>:<span class="selector-id">#2674a6</span>;</span></span><br><span class="line">         white-space: nowrap;</span><br><span class="line">     &#125;</span><br><span class="line"><span class="css"><span class="selector-tag">table</span><span class="selector-class">.details</span> <span class="selector-tag">tr</span> <span class="selector-tag">td</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>:<span class="selector-id">#eeeee0</span>;</span></span><br><span class="line">        white-space: nowrap;</span><br><span class="line">     &#125;</span><br><span class="line">h1 &#123;</span><br><span class="line">        margin: 0px 0px 5px; font: 265% verdana,arial,helvetica</span><br><span class="line">   &#125;</span><br><span class="line">h2 &#123;</span><br><span class="line"><span class="css">        <span class="selector-tag">margin-top</span>: 1<span class="selector-tag">em</span>; <span class="selector-tag">margin-bottom</span>: 0<span class="selector-class">.5em</span>; <span class="selector-tag">font</span>: <span class="selector-tag">bold</span> 185% <span class="selector-tag">verdana</span>,<span class="selector-tag">arial</span>,<span class="selector-tag">helvetica</span></span></span><br><span class="line">   &#125;</span><br><span class="line">h3 &#123;</span><br><span class="line"><span class="css">        <span class="selector-tag">margin-bottom</span>: 0<span class="selector-class">.5em</span>; <span class="selector-tag">font</span>: <span class="selector-tag">bold</span> 115% <span class="selector-tag">verdana</span>,<span class="selector-tag">arial</span>,<span class="selector-tag">helvetica</span></span></span><br><span class="line">   &#125;</span><br><span class="line"><span class="css"><span class="selector-class">.Failure</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">font-weight</span><span class="selector-pseudo">:bold</span>; <span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line">   &#125;</span><br><span class="line"><span class="css"><span class="selector-class">.Pass</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">font-weight</span><span class="selector-pseudo">:bold</span>; <span class="selector-tag">color</span><span class="selector-pseudo">:green</span>;</span></span><br><span class="line">   &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="发送测试结果邮件-sendmail-py"><a href="#发送测试结果邮件-sendmail-py" class="headerlink" title="发送测试结果邮件 sendmail.py"></a>发送测试结果邮件 sendmail.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.mime.base <span class="keyword">import</span> MIMEBase</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"></span><br><span class="line">today = datetime.date.today()</span><br><span class="line">sender = <span class="string">'526077432@qq.com'</span></span><br><span class="line">receiverlist = [<span class="string">"526077432@qq.com"</span>]</span><br><span class="line">subject = <span class="string">'%s %s'</span> % (<span class="string">'用户端自动化性能测试报告'</span>,today)</span><br><span class="line">smtpserver = <span class="string">'smtp.qq.com'</span></span><br><span class="line">username = <span class="string">'526077432@qq.com'</span></span><br><span class="line">password = <span class="string">'XXXXXX'</span></span><br><span class="line">f = open(<span class="string">'index.html'</span>,<span class="string">"r"</span>)</span><br><span class="line">content = f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment">#msg = MIMEText(content,'html','utf-8')</span></span><br><span class="line">msg = MIMEMultipart()</span><br><span class="line">msg.attach(MIMEText(content,<span class="string">'html'</span>,<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">msg[<span class="string">'From'</span>] = <span class="string">'526077432@qq.com'</span></span><br><span class="line">msg[<span class="string">'to'</span>] = <span class="string">','</span>.join(receiverlist)</span><br><span class="line">msg[<span class="string">'Subject'</span>] = subject</span><br><span class="line"></span><br><span class="line">att=MIMEText(open(<span class="string">'index.html'</span>,<span class="string">'rb'</span>).read(),<span class="string">'base64'</span>,<span class="string">'gb2312'</span>)</span><br><span class="line">att[<span class="string">"Conten-Type"</span>]=<span class="string">'application/octet-stream'</span></span><br><span class="line">att[<span class="string">"Content-Disposition"</span>]=<span class="string">'attachment;filename="Load test result.html"'</span></span><br><span class="line">msg.attach(att)</span><br><span class="line"></span><br><span class="line">smtp = smtplib.SMTP()</span><br><span class="line">smtp.connect(smtpserver)</span><br><span class="line">smtp.ehlo()</span><br><span class="line">smtp.starttls()</span><br><span class="line">smtp.ehlo()</span><br><span class="line"><span class="comment">#smtp.set_debuglevel(1)</span></span><br><span class="line">smtp.login(username, password)</span><br><span class="line">smtp.sendmail(msg[<span class="string">'From'</span>],msg[<span class="string">'to'</span>],msg.as_string())</span><br><span class="line">smtp.quit()</span><br></pre></td></tr></table></figure><h3 id="Jmeter测试用例编写"><a href="#Jmeter测试用例编写" class="headerlink" title="Jmeter测试用例编写"></a>Jmeter测试用例编写</h3><p>我目前使用的方法：</p><ol><li>使用Jmeter的GUI客户端进行编写，填写各个参数另存为新的jmx用例文件。</li><li>分析jmx文件，直接修改jmx文件中的各个参数，另存为新的jmx用例文件。<br>实践起来还是GUI客户端比较快捷，但是依旧存在问题：如果服务器IP或者域名变化，所有的用例就得重新编辑一遍，非常耗时且繁琐。<br>所以还是需要去研究一个更加快捷的jmx用例管理和修改的方法。</li></ol><h3 id="SSH免密码登录"><a href="#SSH免密码登录" class="headerlink" title="SSH免密码登录"></a>SSH免密码登录</h3><p>本文参考至testerhome文章：<a href="https://testerhome.com/topics/4264" target="_blank" rel="noopener">https://testerhome.com/topics/4264</a></p>]]></content>
      <categories>
        <category>Automation</category>
      </categories>
      <tags>
        <tag>jmeter</tag>
        <tag>接口</tag>
        <tag>自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>Git使用总结</title>
    <url>/2016/03/18/2016-03-18-Upload-local-code-to-Github/</url>
    <content><![CDATA[<h3 id="上传本地代码到Github"><a href="#上传本地代码到Github" class="headerlink" title="上传本地代码到Github"></a>上传本地代码到Github</h3><ol><li><p>准备工作<br>安装github for windows客户端</p><a id="more"></a></li><li><p>上传代码</p><ol><li><p>在自己的github账户上创建一个新的仓库（repository）</p></li><li><p>登录github for windows客户端，clone下来刚才创建的repository：</p></li><li><p>复制本地完整代码到clone下来的repository文件夹中</p></li><li><p>github for windows客户端自动检测未上传的文件，勾选需要上传的文件，commit到master或者其他分支中</p></li><li><p>点击客户端右上角的Sync按钮</p><p>至此，本地的代码就上传到了github上。</p></li></ol></li></ol><h3 id="Git切换远程仓库地址"><a href="#Git切换远程仓库地址" class="headerlink" title="Git切换远程仓库地址"></a>Git切换远程仓库地址</h3><ol><li><p>方法一：直接修改远程仓库地址</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote <span class="built_in">set</span>-url origin url</span><br></pre></td></tr></table></figure></li><li><p>方法二：删除本地远程仓库地址，然后添加新的仓库地址</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote rm origin</span><br><span class="line">git remote add origin url</span><br></pre></td></tr></table></figure></li><li><p>方法三：修改配置文件<br>每个仓库在初始化时，都会有一个<code>.git</code>的隐藏目录，修改其中的<code>config</code>文件中的<code>url</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[core]</span><br><span class="line">    repositoryformatversion = 0</span><br><span class="line">    filemode = <span class="literal">true</span></span><br><span class="line">    bare = <span class="literal">false</span></span><br><span class="line">    logallrefupdates = <span class="literal">true</span></span><br><span class="line">    ignorecase = <span class="literal">true</span></span><br><span class="line">    precomposeunicode = <span class="literal">true</span></span><br><span class="line">[remote <span class="string">"origin"</span>]</span><br><span class="line">    url = git://github.com/robbyrussell/oh-my-zsh.git</span><br><span class="line">    fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch <span class="string">"master"</span>]</span><br><span class="line">    remote = origin</span><br><span class="line">    merge = refs/heads/master</span><br></pre></td></tr></table></figure></li><li><p>查看远程仓库地址</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure></li></ol><h3 id="合并两个不同的仓库"><a href="#合并两个不同的仓库" class="headerlink" title="合并两个不同的仓库"></a>合并两个不同的仓库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 本地仓库oldRepo中添加远程仓库newRepo</span></span><br><span class="line">git remote add newRepo https://github.com/shadow000902/newRepo.git</span><br><span class="line"><span class="meta">#</span><span class="bash"> 从远程仓库newRepo中拉取数据到本地仓库中</span></span><br><span class="line">git fetch newRepo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将远程仓库newRepo中拉取的develop分支作为新分支checkout到本地，新分支名为 newRepo/develop</span></span><br><span class="line">git checkout -b newRepo/develop newRepo/develop</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换回本地仓库oldRepo的develop分支</span></span><br><span class="line">git checkout develop</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将 newRepo/develop 分支合并入 develop 分支</span></span><br><span class="line">git merge newRepo/develop</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决冲突并推送到远程</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Appium安装</title>
    <url>/2016/03/31/2016-03-31-Install-Appium/</url>
    <content><![CDATA[<h3 id="命令行正常安装Appium"><a href="#命令行正常安装Appium" class="headerlink" title="命令行正常安装Appium"></a>命令行正常安装Appium</h3><h4 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">XXX@XXX:~$ node -v                                              # 安装[0.10.46](https:&#x2F;&#x2F;nodejs.org&#x2F;dist&#x2F;v0.10.46&#x2F;node-v0.10.46.tar.gz)版本的node</span><br><span class="line">v0.10.46</span><br><span class="line">XXX@XXX:~$ npm -v                                               # 安装node的时候同时安装了[2.15.1]版本的npm</span><br><span class="line">2.15.1</span><br><span class="line">XXX@XXX:~$ appium -v</span><br><span class="line">1.4.16</span><br></pre></td></tr></table></figure><h4 id="使用node-js安装Appium"><a href="#使用node-js安装Appium" class="headerlink" title="使用node.js安装Appium"></a>使用node.js安装Appium</h4><a id="more"></a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g appium                                           # -g 全局参数</span><br><span class="line">或者</span><br><span class="line">npm --registry http:&#x2F;&#x2F;registry.cnpmjs.org install -g appium     # 推荐这种,npm的国内镜像</span><br></pre></td></tr></table></figure><h4 id="修改Appium安装源方法"><a href="#修改Appium安装源方法" class="headerlink" title="修改Appium安装源方法"></a>修改Appium安装源方法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm config get registry                                         # 查看当前npm的镜像源地址</span><br><span class="line">npm config set registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;        # 替换npm源为淘宝的npm镜像源</span><br><span class="line">npm config get registry                                         # 查看镜像源是否替换成功</span><br></pre></td></tr></table></figure><h3 id="异常安装Appium方法（windows下）"><a href="#异常安装Appium方法（windows下）" class="headerlink" title="异常安装Appium方法（windows下）"></a>异常安装Appium方法（windows下）</h3><ol><li>下载<a href="http://appium.io/" target="_blank" rel="noopener">Appium客户端</a></li><li>安装Appium客户端到电脑，查看目录如图：<img src="/2016/03/31/2016-03-31-Install-Appium/Appium%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" title="Appium安装目录结构"></li><li>完整解压其中的node_modules.7z文件，如图所示：<img src="/2016/03/31/2016-03-31-Install-Appium/node_modules%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" title="node_modules目录结构"></li><li>在node_modules/.bin文件夹中就有可以在CMD中运行的appium批处理文件：<img src="/2016/03/31/2016-03-31-Install-Appium/Appium%E8%BF%90%E8%A1%8C%E6%89%B9%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6.png" title="Appium运行批处理文件"></li><li>在sdk、jdk、python、环境变量设置好的情况下，CMD进入node_modules/.bin下，就可以直接命令行运行appium：<img src="/2016/03/31/2016-03-31-Install-Appium/Appium%E6%AD%A3%E5%B8%B8%E8%BF%90%E8%A1%8C.png" title="Appium正常运行"></li></ol><h3 id="⭐️源码安装"><a href="#⭐️源码安装" class="headerlink" title="⭐️源码安装"></a>⭐️源码安装</h3><h4 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">npm WARN deprecated has-color@0.1.7: Renamed to supports-color. If you&#39;re using chalk, upgrade to the latest version. https:&#x2F;&#x2F;github.com&#x2F;chalk&#x2F;supports-color</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;cnpm -&gt; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;cnpm&#x2F;bin&#x2F;cnpm</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;cnpm-check -&gt; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;cnpm&#x2F;bin&#x2F;cnpm-check</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;cnpm-sync -&gt; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;cnpm&#x2F;bin&#x2F;cnpm-sync</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;cnpm-user -&gt; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;cnpm&#x2F;bin&#x2F;cnpm-user</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;cnpm-doc -&gt; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;cnpm&#x2F;bin&#x2F;cnpm-doc</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;cnpm-web -&gt; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;cnpm&#x2F;bin&#x2F;cnpm-web</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;cnpm-search -&gt; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;cnpm&#x2F;bin&#x2F;cnpm-search</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;lib</span><br><span class="line">├── abbrev@1.0.9</span><br><span class="line">├── aproba@1.0.4</span><br><span class="line">├─┬ cnpm@4.3.2</span><br><span class="line">│ ├── auto-correct@1.0.0</span><br><span class="line">│ ├── bagpipe@0.3.5</span><br><span class="line">│ ├── colors@1.1.2</span><br><span class="line">│ ├─┬ commander@2.9.0</span><br><span class="line">│ │ └── graceful-readlink@1.0.1</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="下载源代码"><a href="#下载源代码" class="headerlink" title="下载源代码"></a>下载源代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;appium&#x2F;appium.git</span><br><span class="line"></span><br><span class="line">➜  ~ git clone https:&#x2F;&#x2F;github.com&#x2F;appium&#x2F;appium.git</span><br><span class="line"></span><br><span class="line">Cloning into &#39;appium&#39;...</span><br><span class="line">remote: Counting objects: 38266, done.</span><br><span class="line">remote: Compressing objects: 100% (5&#x2F;5), done.</span><br><span class="line">remote: Total 38266 (delta 0), reused 0 (delta 0), pack-reused 38261</span><br><span class="line">Receiving objects: 100% (38266&#x2F;38266), 34.97 MiB | 150.00 KiB&#x2F;s, done.</span><br><span class="line">Resolving deltas: 100% (24501&#x2F;24501), done.</span><br><span class="line">Checking connectivity... done.</span><br></pre></td></tr></table></figure><h4 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd appium               # 进入appium源码目录</span><br><span class="line">cnpm install            # 执行安装</span><br><span class="line"></span><br><span class="line">➜  appium git:(master) cnpm install</span><br><span class="line">appium-logger@^2.1.0 installed at node_modules&#x2F;.2.1.0@appium-logger</span><br><span class="line">appium-windows-driver@^0.x installed at node_modules&#x2F;.0.2.0@appium-windows-driver</span><br><span class="line">argparse@^1.0.7 installed at node_modules&#x2F;.1.0.9@argparse</span><br><span class="line">asyncbox@^2.3.1 existed at node_modules&#x2F;.2.3.1@asyncbox</span><br><span class="line">babel-runtime@&#x3D;5.8.24 existed at node_modules&#x2F;.5.8.24@babel-runtime</span><br><span class="line">bluebird@^2.10.2 existed at node_modules&#x2F;.2.11.0@bluebird</span><br><span class="line">continuation-local-storage@^3.1.7 existed at node_modules&#x2F;.3.2.0@continuation-local-storage</span><br><span class="line">appium-base-driver@^2.0.19 installed at node_modules&#x2F;.2.0.19@appium-base-driver</span><br><span class="line">lodash@^4.13.1 existed at node_modules&#x2F;.4.16.4@lodash</span><br><span class="line">npmlog@^2.0.4 existed at node_modules&#x2F;.2.0.4@npmlog</span><br><span class="line">request-promise@^1.0.2 existed at node_modules&#x2F;.1.0.2@request-promise</span><br><span class="line">source-map-support@^0.4.0 existed at node_modules&#x2F;.0.4.3@source-map-support</span><br><span class="line">teen_process@^1.7.1 existed at node_modules&#x2F;.1.7.1@teen_process</span><br><span class="line">date-utils@^1.2.21 existed at node_modules&#x2F;.1.2.21@date-utils</span><br><span class="line">appium-xcuitest-driver@^2.0.25 installed at node_modules&#x2F;.2.0.27@appium-xcuitest-driver</span><br><span class="line">install gulp-jshint from remote https:&#x2F;&#x2F;github.com&#x2F;appium&#x2F;gulp-jshint&#x2F;archive&#x2F;master.tar.gz, may be very slow, please keep patience</span><br><span class="line">appium-support@^2.3.3 installed at node_modules&#x2F;.2.3.3@appium-support</span><br><span class="line">winston@^2.2.0 installed at node_modules&#x2F;.2.2.0@winston</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="用cnpm-link命令将appium-link到系统，可以忽略warn"><a href="#用cnpm-link命令将appium-link到系统，可以忽略warn" class="headerlink" title="用cnpm link命令将appium link到系统，可以忽略warn"></a>用<code>cnpm link</code>命令将<code>appium link</code>到系统，可以忽略<code>warn</code></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm link</span><br><span class="line"></span><br><span class="line">➜  appium git:(master) cnpm link</span><br><span class="line">npm WARN deprecated tough-cookie@2.2.2: ReDoS vulnerability parsing Set-Cookie https:&#x2F;&#x2F;nodesecurity.io&#x2F;advisories&#x2F;130</span><br><span class="line">npm WARN deprecated minimatch@3.0.0: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue</span><br><span class="line">npm WARN deprecated minimatch@1.0.0: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue</span><br><span class="line">npm WARN deprecated lodash@2.4.2: lodash@&lt;3.0.0 is no longer maintained. Upgrade to lodash@^4.0.0.</span><br><span class="line">npm WARN skippingAction Module is inside a symlinked module: not running add isarray@0.0.1 node_modules&#x2F;appium-gulp-plugins&#x2F;node_modules&#x2F;gulp-jshint&#x2F;node_modules&#x2F;isarray</span><br><span class="line">npm WARN skippingAction Module is inside a symlinked module: not running update lodash@2.4.2 node_modules&#x2F;appium-gulp-plugins&#x2F;node_modules&#x2F;gulp-jshint&#x2F;node_modules&#x2F;lodash</span><br><span class="line">npm WARN skippingAction Module is inside a symlinked module: not running add readable-stream@1.0.34 node_modules&#x2F;appium-gulp-plugins&#x2F;node_modules&#x2F;gulp-jshint&#x2F;node_modules&#x2F;readable-stream</span><br><span class="line">npm WARN skippingAction Module is inside a symlinked module: not running update through2@0.6.5 node_modules&#x2F;appium-gulp-plugins&#x2F;node_modules&#x2F;gulp-jshint&#x2F;node_modules&#x2F;through2</span><br><span class="line">npm WARN skippingAction Module is inside a symlinked module: not running add array-uniq@1.0.2 node_modules&#x2F;gulp-nsp&#x2F;node_modules&#x2F;gulp-util&#x2F;node_modules&#x2F;array-uniq</span><br><span class="line">npm WARN skippingAction Module is inside a symlinked module: not running add ansi-styles@2.2.1 node_modules&#x2F;appium-gulp-plugins&#x2F;node_modules&#x2F;gulp-nsp&#x2F;node_modules&#x2F;nsp&#x2F;node_modules&#x2F;chalk&#x2F;node_modules&#x2F;ansi-styles</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">npm WARN skippingAction Module is inside a symlinked module: not running add inherits@2.0.1 node_modules&#x2F;through2&#x2F;node_modules&#x2F;readable-stream&#x2F;node_modules&#x2F;inherits</span><br><span class="line">npm WARN skippingAction Module is inside a symlinked module: not running add process-nextick-args@1.0.6 node_modules&#x2F;through2&#x2F;node_modules&#x2F;readable-stream&#x2F;node_modules&#x2F;process-nextick-args</span><br><span class="line">npm WARN skippingAction Module is inside a symlinked module: not running remove hoek@2.16.3 node_modules&#x2F;topo&#x2F;node_modules&#x2F;hoek</span><br><span class="line">npm WARN skippingAction Module is inside a symlinked module: not running remove replace-ext@0.0.1 node_modules&#x2F;vinyl&#x2F;node_modules&#x2F;replace-ext</span><br><span class="line">npm WARN skippingAction Module is inside a symlinked module: not running remove jshint@2.5.10 node_modules&#x2F;gulp-jshint&#x2F;node_modules&#x2F;jshint</span><br><span class="line"></span><br><span class="line">&gt; appium@1.6.0-beta3 prepublish &#x2F;Users&#x2F;taoyi&#x2F;appium</span><br><span class="line">&gt; gulp prepublish</span><br><span class="line"></span><br><span class="line">[00:30:52] Using gulpfile ~&#x2F;appium&#x2F;gulpfile.js</span><br><span class="line">[00:30:52] Starting &#39;prepublish&#39;...</span><br><span class="line">[00:30:52] Starting &#39;clean&#39;...</span><br><span class="line">[00:30:52] Finished &#39;clean&#39; after 26 ms</span><br><span class="line">[00:30:52] Starting &#39;transpile&#39;...</span><br><span class="line">[00:30:54] Finished &#39;transpile&#39; after 2.13 s</span><br><span class="line">[00:30:54] Starting &#39;fixShrinkwrap&#39;...</span><br><span class="line">Could not find shrinkwrap; skipping fixing shrinkwrap. (Original error: Cannot find module &#39;.&#x2F;npm-shrinkwrap.json&#39;)</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;appium -&gt; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;build&#x2F;lib&#x2F;main.js</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium -&gt; &#x2F;Users&#x2F;taoyi&#x2F;appium</span><br></pre></td></tr></table></figure><h4 id="查看安装结果"><a href="#查看安装结果" class="headerlink" title="查看安装结果"></a>查看安装结果</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">appium -v</span><br><span class="line"></span><br><span class="line">➜  appium git:(master) appium -v</span><br><span class="line">1.6.0-beta3</span><br></pre></td></tr></table></figure><h3 id="安装指定版本的appium"><a href="#安装指定版本的appium" class="headerlink" title="安装指定版本的appium"></a>安装指定版本的appium</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g appium@1.4.16</span><br></pre></td></tr></table></figure><p>该方法应对ubuntu系统无法安装上<a href="mailto:appium@1.5.3">appium@1.5.3</a>的问题，问题原因未知</p><h3 id="Appium应用所附加需要的"><a href="#Appium应用所附加需要的" class="headerlink" title="Appium应用所附加需要的"></a>Appium应用所附加需要的</h3><ol><li>JDK</li><li>SDK</li><li>python</li><li>selenium<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install selenium -i http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple       # 使用国内地址</span><br></pre></td></tr></table></figure></li><li>Appium-Python-Client<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install Appium-Python-Client</span><br></pre></td></tr></table></figure><h3 id="安装和使用appium遇到的问题解决"><a href="#安装和使用appium遇到的问题解决" class="headerlink" title="安装和使用appium遇到的问题解决"></a>安装和使用<code>appium</code>遇到的问题解决</h3><h4 id="安装后无法使用"><a href="#安装后无法使用" class="headerlink" title="安装后无法使用"></a>安装后无法使用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Appium will not work if used or installed with sudo</span><br><span class="line">error: Appium will not work if used or installed with sudo. Please rerun&#x2F;install as a non-root user. If you had to install Appium using &#96;sudo npm install -g appium&#96;, the solution is to reinstall Node using a method (Homebrew, for example) that doesn&#39;t require sudo to install global npm packages.</span><br><span class="line"></span><br><span class="line">[1]+  Exit 1                  appium</span><br></pre></td></tr></table></figure>该问题显示appium不能使用root用户来安装，不然无法运行，所以需要卸载用root用户安装的appium，该用一般用户来安装</li></ol><p><strong>解决方案</strong><br>1、改变<code>node</code>的所有者</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;lib</span><br><span class="line">sudo chown -R taoyi node_modules</span><br></pre></td></tr></table></figure><p>2、卸载<code>appium</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm -g uninstall appium</span><br></pre></td></tr></table></figure><p>3、重新安装<code>appium</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm -g install appium</span><br></pre></td></tr></table></figure><p>4、启动<code>appium</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">appium &amp;</span><br></pre></td></tr></table></figure><h4 id="安装中遇到权限问题无法安装"><a href="#安装中遇到权限问题无法安装" class="headerlink" title="安装中遇到权限问题无法安装"></a>安装中遇到权限问题无法安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm ERR!  &#123; [Error: EACCES, symlink &#39;&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;bin&#x2F;appium.js&#39;]</span><br><span class="line">npm ERR!   errno: 3,</span><br><span class="line">npm ERR!   code: &#39;EACCES&#39;,</span><br><span class="line">npm ERR!   path: &#39;&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;bin&#x2F;appium.js&#39; &#125;</span><br><span class="line">npm ERR!</span><br><span class="line">npm ERR! Please try running this command again as root&#x2F;Administrator.</span><br></pre></td></tr></table></figure><p><strong>解决方案</strong><br>1、修改目录权限</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chmod -R 777 &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules</span><br></pre></td></tr></table></figure><p>2、安装依旧有相同的问题<br>查看/lib/node_modules目录，我们发现并没有/lib/node_modules/appium/bin/appium.js文件。显然，该文件是安装时生成的，因此问题应该出在安装起npm上，查看npm相关文档我们发现日志中提到的符号链接的路径是可以修改的，因此，解决权限问题可以将该符号链接修改到用户有权限的目录中。<br>3、<strong>解决方案</strong><br>执行以下命令修改符号链接路径</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm config set prefix &#39;~&#x2F;.npm-packages&#39;</span><br></pre></td></tr></table></figure><p>将新路径添加到环境变量</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim ~&#x2F;.bashrc  </span><br><span class="line"># 在文件中添加以下内容</span><br><span class="line">export PATH&#x3D;&quot;$PATH:$HOME&#x2F;.npm-packages&#x2F;bin&quot;</span><br></pre></td></tr></table></figure><p>使环境变量生效</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure><h4 id="appium启动问题"><a href="#appium启动问题" class="headerlink" title="appium启动问题"></a><code>appium</code>启动问题</h4><p><code>appium</code>启动时可能会遇到下列问题</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">XXX@XXX:~$ appium</span><br><span class="line">error: uncaughtException: fn must be a function</span><br><span class="line">See http:&#x2F;&#x2F;goo.gl&#x2F;916lJJ</span><br><span class="line">date&#x3D;Sat Nov 21 2015 10:37:25 GMT+0800 (HKT), pid&#x3D;2504, uid&#x3D;501, gid&#x3D;20, cwd&#x3D;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium, execPath&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;node, version&#x3D;v0.10.34, argv&#x3D;[node, &#x2F;usr&#x2F;local&#x2F;bin&#x2F;appium], rss&#x3D;103559168, heapTotal&#x3D;86062080, heapUsed&#x3D;56309664, loadavg&#x3D;[1.6328125, 1.86767578125, 1.81103515625], uptime&#x3D;39552, trace&#x3D;[column&#x3D;15, file&#x3D;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;appium-chromedriver&#x2F;node_modules&#x2F;appium-jsonwp-proxy&#x2F;node_modules&#x2F;appium-support&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;main&#x2F;promisify.js, function&#x3D;Function.Promise.promisify, line&#x3D;268, method&#x3D;Promise.promisify, native&#x3D;false, column&#x3D;13, file&#x3D;lib&#x2F;fs.js, function&#x3D;, line&#x3D;46, method&#x3D;null, native&#x3D;false, column&#x3D;26, file&#x3D;module.js, function&#x3D;Module._compile, line&#x3D;456, method&#x3D;_compile, native&#x3D;false, column&#x3D;10, file&#x3D;module.js, function&#x3D;Object.Module._extensions..js, line&#x3D;474, method&#x3D;Module._extensions..js, native&#x3D;false, column&#x3D;32, file&#x3D;module.js, function&#x3D;Module.load, line&#x3D;356, method&#x3D;load, native&#x3D;false, column&#x3D;12, file&#x3D;module.js, function&#x3D;Function.Module._load, line&#x3D;312, method&#x3D;Module._load, native&#x3D;false, column&#x3D;17, file&#x3D;module.js, function&#x3D;Module.require, line&#x3D;364, method&#x3D;require, native&#x3D;false, column&#x3D;17, file&#x3D;module.js, function&#x3D;require, line&#x3D;380, method&#x3D;null, native&#x3D;false, column&#x3D;11, file&#x3D;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;appium-chromedriver&#x2F;node_modules&#x2F;appium-jsonwp-proxy&#x2F;node_modules&#x2F;appium-support&#x2F;build&#x2F;lib&#x2F;tempdir.js, function&#x3D;, line&#x3D;12, method&#x3D;null, native&#x3D;false, column&#x3D;26, file&#x3D;module.js, function&#x3D;Module._compile, line&#x3D;456, method&#x3D;_compile, native&#x3D;false, column&#x3D;10, file&#x3D;module.js, function&#x3D;Object.Module._extensions..js, line&#x3D;474, method&#x3D;Module._extensions..js, native&#x3D;false, column&#x3D;32, file&#x3D;module.js, function&#x3D;Module.load, line&#x3D;356, method&#x3D;load, native&#x3D;false, column&#x3D;12, file&#x3D;module.js, function&#x3D;Function.Module._load, line&#x3D;312, method&#x3D;Module._load, native&#x3D;false, column&#x3D;17, file&#x3D;module.js, function&#x3D;Module.require, line&#x3D;364, method&#x3D;require, native&#x3D;false, column&#x3D;17, file&#x3D;module.js, function&#x3D;require, line&#x3D;380, method&#x3D;null, native&#x3D;false, column&#x3D;19, file&#x3D;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;appium-chromedriver&#x2F;node_modules&#x2F;appium-jsonwp-proxy&#x2F;node_modules&#x2F;appium-support&#x2F;build&#x2F;index.js, function&#x3D;, line&#x3D;11, method&#x3D;null, native&#x3D;false, column&#x3D;26, file&#x3D;module.js, function&#x3D;Module._compile, line&#x3D;456, method&#x3D;_compile, native&#x3D;false, column&#x3D;10, file&#x3D;module.js, function&#x3D;Object.Module._extensions..js, line&#x3D;474, method&#x3D;Module._extensions..js, native&#x3D;false, column&#x3D;32, file&#x3D;module.js, function&#x3D;Module.load, line&#x3D;356, method&#x3D;load, native&#x3D;false, column&#x3D;12, file&#x3D;module.js, function&#x3D;Function.Module._load, line&#x3D;312, method&#x3D;Module._load, native&#x3D;false, column&#x3D;17, file&#x3D;module.js, function&#x3D;Module.require, line&#x3D;364, method&#x3D;require, native&#x3D;false, column&#x3D;17, file&#x3D;module.js, function&#x3D;require, line&#x3D;380, method&#x3D;null, native&#x3D;false, column&#x3D;42, file&#x3D;lib&#x2F;proxy.js, function&#x3D;, line&#x3D;2, method&#x3D;null, native&#x3D;false, column&#x3D;26, file&#x3D;module.js, function&#x3D;Module._compile, line&#x3D;456, method&#x3D;_compile, native&#x3D;false, column&#x3D;10, file&#x3D;module.js, function&#x3D;Object.Module._extensions..js, line&#x3D;474, method&#x3D;Module._extensions..js, native&#x3D;false, column&#x3D;32, file&#x3D;module.js, function&#x3D;Module.load, line&#x3D;356, method&#x3D;load, native&#x3D;false, column&#x3D;12, file&#x3D;module.js, function&#x3D;Function.Module._load, line&#x3D;312, method&#x3D;Module._load, native&#x3D;false, column&#x3D;17, file&#x3D;module.js, function&#x3D;Module.require, line&#x3D;364, method&#x3D;require, native&#x3D;false, column&#x3D;17, file&#x3D;module.js, function&#x3D;require, line&#x3D;380, method&#x3D;null, native&#x3D;false, column&#x3D;17, file&#x3D;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;appium-chromedriver&#x2F;node_modules&#x2F;appium-jsonwp-proxy&#x2F;build&#x2F;index.js, function&#x3D;, line&#x3D;9, method&#x3D;null, native&#x3D;false, column&#x3D;26, file&#x3D;module.js, function&#x3D;Module._compile, line&#x3D;456, method&#x3D;_compile, native&#x3D;false, column&#x3D;10, file&#x3D;module.js, function&#x3D;Object.Module._extensions..js, line&#x3D;474, method&#x3D;Module._extensions..js, native&#x3D;false, column&#x3D;32, file&#x3D;module.js, function&#x3D;Module.load, line&#x3D;356, method&#x3D;load, native&#x3D;false, column&#x3D;12, file&#x3D;module.js, function&#x3D;Function.Module._load, line&#x3D;312, method&#x3D;Module._load, native&#x3D;false, column&#x3D;17, file&#x3D;module.js, function&#x3D;Module.require, line&#x3D;364, method&#x3D;require, native&#x3D;false, column&#x3D;17, file&#x3D;module.js, function&#x3D;require, line&#x3D;380, method&#x3D;null, native&#x3D;false, column&#x3D;28, file&#x3D;lib&#x2F;chromedriver.js, function&#x3D;, line&#x3D;3, method&#x3D;null, native&#x3D;false, column&#x3D;26, file&#x3D;module.js, function&#x3D;Module._compile, line&#x3D;456, method&#x3D;_compile, native&#x3D;false, column&#x3D;10, file&#x3D;module.js, function&#x3D;Object.Module._extensions..js, line&#x3D;474, method&#x3D;Module._extensions..js, native&#x3D;false, column&#x3D;32, file&#x3D;module.js, function&#x3D;Module.load, line&#x3D;356, method&#x3D;load, native&#x3D;false], stack&#x3D;[TypeError: fn must be a function, , See http:&#x2F;&#x2F;goo.gl&#x2F;916lJJ, , at Function.Promise.promisify (&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;appium-chromedriver&#x2F;node_modules&#x2F;appium-jsonwp-proxy&#x2F;node_modules&#x2F;appium-support&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;main&#x2F;promisify.js:268:15), at Object.&lt;anonymous&gt; (lib&#x2F;fs.js:46:13), at Module._compile (module.js:456:26), at Object.Module._extensions..js (module.js:474:10), at Module.load (module.js:356:32), at Function.Module._load (module.js:312:12), at Module.require (module.js:364:17), at require (module.js:380:17), at Object.&lt;anonymous&gt; (&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;appium-chromedriver&#x2F;node_modules&#x2F;appium-jsonwp-proxy&#x2F;node_modules&#x2F;appium-support&#x2F;build&#x2F;lib&#x2F;tempdir.js:12:11), at Module._compile (module.js:456:26), at Object.Module._extensions..js (module.js:474:10), at Module.load (module.js:356:32), at Function.Module._load (module.js:312:12), at Module.require (module.js:364:17), at require (module.js:380:17), at Object.&lt;anonymous&gt; (&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;appium-chromedriver&#x2F;node_modules&#x2F;appium-jsonwp-proxy&#x2F;node_modules&#x2F;appium-support&#x2F;build&#x2F;index.js:11:19), at Module._compile (module.js:456:26), at Object.Module._extensions..js (module.js:474:10), at Module.load (module.js:356:32), at Function.Module._load (module.js:312:12), at Module.require (module.js:364:17), at require (module.js:380:17), at Object.&lt;anonymous&gt; (lib&#x2F;proxy.js:2:42), at Module._compile (module.js:456:26), at Object.Module._extensions..js (module.js:474:10), at Module.load (module.js:356:32), at Function.Module._load (module.js:312:12), at Module.require (module.js:364:17), at require (module.js:380:17), at Object.&lt;anonymous&gt; (&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;appium-chromedriver&#x2F;node_modules&#x2F;appium-jsonwp-proxy&#x2F;build&#x2F;index.js:9:17), at Module._compile (module.js:456:26), at Object.Module._extensions..js (module.js:474:10), at Module.load (module.js:356:32), at Function.Module._load (module.js:312:12), at Module.require (module.js:364:17), at require (module.js:380:17), at Object.&lt;anonymous&gt; (lib&#x2F;chromedriver.js:3:28), at Module._compile (module.js:456:26), at Object.Module._extensions..js (module.js:474:10), at Module.load (module.js:356:32)]</span><br></pre></td></tr></table></figure><p>google我们发现问题是<code>node.js</code>版本太低导致。<br>使用<code>apt-get</code>安装的node版本还是<code>0.10.46</code><br>所以需要以源码方式安装，下载<code>0.12.15</code>的源码包</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget XXX&#x2F;node-v0.12.15.tar.gz</span><br><span class="line">tar xvf node-v0.12.15.tar.gz</span><br><span class="line">cd node-v0.12.15</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>之后再运行<code>appium</code>就可以正常启动了</p><ol><li>注意点</li></ol><p><strong>安装appium需要首先安装相匹配的<code>node</code>和<code>npm</code>，如第一点中所述</strong><br>这一点至关重要，否则总是会遇到各种各样乱七八糟的问题。</p><ol start="2"><li><code>appium1.4.16</code>版本安装成功日志<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">XXX@XXX:~$ npm -g install appium@1.4.16</span><br><span class="line">npm WARN optional dep failed, continuing udidetect@1.0.7</span><br><span class="line"></span><br><span class="line">&gt; utf-8-validate@1.1.0 install &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;ws&#x2F;node_modules&#x2F;utf-8-validate</span><br><span class="line">&gt; node-gyp rebuild</span><br><span class="line"></span><br><span class="line">make: Entering directory &#96;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;ws&#x2F;node_modules&#x2F;utf-8-validate&#x2F;build&#39;</span><br><span class="line">  CXX(target) Release&#x2F;obj.target&#x2F;validation&#x2F;src&#x2F;validation.o</span><br><span class="line">  SOLINK_MODULE(target) Release&#x2F;obj.target&#x2F;validation.node</span><br><span class="line">  COPY Release&#x2F;validation.node</span><br><span class="line">make: Leaving directory &#96;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;ws&#x2F;node_modules&#x2F;utf-8-validate&#x2F;build&#39;</span><br><span class="line"></span><br><span class="line">&gt; bufferutil@1.1.0 install &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;ws&#x2F;node_modules&#x2F;bufferutil</span><br><span class="line">&gt; node-gyp rebuild</span><br><span class="line"></span><br><span class="line">make: Entering directory &#96;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;ws&#x2F;node_modules&#x2F;bufferutil&#x2F;build&#39;</span><br><span class="line">  CXX(target) Release&#x2F;obj.target&#x2F;bufferutil&#x2F;src&#x2F;bufferutil.o</span><br><span class="line">  SOLINK_MODULE(target) Release&#x2F;obj.target&#x2F;bufferutil.node</span><br><span class="line">  COPY Release&#x2F;bufferutil.node</span><br><span class="line">make: Leaving directory &#96;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;ws&#x2F;node_modules&#x2F;bufferutil&#x2F;build&#39;</span><br><span class="line">npm WARN peerDependencies The peer dependency continuation-local-storage@~3 included from cls-bluebird will no</span><br><span class="line">npm WARN peerDependencies longer be automatically installed to fulfill the peerDependency</span><br><span class="line">npm WARN peerDependencies in npm 3+. Your application will need to depend on it explicitly.</span><br><span class="line">npm WARN peerDependencies The peer dependency bluebird@&gt;&#x3D;1.0.3 included from cls-bluebird will no</span><br><span class="line">npm WARN peerDependencies longer be automatically installed to fulfill the peerDependency</span><br><span class="line">npm WARN peerDependencies in npm 3+. Your application will need to depend on it explicitly.</span><br><span class="line"></span><br><span class="line">&gt; utf-8-validate@1.2.1 install &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;socket.io&#x2F;node_modules&#x2F;engine.io&#x2F;node_modules&#x2F;ws&#x2F;node_modules&#x2F;utf-8-validate</span><br><span class="line">&gt; node-gyp rebuild</span><br><span class="line"></span><br><span class="line">make: Entering directory &#96;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;socket.io&#x2F;node_modules&#x2F;engine.io&#x2F;node_modules&#x2F;ws&#x2F;node_modules&#x2F;utf-8-validate&#x2F;build&#39;</span><br><span class="line">  CXX(target) Release&#x2F;obj.target&#x2F;validation&#x2F;src&#x2F;validation.o</span><br><span class="line">  SOLINK_MODULE(target) Release&#x2F;obj.target&#x2F;validation.node</span><br><span class="line">  COPY Release&#x2F;validation.node</span><br><span class="line">make: Leaving directory &#96;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;socket.io&#x2F;node_modules&#x2F;engine.io&#x2F;node_modules&#x2F;ws&#x2F;node_modules&#x2F;utf-8-validate&#x2F;build&#39;</span><br><span class="line"></span><br><span class="line">&gt; bufferutil@1.2.1 install &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;socket.io&#x2F;node_modules&#x2F;engine.io&#x2F;node_modules&#x2F;ws&#x2F;node_modules&#x2F;bufferutil</span><br><span class="line">&gt; node-gyp rebuild</span><br><span class="line"></span><br><span class="line">make: Entering directory &#96;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;socket.io&#x2F;node_modules&#x2F;engine.io&#x2F;node_modules&#x2F;ws&#x2F;node_modules&#x2F;bufferutil&#x2F;build&#39;</span><br><span class="line">  CXX(target) Release&#x2F;obj.target&#x2F;bufferutil&#x2F;src&#x2F;bufferutil.o</span><br><span class="line">  SOLINK_MODULE(target) Release&#x2F;obj.target&#x2F;bufferutil.node</span><br><span class="line">  COPY Release&#x2F;bufferutil.node</span><br><span class="line">make: Leaving directory &#96;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;socket.io&#x2F;node_modules&#x2F;engine.io&#x2F;node_modules&#x2F;ws&#x2F;node_modules&#x2F;bufferutil&#x2F;build&#39;</span><br><span class="line"></span><br><span class="line">&gt; utf-8-validate@1.2.1 install &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;socket.io&#x2F;node_modules&#x2F;socket.io-client&#x2F;node_modules&#x2F;engine.io-client&#x2F;node_modules&#x2F;ws&#x2F;node_modules&#x2F;utf-8-validate</span><br><span class="line">&gt; node-gyp rebuild</span><br><span class="line"></span><br><span class="line">make: Entering directory &#96;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;socket.io&#x2F;node_modules&#x2F;socket.io-client&#x2F;node_modules&#x2F;engine.io-client&#x2F;node_modules&#x2F;ws&#x2F;node_modules&#x2F;utf-8-validate&#x2F;build&#39;</span><br><span class="line">  CXX(target) Release&#x2F;obj.target&#x2F;validation&#x2F;src&#x2F;validation.o</span><br><span class="line">  SOLINK_MODULE(target) Release&#x2F;obj.target&#x2F;validation.node</span><br><span class="line">  COPY Release&#x2F;validation.node</span><br><span class="line">make: Leaving directory &#96;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;socket.io&#x2F;node_modules&#x2F;socket.io-client&#x2F;node_modules&#x2F;engine.io-client&#x2F;node_modules&#x2F;ws&#x2F;node_modules&#x2F;utf-8-validate&#x2F;build&#39;</span><br><span class="line"></span><br><span class="line">&gt; bufferutil@1.2.1 install &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;socket.io&#x2F;node_modules&#x2F;socket.io-client&#x2F;node_modules&#x2F;engine.io-client&#x2F;node_modules&#x2F;ws&#x2F;node_modules&#x2F;bufferutil</span><br><span class="line">&gt; node-gyp rebuild</span><br><span class="line"></span><br><span class="line">make: Entering directory &#96;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;socket.io&#x2F;node_modules&#x2F;socket.io-client&#x2F;node_modules&#x2F;engine.io-client&#x2F;node_modules&#x2F;ws&#x2F;node_modules&#x2F;bufferutil&#x2F;build&#39;</span><br><span class="line">  CXX(target) Release&#x2F;obj.target&#x2F;bufferutil&#x2F;src&#x2F;bufferutil.o</span><br><span class="line">  SOLINK_MODULE(target) Release&#x2F;obj.target&#x2F;bufferutil.node</span><br><span class="line">  COPY Release&#x2F;bufferutil.node</span><br><span class="line">make: Leaving directory &#96;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;socket.io&#x2F;node_modules&#x2F;socket.io-client&#x2F;node_modules&#x2F;engine.io-client&#x2F;node_modules&#x2F;ws&#x2F;node_modules&#x2F;bufferutil&#x2F;build&#39;</span><br><span class="line"></span><br><span class="line">&gt; appium-chromedriver@2.3.2 install &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;appium-chromedriver</span><br><span class="line">&gt; node install-npm.js</span><br><span class="line"></span><br><span class="line">info Chromedriver Install Opening temp file to write chromedriver_linux64 to...</span><br><span class="line">info Chromedriver Install Downloading http:&#x2F;&#x2F;chromedriver.storage.googleapis.com&#x2F;2.18&#x2F;chromedriver_linux64.zip...</span><br><span class="line">info Chromedriver Install Writing binary content to &#x2F;tmp&#x2F;11678-532-16jz6cz&#x2F;chromedriver_linux64.zip...</span><br><span class="line">info Chromedriver Install Extracting &#x2F;tmp&#x2F;11678-532-16jz6cz&#x2F;chromedriver_linux64.zip to &#x2F;tmp&#x2F;11678-532-16jz6cz&#x2F;chromedriver_linux64</span><br><span class="line">info Chromedriver Install Creating &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;appium-chromedriver&#x2F;chromedriver&#x2F;linux...</span><br><span class="line">info Chromedriver Install Copying unzipped binary, reading from &#x2F;tmp&#x2F;11678-532-16jz6cz&#x2F;chromedriver_linux64&#x2F;chromedriver...</span><br><span class="line">info Chromedriver Install Writing to &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;appium-chromedriver&#x2F;chromedriver&#x2F;linux&#x2F;chromedriver_64...</span><br><span class="line">info Chromedriver Install &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;appium-chromedriver&#x2F;chromedriver&#x2F;linux&#x2F;chromedriver_64 successfully put in place</span><br><span class="line">npm WARN engine hawk@0.10.2: wanted: &#123;&quot;node&quot;:&quot;0.8.x&quot;&#125; (current: &#123;&quot;node&quot;:&quot;0.10.46&quot;,&quot;npm&quot;:&quot;2.15.1&quot;&#125;)</span><br><span class="line">npm WARN engine cryptiles@0.1.3: wanted: &#123;&quot;node&quot;:&quot;0.8.x&quot;&#125; (current: &#123;&quot;node&quot;:&quot;0.10.46&quot;,&quot;npm&quot;:&quot;2.15.1&quot;&#125;)</span><br><span class="line">npm WARN engine sntp@0.1.4: wanted: &#123;&quot;node&quot;:&quot;0.8.x&quot;&#125; (current: &#123;&quot;node&quot;:&quot;0.10.46&quot;,&quot;npm&quot;:&quot;2.15.1&quot;&#125;)</span><br><span class="line">npm WARN engine boom@0.3.8: wanted: &#123;&quot;node&quot;:&quot;0.8.x&quot;&#125; (current: &#123;&quot;node&quot;:&quot;0.10.46&quot;,&quot;npm&quot;:&quot;2.15.1&quot;&#125;)</span><br><span class="line">npm WARN engine hoek@0.7.6: wanted: &#123;&quot;node&quot;:&quot;0.8.x&quot;&#125; (current: &#123;&quot;node&quot;:&quot;0.10.46&quot;,&quot;npm&quot;:&quot;2.15.1&quot;&#125;)</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;appium -&gt; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;bin&#x2F;appium.js</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;appium-doctor -&gt; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;bin&#x2F;appium-doctor.js</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;authorize_ios -&gt; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;bin&#x2F;authorize-ios.js</span><br><span class="line">appium@1.4.16 &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium</span><br><span class="line">├── camel-back-promise@1.0.0</span><br><span class="line">├── vargs@0.1.0</span><br><span class="line">├── win-spawn@2.0.0</span><br><span class="line">├── bytes@1.0.0</span><br><span class="line">├── path@0.11.14</span><br><span class="line">├── stack-trace@0.0.9</span><br><span class="line">├── bufferpack@0.0.6</span><br><span class="line">├── utf7@1.0.0</span><br><span class="line">├── uuid-js@0.7.5</span><br><span class="line">├── rimraf@2.2.8</span><br><span class="line">├── through@2.3.8</span><br><span class="line">├── node-idevice@0.1.5</span><br><span class="line">├── bplist-parser@0.1.0</span><br><span class="line">├── xmldom@0.1.19</span><br><span class="line">├── node-uuid@1.4.3</span><br><span class="line">├── q@1.1.2</span><br><span class="line">├── js2xmlparser2@0.2.0</span><br><span class="line">├── ncp@2.0.0</span><br><span class="line">├── async@0.9.2</span><br><span class="line">├── underscore@1.8.3</span><br><span class="line">├── xpath@0.0.9</span><br><span class="line">├── colors@1.0.3</span><br><span class="line">├── adm-zip@0.4.7</span><br><span class="line">├── safari-launcher@2.0.5</span><br><span class="line">├── temp@0.8.3 (os-tmpdir@1.0.1)</span><br><span class="line">├── sandboxed-module@2.0.3 (require-like@0.1.2)</span><br><span class="line">├── which@1.2.0 (is-absolute@0.1.7)</span><br><span class="line">├── mv@2.0.3 (ncp@0.6.0)</span><br><span class="line">├── underscore.string@3.0.3</span><br><span class="line">├── mkdirp@0.5.1 (minimist@0.0.8)</span><br><span class="line">├── touch@0.0.3 (nopt@1.0.10)</span><br><span class="line">├── difflib@0.2.4 (heap@0.2.6)</span><br><span class="line">├── morgan@1.5.3 (basic-auth@1.0.3, depd@1.0.1, on-finished@2.2.1, debug@2.2.0)</span><br><span class="line">├── method-override@2.3.5 (methods@1.1.1, vary@1.0.1, parseurl@1.3.0, debug@2.2.0)</span><br><span class="line">├── serve-favicon@2.2.1 (fresh@0.2.4, ms@0.7.1, parseurl@1.3.0, etag@1.6.0)</span><br><span class="line">├── bplist-creator@0.0.6 (stream-buffers@2.2.0)</span><br><span class="line">├── es6-promise@2.3.0</span><br><span class="line">├── glob@4.4.2 (inherits@2.0.1, once@1.3.2, inflight@1.0.4, minimatch@2.0.10)</span><br><span class="line">├── winston@0.9.0 (cycle@1.0.3, eyes@0.1.8, isstream@0.1.2, pkginfo@0.3.1)</span><br><span class="line">├── npmlog@1.1.0 (ansi@0.3.0, are-we-there-yet@1.0.4, gauge@1.1.0)</span><br><span class="line">├── appium-atoms@0.0.5</span><br><span class="line">├── body-parser@1.12.4 (content-type@1.0.1, depd@1.0.1, qs@2.4.2, on-finished@2.2.1, raw-body@2.0.2, debug@2.2.0, iconv-lite@0.4.8, type-is@1.6.9)</span><br><span class="line">├── express@4.11.2 (utils-merge@1.0.0, merge-descriptors@0.0.2, methods@1.1.1, fresh@0.2.4, cookie@0.1.2, escape-html@1.0.1, range-parser@1.0.3, vary@1.0.1, cookie-signature@1.0.5, finalhandler@0.3.3, media-typer@0.3.0, parseurl@1.3.0, serve-static@1.8.1, content-disposition@0.5.0, path-to-regexp@0.1.3, depd@1.0.1, qs@2.3.3, etag@1.5.1, debug@2.1.3, on-finished@2.2.1, send@0.11.1, proxy-addr@1.0.8, type-is@1.5.7, accepts@1.2.13)</span><br><span class="line">├── unzip@0.1.11 (setimmediate@1.0.4, match-stream@0.0.2, readable-stream@1.0.33, pullstream@0.4.1, fstream@0.1.31, binary@0.3.0)</span><br><span class="line">├── prompt@0.2.14 (revalidator@0.1.8, pkginfo@0.3.1, read@1.0.7, utile@0.2.1, winston@0.8.3)</span><br><span class="line">├── longjohn@0.2.9 (source-map-support@0.3.2)</span><br><span class="line">├── request@2.53.0 (caseless@0.9.0, aws-sign2@0.5.0, forever-agent@0.5.2, form-data@0.2.0, stringstream@0.0.5, oauth-sign@0.6.0, tunnel-agent@0.4.1, isstream@0.1.2, json-stringify-safe@5.0.1, qs@2.3.3, tough-cookie@2.2.0, combined-stream@0.0.7, mime-types@2.0.14, http-signature@0.10.1, bl@0.9.4, hawk@2.3.1)</span><br><span class="line">├── md5calculator@0.0.3 (crypto@0.0.3, unzip@0.1.8, elementtree@0.1.3)</span><br><span class="line">├── ws@0.7.2 (options@0.0.6, ultron@1.0.2, utf-8-validate@1.1.0, bufferutil@1.1.0)</span><br><span class="line">├── date-utils@1.2.17</span><br><span class="line">├── grunt-cli@0.1.13 (resolve@0.3.1, nopt@1.0.10, findup-sync@0.1.3)</span><br><span class="line">├── binary-cookies@0.1.1 (path@0.4.10, colors@0.6.2, async@0.2.10, underscore@1.4.4, argparse@0.1.16, winston@0.6.2)</span><br><span class="line">├── swig@1.4.2 (optimist@0.6.1, uglify-js@2.4.24)</span><br><span class="line">├── grunt@0.4.5 (dateformat@1.0.2-1.2.3, which@1.0.9, eventemitter2@0.4.14, getobject@0.1.0, colors@0.6.2, async@0.1.22, grunt-legacy-util@0.2.0, hooker@0.2.3, exit@0.1.2, nopt@1.0.10, lodash@0.9.2, minimatch@0.2.14, glob@3.1.21, coffee-script@1.3.3, underscore.string@2.2.1, iconv-lite@0.2.11, grunt-legacy-log@0.1.2, findup-sync@0.1.3, js-yaml@2.0.5)</span><br><span class="line">├── namp@0.2.25 (highlight.js@8.9.1)</span><br><span class="line">├── appium-support@1.1.2 (bluebird@2.10.2, lodash@3.10.1)</span><br><span class="line">├── argparse@1.0.3 (sprintf-js@1.0.3, lodash@3.10.1)</span><br><span class="line">├── xml2js@0.4.15 (sax@1.1.4, xmlbuilder@4.0.0)</span><br><span class="line">├── plist@1.1.0 (util-deprecate@1.0.0, base64-js@0.0.6, xmlbuilder@2.2.1)</span><br><span class="line">├── appium-xcode@2.0.5 (denodeify@1.2.1, q@1.4.1, npmlog@1.2.1, source-map-support@0.2.10, lodash@3.10.1, babel-runtime@5.5.5, asyncbox@2.3.1)</span><br><span class="line">├── appium-uiauto@1.10.10 (argparse@0.1.16, winston@0.8.3)</span><br><span class="line">├── node-simctl@2.1.0 (source-map-support@0.2.10, npmlog@1.2.1, appium-logger@1.1.7, asyncbox@2.3.1, es6-mapify@1.0.0, babel-runtime@5.5.5, teen_process@1.5.1)</span><br><span class="line">├── socket.io@1.3.7 (debug@2.1.0, has-binary-data@0.1.3, socket.io-parser@2.2.4, socket.io-adapter@0.3.1, engine.io@1.5.4, socket.io-client@1.3.7)</span><br><span class="line">├── appium-instruments@2.0.6 (underscore@1.7.0, winston@0.8.3, appium-support@1.0.3)</span><br><span class="line">├── appium-adb@1.7.5 (underscore@1.6.0, ncp@0.5.1, q@1.0.1, appium-support@0.0.3, winston@0.7.3)</span><br><span class="line">└── appium-chromedriver@2.3.2 (is-os@1.0.0, q@1.4.1, ps-node@0.0.4, source-map-support@0.3.3, rimraf@2.4.3, request-promise@0.4.3, appium-logger@1.1.7, lodash@3.10.1, request@2.65.0, babel-runtime@5.5.5, asyncbox@2.3.1, teen_process@1.5.1, appium-jsonwp-proxy@1.4.1)</span><br><span class="line">XXX@XXX:~$ appium -v</span><br><span class="line">1.4.16</span><br></pre></td></tr></table></figure><h3 id="Mac成功安装Appium1-5-3版本［我有翻墙，不知道不翻墙行不行］"><a href="#Mac成功安装Appium1-5-3版本［我有翻墙，不知道不翻墙行不行］" class="headerlink" title="Mac成功安装Appium1.5.3版本［我有翻墙，不知道不翻墙行不行］"></a><code>Mac</code>成功安装<code>Appium1.5.3</code>版本［我有翻墙，不知道不翻墙行不行］</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Last login: Mon Aug 15 14:28:23 on ttys003</span><br><span class="line">➜  ~ appium -v</span><br><span class="line">1.5.3</span><br><span class="line">➜  ~ npm -v</span><br><span class="line">3.9.3</span><br><span class="line">➜  ~ node -v</span><br><span class="line">v6.2.1</span><br><span class="line">➜  ~ npm -g install appium</span><br><span class="line">loadRequestedDeps → netwo ▀ ╢████████████████████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░╟</span><br><span class="line">^C</span><br><span class="line">➜  ~ npm -g install appium --registry&#x3D;http:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;appium -&gt; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;build&#x2F;lib&#x2F;main.js</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;authorize-ios -&gt; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;.bin&#x2F;authorize-ios</span><br><span class="line"></span><br><span class="line">&gt; fsevents@1.0.14 install &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;fsevents</span><br><span class="line">&gt; node-pre-gyp install --fallback-to-build</span><br><span class="line"></span><br><span class="line">[fsevents] Success: &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;fsevents&#x2F;lib&#x2F;binding&#x2F;Release&#x2F;node-v48-darwin-x64&#x2F;fse.node&quot; is installed via remote</span><br><span class="line">- ansi@0.3.1 node_modules&#x2F;appium&#x2F;node_modules&#x2F;fsevents&#x2F;node_modules&#x2F;ansi</span><br><span class="line">- pseudomap@1.0.2 node_modules&#x2F;appium&#x2F;node_modules&#x2F;fsevents&#x2F;node_modules&#x2F;aws4&#x2F;node_modules&#x2F;lru-cache&#x2F;node_modules&#x2F;pseudomap</span><br><span class="line">- yallist@2.0.0 node_modules&#x2F;appium&#x2F;node_modules&#x2F;fsevents&#x2F;node_modules&#x2F;aws4&#x2F;node_modules&#x2F;lru-cache&#x2F;node_modules&#x2F;yallist</span><br><span class="line">- lru-cache@4.0.1 node_modules&#x2F;appium&#x2F;node_modules&#x2F;fsevents&#x2F;node_modules&#x2F;aws4&#x2F;node_modules&#x2F;lru-cache</span><br><span class="line">- balanced-match@0.3.0 node_modules&#x2F;appium&#x2F;node_modules&#x2F;fsevents&#x2F;node_modules&#x2F;fstream-ignore&#x2F;node_modules&#x2F;minimatch&#x2F;node_modules&#x2F;brace-expansion&#x2F;node_modules&#x2F;balanced-match</span><br><span class="line">- concat-map@0.0.1 node_modules&#x2F;appium&#x2F;node_modules&#x2F;fsevents&#x2F;node_modules&#x2F;fstream-ignore&#x2F;node_modules&#x2F;minimatch&#x2F;node_modules&#x2F;brace-expansion&#x2F;node_modules&#x2F;concat-map</span><br><span class="line">- brace-expansion@1.1.3 node_modules&#x2F;appium&#x2F;node_modules&#x2F;fsevents&#x2F;node_modules&#x2F;fstream-ignore&#x2F;node_modules&#x2F;minimatch&#x2F;node_modules&#x2F;brace-expansion</span><br><span class="line">- minimatch@3.0.0 node_modules&#x2F;appium&#x2F;node_modules&#x2F;fsevents&#x2F;node_modules&#x2F;fstream-ignore&#x2F;node_modules&#x2F;minimatch</span><br><span class="line">- lodash.tostring@4.1.2 node_modules&#x2F;appium&#x2F;node_modules&#x2F;fsevents&#x2F;node_modules&#x2F;lodash.tostring</span><br><span class="line">- lodash.repeat@4.0.0 node_modules&#x2F;appium&#x2F;node_modules&#x2F;fsevents&#x2F;node_modules&#x2F;lodash.repeat</span><br><span class="line">- lodash.padstart@4.2.0 node_modules&#x2F;appium&#x2F;node_modules&#x2F;fsevents&#x2F;node_modules&#x2F;lodash.padstart</span><br><span class="line">- lodash.padend@4.2.0 node_modules&#x2F;appium&#x2F;node_modules&#x2F;fsevents&#x2F;node_modules&#x2F;lodash.padend</span><br><span class="line">- lodash.pad@4.1.0 node_modules&#x2F;appium&#x2F;node_modules&#x2F;fsevents&#x2F;node_modules&#x2F;lodash.pad</span><br><span class="line">- abbrev@1.0.7 node_modules&#x2F;appium&#x2F;node_modules&#x2F;fsevents&#x2F;node_modules&#x2F;node-pre-gyp&#x2F;node_modules&#x2F;nopt&#x2F;node_modules&#x2F;abbrev</span><br><span class="line">- nopt@3.0.6 node_modules&#x2F;appium&#x2F;node_modules&#x2F;fsevents&#x2F;node_modules&#x2F;node-pre-gyp&#x2F;node_modules&#x2F;nopt</span><br><span class="line">- wrappy@1.0.1 node_modules&#x2F;appium&#x2F;node_modules&#x2F;fsevents&#x2F;node_modules&#x2F;rimraf&#x2F;node_modules&#x2F;glob&#x2F;node_modules&#x2F;inflight&#x2F;node_modules&#x2F;wrappy</span><br><span class="line">- inherits@2.0.1 node_modules&#x2F;appium&#x2F;node_modules&#x2F;fsevents&#x2F;node_modules&#x2F;rimraf&#x2F;node_modules&#x2F;glob&#x2F;node_modules&#x2F;inherits</span><br><span class="line">- balanced-match@0.3.0 node_modules&#x2F;appium&#x2F;node_modules&#x2F;fsevents&#x2F;node_modules&#x2F;rimraf&#x2F;node_modules&#x2F;glob&#x2F;node_modules&#x2F;minimatch&#x2F;node_modules&#x2F;brace-expansion&#x2F;node_modules&#x2F;balanced-match</span><br><span class="line">- concat-map@0.0.1 node_modules&#x2F;appium&#x2F;node_modules&#x2F;fsevents&#x2F;node_modules&#x2F;rimraf&#x2F;node_modules&#x2F;glob&#x2F;node_modules&#x2F;minimatch&#x2F;node_modules&#x2F;brace-expansion&#x2F;node_modules&#x2F;concat-map</span><br><span class="line">- brace-expansion@1.1.3 node_modules&#x2F;appium&#x2F;node_modules&#x2F;fsevents&#x2F;node_modules&#x2F;rimraf&#x2F;node_modules&#x2F;glob&#x2F;node_modules&#x2F;minimatch&#x2F;node_modules&#x2F;brace-expansion</span><br><span class="line">- minimatch@3.0.0 node_modules&#x2F;appium&#x2F;node_modules&#x2F;fsevents&#x2F;node_modules&#x2F;rimraf&#x2F;node_modules&#x2F;glob&#x2F;node_modules&#x2F;minimatch</span><br><span class="line">- wrappy@1.0.1 node_modules&#x2F;appium&#x2F;node_modules&#x2F;fsevents&#x2F;node_modules&#x2F;rimraf&#x2F;node_modules&#x2F;glob&#x2F;node_modules&#x2F;once&#x2F;node_modules&#x2F;wrappy</span><br><span class="line">- once@1.3.3 node_modules&#x2F;appium&#x2F;node_modules&#x2F;fsevents&#x2F;node_modules&#x2F;rimraf&#x2F;node_modules&#x2F;glob&#x2F;node_modules&#x2F;once</span><br><span class="line">- inflight@1.0.4 node_modules&#x2F;appium&#x2F;node_modules&#x2F;fsevents&#x2F;node_modules&#x2F;rimraf&#x2F;node_modules&#x2F;glob&#x2F;node_modules&#x2F;inflight</span><br><span class="line">- path-is-absolute@1.0.0 node_modules&#x2F;appium&#x2F;node_modules&#x2F;fsevents&#x2F;node_modules&#x2F;rimraf&#x2F;node_modules&#x2F;glob&#x2F;node_modules&#x2F;path-is-absolute</span><br><span class="line">- glob@7.0.3 node_modules&#x2F;appium&#x2F;node_modules&#x2F;fsevents&#x2F;node_modules&#x2F;rimraf&#x2F;node_modules&#x2F;glob</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;lib</span><br><span class="line">└─┬ appium@1.5.3</span><br><span class="line">  └─┬ fsevents@1.0.14</span><br><span class="line">    ├── nan@2.4.0</span><br><span class="line">    └─┬ node-pre-gyp@0.6.29</span><br><span class="line">      ├─┬ nopt@3.0.6</span><br><span class="line">      │ └── abbrev@1.0.9</span><br><span class="line">      ├─┬ npmlog@3.1.2</span><br><span class="line">      │ ├── console-control-strings@1.1.0</span><br><span class="line">      │ ├─┬ gauge@2.6.0</span><br><span class="line">      │ │ ├── aproba@1.0.4</span><br><span class="line">      │ │ ├── has-color@0.1.7</span><br><span class="line">      │ │ ├── has-unicode@2.0.1</span><br><span class="line">      │ │ ├── object-assign@4.1.0</span><br><span class="line">      │ │ ├── signal-exit@3.0.0</span><br><span class="line">      │ │ ├─┬ string-width@1.0.1</span><br><span class="line">      │ │ │ ├─┬ code-point-at@1.0.0</span><br><span class="line">      │ │ │ │ └── number-is-nan@1.0.0</span><br><span class="line">      │ │ │ └── is-fullwidth-code-point@1.0.0</span><br><span class="line">      │ │ └── wide-align@1.1.0</span><br><span class="line">      │ └── set-blocking@2.0.0</span><br><span class="line">      ├─┬ request@2.73.0</span><br><span class="line">      │ ├── aws4@1.4.1</span><br><span class="line">      │ ├─┬ bl@1.1.2</span><br><span class="line">      │ │ └── readable-stream@2.0.6</span><br><span class="line">      │ ├─┬ har-validator@2.0.6</span><br><span class="line">      │ │ └── pinkie-promise@2.0.1</span><br><span class="line">      │ ├─┬ http-signature@1.1.1</span><br><span class="line">      │ │ ├── jsprim@1.3.0</span><br><span class="line">      │ │ └─┬ sshpk@1.8.3</span><br><span class="line">      │ │   ├── assert-plus@1.0.0</span><br><span class="line">      │ │   ├── dashdash@1.14.0</span><br><span class="line">      │ │   ├─┬ getpass@0.1.6</span><br><span class="line">      │ │   │ └── assert-plus@1.0.0</span><br><span class="line">      │ │   └── tweetnacl@0.13.3</span><br><span class="line">      │ ├─┬ mime-types@2.1.11</span><br><span class="line">      │ │ └── mime-db@1.23.0</span><br><span class="line">      │ ├── oauth-sign@0.8.2</span><br><span class="line">      │ ├── qs@6.2.0</span><br><span class="line">      │ └── tunnel-agent@0.4.3</span><br><span class="line">      ├─┬ rimraf@2.5.3</span><br><span class="line">      │ └─┬ glob@7.0.5</span><br><span class="line">      │   ├── fs.realpath@1.0.0</span><br><span class="line">      │   ├── inflight@1.0.5</span><br><span class="line">      │   ├─┬ minimatch@3.0.2</span><br><span class="line">      │   │ └─┬ brace-expansion@1.1.5</span><br><span class="line">      │   │   ├── balanced-match@0.4.2</span><br><span class="line">      │   │   └── concat-map@0.0.1</span><br><span class="line">      │   └── path-is-absolute@1.0.0</span><br><span class="line">      ├── semver@5.2.0</span><br><span class="line">      ├─┬ tar@2.2.1</span><br><span class="line">      │ ├── block-stream@0.0.9</span><br><span class="line">      │ └─┬ fstream@1.0.10</span><br><span class="line">      │   └── graceful-fs@4.1.4</span><br><span class="line">      └─┬ tar-pack@3.1.4</span><br><span class="line">        ├── fstream-ignore@1.0.5</span><br><span class="line">        ├─┬ once@1.3.3</span><br><span class="line">        │ └── wrappy@1.0.2</span><br><span class="line">        └─┬ readable-stream@2.1.4</span><br><span class="line">          ├── buffer-shims@1.0.0</span><br><span class="line">          └── process-nextick-args@1.0.7</span><br><span class="line"></span><br><span class="line">➜  ~</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      <categories>
        <category>Appium</category>
      </categories>
      <tags>
        <tag>appium</tag>
      </tags>
  </entry>
  <entry>
    <title>adb进阶应用</title>
    <url>/2016/03/23/2016-03-23-adb-Advanced-reference/</url>
    <content><![CDATA[<ol><li><p>连接多个设备，在指定设备运行adb命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb -s &lt;serialNumber&gt; &lt;<span class="built_in">command</span>&gt;     <span class="comment"># serialNumber: adb devices 获取的设备ID号</span></span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>无线adb连接</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shadow@shadow MINGW64 ~/Desktop</span><br><span class="line">$ adb devices                       <span class="comment"># 连接手机，获取设备ID号</span></span><br><span class="line">List of devices attached</span><br><span class="line">8XV5T15A20009865        device</span><br><span class="line"></span><br><span class="line">shadow@shadow MINGW64 ~/Desktop</span><br><span class="line">$ adb tcpip 5566                    <span class="comment"># 开启无线端口号：5566（数字任选，不冲突就OK）</span></span><br><span class="line">restarting <span class="keyword">in</span> TCP mode port: 5566</span><br><span class="line"></span><br><span class="line">shadow@shadow MINGW64 ~/Desktop</span><br><span class="line">$ adb connect 192.168.1.104:5566    <span class="comment"># adb连接手机无线端口，IP地址为手机获取的局域网地址</span></span><br><span class="line">adb server is out of date.  killing...</span><br><span class="line">* daemon started successfully *</span><br><span class="line">connected to 192.168.1.104:5566</span><br><span class="line"></span><br><span class="line">shadow@shadow MINGW64 ~/Desktop</span><br><span class="line">$ adb devices                       <span class="comment"># 再次获取连接的设备，可以看到adb无线连接的设备</span></span><br><span class="line">List of devices attached</span><br><span class="line">192.168.1.104:5566      device</span><br><span class="line">8XV5T15A20009865        device</span><br><span class="line"></span><br><span class="line">shadow@shadow MINGW64 ~/Desktop</span><br><span class="line">$ adb devices                       <span class="comment"># 拔掉USB线后，留下无线adb连接的设备，和有线连接一样，可以执行各种adb命令</span></span><br><span class="line">List of devices attached</span><br><span class="line">192.168.1.104:5566      device</span><br></pre></td></tr></table></figure></li><li><p>记录无线通讯日志</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell</span><br><span class="line">logcat -b radio</span><br></pre></td></tr></table></figure></li><li><p>获取系统占用信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell top</span><br></pre></td></tr></table></figure></li><li><p>通过adb获取CPU的值</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys cpuinfo</span><br><span class="line">adb shell dumpsys cpuinfo | grep packagename        <span class="comment"># 获取指定应用的CPU值</span></span><br><span class="line">adb shell top -m 5 -s cpu                           <span class="comment"># 查看前5个进程cup的使用情况</span></span><br><span class="line">adb shell top -n l | grep packagename</span><br><span class="line">adb -s <span class="comment">#udid# shell dumpsys cpuinfo|grep #filter#|awk '&#123;print '$(date +%Y%m%d%H%M%S)',$1,$2&#125;'|grep #pid#</span></span><br></pre></td></tr></table></figure></li><li><p>通过adb获取内存</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys meminfo</span><br><span class="line">adb shell dumpsys meminfo packagename or Pid        <span class="comment"># 获取指定应用的内存占用</span></span><br><span class="line">adb shell dumpsys meminfo packagename | grep TOTAL  <span class="comment"># 获取指定应用的最大内存限制</span></span><br><span class="line">adb shell getprop | grep heapgrowthlimit            <span class="comment"># 查看单个应用程序的最大内存限制</span></span><br><span class="line">adb shell procrank                                  <span class="comment"># 取系统所有应用的内存限制数值</span></span><br></pre></td></tr></table></figure></li><li><p>1 内存PSS抓取命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb -s <span class="comment">#udid# shell dumpsys meminfo|awk '/process:/,/adjustment:/&#123;if(i&gt;1)print x;x=$0;i++&#125;'|grep #filter#|grep #pid#|awk '&#123;print '$(date +%Y%m%d%H%M%S)',$1,$3&#125;'</span></span><br></pre></td></tr></table></figure></li><li><p>2 查看USS和PSS</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell procrank | grep packagename</span><br></pre></td></tr></table></figure></li><li><p>通过adb获取流量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell cat /proc/<span class="string">"+Pid+"</span>/net/dev</span><br><span class="line">adb shell cat /proc/5432/net/dev</span><br><span class="line">adb shell cat /proc/net/xt qtaguid/stats | grep uid <span class="comment"># 取单个uid的流量情况</span></span><br><span class="line">adb -s 8XV5T15A20009865 shell cat /proc/net/xt qtaguid/stats | grep 12345</span><br></pre></td></tr></table></figure></li><li><p>1 抓取下行流量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb -s <span class="comment">#udid# shell cat /proc/net/xt_qtaguid/stats|grep #uid#|awk '&#123;tx_bytes+=$6&#125;END&#123;print '$(date +%Y%m%d%H%M%S)',tx_bytes&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>2 抓取上行流量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb -s <span class="comment">#udid# shell cat /proc/net/xt_qtaguid/stats|grep #uid#|awk '&#123;tx_bytes+=$8&#125;END&#123;print '$(date +%Y%m%d%H%M%S)',tx_bytes&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>3 抓取上行和下行流量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb -s <span class="comment">#udid# shell cat /proc/net/xt_qtaguid/stats|grep #uid#|awk '&#123;rx_bytes+=$6&#125;&#123;tx_bytes+=$8&#125;END&#123;print '$(date +%Y%m%d%H%M%S)',rx_bytes,tx_bytes&#125;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>adb</tag>
      </tags>
  </entry>
  <entry>
    <title>Appium命令参数说明</title>
    <url>/2016/04/10/2016-04-10-Appium-command-parameter-description/</url>
    <content><![CDATA[<p>appium命令帮助</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\shadow&gt;appium -h</span><br><span class="line">usage: main.js [-h] [-v] [--shell] [--ipa IPA] [-a ADDRESS] [-p PORT]</span><br><span class="line">               [-ca CALLBACKADDRESS] [-cp CALLBACKPORT] [-bp BOOTSTRAPPORT]</span><br><span class="line">               [-r BACKENDRETRIES] [--session-override] [-l] [-g LOG]</span><br><span class="line">               [--<span class="built_in">log</span>-level &#123;info,info:debug,info:info,info:warn,info:error,warn,warn:debug,warn:info,warn:warn,warn:error,error,error:debug,error:info,error:warn,error:error,debug,debug:debug,debug:info,debug:warn,debug:error&#125;]</span><br><span class="line">               [--<span class="built_in">log</span>-timestamp] [--<span class="built_in">local</span>-timezone] [--<span class="built_in">log</span>-no-colors]</span><br><span class="line">               [-G WEBHOOK] [--safari] [--default-device] [--force-iphone]</span><br><span class="line">               [--force-ipad] [--tracetemplate AUTOMATIONTRACETEMPLATEPATH]</span><br><span class="line">               [--instruments INSTRUMENTSPATH] [--nodeconfig NODECONFIG]</span><br><span class="line">               [-ra ROBOTADDRESS] [-rp ROBOTPORT]</span><br><span class="line">               [--selendroid-port SELENDROIDPORT]</span><br><span class="line">               [--chromedriver-port CHROMEDRIVERPORT]</span><br><span class="line">               [--chromedriver-executable CHROMEDRIVEREXECUTABLE]</span><br><span class="line">               [--show-config] [--no-perms-check]</span><br><span class="line">               [--<span class="built_in">command</span>-timeout DEFAULTCOMMANDTIMEOUT] [--strict-caps]</span><br><span class="line">               [--isolate-sim-device] [--tmp TMPDIR] [--trace-dir TRACEDIR]</span><br><span class="line">               [--debug-log-spacing] [--suppress-adb-kill-server]</span><br><span class="line">               [--async-trace]</span><br><span class="line">               [--webkit-debug-proxy-port WEBKITDEBUGPROXYPORT]</span><br><span class="line">               [--default-capabilities DEFAULTCAPABILITIES] [-k]</span><br><span class="line">               [--platform-name PLATFORMNAME]</span><br><span class="line">               [--platform-version PLATFORMVERSION]</span><br><span class="line">               [--automation-name AUTOMATIONNAME] [--device-name DEVICENAME]</span><br><span class="line">               [--browser-name BROWSERNAME] [--app APP] [-lt LAUNCHTIMEOUT]</span><br><span class="line">               [--language LANGUAGE] [--locale LOCALE] [-U UDID]</span><br><span class="line">               [--orientation ORIENTATION] [--no-reset] [--full-reset]</span><br><span class="line">               [--app-pkg APPPACKAGE] [--app-activity APPACTIVITY]</span><br><span class="line">               [--app-wait-package APPWAITPACKAGE]</span><br><span class="line">               [--app-wait-activity APPWAITACTIVITY]</span><br><span class="line">               [--device-ready-timeout DEVICEREADYTIMEOUT]</span><br><span class="line">               [--android-coverage ANDROIDCOVERAGE] [--avd AVD]</span><br><span class="line">               [--avd-args AVDARGS] [--use-keystore]</span><br><span class="line">               [--keystore-path KEYSTOREPATH]</span><br><span class="line">               [--keystore-password KEYSTOREPASSWORD] [--key-alias KEYALIAS]</span><br><span class="line">               [--key-password KEYPASSWORD] [--intent-action INTENTACTION]</span><br><span class="line">               [--intent-category INTENTCATEGORY] [--intent-flags INTENTFLAGS]</span><br><span class="line">               [--intent-args OPTIONALINTENTARGUMENTS]</span><br><span class="line">               [--dont-stop-app-on-reset] [--calendar-format CALENDARFORMAT]</span><br><span class="line">               [--native-instruments-lib] [--keep-keychains]</span><br><span class="line">               [--localizable-strings-dir LOCALIZABLESTRINGSDIR]</span><br><span class="line">               [--show-ios-log]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">A webdriver-compatible server <span class="keyword">for</span> use with native and hybrid iOS and Android applications.</span><br><span class="line"></span><br><span class="line">Optional arguments:</span><br><span class="line">  -h, --<span class="built_in">help</span>            Show this <span class="built_in">help</span> message and <span class="built_in">exit</span>.</span><br><span class="line">  -v, --version         Show program<span class="string">'s version number and exit.</span></span><br><span class="line"><span class="string">  --shell               Enter REPL mode</span></span><br><span class="line"><span class="string">  --ipa IPA             (IOS-only) abs path to compiled .ipa file</span></span><br><span class="line"><span class="string">  -a ADDRESS, --address ADDRESS IP Address to listen on</span></span><br><span class="line"><span class="string">  -p PORT, --port PORT  port to listen on</span></span><br><span class="line"><span class="string">  -ca CALLBACKADDRESS, --callback-address CALLBACKADDRESS callback IP Address (default: same as --address)</span></span><br><span class="line"><span class="string">  -cp CALLBACKPORT, --callback-port CALLBACKPORT callback port (default: same as port)</span></span><br><span class="line"><span class="string">  -bp BOOTSTRAPPORT, --bootstrap-port BOOTSTRAPPORT</span></span><br><span class="line"><span class="string">                        (Android-only) port to use on device to talk to Appium</span></span><br><span class="line"><span class="string">  -r BACKENDRETRIES, --backend-retries BACKENDRETRIES</span></span><br><span class="line"><span class="string">                        (iOS-only) How many times to retry launching Instruments before saying it crashed or timed out</span></span><br><span class="line"><span class="string">  --session-override    Enables session override (clobbering)</span></span><br><span class="line"><span class="string">  -l, --pre-launch      Pre-launch the application before allowing the first session (Requires --app and, for Android, --app-pkg and --app-activity)</span></span><br><span class="line"><span class="string">  -g LOG, --log LOG     Also send log output to this file</span></span><br><span class="line"><span class="string">  --log-level &#123;info,info:debug,info:info,info:warn,info:error,warn,warn:debug,warn:info,warn:warn,warn:error,error,error:debug,error:info,error:warn,error:error,debug,debug:debug,debug:info,debug:warn,debug:error&#125; log level; default (console[:file]): debug[:debug]</span></span><br><span class="line"><span class="string">  --log-timestamp       Show timestamps in console output</span></span><br><span class="line"><span class="string">  --local-timezone      Use local timezone for timestamps</span></span><br><span class="line"><span class="string">  --log-no-colors       Do not use colors in console output</span></span><br><span class="line"><span class="string">  -G WEBHOOK, --webhook WEBHOOK</span></span><br><span class="line"><span class="string">                        Also send log output to this HTTP listener</span></span><br><span class="line"><span class="string">  --safari              (IOS-Only) Use the safari app</span></span><br><span class="line"><span class="string">  --default-device, -dd</span></span><br><span class="line"><span class="string">                        (IOS-Simulator-only) use the default simulator that instruments launches on its own</span></span><br><span class="line"><span class="string">  --force-iphone        (IOS-only) Use the iPhone Simulator no matter what the app wants</span></span><br><span class="line"><span class="string">  --force-ipad          (IOS-only) Use the iPad Simulator no matter what the app wants</span></span><br><span class="line"><span class="string">  --tracetemplate AUTOMATIONTRACETEMPLATEPATH</span></span><br><span class="line"><span class="string">                        (IOS-only) .tracetemplate file to use with Instruments</span></span><br><span class="line"><span class="string">  --instruments INSTRUMENTSPATH</span></span><br><span class="line"><span class="string">                        (IOS-only) path to instruments binary</span></span><br><span class="line"><span class="string">  --nodeconfig NODECONFIG</span></span><br><span class="line"><span class="string">                        Configuration JSON file to register appium with selenium grid</span></span><br><span class="line"><span class="string">  -ra ROBOTADDRESS, --robot-address ROBOTADDRESS</span></span><br><span class="line"><span class="string">                        IP Address of robot</span></span><br><span class="line"><span class="string">  -rp ROBOTPORT, --robot-port ROBOTPORT</span></span><br><span class="line"><span class="string">                        port for robot</span></span><br><span class="line"><span class="string">  --selendroid-port SELENDROIDPORT</span></span><br><span class="line"><span class="string">                        Local port used for communication with Selendroid</span></span><br><span class="line"><span class="string">  --chromedriver-port CHROMEDRIVERPORT</span></span><br><span class="line"><span class="string">                        Port upon which ChromeDriver will run</span></span><br><span class="line"><span class="string">  --chromedriver-executable CHROMEDRIVEREXECUTABLE</span></span><br><span class="line"><span class="string">                        ChromeDriver executable full path</span></span><br><span class="line"><span class="string">  --show-config         Show info about the appium server configuration and exit</span></span><br><span class="line"><span class="string">  --no-perms-check      Bypass Appium'</span>s checks to ensure we can <span class="built_in">read</span>/write necessary files</span><br><span class="line">  --<span class="built_in">command</span>-timeout DEFAULTCOMMANDTIMEOUT</span><br><span class="line">                        The default <span class="built_in">command</span> timeout <span class="keyword">for</span> the server to use <span class="keyword">for</span> all sessions (<span class="keyword">in</span> seconds and should be less than 2147483). Will still be overridden by newCommandTimeout <span class="built_in">cap</span></span><br><span class="line">  --strict-caps         Cause sessions to fail <span class="keyword">if</span> desired caps are sent <span class="keyword">in</span> that Appium does not recognize as valid <span class="keyword">for</span> the selected device</span><br><span class="line">  --isolate-sim-device  Xcode 6 has a bug on some platforms <span class="built_in">where</span> a certain simulator can only be launched without error <span class="keyword">if</span> all other simulator devices are first deleted. This option causes Appium to delete all devices other than the one being used by Appium. Note that this is a permanent deletion, and you are responsible <span class="keyword">for</span> using simctl or xcode to manage the categories of devices used with Appium.</span><br><span class="line">  --tmp TMPDIR          Absolute path to directory Appium can use to manage temporary files, like built-in iOS apps it needs to move around. On *nix/Mac defaults to /tmp, on Windows defaults to C:\Windows\Temp</span><br><span class="line">  --trace-dir TRACEDIR  Absolute path to directory Appium use to save ios instruments traces, defaults to &lt;tmp dir&gt;/appium-instruments</span><br><span class="line">  --debug-log-spacing   Add exaggerated spacing <span class="keyword">in</span> logs to <span class="built_in">help</span> with visual inspection</span><br><span class="line">  --suppress-adb-kill-server</span><br><span class="line">                        (Android-only) If <span class="built_in">set</span>, prevents Appium from killing the adb server instance</span><br><span class="line">  --async-trace         Add long stack traces to <span class="built_in">log</span> entries. Recommended <span class="keyword">for</span> debugging only.</span><br><span class="line">  --webkit-debug-proxy-port WEBKITDEBUGPROXYPORT</span><br><span class="line">                        (IOS-only) Local port used <span class="keyword">for</span> communication with ios-webkit-debug-proxy</span><br><span class="line">  --default-capabilities DEFAULTCAPABILITIES</span><br><span class="line">                        Set the default desired capabilities, <span class="built_in">which</span> will be <span class="built_in">set</span> on each session unless overridden by received capabilities.</span><br><span class="line">  -k, --keep-artifacts  [DEPRECATED] - no effect, trace is now <span class="keyword">in</span> tmp dir by default and is cleared before each run. Please also refer to the --trace-dir flag.</span><br><span class="line">  --platform-name PLATFORMNAME</span><br><span class="line">                        [DEPRECATED] - Name of the mobile platform: iOS, Android, or FirefoxOS</span><br><span class="line">  --platform-version PLATFORMVERSION</span><br><span class="line">                        [DEPRECATED] - Version of the mobile platform</span><br><span class="line">  --automation-name AUTOMATIONNAME</span><br><span class="line">                        [DEPRECATED] - Name of the automation tool: Appium or Selendroid</span><br><span class="line">  --device-name DEVICENAME</span><br><span class="line">                        [DEPRECATED] - Name of the mobile device to use</span><br><span class="line">  --browser-name BROWSERNAME</span><br><span class="line">                        [DEPRECATED] - Name of the mobile browser: Safari or Chrome</span><br><span class="line">  --app APP             [DEPRECATED] - IOS: abs path to simulator-compiled . app file or the bundle_id of the desired target on device; Android: abs path to .apk file</span><br><span class="line">  -lt LAUNCHTIMEOUT, --launch-timeout LAUNCHTIMEOUT</span><br><span class="line">                        [DEPRECATED] - (iOS-only) how long <span class="keyword">in</span> ms to <span class="built_in">wait</span> <span class="keyword">for</span> Instruments to launch</span><br><span class="line">  --language LANGUAGE   [DEPRECATED] - Language <span class="keyword">for</span> the iOS simulator / Android Emulator</span><br><span class="line">  --locale LOCALE       [DEPRECATED] - Locale <span class="keyword">for</span> the iOS simulator / Android Emulator</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 指定设备UDID运行</span></span><br><span class="line">  -U UDID, --udid UDID  [DEPRECATED] - Unique device identifier of the connected physical device</span><br><span class="line">  --orientation ORIENTATION</span><br><span class="line">                        [DEPRECATED] - (IOS-only) use LANDSCAPE or PORTRAIT to initialize all requests to this orientation</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 在appium的各个session之间不重置app</span></span><br><span class="line">  --no-reset            [DEPRECATED] - Do not reset app state between sessions (IOS: <span class="keyword">do</span> not delete app plist files; Android: <span class="keyword">do</span> not uninstall app before new session)</span><br><span class="line">  --full-reset          [DEPRECATED] - (iOS) Delete the entire simulator folder. (Android) Reset app state by uninstalling app instead of clearing app data. On Android, this will also remove the app after the session is complete.</span><br><span class="line">  --app-pkg APPPACKAGE  [DEPRECATED] - (Android-only) Java package of the Android app you want to run (e.g., com.example. android.myApp)</span><br><span class="line">  --app-activity APPACTIVITY</span><br><span class="line">                        [DEPRECATED] - (Android-only) Activity name <span class="keyword">for</span> the Android activity you want to launch from your package (e.g., MainActivity)</span><br><span class="line">  --app-wait-package APPWAITPACKAGE</span><br><span class="line">                        [DEPRECATED] - (Android-only) Package name <span class="keyword">for</span> the Android activity you want to <span class="built_in">wait</span> <span class="keyword">for</span> (e.g., com. example.android.myApp)</span><br><span class="line">  --app-wait-activity APPWAITACTIVITY</span><br><span class="line">                        [DEPRECATED] - (Android-only) Activity name <span class="keyword">for</span> the Android activity you want to <span class="built_in">wait</span> <span class="keyword">for</span> (e.g., SplashActivity)</span><br><span class="line">  --device-ready-timeout DEVICEREADYTIMEOUT</span><br><span class="line">                        [DEPRECATED] - (Android-only) Timeout <span class="keyword">in</span> seconds <span class="keyword">while</span> waiting <span class="keyword">for</span> device to become ready</span><br><span class="line">  --android-coverage ANDROIDCOVERAGE</span><br><span class="line">                        [DEPRECATED] - (Android-only) Fully qualified instrumentation class. Passed to -w <span class="keyword">in</span> adb shell am instrument -e coverage <span class="literal">true</span> -w</span><br><span class="line">  --avd AVD             [DEPRECATED] - (Android-only) Name of the avd to launch</span><br><span class="line">  --avd-args AVDARGS    [DEPRECATED] - (Android-only) Additional emulator arguments to launch the avd</span><br><span class="line">  --use-keystore        [DEPRECATED] - (Android-only) When <span class="built_in">set</span> the keystore will be used to sign apks.</span><br><span class="line">  --keystore-path KEYSTOREPATH</span><br><span class="line">                        [DEPRECATED] - (Android-only) Path to keystore</span><br><span class="line">  --keystore-password KEYSTOREPASSWORD</span><br><span class="line">                        [DEPRECATED] - (Android-only) Password to keystore</span><br><span class="line">  --key-alias KEYALIAS  [DEPRECATED] - (Android-only) Key <span class="built_in">alias</span></span><br><span class="line">  --key-password KEYPASSWORD</span><br><span class="line">                        [DEPRECATED] - (Android-only) Key password</span><br><span class="line">  --intent-action INTENTACTION</span><br><span class="line">                        [DEPRECATED] - (Android-only) Intent action <span class="built_in">which</span> will be used to start activity</span><br><span class="line">  --intent-category INTENTCATEGORY</span><br><span class="line">                        [DEPRECATED] - (Android-only) Intent category <span class="built_in">which</span> will be used to start activity</span><br><span class="line">  --intent-flags INTENTFLAGS</span><br><span class="line">                        [DEPRECATED] - (Android-only) Flags that will be used to start activity</span><br><span class="line">  --intent-args OPTIONALINTENTARGUMENTS</span><br><span class="line">                        [DEPRECATED] - (Android-only) Additional intent arguments that will be used to start activity</span><br><span class="line">  --dont-stop-app-on-reset</span><br><span class="line">                        [DEPRECATED] - (Android-only) When included, refrains from stopping the app before restart</span><br><span class="line">  --calendar-format CALENDARFORMAT</span><br><span class="line">                        [DEPRECATED] - (IOS-only) calendar format <span class="keyword">for</span> the iOS simulator</span><br><span class="line">  --native-instruments-lib</span><br><span class="line">                        [DEPRECATED] - (IOS-only) IOS has a weird built-in unavoidable delay. We patch this <span class="keyword">in</span> appium. If you <span class="keyword">do</span> not want it patched, pass <span class="keyword">in</span> this flag.</span><br><span class="line">  --keep-keychains      [DEPRECATED] - (iOS-only) Whether to keep keychains (Library/Keychains) when reset app between sessions</span><br><span class="line">  --localizable-strings-dir LOCALIZABLESTRINGSDIR</span><br><span class="line">                        [DEPRECATED] - (IOS-only) the relative path of the dir <span class="built_in">where</span> Localizable.strings file resides</span><br><span class="line">  --show-ios-log        [DEPRECATED] - (IOS-only) <span class="keyword">if</span> <span class="built_in">set</span>, the iOS system <span class="built_in">log</span> will be written to the console</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Appium</category>
      </categories>
      <tags>
        <tag>appium</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化测试的层次化</title>
    <url>/2016/03/15/2016-03-15-Layering-of-autotest/</url>
    <content><![CDATA[<img src="/2016/03/15/2016-03-15-Layering-of-autotest/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%B1%82%E6%AC%A1%E5%8C%96.png" title="自动化测试层次化"><a id="more"></a><p>单元测试：这一层主要由产品开发同学负责,比如使用Junit开发方法的单元测试用例,通常这些用例都是静态的,测试数据通过各种Mock技术产生。<br>接口测试：这一层主要由测试同学负责，比如我们需要对Http,HSF,TOP/MTOP等接口进行业务上的功能测试,验证是否符合接口定义和业务需求，因为是基于业务测试，所以测试数据都是真实地，需要我们调用其他业务方提供的接口生成测试用的数据。</p><ol><li>接口数据串联</li><li>接口请求并发数</li></ol><p>UI测试：这一层主要由测试同学负责，使用各种UI自动化工具进行测试脚本的开发，我们可以使用AutomanX或者Selenium等工具实现UI层的自动化测试。<br>为什么要画成一个金字塔形，则不是长方形或倒三角形呢？这是为了表示不同阶段所投入自动化测试的比例。如果一个产品从没有做单元测试与接口测试，只做UI层的自动化测试是不科学的，从而很难从本质上保证产品的质量。如果你妄图实现全面的UI层的自动化测试，那更是一个劳民伤财的举动，投入了大量人力时间，最终获得的收益可能会远远低于所支付的成本。因为越往上层，其维护成本越高。尤其是UI层的元素会时常的发生改变。所以，我们应该把更多的自动化测试放在单元测试与接口测试阶段进行。<br>既然UI层的自动化测试这么劳民伤财，那我们只做单元测试与接口测试好了。NO！因为不管什么样的产品，最终呈现给用户的是UI层。所以，测试人员应该更多的精力放在UI层。那么也正是因为测试人员在UI层投入大量的精力，所以，我们有必要通过自动化的方式帮助我们“部分解放”重复的劳动。<br>至于在金字塔中三种测试的比例要根据实际的项目需求来划分。在《google测试之道》一书，对于google产品，70%的投入为单元测试，20%为集成、接口测试，10%为UI层的自动化测试。</p>]]></content>
      <categories>
        <category>Automation</category>
      </categories>
      <tags>
        <tag>自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2016/04/09/2016-04-09-Regular-expression/</url>
    <content><![CDATA[<h3 id="正则表达式入门"><a href="#正则表达式入门" class="headerlink" title="正则表达式入门"></a>正则表达式入门</h3><ol><li><p>名称：正则表达式[regular expression，简称RegEx]</p></li><li><p>使用正则表达式<br>搜索或者替换。匹配一些文本（进行一次搜索）。匹配并替换一些文本（进行一次替换）。</p></li><li><p>定义：正则表达式是一些用来匹配和处理文本的字符串。</p></li><li><p>语法：语法是正则表达式最容易掌握的部分，真正的挑战是学会如何运用那些语法把实际问题分解为一系列正则表达式并最终解决。</p><a id="more"></a></li></ol><h3 id="匹配单个字符"><a href="#匹配单个字符" class="headerlink" title="匹配单个字符"></a>匹配单个字符</h3><ol><li>匹配纯文本<br>匹配内容与正则表达式内容一致：只能匹配一个结果<br>正则表达式是区分字母大小写的。</li><li>匹配任意字符<br><code>.</code>字符（英文句号）可以匹配任何一个单个的字符；可以匹配任何单个的字符、字母、数字甚至是<code>.</code>字符本身。</li><li>匹配特殊字符<br><code>.</code>字符在正则表达式里有着特殊的含义。<br>如果想要匹配<code>.</code>本身，必须在<code>.</code>的前面加上一个<code>\</code>（反斜杠）字符来对它进行转义。<br><code>\</code>是一个元字符（metacharacter，表示“这个字符有特殊含义，而不是字符本身含义”）。<br>在绝大多数的正则表达式实现里，<code>.</code>只能匹配除换行符以外的任何单个字符。</li></ol><h3 id="匹配一组字符"><a href="#匹配一组字符" class="headerlink" title="匹配一组字符"></a>匹配一组字符</h3><ol><li>匹配多个字符中的某一个<br>使用元字符<code>[</code>和<code>]</code>来定义一个字符集合。<br>这两个字符之间的所有字符都是该集合的组成部分，字符集合的匹配结果是能够与该集合里的任意一个成员相匹配的文本。<br>字符集合在不需要区分字母大小写（或者是只需匹配某个特定部分）的操作里比较常见。例如：<code>[Rr]eg[Ee]x</code></li><li>利用字符集合区间<br>匹配任意一个数字：<code>[0123456789]</code><br>字符区间可以用<code>-</code>（连字符）来定义，模式<code>[0-9]</code>的功能和<code>[0123456789]</code>完全等价<br><code>[A-Z]</code>匹配从A到Z的所有大写字母<br><code>[a-z]</code>匹配从a到z的所有小写字母<br><code>[A-F]</code>匹配从A到F的所有大写字母<br><code>[A-z]</code>匹配从ASCII字母A到ASCII字母z的所有字母。其中还包含<code>[</code>和<code>^</code>等在ASCII字符表里排序在Z和a之间的字符。<br>字符区间的首、尾字符可以是ASCII字符表里的任意字符。<br>在定义一个字符区间的时候，一定要避免让这个区间的尾字符小于它的首字符。<br>在字符集合以外的地方，<code>-</code>只是一个普通字符，只能与<code>-</code>本身相匹配。<br>匹配任何一个字母或数字：<code>[A-Za-z0-9]</code>，完整的模式：<code>[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789]</code><br>匹配RGB色值：<code>#[A-Fa-f0-9][A-Fa-f0-9][A-Fa-f0-9][A-Fa-f0-9][A-Fa-f0-9][A-Fa-f0-9]</code></li><li>取非匹配<br>除了那个字符集里的字符，其他字符都可以匹配。<br>元字符<code>^</code>表示对一个字符集合进行取非匹配。<br><code>[^0-9]</code>表示任何一个不是数字的字符。<br><code>^</code>的效果将作用于给定字符集合里的所有字符或字符区间。</li></ol><h3 id="使用元字符"><a href="#使用元字符" class="headerlink" title="使用元字符"></a>使用元字符</h3><ol><li><p>对特殊字符进行转义</p><p>匹配<code>myArray[0]</code>：<code>myArray\[0\]</code>。<code>\[</code>匹配<code>[</code>，<code>\]</code>匹配<code>]</code><br>匹配<code>myArray[0]</code>，数字从0到9：<code>myArray\[[0-9]\]</code><br>匹配<code>\</code>本身：需要对本身转义<code>\\</code><br>在一个完整的正则表达式里，字符<code>\</code>后面永远跟着另一个字符</p></li><li><p>匹配空白字符<br>元字符大致分为两种：一种是用来匹配文本的（比如<code>.</code>），另一种是正则表达式的语法要求的（比如<code>[</code>和<code>]</code>）。<br>空白元字符表：</p></li></ol><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td><code>[\b]</code></td><td>回退（并删除）一个字符（<code>Backspace</code>键）</td></tr><tr><td><code>\f</code></td><td>换页符</td></tr><tr><td><code>\n</code></td><td>换行符</td></tr><tr><td><code>\r</code></td><td>回车符</td></tr><tr><td><code>\t</code></td><td>制表符（<code>Tab</code>键）</td></tr><tr><td><code>\v</code></td><td>垂直制表符</td></tr><tr><td><code>\r\n</code>匹配一个“回车+换行”组合</td><td></td></tr><tr><td><code>\r\n\r\n</code>匹配两个连续的行尾标签，即可匹配两条记录之间的空白行。</td><td></td></tr><tr><td>3. 匹配数字（与非数字）</td><td></td></tr><tr><td>数字元字符：</td><td></td></tr></tbody></table><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td><code>\d</code></td><td>任何一个数字字符（等价于<code>[0-9]</code>）</td></tr><tr><td><code>\D</code></td><td>任何一个非数字字符（等价于<code>[^0-9]</code>）</td></tr><tr><td>3. 匹配字母和数字（与非字母和数字）</td><td></td></tr><tr><td>字母数字元字符：</td><td></td></tr></tbody></table><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td><code>\w</code></td><td>任何一个字母数字字符（大小写均可）或下划线字符（等价于<code>[a-zA-Z0-9_]</code>）</td></tr><tr><td><code>\W</code></td><td>任何一个非字母数字或非下划线字符（等价于<code>[^a-zA-Z0-9_]</code>）</td></tr><tr><td>4. 匹配空白字符（与非空白字符）</td><td></td></tr><tr><td>空白字符元字符：</td><td></td></tr></tbody></table><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td><code>\s</code></td><td>任何一个空白字符（等价于<code>[\f\n\r\t\v]</code>）</td></tr><tr><td><code>\S</code></td><td>任何一个非空白字符（等价于<code>[^\f\n\r\t\v]</code>）</td></tr><tr><td>5. 匹配十六进制或八进制数值</td><td></td></tr><tr><td>十六进制（逢16进1）数值要用前缀<code>\x</code>来给出。</td><td></td></tr><tr><td><code>\x0A</code>对应于ASCII字符10（换行符），其效果等价于<code>\n</code>。</td><td></td></tr><tr><td>八进制（逢8进1）数值要用前缀<code>\0</code>来给出。</td><td></td></tr><tr><td><code>\011</code>对应于ASCII字符9（制表符），其效果等价于<code>\t</code>。</td><td></td></tr><tr><td>6. 使用<code>POSIX</code>字符类</td><td></td></tr></tbody></table><h3 id="重复匹配"><a href="#重复匹配" class="headerlink" title="重复匹配"></a>重复匹配</h3><ol><li>匹配一个或多个字符<br>匹配同一个字符（或字符集合）的多次重复<br><code>+</code>匹配一个或多个字符（至少一个；不匹配零个字符的情况）<br><code>\w+</code>匹配一个或多个字母数字字符<br><code>[\w.]</code>匹配一个或多个（字母、数字、下划线和<code>.</code>）字符</li><li>匹配零个或多个字符<br><code>*</code>的用法和<code>+</code>完全一样，用来匹配连续出现零次或多次的情况<br>匹配<code>*</code>本身：<code>\*</code></li><li>匹配零个或一个字符<br><code>?</code>只能匹配<code>?</code>前一个字符（或字符集合）的零次或一次出现</li><li>匹配的重复次数<br>重复次数（interval）要用<code>{</code>和<code>}</code>字符来给出，把重复次数数值写在它们之间。<br>为重复次数设定一个精确的值：<code>#[a-fA-F0-9]{6}</code><br>为重复匹配次数设定一个区间：<code>[\d]{2, 4}</code>，连续出现最少2个最多4个数字<br>重复次数可以是0：<code>[\d]{0, 3}</code>，表示重复次数可以是0、1、2、3<br><code>[\d]{3, }</code>：表示必须重复3次或者更多次</li><li>防止过度匹配<br><code>*</code>和<code>+</code>都是所谓的“贪婪型”元字符<br>懒惰性元字符：只要给贪婪型元字符加上一个<code>?</code>后缀即可<br>匹配图片地址链接：<code>http.+?\.jpg|png</code><br>常用的贪婪型元字符和它们的懒惰性版本：</li></ol><table><thead><tr><th>贪婪新元字符</th><th>懒惰性元字符</th></tr></thead><tbody><tr><td><code>*</code></td><td><code>*?</code></td></tr><tr><td><code>+</code></td><td><code>+?</code></td></tr><tr><td><code>{n, }</code></td><td><code>{n, }?</code></td></tr><tr><td>懒惰性元字符：就近原则</td><td></td></tr></tbody></table><h3 id="位置匹配"><a href="#位置匹配" class="headerlink" title="位置匹配"></a>位置匹配</h3><ol><li>单词边界<br><code>\b</code>：单词边界的限定符，用来匹配一个单词的开头或结尾。<br>位置：一个能够用来构成单词的字符（字母、数字和下划线，也就是与<code>\w</code>相匹配的字符）和一个不能用来构成单词的字符（也就是与<code>\W</code>相匹配的字符）之间。<br><code>\B</code>：表明不匹配一个单词边界。<br>匹配前后多余空格的连字符：<code>\B-\B</code>：<code>color - coded</code>其中的<code>-</code></li><li>字符串边界<br>用来定义字符串边界的元字符有两个：一个用来定义字符串开头的<code>^</code>，一个用来定义字符串结尾的<code>$</code>。<br>匹配合法的<code>XML</code>文档：<code>^\s*&lt;?xml.*\?&gt;</code><br>匹配一份<code>Web</code>页面的末尾：<code>&lt;[Hh][Tt][Mm][Ll]&gt;\s*$</code></li><li>分行匹配模式<br><code>(?m)</code>：分行匹配模式（multiline mode），使用时，必须出现在整个模式的最前面。<br>匹配一段<code>JavaScript</code>代码里的所有注释内容：<code>(?m)\s*//.*$</code></li></ol><h3 id="使用子表达式"><a href="#使用子表达式" class="headerlink" title="使用子表达式"></a>使用子表达式</h3><ol><li>子表达式<br><code>(&amp;nbsp;){2, }</code>：匹配两个以上“不是换行符的空格”。<br>子表达式必须用<code>(</code>和<code>)</code>括起来。<br><code>|</code>：或操作<br><code>19|20</code>：匹配数字序列<code>19</code>或<code>20</code></li><li>子表达式的嵌套<br>子表达式允许嵌套<br>有句话需要牢记：<em>把必须匹配的情况考虑周全并写出一个匹配结果符合预期的正则表达式很容易，但把不需要匹配的情况也考虑周全并确保它们被排除在匹配结果以外往往要困难得多。</em><br>匹配IP：<code>(((\d{1,2})|(1\d{2})|(2[0-4]\d)|(23[0-5]))\.){3}(\d{1,2})|(1\d{2})|(2[0-4]\d)|(23[0-5]))</code></li></ol><h3 id="回溯引用：前后一致匹配"><a href="#回溯引用：前后一致匹配" class="headerlink" title="回溯引用：前后一致匹配"></a><strong>回溯引用：前后一致匹配</strong></h3><ol><li><p>回溯引用匹配<br>模式的后半部分引用在前半部分中定义的子表达式<br><code>[ ]+(\w+)[ ]+\1</code>：<code>\1</code>代表模式里的第一个子表达式<br><code>&lt;[Hh]([1-6])&gt;(.*?)&lt;/[Hh]\1&gt;</code>：匹配HTML文件中所有的标题<br>回溯引用匹配通畅从1开始计数（<code>\1</code>、<code>\2</code>等）。在许多实现里，第0个匹配（<code>\0</code>）可以用来代表整个正则表达式。</p></li><li><p>回溯引用在替换操作中的应用<br>替换操作需要用到两个正则表达式：一个用来给出搜索模式，另一个用来给出匹配文本的替换模式。<br>回溯引用可以跨模式使用，在第一个模式里被匹配的子表达式可以用在第二个模式里。<br>把一段文本里的电子邮件地址全部转换为可点击：<code>Hello, shadow000902@gmail.com is my email address.</code></p><pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 匹配出电子邮件地址</span></span><br><span class="line">(\w+[\w.]*@[\w\.]+\w+)</span><br><span class="line"><span class="comment"># 替换</span></span><br><span class="line">&lt;A HREF=<span class="string">"mailto:<span class="variable">$1</span>"</span>&gt;<span class="variable">$1</span>&lt;/A&gt;</span><br></pre></td></tr></table></figure></code></pre><p>结果：<code>Hello, &lt;A HREF=&quot;mailto:shadow000902@gmail.com&quot;&gt;shadow000902@gmail.com&lt;/A&gt; is my email address.</code><br>回溯引用语法在不同的正则表达式实现里有很大差异：JavaScript用户需要用<code>$</code>来替换<code>\</code>；ColdFusion用户在查找和替换操作里都必须使用<code>\</code>。<br>同一个子表达式可以被多次引用，只要在需要它的地方写出回溯引用就行了。<br>在对文本进行重新排版的时候，把文本分解成多个子表达式的做法往往非常有用，这可以让我们对文本的排版效果做出更精确的控制。<br><strong>回溯应用实例</strong></p><pre><code>对目录下的文件在``/usr/bin``目录下创建软连接

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home/bin</span><br><span class="line">ll | awk &#123;<span class="string">'print $9'</span>&#125;</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">appletviewer</span><br><span class="line">extcheck</span><br><span class="line">idlj</span><br><span class="line">jar</span><br><span class="line">jarsigner</span><br><span class="line">java</span><br><span class="line">javac</span><br><span class="line">javadoc</span><br><span class="line">javafxpackager</span><br><span class="line">javah</span><br><span class="line">javap</span><br></pre></td></tr></table></figure>

正则表达式语句

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 匹配一段内容</span></span><br><span class="line">(.+)\n</span><br><span class="line"><span class="comment"># 替换</span></span><br><span class="line">/Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home/bin/<span class="variable">$1</span> /usr/bin/<span class="variable">$1</span>\n</span><br><span class="line"><span class="comment"># 在原文中替换的正则语句（不可用。。。）</span></span><br><span class="line">sed -ig <span class="string">"s/(.+)\n//Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home/bin/<span class="variable">$1</span> /usr/bin/<span class="variable">$1</span>\n/g"</span> <span class="variable">$file_name</span></span><br></pre></td></tr></table></figure></code></pre></li></ol><ol start="3"><li>大小写转换<br>用来进行大小写转换的元字符</li></ol><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td><code>\E</code></td><td>结束<code>\L</code>或<code>\U</code>转换</td></tr><tr><td><code>\l</code></td><td>把下一个字符转换为小写</td></tr><tr><td><code>\L</code></td><td>把<code>\L</code>和<code>\E</code>之间的字符全部转换为小写</td></tr><tr><td><code>\u</code></td><td>把下一个字符转换为大写</td></tr><tr><td><code>\U</code></td><td>把<code>\U</code>和<code>\E</code>之间的字符全部转换为大写</td></tr></tbody></table><p>把HTML文件中的一级标题（<code>&lt;H1&gt;...&lt;/H&gt;</code>）的标题文字转换为大写：</p><pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 匹配出一级标题</span></span><br><span class="line">(&lt;[Hh]1&gt;)(.*?)(&lt;/[Hh]1&gt;)</span><br><span class="line"><span class="comment"># 替换</span></span><br><span class="line"><span class="variable">$1</span>\U<span class="variable">$2</span>\E<span class="variable">$3</span></span><br></pre></td></tr></table></figure></code></pre><h3 id="前后查找"><a href="#前后查找" class="headerlink" title="前后查找"></a>前后查找</h3><ol><li>向前查找<br>向前查找指定了一个必须匹配但不在结果中返回的模式<br>一个向前查找模式：其实就是一个以<code>?=</code>开头的子表达式，需要匹配的文本跟在<code>=</code>之后。<br><code>.+(?=:)</code>：匹配出<code>http://www.baidu.com</code>中的<code>http</code>，匹配出了<code>:</code>，但是并没有展示出来<br>向前查找（和向后查找）匹配本身其实是有返回结果的，只是这个结果的字节长度永远是<code>0</code>而已。因此，前后查找操作有时也被称为零宽度（<code>zero-width</code>）匹配操作。<br>在同一个搜索模式里，可以使用多个向前查找表达式。</li><li>向后查找<br><code>?&lt;=</code>：向后查找操作符。查找出现在被匹配文本之前的字符（但不消费它）。<br><code>(?&lt;=\$)[0-9.]+</code>：匹配出<code>ABC01: $23.45</code>中的<code>23.45</code>，但不匹配出<code>01</code>。<code>(?&lt;=\$)</code>只匹配出来<code>$</code>，但不消费它。</li><li>把向前查找和向后查找结合起来🔥<br><code>(?&lt;=\&lt;[Tt][Ii][Tt][Ll][Ee]&gt;).*(?&lt;=&lt;/[Tt][Ii][Tt][Ll][Ee]&gt;)</code>：匹配出<code>&lt;TITLE&gt;I AM TAOYI.&lt;/TITLE&gt;</code>中的<code>I AM TAOYI.</code><br><code>(?&lt;= ).+?(?=\=)</code>：匹配出<code>spuId= skuId=</code>中的<code>spuId</code>、<code>skuId</code><br><code>(?&lt;=\=).+?(?&lt;= )</code>：匹配出<code>spuId=${spuId} skuId=${skuId}</code>中的<code>${spuId}</code>、<code>${skuId}</code>，当然，也可以使用<code>\$\{.+?\}</code>匹配出来相似的结果。<br><code>(?&lt;=data-url=&quot;)(.+)(?&lt;=&quot;&gt;)</code>：匹配出<code>data-url=&quot;http://tool.lu/&quot;&gt;</code>中的<code>http://tool.lu/</code><br><code>(?&lt;=border-for-item&quot; title=&quot;)(.+)(?&lt;=&quot;)</code>：匹配出<code>class=&quot;border-for-item&quot; title=&quot;站长工具&quot;</code>中的<code>站长工具</code></li><li>对前后查找取非<br>前后查找必须用<code>!</code>来取非（它将替换掉<code>=</code>）<br>各种前后查找操作符</li></ol><table><thead><tr><th>操作符</th><th>说明</th></tr></thead><tbody><tr><td><code>(?=)</code></td><td>正向前查找</td></tr><tr><td><code>(?!)</code></td><td>反向前查找</td></tr><tr><td><code>(?&lt;=)</code></td><td>正向后查找</td></tr><tr><td><code>(?&lt;!)</code></td><td>反向后查找</td></tr></tbody></table><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>1.<code>json</code>转<code>PostMan``bulk Edit</code>格式</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;?\n\s*<span class="string">"([^"</span>]+)<span class="string">"\s*:\s*"</span>?([^,<span class="string">"]+)"</span>?\s*,?&#125;?</span><br><span class="line"><span class="variable">$1</span>:<span class="variable">$2</span>\n</span><br></pre></td></tr></table></figure><ol start="2"><li><code>charles</code>抓包<code>Request</code>中的<code>Form</code>参数中的<code>\t</code>和<code>\n</code>转化为字符形式的<code>\t</code>和<code>\n</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(.*)[\t](.*)\n</span><br><span class="line"><span class="variable">$1</span>\\t<span class="variable">$2</span>\\n</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>Robot-Framework移动自动化测试初识</title>
    <url>/2016/05/08/2016-05-08-Robot-Framework-mobile-automation-test-first-knowledge/</url>
    <content><![CDATA[<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ol><li><p>安装好robotframework、wxPython、robotframework-ride、robotframework-appiumlibrary</p></li><li><p>安装并配置好了Appium运行环境</p><a id="more"></a></li></ol><h3 id="认识ride"><a href="#认识ride" class="headerlink" title="认识ride"></a>认识ride</h3><ol><li>ride主界面<img src="/2016/05/08/2016-05-08-Robot-Framework-mobile-automation-test-first-knowledge/ride%E4%B8%BB%E7%95%8C%E9%9D%A2.png" title="ride主界面"> <img src="/2016/05/08/2016-05-08-Robot-Framework-mobile-automation-test-first-knowledge/%E6%B5%8B%E8%AF%95%E5%A5%97%E4%BB%B6%E8%AE%BE%E7%BD%AE.png" title="测试套件设置"></li></ol><h3 id="编写简单的robotframework测试用例"><a href="#编写简单的robotframework测试用例" class="headerlink" title="编写简单的robotframework测试用例"></a>编写简单的robotframework测试用例</h3><img src="/2016/05/08/2016-05-08-Robot-Framework-mobile-automation-test-first-knowledge/%E7%99%BB%E5%BD%95%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B.png" title="登录测试用例"><h3 id="后续巩固点"><a href="#后续巩固点" class="headerlink" title="后续巩固点"></a>后续巩固点</h3><ol><li>元素定位</li><li>Settings中的各个设置项学习及使用</li><li>测试用例的管理</li><li>还有更多目前没有接触到的</li></ol>]]></content>
      <categories>
        <category>RobotFramework</category>
      </categories>
      <tags>
        <tag>robot-framework</tag>
      </tags>
  </entry>
  <entry>
    <title>Postman测试</title>
    <url>/2016/04/18/2016-04-18-Postman-Test/</url>
    <content><![CDATA[<h3 id="postman录制web接口请求"><a href="#postman录制web接口请求" class="headerlink" title="postman录制web接口请求"></a>postman录制web接口请求</h3><ol><li>在chrome中安装插件Interceptor，设置如图：</li></ol><img src="/2016/04/18/2016-04-18-Postman-Test/chrome%E4%B8%ADInterceptor%E8%AE%BE%E7%BD%AE.png" title="chrome中Interceptor设置"><a id="more"></a><ol start="2"><li><p>在postman中设置如图：</p><img src="/2016/04/18/2016-04-18-Postman-Test/Postman%E4%B8%ADInterceptor%E8%AE%BE%E7%BD%AE.png" title="Postman中Interceptor设置"></li><li><p>设置好之后，在chrome中请求接口，就会录制到postman的history中，如图：</p><img src="/2016/04/18/2016-04-18-Postman-Test/%E5%BD%95%E5%88%B6%E4%B8%8B%E7%9A%84web%E8%AF%B7%E6%B1%82.png" title="录制下的web请求"><p>录制好的请求就可以“save to collection”，以便后续测试使用。</p></li></ol><h3 id="postman基本功能"><a href="#postman基本功能" class="headerlink" title="postman基本功能"></a>postman基本功能</h3><img src="/2016/04/18/2016-04-18-Postman-Test/postman%E7%95%8C%E9%9D%A2%E4%BB%8B%E7%BB%8D.png" title="postman界面介绍"><ol><li>Collections：在Postman中，Collection类似文件夹，可以把同一个项目的请求放在一个Collection里方便管理和分享，Collection里面也可以再建文件夹。如果做API文档的话，可以每个API对应一条请求，如果要把各种输入都测到的话，就需要每条测试一条请求了。这里我新建了一个example用于介绍整个流程，五个API对应五条请求。这个Collection可以通过<a href="https://www.getpostman.com/collections/96b64a7c604072e1e4ee导入你自己的Postman中。" target="_blank" rel="noopener">https://www.getpostman.com/collections/96b64a7c604072e1e4ee导入你自己的Postman中。</a></li><li>上面的黑字注册是请求的名字，如果有Request description的话会显示在这下面。下面的蓝字是保存起来的请求结果，点击可以载入某次请求的参数和返回值。我会用这个功能给做客户端的同事展示不同情况下的各种返回值。保存请求的按钮在15.</li><li>选择HTTP Method的地方，各种常见的不常见的非常全。</li><li>请求URL，两层大括号表示这是一个环境变量，可以在16的位置选择当前的environment，环境变量就会被替换成该environment里variable的值。</li><li>点击可以设置URL参数的key和value</li><li>点击发送请求</li><li>点击保存请求到Collection，如果要另存为的话，可以点击右边的下箭头</li><li>设置鉴权参数，可以用OAuth之类的</li><li>自定义HTTP Header，有些因为Chrome愿意不能自定义的需要另外装一个插件Interceptor，在16上面一行的卫星那里</li><li>设置Request body，13那里显示的就是body的内容</li><li>在发起请求之前执行的脚本，例如request body里的那两个random变量，就是每次请求之前临时生成的。</li><li>在收到response之后执行的测试，测试的结果会显示在17的位置</li><li>有四种形式可以选择，form-data主要用于上传文件。x-www-form-urlencoded是表单常用的格式。raw可以用来上传JSON数据</li><li>返回数据的格式，Pretty可以看到格式化后的JSON，Raw就是未经处理的数据，Preview可以预览HTML页面</li><li>点击这里把请求保存到2的位置</li><li>设置environment variables和global variables，点击右边的x可以快速查看当前的变量。</li><li>测试执行的结果，一共几个测试，通过几个。<br>这个界面就是免费版的主要内容，和其他API测试工具相比，已经足够好用。如果要使用自动化测试，需要购买9.99美金的Jetpacks，暂时不想购买的话可以试一下Team版Postman。现在是可以免费试用的，不但拥有Jetpacks的功能，还能与其他账户同步Collection。</li></ol><h3 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具"></a>测试工具</h3><p>测试工具主要包括三部分，在发起请求之前运行的Pre-request，在收到应答之后运行的Test，和一次运行所有请求的Collection Runner</p><h4 id="Pre-request"><a href="#Pre-request" class="headerlink" title="Pre-request"></a>Pre-request</h4><img src="/2016/04/18/2016-04-18-Postman-Test/Pre-request%E7%95%8C%E9%9D%A2.png" title="Pre-request界面"><p>Pre-request和Test用的语言都是JavaScript，Postman在一个沙盒里执行代码，提供给用户的库和函数可以在这里查看。而常用的功能都可以通过右边的Code Snippets实现，点击就可以插入到代码区域。<br>可以看到Pre-request里常用的功能就两种，（设置/清除）环境变量和全局变量。这条请求的pre-request就是在注册之前生成一个字符串作为随机用户名。<br>postman.setEnvironmentVariable(“random_username”, (“0000” + (Math.random()*Math.pow(36,4) &lt;&lt; 0).toString(36)).slice(-4));<br>其他用法还包括在发起请求之前获取当前的时间戳放在参数里：<br>postman.setEnvironmentVariable(“unixtime_now”, Math.round(newDate().getTime()/1000));<br>当然也可以用来生成校验串。总之，在发请求之前需要手动修改的东西，都可以考虑用脚本自动实现。</p><h4 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h4><img src="/2016/04/18/2016-04-18-Postman-Test/Test%E7%95%8C%E9%9D%A2.png" title="Test界面"><p>和Pre-request相比，Test的Snippets就丰富多了，例如检查状态码、检查响应串、验证JSON、检查header、限制应答时间。<br>如果需要将服务器响应的数据保存下来，用在后面的请求里，也需要在这一步做。<br>在图中的Test里，我首先检查了状态码为200，然后解析返回的JSON，把环境变量里的token设为JSON里的token。</p><h4 id="Collection-Runner"><a href="#Collection-Runner" class="headerlink" title="Collection Runner"></a>Collection Runner</h4><p>当编写了很多测试之后，就可以使用Collection Runner来自动运行整个Collection了，入口就在主界面最上面一行的Runner。选好Collection、Environment，如果有需要还可以载入JSON和CSV作为数据源。点击Start Test Run，就可以看到结果了。</p><img src="/2016/04/18/2016-04-18-Postman-Test/Collection-Runner%E7%95%8C%E9%9D%A2.png" title="Collection-Runner界面"><p>这里可以看到一共发起了5次请求，每个请求各有一个Test，全部Pass。（虽然最后一个请求的返回是403，但是这个请求的期望返回值就是403，所以也是Pass的）</p><hr><p>P.S.postmanexample.sinaapp.com这个网站是真实存在的，可以Import我上传的Collection(<a href="https://www.getpostman.com/collections/96b64a7c604072e1e4ee)到你自己的Postman中，并设置环境变量url为http://postmanexample.sinaapp.com/index.php，就能运行这个Collection看效果了。" target="_blank" rel="noopener">https://www.getpostman.com/collections/96b64a7c604072e1e4ee)到你自己的Postman中，并设置环境变量url为http://postmanexample.sinaapp.com/index.php，就能运行这个Collection看效果了。</a></p><h3 id="导入及导出collection"><a href="#导入及导出collection" class="headerlink" title="导入及导出collection"></a>导入及导出collection</h3><p>postman中生成的测试用例集可以进行导入和导出操作，还能从别人分享的链接导入测试用例集。</p><h4 id="导出collection"><a href="#导出collection" class="headerlink" title="导出collection"></a>导出collection</h4><p>在测试集文件夹的菜单按钮里，可以看到下载的按钮，还有分享按钮，分享会生成一条链接（<a href="https://www.getpostman.com/collections/6a0bf29198d978afa069）" target="_blank" rel="noopener">https://www.getpostman.com/collections/6a0bf29198d978afa069）</a></p><h4 id="导入collection"><a href="#导入collection" class="headerlink" title="导入collection"></a>导入collection</h4><img src="/2016/04/18/2016-04-18-Postman-Test/%E5%AF%BC%E5%85%A5collection.png" title="导入collection"><p>可以从文件导入，也可以从别人分享的链接导入测试用例集。</p><h3 id="读取本地文件参数化-Runner-执行-TC"><a href="#读取本地文件参数化-Runner-执行-TC" class="headerlink" title="读取本地文件参数化 Runner 执行 TC"></a>读取本地文件参数化 <code>Runner</code> 执行 TC</h3><ol><li>参数获取<br>利用<code>Pre-request Script</code>模块 <img src="/2016/04/18/2016-04-18-Postman-Test/Pre-request_Script%E5%8F%82%E6%95%B0%E5%8C%96%E8%AF%BB%E5%8F%96%E8%AE%BE%E7%BD%AE.png" title="Pre-request_Script参数化读取设置"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm.environment.set(<span class="string">"skuId"</span>, data.skuId);</span><br></pre></td></tr></table></figure></li><li>本地参数文件准备<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">skuId,demo</span><br><span class="line">1111111111,demo1</span><br><span class="line">2222222222,demo2</span><br><span class="line">3333333333,demo3</span><br><span class="line">...</span><br></pre></td></tr></table></figure>第一个为文件头，用来定义字段名称,第一点中取值就以此为依据。</li><li>请求参数编写<br>取值从 <code>Pre-request Script</code> 中获取 <img src="/2016/04/18/2016-04-18-Postman-Test/Body%E4%B8%AD%E8%B0%83%E7%94%A8%E5%AE%8C%E6%88%90%E8%B5%8B%E5%80%BC.png" title="Body中调用完成赋值"></li><li><code>Runner</code>TC<br>在<code>Postman</code>主页面点击左上角的<code>Runner</code>，打开``窗口 <img src="/2016/04/18/2016-04-18-Postman-Test/Collection_Runner.png" title="Collection_Runner"></li><li>结果检查<br>得到结果，检查执行情况，当然，可以在 TC 的<code>Test</code> 中添加断言</li></ol>]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>postman</tag>
      </tags>
  </entry>
  <entry>
    <title>Robot-Framework测试环境搭建</title>
    <url>/2016/05/06/2016-05-06-Robot-Framework-test-environment-construction/</url>
    <content><![CDATA[<h3 id="安装python环境。"><a href="#安装python环境。" class="headerlink" title="安装python环境。"></a>安装python环境。</h3><p>由于Robot Framework是基于python2开发的，所以必须选择安装python2版本，不然会造成很多异常，之后需要的一些依赖python2的库也无法安装。这里我选择安装的是<a href="https://www.continuum.io/downloads" target="_blank" rel="noopener">Anaconda2</a>，它自身就包含较多的python库，比较好用。</p><a id="more"></a><h3 id="安装Appium。如果安装过程中遇到问题，还请看Appium安装"><a href="#安装Appium。如果安装过程中遇到问题，还请看Appium安装" class="headerlink" title="安装Appium。如果安装过程中遇到问题，还请看Appium安装"></a>安装Appium。如果安装过程中遇到问题，还请看<a href="http://shadow000902.space/2016/03/31/Appium安装/">Appium安装</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install appium -g</span><br></pre></td></tr></table></figure><h3 id="安装Robot-Framework"><a href="#安装Robot-Framework" class="headerlink" title="安装Robot Framework"></a>安装Robot Framework</h3><h4 id="源码安装。下载地址"><a href="#源码安装。下载地址" class="headerlink" title="源码安装。下载地址"></a>源码安装。<a href="https://pypi.python.org/pypi/robotframework" target="_blank" rel="noopener">下载地址</a></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> .../robotframework/</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure><h4 id="通过pip安装"><a href="#通过pip安装" class="headerlink" title="通过pip安装"></a>通过pip安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install robotframework</span><br></pre></td></tr></table></figure><h3 id="安装wxPython。下载地址"><a href="#安装wxPython。下载地址" class="headerlink" title="安装wxPython。下载地址"></a>安装wxPython。<a href="http://www.wxpython.org/download.php" target="_blank" rel="noopener">下载地址</a></h3><h4 id="windows环境：exe文件，正常安装"><a href="#windows环境：exe文件，正常安装" class="headerlink" title="windows环境：exe文件，正常安装"></a>windows环境：exe文件，正常安装</h4><h4 id="mac环境：brew安装，修改源码"><a href="#mac环境：brew安装，修改源码" class="headerlink" title="mac环境：brew安装，修改源码"></a><strong>mac环境</strong>：<code>brew</code>安装，修改源码</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install wxpython                   <span class="comment"># 使用Homebrew安装wxpython</span></span><br></pre></td></tr></table></figure><p>对于<code>wxPython</code>的版本控制语句存在于<code>/Library/Python/2.7/site-packages/robotide/__init__.py</code>文件中</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> Template</span><br><span class="line"></span><br><span class="line">errorMessageTemplate = Template(<span class="string">"""$reason</span></span><br><span class="line"><span class="string">You need to install wxPython 2.8.12.1 with unicode support to run RIDE.</span></span><br><span class="line"><span class="string"> 36 wxPython 2.8.12.1 can be downloaded from http://sourceforge.net/projects/wxpython/files/wxPython/2.8.12.1/"""</span>)</span><br><span class="line">supported_versions = [<span class="string">"2.8"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> wxversion</span><br><span class="line">    <span class="keyword">from</span> wxversion <span class="keyword">import</span> VersionError</span><br><span class="line">    <span class="keyword">if</span> sys.platform == <span class="string">'darwin'</span>:</span><br><span class="line">        supported_versions.append(<span class="string">"2.9"</span>)</span><br><span class="line">        supported_versions.append(<span class="string">"3.0"</span>)            <span class="comment"># 新增该代码，让ride支持wxpython3.0</span></span><br><span class="line">    wxversion.select(supported_versions)</span><br><span class="line">    <span class="keyword">import</span> wx</span><br></pre></td></tr></table></figure><h3 id="查看-wxpython-是否在环境变量中"><a href="#查看-wxpython-是否在环境变量中" class="headerlink" title="查看 wxpython 是否在环境变量中"></a>查看 wxpython 是否在环境变量中</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew info wxpython</span><br></pre></td></tr></table></figure><p>这说明正常</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TYMAC in ~ [1:57:29] C:1</span></span><br><span class="line">$ brew info wxpython</span><br><span class="line">wxpython: stable 3.0.2.0 (bottled)</span><br><span class="line">Python bindings <span class="keyword">for</span> wxWidgets</span><br><span class="line">https://www.wxwidgets.org/</span><br><span class="line">/usr/<span class="built_in">local</span>/Cellar/wxpython/3.0.2.0_1 (1,108 files, 37.9MB) *</span><br><span class="line">  Poured from bottle on 2018-09-05 at 01:53:47</span><br><span class="line">From: https://github.com/Homebrew/homebrew-core/blob/master/Formula/wxpython.rb</span><br><span class="line">==&gt; Dependencies</span><br><span class="line">Required: python@2 ✔, wxmac ✔</span><br></pre></td></tr></table></figure><h3 id="安装ride。"><a href="#安装ride。" class="headerlink" title="安装ride。"></a>安装ride。</h3><p>RIDE 是<code>Robot Framework</code>测试数据的编辑器。它使测试用例的创建、运行、测试项目的组织可以在图形界面下完成。</p><h4 id="源码安装。下载地址-1"><a href="#源码安装。下载地址-1" class="headerlink" title="源码安装。下载地址"></a>源码安装。<a href="https://pypi.python.org/pypi/robotframework-ride" target="_blank" rel="noopener">下载地址</a></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> .../robotframework-ride/</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure><h4 id="通过pip安装-1"><a href="#通过pip安装-1" class="headerlink" title="通过pip安装"></a>通过pip安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install robotframework-ride</span><br></pre></td></tr></table></figure><p>最新版本<code>1.5.2.1</code>可能会出现闪退的问题，那就需要降级，先卸载该版本，然后下载<code>1.5.2</code>版本</p><h3 id="命令行启动ride"><a href="#命令行启动ride" class="headerlink" title="命令行启动ride"></a>命令行启动ride</h3><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>定位到ride安装的位置，<code>C:\Anaconda2\Scripts\</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python ride.py</span><br></pre></td></tr></table></figure><h4 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h4><p>ride.py已经自动加入到了环境变量下面<br>可以直接通过运行<code>ride.py</code>执行</p><h3 id="安装robotframework-appiumlibrary"><a href="#安装robotframework-appiumlibrary" class="headerlink" title="安装robotframework-appiumlibrary"></a>安装robotframework-appiumlibrary</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install robotframework-appiumlibrary</span><br></pre></td></tr></table></figure><h3 id="安装robotframework-selenium2library"><a href="#安装robotframework-selenium2library" class="headerlink" title="安装robotframework-selenium2library"></a>安装robotframework-selenium2library</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install robotframework-selenium2library</span><br></pre></td></tr></table></figure><h3 id="Mac-下-pkg-安装-Python2-7，启动-ride-py"><a href="#Mac-下-pkg-安装-Python2-7，启动-ride-py" class="headerlink" title="Mac 下 pkg 安装 Python2.7，启动 ride.py"></a>Mac 下 pkg 安装 Python2.7，启动 ride.py</h3><p>Mac 下 pkg 安装 Python2.7 的情况下，pip 快捷目录为<code>/usr/local/bin/pip</code>，也就是<code>/Library/Frameworks/Python.framework/Versions/2.7/bin/pip</code>对应的软连接的位置的文件，对应的第三方库安装位置为<code>/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/</code>。<br>然后通过<code>/usr/local/bin/pip install robotframework-ride==1.5.2</code>来安装<code>ride.py</code>，再通过<code>brew</code>来安装<code>wxpython</code>，最后就能通过<code>/Library/Frameworks/Python.framework/Versions/2.7/bin/ride.py</code>来启动<code>ride.py</code>，如果<code>/usr/local/bin/ride.py</code>没有生成的话。</p><h3 id="Mac下一定能成功启动ride的方法"><a href="#Mac下一定能成功启动ride的方法" class="headerlink" title="Mac下一定能成功启动ride的方法"></a><strong>Mac下一定能成功启动ride的方法</strong></h3><h4 id="brew-安装-python-2和python"><a href="#brew-安装-python-2和python" class="headerlink" title="brew 安装 python@2和python"></a>brew 安装 python@2和python</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install python@2</span><br><span class="line">brew install python</span><br></pre></td></tr></table></figure><p>如果检查系统中存在用安装包安装过的python，则全部删除干净，包括<code>/usr/local/bin</code>目录下存在的和python相关的所有软链和硬链<br>然后用上述命令安装好python，同时就会在<code>/usr/local/bin</code>目录下新增对应的软链命令。</p><h4 id="安装-wxpython"><a href="#安装-wxpython" class="headerlink" title="安装 wxpython"></a>安装 wxpython</h4><p>首先使用brew来安装wxpython</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install wxpython</span><br></pre></td></tr></table></figure><p>后面会说到，如果不行的话，就需要用pip来安装wxpython</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用指定的pip来安装wxpython</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/pip3 install wxpython</span><br></pre></td></tr></table></figure><p>该命令安装的是python3支持的ride，后面会说</p><h4 id="安装ride"><a href="#安装ride" class="headerlink" title="安装ride"></a>安装ride</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 由于默认情况下会安装1.7.3.1版本，该版本在mac下会报pywin32不存在的问题，怀疑这个版本是只支持Windows系统的，所以安装如下版本</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/pip3 install robotframework-ride==1.7.3</span><br></pre></td></tr></table></figure><p>正常情况下，按照如上的步骤，ride是一定能够启动的</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/bin/ride.py</span><br></pre></td></tr></table></figure><h4 id="解释下为啥都用绝对路径来调用命令，而不是使用比如pip3"><a href="#解释下为啥都用绝对路径来调用命令，而不是使用比如pip3" class="headerlink" title="解释下为啥都用绝对路径来调用命令，而不是使用比如pip3"></a>解释下为啥都用绝对路径来调用命令，而不是使用比如<code>pip3</code></h4><p>原因是，可能我们安装了虚拟环境，且虚拟环境在环境变量初始化的时候被提前了，这样就不会去寻找<code>/usr/local/bin</code>目录下的命令，可以使用which命令确认一下<br>如果which命令显示的就是<code>/usr/local/bin</code>目录下的命令，那就可以直接调用，不需要使用绝对路径访问了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TyMac in ~ [0:12:56] </span></span><br><span class="line">$ <span class="built_in">which</span> ride.py </span><br><span class="line">/Users/taoyi/.pyenv/shims/ride.py</span><br></pre></td></tr></table></figure><p>这种情况就需要使用<code>/usr/local/bin/ride.py</code>来启动ride</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TyMac in ~ [0:13:00] </span></span><br><span class="line">$ <span class="built_in">which</span> ride.py</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/ride.py</span><br></pre></td></tr></table></figure><p>这种情况就只需要使用<code>ride.py</code>来启动ride</p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><h4 id="遇到ride无法启动的问题【Windows】"><a href="#遇到ride无法启动的问题【Windows】" class="headerlink" title="遇到ride无法启动的问题【Windows】"></a>遇到ride无法启动的问题【Windows】</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Python 2.7.11 |Anaconda 4.0.0 (64-bit)| (default, Feb 16 2016, 09:58:36) [MSC v.1500 64 bit (AMD64)] on win32</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">Anaconda is brought to you by Continuum Analytics.</span><br><span class="line">Please check out: http://continuum.io/thanks and https://anaconda.org</span><br><span class="line">&gt;&gt;&gt; from robotide import main</span><br><span class="line">wxPython not found.</span><br><span class="line">You need to install wxPython 2.8 toolkit with unicode support to run RIDE.</span><br><span class="line">wxPython 2.8.12.1 can be downloaded from</span><br><span class="line">http://sourceforge.net/projects/wxpython/files/wxPython/2.8.12.1/</span><br></pre></td></tr></table></figure><p>安装的ride是基于wxPython 2.8.12.1 编译的，所以就需要安装 wxPython 2.8.12.1。</p><p>还有另一个问题，可能会遇到ride界面工具crash的问题<br>需要删除<code>.robotframework</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -rf ~/.robotframework/</span><br></pre></td></tr></table></figure><h4 id="mac-强制安装-wxpython2-8-12-1-或-wxpython3-0-2-0"><a href="#mac-强制安装-wxpython2-8-12-1-或-wxpython3-0-2-0" class="headerlink" title="mac 强制安装 wxpython2.8.12.1 或 wxpython3.0.2.0"></a>mac 强制安装 wxpython2.8.12.1 或 wxpython3.0.2.0</h4><ol><li>下载<a href="https://sourceforge.net/projects/wxpython/files/wxPython/2.8.12.1/wxPython2.8-osx-unicode-2.8.12.1-universal-py2.7.dmg/download" target="_blank" rel="noopener">wxPython2.8-osx-unicode-2.8.12.1-universal-py2.7.dmg</a></li><li>下载<a href="https://nchc.dl.sourceforge.net/project/wxpython/wxPython/3.0.2.0/wxPython3.0-osx-3.0.2.0-cocoa-py2.7.dmg" target="_blank" rel="noopener">wxPython3.0-osx-3.0.2.0-cocoa-py2.7.dmg (36.0 MB)</a></li><li>打开得到<code>wxPython2.8-osx-unicode-universal-py2.7.pkg</code>；右键显示包内容，再得到<code>wxPython2.8-osx-unicode-universal-py2.7.pax.gz</code>和<code>postflight</code>；解压<code>wxPython2.8-osx-unicode-universal-py2.7.pax.gz</code>，再得到<code>/usr/local/lib/wxPython-unicode-2.8.12.1</code>，把该文件夹放入系统的<code>/usr/local/lib/</code>中，切换到<code>postflight</code>目录，运行命令<code>sudo ./postflight</code>，安装好wxpython2.8.12.1。</li><li>执行<code>ride.py</code>提示：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python should be executed <span class="keyword">in</span> 32-bit mode with wxPython on OSX.</span><br></pre></td></tr></table></figure>是因为wxpython是32位的，而我们安装的是64位的。<br>输入以下命令强制执行32位：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.versioner.python Prefer-32-Bit -bool yes</span><br></pre></td></tr></table></figure></li></ol><h4 id="ride-一次使用后再次打开崩溃的问题"><a href="#ride-一次使用后再次打开崩溃的问题" class="headerlink" title="ride 一次使用后再次打开崩溃的问题"></a>ride 一次使用后再次打开崩溃的问题</h4><p>因为用<code>pip install robotframework-ride</code>安装的<code>ride</code>是1.5.2.1版本，会出现这个问题，所以安装指定的1.5.2版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install robotframework-ride==1.5.2</span><br></pre></td></tr></table></figure><h4 id="切换使用pyenv来管理python环境后，ride-py无法启动"><a href="#切换使用pyenv来管理python环境后，ride-py无法启动" class="headerlink" title="切换使用pyenv来管理python环境后，ride.py无法启动"></a>切换使用<code>pyenv</code>来管理python环境后，<code>ride.py</code>无法启动</h4><p>因为安装的<code>ride.py</code>在启动时，调用了虚拟环境的<code>python</code>，但是虚拟环境的python无法启动GUI界面，所以如果需要使用<code>ride.py</code>的GUI界面，就需要从系统python安装的<code>ride.py</code>去启动。<br>这样就需要使用系统的<code>pip</code>，也就是<code>/usr/local/bin/</code>目录下的<code>pip</code>来安装<code>ride.py</code>。<br>然后通过<code>/usr/local/bin/ride.py</code>来启动<code>ride.py</code>。</p><h4 id="wxpython-缺失问题解决"><a href="#wxpython-缺失问题解决" class="headerlink" title="wxpython 缺失问题解决"></a>wxpython 缺失问题解决</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TYMAC in ~/Desktop [21:22:36]</span></span><br><span class="line">$ /usr/<span class="built_in">local</span>/bin/ride.py</span><br><span class="line">Wrong wxPython version.</span><br><span class="line">You need to install wxPython 2.8.12.1 with unicode support to run RIDE.</span><br><span class="line">wxPython 2.8.12.1 can be downloaded from http://sourceforge.net/projects/wxpython/files/wxPython/2.8.12.1/</span><br></pre></td></tr></table></figure><p>因为brew默认启用的地址为：/Users/taoyi/Library/Python/2.7/lib/python/site-packages/<br>后面的文件夹路径若没有则需要新建：mkdir -p /Users/taoyi/Library/Python/2.7/lib/python/site-packages<br>再执行：echo ‘import site; site.addsitedir(“/usr/local/lib/python2.7/site-packages”)’ &gt;&gt; /Users/taoyi/Library/Python/2.7/lib/python/site-packages/homebrew.pth</p><h4 id="ImportError-cannot-import-name-39-pub-39-问题解决"><a href="#ImportError-cannot-import-name-39-pub-39-问题解决" class="headerlink" title="ImportError: cannot import name &#39;pub&#39; 问题解决"></a><code>ImportError: cannot import name &#39;pub&#39;</code> 问题解决</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install pypubsub</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>环境搭建</category>
        <category>RobotFramework</category>
      </categories>
      <tags>
        <tag>robot-framework</tag>
      </tags>
  </entry>
  <entry>
    <title>Appium运行日志解析</title>
    <url>/2016/03/31/2016-03-31-Appium-running-log-parsing/</url>
    <content><![CDATA[<h3 id="Appium脚本-python代码-android-simple-py"><a href="#Appium脚本-python代码-android-simple-py" class="headerlink" title="Appium脚本/python代码     //android_simple.py"></a>Appium脚本/python代码 //android_simple.py</h3><a id="more"></a><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> appium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="comment"># Returns abs path relative to this file and not cwd</span></span><br><span class="line">PATH = <span class="keyword">lambda</span> p: os.path.abspath(</span><br><span class="line">    os.path.join(os.path.dirname(__file__), p)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleAndroidTests</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line">        desired_caps = &#123;&#125;</span><br><span class="line">        desired_caps[<span class="string">'platformName'</span>] = <span class="string">'Android'</span></span><br><span class="line">        desired_caps[<span class="string">'platformVersion'</span>] = <span class="string">'6.0'</span></span><br><span class="line">        desired_caps[<span class="string">'deviceName'</span>] = <span class="string">'Nexus 5'</span></span><br><span class="line">        desired_caps[<span class="string">'app'</span>] = PATH(</span><br><span class="line">            <span class="string">'../../../sample-code/apps/ApiDemos/bin/ApiDemos-debug.apk'</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self.driver = webdriver.Remote(<span class="string">'http://localhost:4723/wd/hub'</span>, desired_caps)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># end the session</span></span><br><span class="line">        self.driver.quit()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_find_elements</span><span class="params">(self)</span>:</span></span><br><span class="line">        el = self.driver.find_element_by_accessibility_id(<span class="string">'Graphics'</span>)</span><br><span class="line">        el.click()</span><br><span class="line">        el = self.driver.find_element_by_accessibility_id(<span class="string">'Arcs'</span>)</span><br><span class="line">        self.assertIsNotNone(el)</span><br><span class="line"></span><br><span class="line">        self.driver.back()</span><br><span class="line"></span><br><span class="line">        el = self.driver.find_element_by_accessibility_id(<span class="string">"App"</span>)</span><br><span class="line">        self.assertIsNotNone(el)</span><br><span class="line"></span><br><span class="line">        els = self.driver.find_elements_by_android_uiautomator(<span class="string">"new UiSelector().clickable(true)"</span>)</span><br><span class="line">        self.assertGreaterEqual(<span class="number">12</span>, len(els))</span><br><span class="line"></span><br><span class="line">        self.driver.find_element_by_android_uiautomator(<span class="string">'text("API Demos")'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_simple_actions</span><span class="params">(self)</span>:</span></span><br><span class="line">        el = self.driver.find_element_by_accessibility_id(<span class="string">'Graphics'</span>)</span><br><span class="line">        el.click()</span><br><span class="line"></span><br><span class="line">        el = self.driver.find_element_by_accessibility_id(<span class="string">'Arcs'</span>)</span><br><span class="line">        el.click()</span><br><span class="line"></span><br><span class="line">        self.driver.find_element_by_android_uiautomator(<span class="string">'new UiSelector().text("Graphics/Arcs")'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    suite = unittest.TestLoader().loadTestsFromTestCase(SimpleAndroidTests)</span><br><span class="line">    unittest.TextTestRunner(verbosity=<span class="number">2</span>).run(suite)</span><br></pre></td></tr></table></figure><h3 id="Appium运行日志解析"><a href="#Appium运行日志解析" class="headerlink" title="Appium运行日志解析"></a>Appium运行日志解析</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\Tao Yi\AppData\Roaming\npm\node_modules\.bin&gt;appium</span><br><span class="line">info: Welcome to Appium v1.4.16 (REV ae6877eff263066b26328d457bd285c0cc62430d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动REST http服务器，默认监听本地4723端口，用于接收客户端（Test Case+Selenium/Appium Driver)发过来的JSON格式的命令指示</span></span><br><span class="line">info: Appium REST http interface listener started on 0.0.0.0:4723</span><br><span class="line">info: Console LogLevel: debug</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据客户端提供的capabilities指示建立一个Android Sesision用于跟客户端保持后续通信</span></span><br><span class="line">info: --&gt; POST /wd/hub/session &#123;<span class="string">"desiredCapabilities"</span>:&#123;<span class="string">"platformVersion"</span>:<span class="string">"6.0"</span>,<span class="string">"app"</span>:<span class="string">"E:\\Appium\\sample-code\</span></span><br><span class="line"><span class="string">\apps\\ApiDemos\\bin\\ApiDemos-debug.apk"</span>,<span class="string">"platformName"</span>:<span class="string">"Android"</span>,<span class="string">"deviceName"</span>:<span class="string">"Nexus 5"</span>&#125;&#125;</span><br><span class="line">info: Client User-Agent string: Python-urllib/3.5</span><br><span class="line">info: [debug] No appActivity desired capability or server param. Parsing from apk.</span><br><span class="line">info: [debug] No appPackage desired capability or server param. Parsing from apk.</span><br><span class="line">info: [debug] Using <span class="built_in">local</span> app from desired caps: E:\Appium\sample-code\apps\ApiDemos\bin\ApiDemos-debug.apk</span><br><span class="line">info: [debug] Creating new appium session b3868a3e-3d5e-484a-8202-8b8612591e1b</span><br><span class="line">info: Starting android appium</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取jdk、adb信息</span></span><br><span class="line">info: [debug] Getting Java version</span><br><span class="line">info: Java version is: 1.8.0_45</span><br><span class="line">info: [debug] Checking whether adb is present</span><br><span class="line">info: [debug] Using adb from E:\android-sdk\platform-tools\adb.exe</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用工具“aapt dump badging ApiDemos-debug.apk"来获得ApiDemos-debug的packageName和launchable activityName，注意示例代码中是没有指定这个两个capabilities的</span></span><br><span class="line">info: [debug] Parsing package and activity from app manifest</span><br><span class="line">info: [debug] Checking whether aapt is present</span><br><span class="line">info: [debug] Using aapt from E:\android-sdk\build-tools\android-4.4W\aapt.exe</span><br><span class="line">info: [debug] Extracting package and launch activity from manifest.</span><br><span class="line">info: [debug] executing cmd: E:\android-sdk\build-tools\android-4.4W\aapt.exe dump badging E:\Appium\sample-co</span><br><span class="line">de\apps\ApiDemos\bin\ApiDemos-debug.apk</span><br><span class="line">info: [debug] badging package: io.appium.android.apis</span><br><span class="line">info: [debug] badging act: io.appium.android.apis.ApiDemos</span><br><span class="line">info: [debug] Parsed package and activity are: io.appium.android.apis/io.appium.android.apis.ApiDemos</span><br><span class="line">info: [debug] Using fast reset? <span class="literal">true</span></span><br><span class="line">info: [debug] Preparing device <span class="keyword">for</span> session</span><br><span class="line">info: [debug] Checking whether app is actually present</span><br><span class="line">info: Retrieving device</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始调用adb，找到连接上的设备，设置设备id</span></span><br><span class="line">info: [debug] Trying to find a connected android device</span><br><span class="line">info: [debug] Getting connected devices...</span><br><span class="line">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe devices</span><br><span class="line">info: [debug] 1 device(s) connected</span><br><span class="line">info: Found device 0721b62c00e1a31f</span><br><span class="line">info: [debug] Setting device id to 0721b62c00e1a31f</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待设备准备好响应命令</span></span><br><span class="line">info: [debug] Waiting <span class="keyword">for</span> device to be ready and to respond to shell commands (timeout = 5)</span><br><span class="line">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f <span class="built_in">wait</span>-for-device</span><br><span class="line">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f shell <span class="string">"echo 'ready'"</span></span><br><span class="line">info: [debug] Starting logcat capture</span><br><span class="line">info: [debug] Getting device API level</span><br><span class="line">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f shell <span class="string">"getprop ro.build</span></span><br><span class="line"><span class="string">.version.sdk"</span></span><br><span class="line">info: [debug] Device is at API Level 23</span><br><span class="line">info: Device API level is: 23</span><br><span class="line">info: [debug] Extracting strings <span class="keyword">for</span> language: default</span><br><span class="line">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f shell <span class="string">"getprop persist.</span></span><br><span class="line"><span class="string">sys.language"</span></span><br><span class="line">info: [debug] Current device persist.sys.language:</span><br><span class="line">info: [debug] java -jar <span class="string">"C:\Users\Tao Yi\AppData\Roaming\npm\node_modules\appium\node_modules\appium-adb\jars\</span></span><br><span class="line"><span class="string">appium_apk_tools.jar"</span> <span class="string">"stringsFromApk"</span> <span class="string">"E:\Appium\sample-code\apps\ApiDemos\bin\ApiDemos-debug.apk"</span> <span class="string">"C:\Users\</span></span><br><span class="line"><span class="string">Tao Yi\AppData\Local\Temp\io.appium.android.apis"</span></span><br><span class="line">info: [debug] Reading strings from converted strings.json</span><br><span class="line">info: [debug] Setting language to default</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将生成的apk属性信息文件strings.json存到了设备目录下</span></span><br><span class="line">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f push <span class="string">"C:\\Users\\Tao Yi</span></span><br><span class="line"><span class="string">\\AppData\\Local\\Temp\\io.appium.android.apis\\strings.json"</span> /data/<span class="built_in">local</span>/tmp</span><br><span class="line">info: [debug] Checking whether aapt is present</span><br><span class="line">info: [debug] Using aapt from E:\android-sdk\build-tools\android-4.4W\aapt.exe</span><br><span class="line">info: [debug] Retrieving process from manifest.</span><br><span class="line">info: [debug] executing cmd: E:\android-sdk\build-tools\android-4.4W\aapt.exe dump xmltree E:\Appium\sample-co</span><br><span class="line">de\apps\ApiDemos\bin\ApiDemos-debug.apk AndroidManifest.xml</span><br><span class="line">info: [debug] Set app process to: io.appium.android.apis</span><br><span class="line">info: [debug] Not uninstalling app since server not started with --full-reset</span><br><span class="line">info: [debug] Checking app cert <span class="keyword">for</span> E:\Appium\sample-code\apps\ApiDemos\bin\ApiDemos-debug.apk.</span><br><span class="line">info: [debug] executing cmd: java -jar <span class="string">"C:\Users\Tao Yi\AppData\Roaming\npm\node_modules\appium\node_modules\a</span></span><br><span class="line"><span class="string">ppium-adb\jars\verify.jar"</span> E:\Appium\sample-code\apps\ApiDemos\bin\ApiDemos-debug.apk</span><br><span class="line">info: [debug] App already signed.</span><br><span class="line">info: [debug] Zip-aligning E:\Appium\sample-code\apps\ApiDemos\bin\ApiDemos-debug.apk</span><br><span class="line">info: [debug] Checking whether zipalign is present</span><br><span class="line">info: [debug] Using zipalign from E:\android-sdk\build-tools\android-4.4W\zipalign.exe</span><br><span class="line">info: [debug] Zip-aligning apk.</span><br><span class="line">info: [debug] executing cmd: E:\android-sdk\build-tools\android-4.4W\zipalign.exe -f 4 E:\Appium\sample-code\a</span><br><span class="line">pps\ApiDemos\bin\ApiDemos-debug.apk <span class="string">"C:\Users\Tao Yi\AppData\Local\Temp\116231-12276-7u17bp\appium.tmp"</span></span><br><span class="line">info: [debug] MD5 <span class="keyword">for</span> app is 29649242b53e9a67ba855b067422713c</span><br><span class="line">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f shell <span class="string">"ls /data/local/t</span></span><br><span class="line"><span class="string">mp/29649242b53e9a67ba855b067422713c.apk"</span></span><br><span class="line">info: [debug] Getting install status <span class="keyword">for</span> io.appium.android.apis</span><br><span class="line">info: [debug] Getting device API level</span><br><span class="line">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f shell <span class="string">"getprop ro.build</span></span><br><span class="line"><span class="string">.version.sdk"</span></span><br><span class="line">info: [debug] Device is at API Level 23</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取这个apk安装情况</span></span><br><span class="line">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f shell <span class="string">"pm list packages</span></span><br><span class="line"><span class="string"> -3 io.appium.android.apis"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取的结果，apk已经安装</span></span><br><span class="line">info: [debug] App is installed</span><br><span class="line">info: App is already installed, resetting app</span><br><span class="line">info: [debug] Running fast reset (stop and clear)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止并且重置应用</span></span><br><span class="line">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f shell <span class="string">"am force-stop io</span></span><br><span class="line"><span class="string">.appium.android.apis"</span></span><br><span class="line">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f shell <span class="string">"pm clear io.appi</span></span><br><span class="line"><span class="string">um.android.apis"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立Appium Server到目标机器上的端口转发</span></span><br><span class="line">info: [debug] Forwarding system:4724 to device:4724</span><br><span class="line">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f forward tcp:4724 tcp:47</span><br><span class="line">24</span><br><span class="line"></span><br><span class="line"><span class="comment"># 往设备上push一个AppiumBootstrap.jar文件，这是目标机器上通过uiautomator工具（框架）运行的服务端，用于接受处理client端发送过来的命令</span></span><br><span class="line">info: [debug] Pushing appium bootstrap to device...</span><br><span class="line">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f push <span class="string">"C:\\Users\\Tao Yi</span></span><br><span class="line"><span class="string">\\AppData\\Roaming\\npm\\node_modules\\appium\\build\\android_bootstrap\\AppiumBootstrap.jar"</span> /data/<span class="built_in">local</span>/tmp/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 往设备上安装一个settings_apk-debug.apk文件</span></span><br><span class="line">info: [debug] Pushing settings apk to device...</span><br><span class="line">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f install <span class="string">"C:\Users\Tao Y</span></span><br><span class="line"><span class="string">i\AppData\Roaming\npm\node_modules\appium\build\settings_apk\settings_apk-debug.apk"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 往设备上安装一个unlock_apk-debug.apk文件</span></span><br><span class="line">info: [debug] Pushing unlock helper app to device...</span><br><span class="line">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f install <span class="string">"C:\Users\Tao Y</span></span><br><span class="line"><span class="string">i\AppData\Roaming\npm\node_modules\appium\build\unlock_apk\unlock_apk-debug.apk"</span></span><br><span class="line">info: Starting App</span><br><span class="line"></span><br><span class="line"><span class="comment"># kill掉所有的uiautomator进程，保证uiautomator没有在跑</span></span><br><span class="line">info: [debug] Attempting to <span class="built_in">kill</span> all <span class="string">'uiautomator'</span> processes</span><br><span class="line">info: [debug] Getting all processes with <span class="string">'uiautomator'</span></span><br><span class="line">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f shell <span class="string">"ps 'uiautomator'</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line">info: [debug] No matching processes found</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过adb把目标机器上的AppiumBootStrap跑起来</span></span><br><span class="line">info: [debug] Running bootstrap</span><br><span class="line">info: [debug] spawning: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f shell uiautomator runtest Ap</span><br><span class="line">piumBootstrap.jar -c io.appium.android.bootstrap.Bootstrap -e pkg io.appium.android.apis -e disableAndroidWatc</span><br><span class="line">hers <span class="literal">false</span></span><br><span class="line">info: [debug] [UIAUTOMATOR STDOUT] INSTRUMENTATION_STATUS: numtests=1</span><br><span class="line">info: [debug] [UIAUTOMATOR STDOUT] INSTRUMENTATION_STATUS: stream=</span><br><span class="line">info: [debug] [UIAUTOMATOR STDOUT] io.appium.android.bootstrap.Bootstrap:</span><br><span class="line">info: [debug] [UIAUTOMATOR STDOUT] INSTRUMENTATION_STATUS: id=UiAutomatorTestRunner</span><br><span class="line">info: [debug] [UIAUTOMATOR STDOUT] INSTRUMENTATION_STATUS: <span class="built_in">test</span>=testRunServer</span><br><span class="line">info: [debug] [UIAUTOMATOR STDOUT] INSTRUMENTATION_STATUS: class=io.appium.android.bootstrap.Bootstrap</span><br><span class="line">info: [debug] [UIAUTOMATOR STDOUT] INSTRUMENTATION_STATUS: current=1</span><br><span class="line">info: [debug] [UIAUTOMATOR STDOUT] INSTRUMENTATION_STATUS_CODE: 1</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Socket opened on port 4724</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Appium Socket Server Ready</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Loading json...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 唤醒设备</span></span><br><span class="line">info: [debug] Waking up device <span class="keyword">if</span> it<span class="string">'s not alive</span></span><br><span class="line"><span class="string">info: [debug] Pushing command to appium work queue: ["wake",&#123;&#125;]</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] json loading complete.</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Registered crash watchers.</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Client connected</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Got data from client: &#123;"cmd":"action","action":"wake","params":&#123;&#125;&#125;</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Got command of type ACTION</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Got command action: wake</span></span><br><span class="line"><span class="string">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f shell "dumpsys window"</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Returning result: &#123;"status":0,"value":true&#125;</span></span><br><span class="line"><span class="string">info: [debug] Screen already unlocked, continuing.</span></span><br><span class="line"><span class="string">info: [debug] Pushing command to appium work queue: ["getDataDir",&#123;&#125;]</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Got data from client: &#123;"cmd":"action","action":"getDataDir","params":&#123;&#125;&#125;</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Got command of type ACTION</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Got command action: getDataDir</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Returning result: &#123;"status":0,"value":"\/data\/local\/tmp"&#125;</span></span><br><span class="line"><span class="string">info: [debug] dataDir set to: /data/local/tmp</span></span><br><span class="line"><span class="string">info: [debug] Pushing command to appium work queue: ["compressedLayoutHierarchy",&#123;"compressLayout":false&#125;]</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Got data from client: &#123;"cmd":"action","action":"compressedLayoutHierarchy","</span></span><br><span class="line"><span class="string">params":&#123;"compressLayout":false&#125;&#125;</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Got command of type ACTION</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Got command action: compressedLayoutHierarchy</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 获取设备API版本</span></span><br><span class="line"><span class="string">info: [debug] Getting device API level</span></span><br><span class="line"><span class="string">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f shell "getprop ro.build</span></span><br><span class="line"><span class="string">.version.sdk"</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Returning result: &#123;"status":0,"value":false&#125;</span></span><br><span class="line"><span class="string">info: [debug] Device is at API Level 23</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 通过adb在目标机器上 Launch ApiDemos应用</span></span><br><span class="line"><span class="string">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f shell "am start -S -a a</span></span><br><span class="line"><span class="string">ndroid.intent.action.MAIN -c android.intent.category.LAUNCHER -f 0x10200000 -n io.appium.android.apis/io.appiu</span></span><br><span class="line"><span class="string">m.android.apis.ApiDemos"</span></span><br><span class="line"><span class="string">info: [debug] Waiting for pkg "io.appium.android.apis" and activity "io.appium.android.apis.ApiDemos" to be fo</span></span><br><span class="line"><span class="string">cused</span></span><br><span class="line"><span class="string">info: [debug] Getting focused package and activity</span></span><br><span class="line"><span class="string">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f shell "dumpsys window w</span></span><br><span class="line"><span class="string">indows"</span></span><br><span class="line"><span class="string">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f shell "getprop ro.build</span></span><br><span class="line"><span class="string">.version.release"</span></span><br><span class="line"><span class="string">info: [debug] Device is at release version 6.0</span></span><br><span class="line"><span class="string">info: [debug] Device launched! Ready for commands</span></span><br><span class="line"><span class="string">info: [debug] Setting command timeout to the default of 60 secs</span></span><br><span class="line"><span class="string">info: [debug] Appium session started with sessionId b3868a3e-3d5e-484a-8202-8b8612591e1b</span></span><br><span class="line"><span class="string">info: &lt;-- POST /wd/hub/session 303 30932.362 ms - 74</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 通知PC端目标应用已经在目标机器启动成功</span></span><br><span class="line"><span class="string">info: --&gt; GET /wd/hub/session/b3868a3e-3d5e-484a-8202-8b8612591e1b &#123;&#125;</span></span><br><span class="line"><span class="string">info: [debug] Responding to client with success: &#123;"status":0,"value":&#123;"platform":"LINUX","browserName":"Androi</span></span><br><span class="line"><span class="string">d","platformVersion":"6.0","webStorageEnabled":false,"takesScreenshot":true,"javascriptEnabled":true,"database</span></span><br><span class="line"><span class="string">Enabled":false,"networkConnectionEnabled":true,"locationContextEnabled":false,"warnings":&#123;&#125;,"desired":&#123;"platfo</span></span><br><span class="line"><span class="string">rmVersion":"6.0","app":"E:\\Appium\\sample-code\\apps\\ApiDemos\\bin\\ApiDemos-debug.apk","platformName":"Andr</span></span><br><span class="line"><span class="string">oid","deviceName":"Nexus 5"&#125;,"app":"E:\\Appium\\sample-code\\apps\\ApiDemos\\bin\\ApiDemos-debug.apk","platfor</span></span><br><span class="line"><span class="string">mName":"Android","deviceName":"0721b62c00e1a31f"&#125;,"sessionId":"b3868a3e-3d5e-484a-8202-8b8612591e1b"&#125;</span></span><br><span class="line"><span class="string">info: &lt;-- GET /wd/hub/session/b3868a3e-3d5e-484a-8202-8b8612591e1b 200 9.267 ms - 602 &#123;"status":0,"value":&#123;"pl</span></span><br><span class="line"><span class="string">atform":"LINUX","browserName":"Android","platformVersion":"6.0","webStorageEnabled":false,"takesScreenshot":tr</span></span><br><span class="line"><span class="string">ue,"javascriptEnabled":true,"databaseEnabled":false,"networkConnectionEnabled":true,"locationContextEnabled":f</span></span><br><span class="line"><span class="string">alse,"warnings":&#123;&#125;,"desired":&#123;"platformVersion":"6.0","app":"E:\\Appium\\sample-code\\apps\\ApiDemos\\bin\\Api</span></span><br><span class="line"><span class="string">Demos-debug.apk","platformName":"Android","deviceName":"Nexus 5"&#125;,"app":"E:\\Appium\\sample-code\\apps\\ApiDem</span></span><br><span class="line"><span class="string">os\\bin\\ApiDemos-debug.apk","platformName":"Android","deviceName":"0721b62c00e1a31f"&#125;,"sessionId":"b3868a3e-3</span></span><br><span class="line"><span class="string">d5e-484a-8202-8b8612591e1b"&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 定位菜单按钮：Bootstrap通过的UIAutomator的UISelector类根据Text获得菜单按钮的ID并返回给客户端</span></span><br><span class="line"><span class="string">info: --&gt; POST /wd/hub/session/b3868a3e-3d5e-484a-8202-8b8612591e1b/element &#123;"using":"accessibility id","sessi</span></span><br><span class="line"><span class="string">onId":"b3868a3e-3d5e-484a-8202-8b8612591e1b","value":"Graphics"&#125;</span></span><br><span class="line"><span class="string">info: [debug] Waiting up to 0ms for condition</span></span><br><span class="line"><span class="string">info: [debug] Pushing command to appium work queue: ["find",&#123;"strategy":"accessibility id","selector":"Graphic</span></span><br><span class="line"><span class="string">s","context":"","multiple":false&#125;]</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Got data from client: &#123;"cmd":"action","action":"find","params":&#123;"strategy":"</span></span><br><span class="line"><span class="string">accessibility id","selector":"Graphics","context":"","multiple":false&#125;&#125;</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Got command of type ACTION</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Got command action: find</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Finding Graphics using ACCESSIBILITY_ID with the contextId:  multiple: false</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Using: UiSelector[DESCRIPTION=Graphics, INSTANCE=0]</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Returning result: &#123;"status":0,"value":&#123;"ELEMENT":"1"&#125;&#125;</span></span><br><span class="line"><span class="string">info: [debug] Responding to client with success: &#123;"status":0,"value":&#123;"ELEMENT":"1"&#125;,"sessionId":"b3868a3e-3d5</span></span><br><span class="line"><span class="string">e-484a-8202-8b8612591e1b"&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># BootStrap执行“点击”命令</span></span><br><span class="line"><span class="string">info: &lt;-- POST /wd/hub/session/b3868a3e-3d5e-484a-8202-8b8612591e1b/element 200 344.090 ms - 87 &#123;"status":0,"v</span></span><br><span class="line"><span class="string">alue":&#123;"ELEMENT":"1"&#125;,"sessionId":"b3868a3e-3d5e-484a-8202-8b8612591e1b"&#125;</span></span><br><span class="line"><span class="string">info: --&gt; POST /wd/hub/session/b3868a3e-3d5e-484a-8202-8b8612591e1b/element/1/click &#123;"sessionId":"b3868a3e-3d5</span></span><br><span class="line"><span class="string">e-484a-8202-8b8612591e1b","id":"1"&#125;</span></span><br><span class="line"><span class="string">info: [debug] Pushing command to appium work queue: ["element:click",&#123;"elementId":"1"&#125;]</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Got data from client: &#123;"cmd":"action","action":"element:click","params":&#123;"el</span></span><br><span class="line"><span class="string">ementId":"1"&#125;&#125;</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Got command of type ACTION</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Got command action: click</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Returning result: &#123;"status":0,"value":true&#125;</span></span><br><span class="line"><span class="string">info: [debug] Responding to client with success: &#123;"status":0,"value":true,"sessionId":"b3868a3e-3d5e-484a-8202</span></span><br><span class="line"><span class="string">-8b8612591e1b"&#125;</span></span><br><span class="line"><span class="string">info: &lt;-- POST /wd/hub/session/b3868a3e-3d5e-484a-8202-8b8612591e1b/element/1/click 200 139.311 ms - 76 &#123;"stat</span></span><br><span class="line"><span class="string">us":0,"value":true,"sessionId":"b3868a3e-3d5e-484a-8202-8b8612591e1b"&#125;</span></span><br><span class="line"><span class="string">info: --&gt; POST /wd/hub/session/b3868a3e-3d5e-484a-8202-8b8612591e1b/element &#123;"using":"accessibility id","sessi</span></span><br><span class="line"><span class="string">onId":"b3868a3e-3d5e-484a-8202-8b8612591e1b","value":"Arcs"&#125;</span></span><br><span class="line"><span class="string">info: [debug] Waiting up to 0ms for condition</span></span><br><span class="line"><span class="string">info: [debug] Pushing command to appium work queue: ["find",&#123;"strategy":"accessibility id","selector":"Arcs","</span></span><br><span class="line"><span class="string">context":"","multiple":false&#125;]</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Got data from client: &#123;"cmd":"action","action":"find","params":&#123;"strategy":"</span></span><br><span class="line"><span class="string">accessibility id","selector":"Arcs","context":"","multiple":false&#125;&#125;</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Got command of type ACTION</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Got command action: find</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Finding Arcs using ACCESSIBILITY_ID with the contextId:  multiple: false</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Using: UiSelector[DESCRIPTION=Arcs, INSTANCE=0]</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Returning result: &#123;"status":0,"value":&#123;"ELEMENT":"2"&#125;&#125;</span></span><br><span class="line"><span class="string">info: [debug] Responding to client with success: &#123;"status":0,"value":&#123;"ELEMENT":"2"&#125;,"sessionId":"b3868a3e-3d5</span></span><br><span class="line"><span class="string">e-484a-8202-8b8612591e1b"&#125;</span></span><br><span class="line"><span class="string">info: &lt;-- POST /wd/hub/session/b3868a3e-3d5e-484a-8202-8b8612591e1b/element 200 766.030 ms - 87 &#123;"status":0,"v</span></span><br><span class="line"><span class="string">alue":&#123;"ELEMENT":"2"&#125;,"sessionId":"b3868a3e-3d5e-484a-8202-8b8612591e1b"&#125;</span></span><br><span class="line"><span class="string">info: --&gt; POST /wd/hub/session/b3868a3e-3d5e-484a-8202-8b8612591e1b/back &#123;"sessionId":"b3868a3e-3d5e-484a-8202</span></span><br><span class="line"><span class="string">-8b8612591e1b"&#125;</span></span><br><span class="line"><span class="string">info: [debug] Pushing command to appium work queue: ["pressBack"]</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Got data from client: &#123;"cmd":"action","action":"pressBack","params":&#123;&#125;&#125;</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Got command of type ACTION</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Got command action: pressBack</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Returning result: &#123;"status":0,"value":true&#125;</span></span><br><span class="line"><span class="string">info: [debug] Responding to client with success: &#123;"status":0,"value":true,"sessionId":"b3868a3e-3d5e-484a-8202</span></span><br><span class="line"><span class="string">-8b8612591e1b"&#125;</span></span><br><span class="line"><span class="string">info: &lt;-- POST /wd/hub/session/b3868a3e-3d5e-484a-8202-8b8612591e1b/back 200 1045.398 ms - 76 &#123;"status":0,"val</span></span><br><span class="line"><span class="string">ue":true,"sessionId":"b3868a3e-3d5e-484a-8202-8b8612591e1b"&#125;</span></span><br><span class="line"><span class="string">info: --&gt; POST /wd/hub/session/b3868a3e-3d5e-484a-8202-8b8612591e1b/element &#123;"using":"accessibility id","sessi</span></span><br><span class="line"><span class="string">onId":"b3868a3e-3d5e-484a-8202-8b8612591e1b","value":"App"&#125;</span></span><br><span class="line"><span class="string">info: [debug] Waiting up to 0ms for condition</span></span><br><span class="line"><span class="string">info: [debug] Pushing command to appium work queue: ["find",&#123;"strategy":"accessibility id","selector":"App","c</span></span><br><span class="line"><span class="string">ontext":"","multiple":false&#125;]</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Got data from client: &#123;"cmd":"action","action":"find","params":&#123;"strategy":"</span></span><br><span class="line"><span class="string">accessibility id","selector":"App","context":"","multiple":false&#125;&#125;</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Got command of type ACTION</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Got command action: find</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Finding App using ACCESSIBILITY_ID with the contextId:  multiple: false</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Using: UiSelector[DESCRIPTION=App, INSTANCE=0]</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Returning result: &#123;"status":0,"value":&#123;"ELEMENT":"3"&#125;&#125;</span></span><br><span class="line"><span class="string">info: [debug] Responding to client with success: &#123;"status":0,"value":&#123;"ELEMENT":"3"&#125;,"sessionId":"b3868a3e-3d5</span></span><br><span class="line"><span class="string">e-484a-8202-8b8612591e1b"&#125;</span></span><br><span class="line"><span class="string">info: &lt;-- POST /wd/hub/session/b3868a3e-3d5e-484a-8202-8b8612591e1b/element 200 39.881 ms - 87 &#123;"status":0,"va</span></span><br><span class="line"><span class="string">lue":&#123;"ELEMENT":"3"&#125;,"sessionId":"b3868a3e-3d5e-484a-8202-8b8612591e1b"&#125;</span></span><br><span class="line"><span class="string">info: --&gt; POST /wd/hub/session/b3868a3e-3d5e-484a-8202-8b8612591e1b/elements &#123;"using":"-android uiautomator","</span></span><br><span class="line"><span class="string">sessionId":"b3868a3e-3d5e-484a-8202-8b8612591e1b","value":"new UiSelector().clickable(true)"&#125;</span></span><br><span class="line"><span class="string">info: [debug] Waiting up to 0ms for condition</span></span><br><span class="line"><span class="string">info: [debug] Pushing command to appium work queue: ["find",&#123;"strategy":"-android uiautomator","selector":"new</span></span><br><span class="line"><span class="string"> UiSelector().clickable(true)","context":"","multiple":true&#125;]</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Got data from client: &#123;"cmd":"action","action":"find","params":&#123;"strategy":"</span></span><br><span class="line"><span class="string">-android uiautomator","selector":"new UiSelector().clickable(true)","context":"","multiple":true&#125;&#125;</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Got command of type ACTION</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Got command action: find</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Finding new UiSelector().clickable(true) using ANDROID_UIAUTOMATOR with the</span></span><br><span class="line"><span class="string">contextId:  multiple: true</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Parsing selector: new UiSelector().clickable(true)</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] UiSelector coerce type: boolean arg: true</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Using: UiSelector[CLICKABLE=true]</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] getElements selector:UiSelector[CLICKABLE=true]</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Element[] is null: (0)</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] getElements tmp selector:UiSelector[INSTANCE=0, CLICKABLE=true]</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Element[] is null: (1)</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] getElements tmp selector:UiSelector[INSTANCE=1, CLICKABLE=true]</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Element[] is null: (2)</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] getElements tmp selector:UiSelector[INSTANCE=2, CLICKABLE=true]</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Element[] is null: (3)</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] getElements tmp selector:UiSelector[INSTANCE=3, CLICKABLE=true]</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Element[] is null: (4)</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] getElements tmp selector:UiSelector[INSTANCE=4, CLICKABLE=true]</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Element[] is null: (5)</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] getElements tmp selector:UiSelector[INSTANCE=5, CLICKABLE=true]</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Element[] is null: (6)</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] getElements tmp selector:UiSelector[INSTANCE=6, CLICKABLE=true]</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Element[] is null: (7)</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] getElements tmp selector:UiSelector[INSTANCE=7, CLICKABLE=true]</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Element[] is null: (8)</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] getElements tmp selector:UiSelector[INSTANCE=8, CLICKABLE=true]</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Element[] is null: (9)</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] getElements tmp selector:UiSelector[INSTANCE=9, CLICKABLE=true]</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Element[] is null: (10)</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] getElements tmp selector:UiSelector[INSTANCE=10, CLICKABLE=true]</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Element[] is null: (11)</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] getElements tmp selector:UiSelector[INSTANCE=11, CLICKABLE=true]</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Element[] is null: (12)</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] getElements tmp selector:UiSelector[INSTANCE=12, CLICKABLE=true]</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Returning result: &#123;"status":0,"value":[&#123;"ELEMENT":"4"&#125;,&#123;"ELEMENT":"5"&#125;,&#123;"ELE</span></span><br><span class="line"><span class="string">MENT":"6"&#125;,&#123;"ELEMENT":"7"&#125;,&#123;"ELEMENT":"8"&#125;,&#123;"ELEMENT":"9"&#125;,&#123;"ELEMENT":"10"&#125;,&#123;"ELEMENT":"11"&#125;,&#123;"ELEMENT":"12"&#125;,</span></span><br><span class="line"><span class="string">&#123;"ELEMENT":"13"&#125;,&#123;"ELEMENT":"14"&#125;,&#123;"ELEMENT":"15"&#125;]&#125;</span></span><br><span class="line"><span class="string">info: [debug] Responding to client with success: &#123;"status":0,"value":[&#123;"ELEMENT":"4"&#125;,&#123;"ELEMENT":"5"&#125;,&#123;"ELEMEN</span></span><br><span class="line"><span class="string">T":"6"&#125;,&#123;"ELEMENT":"7"&#125;,&#123;"ELEMENT":"8"&#125;,&#123;"ELEMENT":"9"&#125;,&#123;"ELEMENT":"10"&#125;,&#123;"ELEMENT":"11"&#125;,&#123;"ELEMENT":"12"&#125;,&#123;"E</span></span><br><span class="line"><span class="string">LEMENT":"13"&#125;,&#123;"ELEMENT":"14"&#125;,&#123;"ELEMENT":"15"&#125;],"sessionId":"b3868a3e-3d5e-484a-8202-8b8612591e1b"&#125;</span></span><br><span class="line"><span class="string">info: &lt;-- POST /wd/hub/session/b3868a3e-3d5e-484a-8202-8b8612591e1b/elements 200 267.317 ms - 271 &#123;"status":0,</span></span><br><span class="line"><span class="string">"value":[&#123;"ELEMENT":"4"&#125;,&#123;"ELEMENT":"5"&#125;,&#123;"ELEMENT":"6"&#125;,&#123;"ELEMENT":"7"&#125;,&#123;"ELEMENT":"8"&#125;,&#123;"ELEMENT":"9"&#125;,&#123;"ELE</span></span><br><span class="line"><span class="string">MENT":"10"&#125;,&#123;"ELEMENT":"11"&#125;,&#123;"ELEMENT":"12"&#125;,&#123;"ELEMENT":"13"&#125;,&#123;"ELEMENT":"14"&#125;,&#123;"ELEMENT":"15"&#125;],"sessionId":</span></span><br><span class="line"><span class="string">"b3868a3e-3d5e-484a-8202-8b8612591e1b"&#125;</span></span><br><span class="line"><span class="string">info: --&gt; POST /wd/hub/session/b3868a3e-3d5e-484a-8202-8b8612591e1b/element &#123;"using":"-android uiautomator","s</span></span><br><span class="line"><span class="string">essionId":"b3868a3e-3d5e-484a-8202-8b8612591e1b","value":"text(\"API Demos\")"&#125;</span></span><br><span class="line"><span class="string">info: [debug] Waiting up to 0ms for condition</span></span><br><span class="line"><span class="string">info: [debug] Pushing command to appium work queue: ["find",&#123;"strategy":"-android uiautomator","selector":"tex</span></span><br><span class="line"><span class="string">t(\"API Demos\")","context":"","multiple":false&#125;]</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Got data from client: &#123;"cmd":"action","action":"find","params":&#123;"strategy":"</span></span><br><span class="line"><span class="string">-android uiautomator","selector":"text(\"API Demos\")","context":"","multiple":false&#125;&#125;</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Got command of type ACTION</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Got command action: find</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Finding text("API Demos") using ANDROID_UIAUTOMATOR with the contextId:  mul</span></span><br><span class="line"><span class="string">tiple: false</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Parsing selector: text("API Demos")</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] UiSelector coerce type: class java.lang.String arg: "API Demos"</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Using: UiSelector[TEXT=API Demos]</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Returning result: &#123;"status":0,"value":&#123;"ELEMENT":"16"&#125;&#125;</span></span><br><span class="line"><span class="string">info: [debug] Responding to client with success: &#123;"status":0,"value":&#123;"ELEMENT":"16"&#125;,"sessionId":"b3868a3e-3d</span></span><br><span class="line"><span class="string">5e-484a-8202-8b8612591e1b"&#125;</span></span><br><span class="line"><span class="string">info: &lt;-- POST /wd/hub/session/b3868a3e-3d5e-484a-8202-8b8612591e1b/element 200 21.357 ms - 88 &#123;"status":0,"va</span></span><br><span class="line"><span class="string">lue":&#123;"ELEMENT":"16"&#125;,"sessionId":"b3868a3e-3d5e-484a-8202-8b8612591e1b"&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 测试完成，删除session，目标机器模拟点击Home按钮把目标应用放在后台</span></span><br><span class="line"><span class="string">info: --&gt; DELETE /wd/hub/session/b3868a3e-3d5e-484a-8202-8b8612591e1b &#123;&#125;</span></span><br><span class="line"><span class="string">info: Shutting down appium session</span></span><br><span class="line"><span class="string">info: [debug] Pressing the HOME button</span></span><br><span class="line"><span class="string">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f shell "input keyevent 3"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 关闭logcat</span></span><br><span class="line"><span class="string">info: [debug] Stopping logcat capture</span></span><br><span class="line"><span class="string">info: [debug] Logcat terminated with code null, signal SIGTERM</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Got data from client: &#123;"cmd":"shutdown"&#125;</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Got command of type SHUTDOWN</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Returning result: &#123;"status":0,"value":"OK, shutting down"&#125;</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Closed client connection</span></span><br><span class="line"><span class="string">info: [debug] [UIAUTOMATOR STDOUT] INSTRUMENTATION_STATUS: numtests=1</span></span><br><span class="line"><span class="string">info: [debug] [UIAUTOMATOR STDOUT] INSTRUMENTATION_STATUS: stream=.</span></span><br><span class="line"><span class="string">info: [debug] [UIAUTOMATOR STDOUT] INSTRUMENTATION_STATUS: id=UiAutomatorTestRunner</span></span><br><span class="line"><span class="string">info: [debug] [UIAUTOMATOR STDOUT] INSTRUMENTATION_STATUS: test=testRunServer</span></span><br><span class="line"><span class="string">info: [debug] [UIAUTOMATOR STDOUT] INSTRUMENTATION_STATUS: class=io.appium.android.bootstrap.Bootstrap</span></span><br><span class="line"><span class="string">info: [debug] [UIAUTOMATOR STDOUT] INSTRUMENTATION_STATUS: current=1</span></span><br><span class="line"><span class="string">info: [debug] [UIAUTOMATOR STDOUT] INSTRUMENTATION_STATUS_CODE: 0</span></span><br><span class="line"><span class="string">info: [debug] [UIAUTOMATOR STDOUT] INSTRUMENTATION_STATUS: stream=</span></span><br><span class="line"><span class="string">info: [debug] [UIAUTOMATOR STDOUT] Test results for WatcherResultPrinter=.</span></span><br><span class="line"><span class="string">info: [debug] [UIAUTOMATOR STDOUT] Time: 5.738</span></span><br><span class="line"><span class="string">info: [debug] [UIAUTOMATOR STDOUT] OK (1 test)</span></span><br><span class="line"><span class="string">info: [debug] [UIAUTOMATOR STDOUT] INSTRUMENTATION_STATUS_CODE: -1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 关闭Uiautomator进程</span></span><br><span class="line"><span class="string">info: [debug] Sent shutdown command, waiting for UiAutomator to stop...</span></span><br><span class="line"><span class="string">info: [debug] UiAutomator shut down normally</span></span><br><span class="line"><span class="string">info: [debug] Cleaning up android objects</span></span><br><span class="line"><span class="string">info: [debug] Cleaning up appium session</span></span><br><span class="line"><span class="string">info: [debug] Responding to client with success: &#123;"status":0,"value":null,"sessionId":"b3868a3e-3d5e-484a-8202</span></span><br><span class="line"><span class="string">-8b8612591e1b"&#125;</span></span><br><span class="line"><span class="string">info: &lt;-- DELETE /wd/hub/session/b3868a3e-3d5e-484a-8202-8b8612591e1b 200 1101.263 ms - 76 &#123;"status":0,"value"</span></span><br><span class="line"><span class="string">:null,"sessionId":"b3868a3e-3d5e-484a-8202-8b8612591e1b"&#125;</span></span><br><span class="line"><span class="string"># 第一个test执行完毕，结束工作完毕</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">新的test开始执行</span></span><br><span class="line"><span class="string">info: --&gt; POST /wd/hub/session &#123;"desiredCapabilities":&#123;"platformVersion":"6.0","app":"E:\\Appium\\sample-code\</span></span><br><span class="line"><span class="string">\apps\\ApiDemos\\bin\\ApiDemos-debug.apk","platformName":"Android","deviceName":"Nexus 5"&#125;&#125;</span></span><br><span class="line"><span class="string">info: Client User-Agent string: Python-urllib/3.5</span></span><br><span class="line"><span class="string">info: [debug] No appActivity desired capability or server param. Parsing from apk.</span></span><br><span class="line"><span class="string">info: [debug] No appPackage desired capability or server param. Parsing from apk.</span></span><br><span class="line"><span class="string">info: [debug] Using local app from desired caps: E:\Appium\sample-code\apps\ApiDemos\bin\ApiDemos-debug.apk</span></span><br><span class="line"><span class="string">info: [debug] Creating new appium session 7da33fde-d7a2-4c56-89ad-21d3564cd8d4</span></span><br><span class="line"><span class="string">info: Starting android appium</span></span><br><span class="line"><span class="string">info: [debug] Getting Java version</span></span><br><span class="line"><span class="string">info: Java version is: 1.8.0_45</span></span><br><span class="line"><span class="string">info: [debug] Checking whether adb is present</span></span><br><span class="line"><span class="string">info: [debug] Using adb from E:\android-sdk\platform-tools\adb.exe</span></span><br><span class="line"><span class="string">info: [debug] Parsing package and activity from app manifest</span></span><br><span class="line"><span class="string">info: [debug] Checking whether aapt is present</span></span><br><span class="line"><span class="string">info: [debug] Using aapt from E:\android-sdk\build-tools\android-4.4W\aapt.exe</span></span><br><span class="line"><span class="string">info: [debug] Extracting package and launch activity from manifest.</span></span><br><span class="line"><span class="string">info: [debug] executing cmd: E:\android-sdk\build-tools\android-4.4W\aapt.exe dump badging E:\Appium\sample-co</span></span><br><span class="line"><span class="string">de\apps\ApiDemos\bin\ApiDemos-debug.apk</span></span><br><span class="line"><span class="string">info: [debug] badging package: io.appium.android.apis</span></span><br><span class="line"><span class="string">info: [debug] badging act: io.appium.android.apis.ApiDemos</span></span><br><span class="line"><span class="string">info: [debug] Parsed package and activity are: io.appium.android.apis/io.appium.android.apis.ApiDemos</span></span><br><span class="line"><span class="string">info: [debug] Using fast reset? true</span></span><br><span class="line"><span class="string">info: [debug] Preparing device for session</span></span><br><span class="line"><span class="string">info: [debug] Checking whether app is actually present</span></span><br><span class="line"><span class="string">info: Retrieving device</span></span><br><span class="line"><span class="string">info: [debug] Trying to find a connected android device</span></span><br><span class="line"><span class="string">info: [debug] Getting connected devices...</span></span><br><span class="line"><span class="string">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe devices</span></span><br><span class="line"><span class="string">info: [debug] 1 device(s) connected</span></span><br><span class="line"><span class="string">info: Found device 0721b62c00e1a31f</span></span><br><span class="line"><span class="string">info: [debug] Setting device id to 0721b62c00e1a31f</span></span><br><span class="line"><span class="string">info: [debug] Waiting for device to be ready and to respond to shell commands (timeout = 5)</span></span><br><span class="line"><span class="string">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f wait-for-device</span></span><br><span class="line"><span class="string">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f shell "echo '</span>ready<span class="string">'"</span></span><br><span class="line"><span class="string">info: [debug] Starting logcat capture</span></span><br><span class="line"><span class="string">info: [debug] Getting device API level</span></span><br><span class="line"><span class="string">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f shell "getprop ro.build</span></span><br><span class="line"><span class="string">.version.sdk"</span></span><br><span class="line"><span class="string">info: [debug] Device is at API Level 23</span></span><br><span class="line"><span class="string">info: Device API level is: 23</span></span><br><span class="line"><span class="string">info: [debug] Extracting strings for language: default</span></span><br><span class="line"><span class="string">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f shell "getprop persist.</span></span><br><span class="line"><span class="string">sys.language"</span></span><br><span class="line"><span class="string">info: [debug] Current device persist.sys.language:</span></span><br><span class="line"><span class="string">info: [debug] java -jar "C:\Users\Tao Yi\AppData\Roaming\npm\node_modules\appium\node_modules\appium-adb\jars\</span></span><br><span class="line"><span class="string">appium_apk_tools.jar" "stringsFromApk" "E:\Appium\sample-code\apps\ApiDemos\bin\ApiDemos-debug.apk" "C:\Users\</span></span><br><span class="line"><span class="string">Tao Yi\AppData\Local\Temp\io.appium.android.apis"</span></span><br><span class="line"><span class="string">info: [debug] Reading strings from converted strings.json</span></span><br><span class="line"><span class="string">info: [debug] Setting language to default</span></span><br><span class="line"><span class="string">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f push "C:\\Users\\Tao Yi</span></span><br><span class="line"><span class="string">\\AppData\\Local\\Temp\\io.appium.android.apis\\strings.json" /data/local/tmp</span></span><br><span class="line"><span class="string">info: [debug] Checking whether aapt is present</span></span><br><span class="line"><span class="string">info: [debug] Using aapt from E:\android-sdk\build-tools\android-4.4W\aapt.exe</span></span><br><span class="line"><span class="string">info: [debug] Retrieving process from manifest.</span></span><br><span class="line"><span class="string">info: [debug] executing cmd: E:\android-sdk\build-tools\android-4.4W\aapt.exe dump xmltree E:\Appium\sample-co</span></span><br><span class="line"><span class="string">de\apps\ApiDemos\bin\ApiDemos-debug.apk AndroidManifest.xml</span></span><br><span class="line"><span class="string">info: [debug] Set app process to: io.appium.android.apis</span></span><br><span class="line"><span class="string">info: [debug] Not uninstalling app since server not started with --full-reset</span></span><br><span class="line"><span class="string">info: [debug] Checking app cert for E:\Appium\sample-code\apps\ApiDemos\bin\ApiDemos-debug.apk.</span></span><br><span class="line"><span class="string">info: [debug] executing cmd: java -jar "C:\Users\Tao Yi\AppData\Roaming\npm\node_modules\appium\node_modules\a</span></span><br><span class="line"><span class="string">ppium-adb\jars\verify.jar" E:\Appium\sample-code\apps\ApiDemos\bin\ApiDemos-debug.apk</span></span><br><span class="line"><span class="string">info: [debug] App already signed.</span></span><br><span class="line"><span class="string">info: [debug] Zip-aligning E:\Appium\sample-code\apps\ApiDemos\bin\ApiDemos-debug.apk</span></span><br><span class="line"><span class="string">info: [debug] Checking whether zipalign is present</span></span><br><span class="line"><span class="string">info: [debug] Using zipalign from E:\android-sdk\build-tools\android-4.4W\zipalign.exe</span></span><br><span class="line"><span class="string">info: [debug] Zip-aligning apk.</span></span><br><span class="line"><span class="string">info: [debug] executing cmd: E:\android-sdk\build-tools\android-4.4W\zipalign.exe -f 4 E:\Appium\sample-code\a</span></span><br><span class="line"><span class="string">pps\ApiDemos\bin\ApiDemos-debug.apk "C:\Users\Tao Yi\AppData\Local\Temp\116231-12276-uqycx8\appium.tmp"</span></span><br><span class="line"><span class="string">info: [debug] MD5 for app is 29649242b53e9a67ba855b067422713c</span></span><br><span class="line"><span class="string">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f shell "ls /data/local/t</span></span><br><span class="line"><span class="string">mp/29649242b53e9a67ba855b067422713c.apk"</span></span><br><span class="line"><span class="string">info: [debug] Getting install status for io.appium.android.apis</span></span><br><span class="line"><span class="string">info: [debug] Getting device API level</span></span><br><span class="line"><span class="string">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f shell "getprop ro.build</span></span><br><span class="line"><span class="string">.version.sdk"</span></span><br><span class="line"><span class="string">info: [debug] Device is at API Level 23</span></span><br><span class="line"><span class="string">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f shell "pm list packages</span></span><br><span class="line"><span class="string"> -3 io.appium.android.apis"</span></span><br><span class="line"><span class="string">info: [debug] App is installed</span></span><br><span class="line"><span class="string">info: App is already installed, resetting app</span></span><br><span class="line"><span class="string">info: [debug] Running fast reset (stop and clear)</span></span><br><span class="line"><span class="string">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f shell "am force-stop io</span></span><br><span class="line"><span class="string">.appium.android.apis"</span></span><br><span class="line"><span class="string">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f shell "pm clear io.appi</span></span><br><span class="line"><span class="string">um.android.apis"</span></span><br><span class="line"><span class="string">info: [debug] Forwarding system:4724 to device:4724</span></span><br><span class="line"><span class="string">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f forward tcp:4724 tcp:47</span></span><br><span class="line"><span class="string">24</span></span><br><span class="line"><span class="string">info: [debug] Pushing appium bootstrap to device...</span></span><br><span class="line"><span class="string">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f push "C:\\Users\\Tao Yi</span></span><br><span class="line"><span class="string">\\AppData\\Roaming\\npm\\node_modules\\appium\\build\\android_bootstrap\\AppiumBootstrap.jar" /data/local/tmp/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">info: [debug] Pushing settings apk to device...</span></span><br><span class="line"><span class="string">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f install "C:\Users\Tao Y</span></span><br><span class="line"><span class="string">i\AppData\Roaming\npm\node_modules\appium\build\settings_apk\settings_apk-debug.apk"</span></span><br><span class="line"><span class="string">info: [debug] Pushing unlock helper app to device...</span></span><br><span class="line"><span class="string">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f install "C:\Users\Tao Y</span></span><br><span class="line"><span class="string">i\AppData\Roaming\npm\node_modules\appium\build\unlock_apk\unlock_apk-debug.apk"</span></span><br><span class="line"><span class="string">info: Starting App</span></span><br><span class="line"><span class="string">info: [debug] Attempting to kill all '</span>uiautomator<span class="string">' processes</span></span><br><span class="line"><span class="string">info: [debug] Getting all processes with '</span>uiautomator<span class="string">'</span></span><br><span class="line"><span class="string">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f shell "ps '</span>uiautomator<span class="string">'</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line"><span class="string">info: [debug] No matching processes found</span></span><br><span class="line"><span class="string">info: [debug] Running bootstrap</span></span><br><span class="line"><span class="string">info: [debug] spawning: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f shell uiautomator runtest Ap</span></span><br><span class="line"><span class="string">piumBootstrap.jar -c io.appium.android.bootstrap.Bootstrap -e pkg io.appium.android.apis -e disableAndroidWatc</span></span><br><span class="line"><span class="string">hers false</span></span><br><span class="line"><span class="string">info: [debug] [UIAUTOMATOR STDOUT] INSTRUMENTATION_STATUS: numtests=1</span></span><br><span class="line"><span class="string">info: [debug] [UIAUTOMATOR STDOUT] INSTRUMENTATION_STATUS: stream=</span></span><br><span class="line"><span class="string">info: [debug] [UIAUTOMATOR STDOUT] io.appium.android.bootstrap.Bootstrap:</span></span><br><span class="line"><span class="string">info: [debug] [UIAUTOMATOR STDOUT] INSTRUMENTATION_STATUS: id=UiAutomatorTestRunner</span></span><br><span class="line"><span class="string">info: [debug] [UIAUTOMATOR STDOUT] INSTRUMENTATION_STATUS: test=testRunServer</span></span><br><span class="line"><span class="string">info: [debug] [UIAUTOMATOR STDOUT] INSTRUMENTATION_STATUS: class=io.appium.android.bootstrap.Bootstrap</span></span><br><span class="line"><span class="string">info: [debug] [UIAUTOMATOR STDOUT] INSTRUMENTATION_STATUS: current=1</span></span><br><span class="line"><span class="string">info: [debug] [UIAUTOMATOR STDOUT] INSTRUMENTATION_STATUS_CODE: 1</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Socket opened on port 4724</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Appium Socket Server Ready</span></span><br><span class="line"><span class="string">info: [debug] [BOOTSTRAP] [debug] Loading json...</span></span><br><span class="line"><span class="string">info: [debug] Waking up device if it'</span>s not alive</span><br><span class="line">info: [debug] Pushing <span class="built_in">command</span> to appium work queue: [<span class="string">"wake"</span>,&#123;&#125;]</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] json loading complete.</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Registered crash watchers.</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Client connected</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Got data from client: &#123;<span class="string">"cmd"</span>:<span class="string">"action"</span>,<span class="string">"action"</span>:<span class="string">"wake"</span>,<span class="string">"params"</span>:&#123;&#125;&#125;</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Got <span class="built_in">command</span> of <span class="built_in">type</span> ACTION</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Got <span class="built_in">command</span> action: wake</span><br><span class="line">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f shell <span class="string">"dumpsys window"</span></span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Returning result: &#123;<span class="string">"status"</span>:0,<span class="string">"value"</span>:<span class="literal">true</span>&#125;</span><br><span class="line">info: [debug] Screen already unlocked, continuing.</span><br><span class="line">info: [debug] Pushing <span class="built_in">command</span> to appium work queue: [<span class="string">"getDataDir"</span>,&#123;&#125;]</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Got data from client: &#123;<span class="string">"cmd"</span>:<span class="string">"action"</span>,<span class="string">"action"</span>:<span class="string">"getDataDir"</span>,<span class="string">"params"</span>:&#123;&#125;&#125;</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Got <span class="built_in">command</span> of <span class="built_in">type</span> ACTION</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Got <span class="built_in">command</span> action: getDataDir</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Returning result: &#123;<span class="string">"status"</span>:0,<span class="string">"value"</span>:<span class="string">"\/data\/local\/tmp"</span>&#125;</span><br><span class="line">info: [debug] dataDir <span class="built_in">set</span> to: /data/<span class="built_in">local</span>/tmp</span><br><span class="line">info: [debug] Pushing <span class="built_in">command</span> to appium work queue: [<span class="string">"compressedLayoutHierarchy"</span>,&#123;<span class="string">"compressLayout"</span>:<span class="literal">false</span>&#125;]</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Got data from client: &#123;<span class="string">"cmd"</span>:<span class="string">"action"</span>,<span class="string">"action"</span>:<span class="string">"compressedLayoutHierarchy"</span>,<span class="string">"</span></span><br><span class="line"><span class="string">params"</span>:&#123;<span class="string">"compressLayout"</span>:<span class="literal">false</span>&#125;&#125;</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Got <span class="built_in">command</span> of <span class="built_in">type</span> ACTION</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Got <span class="built_in">command</span> action: compressedLayoutHierarchy</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Returning result: &#123;<span class="string">"status"</span>:0,<span class="string">"value"</span>:<span class="literal">false</span>&#125;</span><br><span class="line">info: [debug] Getting device API level</span><br><span class="line">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f shell <span class="string">"getprop ro.build</span></span><br><span class="line"><span class="string">.version.sdk"</span></span><br><span class="line">info: [debug] Device is at API Level 23</span><br><span class="line">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f shell <span class="string">"am start -S -a a</span></span><br><span class="line"><span class="string">ndroid.intent.action.MAIN -c android.intent.category.LAUNCHER -f 0x10200000 -n io.appium.android.apis/io.appiu</span></span><br><span class="line"><span class="string">m.android.apis.ApiDemos"</span></span><br><span class="line">info: [debug] Waiting <span class="keyword">for</span> pkg <span class="string">"io.appium.android.apis"</span> and activity <span class="string">"io.appium.android.apis.ApiDemos"</span> to be fo</span><br><span class="line">cused</span><br><span class="line">info: [debug] Getting focused package and activity</span><br><span class="line">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f shell <span class="string">"dumpsys window w</span></span><br><span class="line"><span class="string">indows"</span></span><br><span class="line">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f shell <span class="string">"getprop ro.build</span></span><br><span class="line"><span class="string">.version.release"</span></span><br><span class="line">info: [debug] Device is at release version 6.0</span><br><span class="line">info: [debug] Device launched! Ready <span class="keyword">for</span> commands</span><br><span class="line">info: [debug] Setting <span class="built_in">command</span> timeout to the default of 60 secs</span><br><span class="line">info: [debug] Appium session started with sessionId 7da33fde-d7a2-4c56-89ad-21d3564cd8d4</span><br><span class="line">info: &lt;-- POST /wd/hub/session 303 30301.492 ms - 74</span><br><span class="line">info: --&gt; GET /wd/hub/session/7da33fde-d7a2-4c56-89ad-21d3564cd8d4 &#123;&#125;</span><br><span class="line">info: [debug] Responding to client with success: &#123;<span class="string">"status"</span>:0,<span class="string">"value"</span>:&#123;<span class="string">"platform"</span>:<span class="string">"LINUX"</span>,<span class="string">"browserName"</span>:<span class="string">"Androi</span></span><br><span class="line"><span class="string">d"</span>,<span class="string">"platformVersion"</span>:<span class="string">"6.0"</span>,<span class="string">"webStorageEnabled"</span>:<span class="literal">false</span>,<span class="string">"takesScreenshot"</span>:<span class="literal">true</span>,<span class="string">"javascriptEnabled"</span>:<span class="literal">true</span>,<span class="string">"database</span></span><br><span class="line"><span class="string">Enabled"</span>:<span class="literal">false</span>,<span class="string">"networkConnectionEnabled"</span>:<span class="literal">true</span>,<span class="string">"locationContextEnabled"</span>:<span class="literal">false</span>,<span class="string">"warnings"</span>:&#123;&#125;,<span class="string">"desired"</span>:&#123;<span class="string">"platfo</span></span><br><span class="line"><span class="string">rmVersion"</span>:<span class="string">"6.0"</span>,<span class="string">"app"</span>:<span class="string">"E:\\Appium\\sample-code\\apps\\ApiDemos\\bin\\ApiDemos-debug.apk"</span>,<span class="string">"platformName"</span>:<span class="string">"Andr</span></span><br><span class="line"><span class="string">oid"</span>,<span class="string">"deviceName"</span>:<span class="string">"Nexus 5"</span>&#125;,<span class="string">"app"</span>:<span class="string">"E:\\Appium\\sample-code\\apps\\ApiDemos\\bin\\ApiDemos-debug.apk"</span>,<span class="string">"platfor</span></span><br><span class="line"><span class="string">mName"</span>:<span class="string">"Android"</span>,<span class="string">"deviceName"</span>:<span class="string">"0721b62c00e1a31f"</span>&#125;,<span class="string">"sessionId"</span>:<span class="string">"7da33fde-d7a2-4c56-89ad-21d3564cd8d4"</span>&#125;</span><br><span class="line">info: &lt;-- GET /wd/hub/session/7da33fde-d7a2-4c56-89ad-21d3564cd8d4 200 4.489 ms - 602 &#123;<span class="string">"status"</span>:0,<span class="string">"value"</span>:&#123;<span class="string">"pl</span></span><br><span class="line"><span class="string">atform"</span>:<span class="string">"LINUX"</span>,<span class="string">"browserName"</span>:<span class="string">"Android"</span>,<span class="string">"platformVersion"</span>:<span class="string">"6.0"</span>,<span class="string">"webStorageEnabled"</span>:<span class="literal">false</span>,<span class="string">"takesScreenshot"</span>:tr</span><br><span class="line">ue,<span class="string">"javascriptEnabled"</span>:<span class="literal">true</span>,<span class="string">"databaseEnabled"</span>:<span class="literal">false</span>,<span class="string">"networkConnectionEnabled"</span>:<span class="literal">true</span>,<span class="string">"locationContextEnabled"</span>:f</span><br><span class="line">alse,<span class="string">"warnings"</span>:&#123;&#125;,<span class="string">"desired"</span>:&#123;<span class="string">"platformVersion"</span>:<span class="string">"6.0"</span>,<span class="string">"app"</span>:<span class="string">"E:\\Appium\\sample-code\\apps\\ApiDemos\\bin\\Api</span></span><br><span class="line"><span class="string">Demos-debug.apk"</span>,<span class="string">"platformName"</span>:<span class="string">"Android"</span>,<span class="string">"deviceName"</span>:<span class="string">"Nexus 5"</span>&#125;,<span class="string">"app"</span>:<span class="string">"E:\\Appium\\sample-code\\apps\\ApiDem</span></span><br><span class="line"><span class="string">os\\bin\\ApiDemos-debug.apk"</span>,<span class="string">"platformName"</span>:<span class="string">"Android"</span>,<span class="string">"deviceName"</span>:<span class="string">"0721b62c00e1a31f"</span>&#125;,<span class="string">"sessionId"</span>:<span class="string">"7da33fde-d</span></span><br><span class="line"><span class="string">7a2-4c56-89ad-21d3564cd8d4"</span>&#125;</span><br><span class="line">info: --&gt; POST /wd/hub/session/7da33fde-d7a2-4c56-89ad-21d3564cd8d4/element &#123;<span class="string">"using"</span>:<span class="string">"accessibility id"</span>,<span class="string">"sessi</span></span><br><span class="line"><span class="string">onId"</span>:<span class="string">"7da33fde-d7a2-4c56-89ad-21d3564cd8d4"</span>,<span class="string">"value"</span>:<span class="string">"Graphics"</span>&#125;</span><br><span class="line">info: [debug] Waiting up to 0ms <span class="keyword">for</span> condition</span><br><span class="line">info: [debug] Pushing <span class="built_in">command</span> to appium work queue: [<span class="string">"find"</span>,&#123;<span class="string">"strategy"</span>:<span class="string">"accessibility id"</span>,<span class="string">"selector"</span>:<span class="string">"Graphic</span></span><br><span class="line"><span class="string">s"</span>,<span class="string">"context"</span>:<span class="string">""</span>,<span class="string">"multiple"</span>:<span class="literal">false</span>&#125;]</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Got data from client: &#123;<span class="string">"cmd"</span>:<span class="string">"action"</span>,<span class="string">"action"</span>:<span class="string">"find"</span>,<span class="string">"params"</span>:&#123;<span class="string">"strategy"</span>:<span class="string">"</span></span><br><span class="line"><span class="string">accessibility id"</span>,<span class="string">"selector"</span>:<span class="string">"Graphics"</span>,<span class="string">"context"</span>:<span class="string">""</span>,<span class="string">"multiple"</span>:<span class="literal">false</span>&#125;&#125;</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Got <span class="built_in">command</span> of <span class="built_in">type</span> ACTION</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Got <span class="built_in">command</span> action: find</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Finding Graphics using ACCESSIBILITY_ID with the contextId:  multiple: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Using: UiSelector[DESCRIPTION=Graphics, INSTANCE=0]</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Returning result: &#123;<span class="string">"status"</span>:0,<span class="string">"value"</span>:&#123;<span class="string">"ELEMENT"</span>:<span class="string">"1"</span>&#125;&#125;</span><br><span class="line">info: [debug] Responding to client with success: &#123;<span class="string">"status"</span>:0,<span class="string">"value"</span>:&#123;<span class="string">"ELEMENT"</span>:<span class="string">"1"</span>&#125;,<span class="string">"sessionId"</span>:<span class="string">"7da33fde-d7a</span></span><br><span class="line"><span class="string">2-4c56-89ad-21d3564cd8d4"</span>&#125;</span><br><span class="line">info: &lt;-- POST /wd/hub/session/7da33fde-d7a2-4c56-89ad-21d3564cd8d4/element 200 624.523 ms - 87 &#123;<span class="string">"status"</span>:0,<span class="string">"v</span></span><br><span class="line"><span class="string">alue"</span>:&#123;<span class="string">"ELEMENT"</span>:<span class="string">"1"</span>&#125;,<span class="string">"sessionId"</span>:<span class="string">"7da33fde-d7a2-4c56-89ad-21d3564cd8d4"</span>&#125;</span><br><span class="line">info: --&gt; POST /wd/hub/session/7da33fde-d7a2-4c56-89ad-21d3564cd8d4/element/1/click &#123;<span class="string">"sessionId"</span>:<span class="string">"7da33fde-d7a</span></span><br><span class="line"><span class="string">2-4c56-89ad-21d3564cd8d4"</span>,<span class="string">"id"</span>:<span class="string">"1"</span>&#125;</span><br><span class="line">info: [debug] Pushing <span class="built_in">command</span> to appium work queue: [<span class="string">"element:click"</span>,&#123;<span class="string">"elementId"</span>:<span class="string">"1"</span>&#125;]</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Got data from client: &#123;<span class="string">"cmd"</span>:<span class="string">"action"</span>,<span class="string">"action"</span>:<span class="string">"element:click"</span>,<span class="string">"params"</span>:&#123;<span class="string">"el</span></span><br><span class="line"><span class="string">ementId"</span>:<span class="string">"1"</span>&#125;&#125;</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Got <span class="built_in">command</span> of <span class="built_in">type</span> ACTION</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Got <span class="built_in">command</span> action: click</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Returning result: &#123;<span class="string">"status"</span>:0,<span class="string">"value"</span>:<span class="literal">true</span>&#125;</span><br><span class="line">info: [debug] Responding to client with success: &#123;<span class="string">"status"</span>:0,<span class="string">"value"</span>:<span class="literal">true</span>,<span class="string">"sessionId"</span>:<span class="string">"7da33fde-d7a2-4c56-89ad</span></span><br><span class="line"><span class="string">-21d3564cd8d4"</span>&#125;</span><br><span class="line">info: &lt;-- POST /wd/hub/session/7da33fde-d7a2-4c56-89ad-21d3564cd8d4/element/1/click 200 139.135 ms - 76 &#123;<span class="string">"stat</span></span><br><span class="line"><span class="string">us"</span>:0,<span class="string">"value"</span>:<span class="literal">true</span>,<span class="string">"sessionId"</span>:<span class="string">"7da33fde-d7a2-4c56-89ad-21d3564cd8d4"</span>&#125;</span><br><span class="line">info: --&gt; POST /wd/hub/session/7da33fde-d7a2-4c56-89ad-21d3564cd8d4/element &#123;<span class="string">"using"</span>:<span class="string">"accessibility id"</span>,<span class="string">"sessi</span></span><br><span class="line"><span class="string">onId"</span>:<span class="string">"7da33fde-d7a2-4c56-89ad-21d3564cd8d4"</span>,<span class="string">"value"</span>:<span class="string">"Arcs"</span>&#125;</span><br><span class="line">info: [debug] Waiting up to 0ms <span class="keyword">for</span> condition</span><br><span class="line">info: [debug] Pushing <span class="built_in">command</span> to appium work queue: [<span class="string">"find"</span>,&#123;<span class="string">"strategy"</span>:<span class="string">"accessibility id"</span>,<span class="string">"selector"</span>:<span class="string">"Arcs"</span>,<span class="string">"</span></span><br><span class="line"><span class="string">context"</span>:<span class="string">""</span>,<span class="string">"multiple"</span>:<span class="literal">false</span>&#125;]</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Got data from client: &#123;<span class="string">"cmd"</span>:<span class="string">"action"</span>,<span class="string">"action"</span>:<span class="string">"find"</span>,<span class="string">"params"</span>:&#123;<span class="string">"strategy"</span>:<span class="string">"</span></span><br><span class="line"><span class="string">accessibility id"</span>,<span class="string">"selector"</span>:<span class="string">"Arcs"</span>,<span class="string">"context"</span>:<span class="string">""</span>,<span class="string">"multiple"</span>:<span class="literal">false</span>&#125;&#125;</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Got <span class="built_in">command</span> of <span class="built_in">type</span> ACTION</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Got <span class="built_in">command</span> action: find</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Finding Arcs using ACCESSIBILITY_ID with the contextId:  multiple: <span class="literal">false</span></span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Using: UiSelector[DESCRIPTION=Arcs, INSTANCE=0]</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Returning result: &#123;<span class="string">"status"</span>:0,<span class="string">"value"</span>:&#123;<span class="string">"ELEMENT"</span>:<span class="string">"2"</span>&#125;&#125;</span><br><span class="line">info: [debug] Responding to client with success: &#123;<span class="string">"status"</span>:0,<span class="string">"value"</span>:&#123;<span class="string">"ELEMENT"</span>:<span class="string">"2"</span>&#125;,<span class="string">"sessionId"</span>:<span class="string">"7da33fde-d7a</span></span><br><span class="line"><span class="string">2-4c56-89ad-21d3564cd8d4"</span>&#125;</span><br><span class="line">info: &lt;-- POST /wd/hub/session/7da33fde-d7a2-4c56-89ad-21d3564cd8d4/element 200 740.757 ms - 87 &#123;<span class="string">"status"</span>:0,<span class="string">"v</span></span><br><span class="line"><span class="string">alue"</span>:&#123;<span class="string">"ELEMENT"</span>:<span class="string">"2"</span>&#125;,<span class="string">"sessionId"</span>:<span class="string">"7da33fde-d7a2-4c56-89ad-21d3564cd8d4"</span>&#125;</span><br><span class="line">info: --&gt; POST /wd/hub/session/7da33fde-d7a2-4c56-89ad-21d3564cd8d4/element/2/click &#123;<span class="string">"sessionId"</span>:<span class="string">"7da33fde-d7a</span></span><br><span class="line"><span class="string">2-4c56-89ad-21d3564cd8d4"</span>,<span class="string">"id"</span>:<span class="string">"2"</span>&#125;</span><br><span class="line">info: [debug] Pushing <span class="built_in">command</span> to appium work queue: [<span class="string">"element:click"</span>,&#123;<span class="string">"elementId"</span>:<span class="string">"2"</span>&#125;]</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Got data from client: &#123;<span class="string">"cmd"</span>:<span class="string">"action"</span>,<span class="string">"action"</span>:<span class="string">"element:click"</span>,<span class="string">"params"</span>:&#123;<span class="string">"el</span></span><br><span class="line"><span class="string">ementId"</span>:<span class="string">"2"</span>&#125;&#125;</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Got <span class="built_in">command</span> of <span class="built_in">type</span> ACTION</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Got <span class="built_in">command</span> action: click</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Returning result: &#123;<span class="string">"status"</span>:0,<span class="string">"value"</span>:<span class="literal">true</span>&#125;</span><br><span class="line">info: [debug] Responding to client with success: &#123;<span class="string">"status"</span>:0,<span class="string">"value"</span>:<span class="literal">true</span>,<span class="string">"sessionId"</span>:<span class="string">"7da33fde-d7a2-4c56-89ad</span></span><br><span class="line"><span class="string">-21d3564cd8d4"</span>&#125;</span><br><span class="line">info: &lt;-- POST /wd/hub/session/7da33fde-d7a2-4c56-89ad-21d3564cd8d4/element/2/click 200 130.684 ms - 76 &#123;<span class="string">"stat</span></span><br><span class="line"><span class="string">us"</span>:0,<span class="string">"value"</span>:<span class="literal">true</span>,<span class="string">"sessionId"</span>:<span class="string">"7da33fde-d7a2-4c56-89ad-21d3564cd8d4"</span>&#125;</span><br><span class="line">info: --&gt; POST /wd/hub/session/7da33fde-d7a2-4c56-89ad-21d3564cd8d4/element &#123;<span class="string">"using"</span>:<span class="string">"-android uiautomator"</span>,<span class="string">"s</span></span><br><span class="line"><span class="string">essionId"</span>:<span class="string">"7da33fde-d7a2-4c56-89ad-21d3564cd8d4"</span>,<span class="string">"value"</span>:<span class="string">"new UiSelector().text(\"Graphics/Arcs\")"</span>&#125;</span><br><span class="line">info: [debug] Waiting up to 0ms <span class="keyword">for</span> condition</span><br><span class="line">info: [debug] Pushing <span class="built_in">command</span> to appium work queue: [<span class="string">"find"</span>,&#123;<span class="string">"strategy"</span>:<span class="string">"-android uiautomator"</span>,<span class="string">"selector"</span>:<span class="string">"new</span></span><br><span class="line"><span class="string"> UiSelector().text(\"Graphics/Arcs\")"</span>,<span class="string">"context"</span>:<span class="string">""</span>,<span class="string">"multiple"</span>:<span class="literal">false</span>&#125;]</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Got data from client: &#123;<span class="string">"cmd"</span>:<span class="string">"action"</span>,<span class="string">"action"</span>:<span class="string">"find"</span>,<span class="string">"params"</span>:&#123;<span class="string">"strategy"</span>:<span class="string">"</span></span><br><span class="line"><span class="string">-android uiautomator"</span>,<span class="string">"selector"</span>:<span class="string">"new UiSelector().text(\"Graphics/Arcs\")"</span>,<span class="string">"context"</span>:<span class="string">""</span>,<span class="string">"multiple"</span>:<span class="literal">false</span>&#125;&#125;</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Got <span class="built_in">command</span> of <span class="built_in">type</span> ACTION</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Got <span class="built_in">command</span> action: find</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Finding new UiSelector().text(<span class="string">"Graphics/Arcs"</span>) using ANDROID_UIAUTOMATOR wit</span><br><span class="line">h the contextId:  multiple: <span class="literal">false</span></span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Parsing selector: new UiSelector().text(<span class="string">"Graphics/Arcs"</span>)</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] UiSelector coerce <span class="built_in">type</span>: class java.lang.String arg: <span class="string">"Graphics/Arcs"</span></span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Using: UiSelector[TEXT=Graphics/Arcs]</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Returning result: &#123;<span class="string">"status"</span>:0,<span class="string">"value"</span>:&#123;<span class="string">"ELEMENT"</span>:<span class="string">"3"</span>&#125;&#125;</span><br><span class="line">info: [debug] Responding to client with success: &#123;<span class="string">"status"</span>:0,<span class="string">"value"</span>:&#123;<span class="string">"ELEMENT"</span>:<span class="string">"3"</span>&#125;,<span class="string">"sessionId"</span>:<span class="string">"7da33fde-d7a</span></span><br><span class="line"><span class="string">2-4c56-89ad-21d3564cd8d4"</span>&#125;</span><br><span class="line">info: &lt;-- POST /wd/hub/session/7da33fde-d7a2-4c56-89ad-21d3564cd8d4/element 200 851.825 ms - 87 &#123;<span class="string">"status"</span>:0,<span class="string">"v</span></span><br><span class="line"><span class="string">alue"</span>:&#123;<span class="string">"ELEMENT"</span>:<span class="string">"3"</span>&#125;,<span class="string">"sessionId"</span>:<span class="string">"7da33fde-d7a2-4c56-89ad-21d3564cd8d4"</span>&#125;</span><br><span class="line">info: --&gt; DELETE /wd/hub/session/7da33fde-d7a2-4c56-89ad-21d3564cd8d4 &#123;&#125;</span><br><span class="line">info: Shutting down appium session</span><br><span class="line">info: [debug] Pressing the HOME button</span><br><span class="line">info: [debug] executing cmd: E:\android-sdk\platform-tools\adb.exe -s 0721b62c00e1a31f shell <span class="string">"input keyevent 3</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line">info: [debug] Stopping logcat capture</span><br><span class="line">info: [debug] Logcat terminated with code null, signal SIGTERM</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Got data from client: &#123;<span class="string">"cmd"</span>:<span class="string">"shutdown"</span>&#125;</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Got <span class="built_in">command</span> of <span class="built_in">type</span> SHUTDOWN</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Returning result: &#123;<span class="string">"status"</span>:0,<span class="string">"value"</span>:<span class="string">"OK, shutting down"</span>&#125;</span><br><span class="line">info: [debug] [BOOTSTRAP] [debug] Closed client connection</span><br><span class="line">info: [debug] [UIAUTOMATOR STDOUT] INSTRUMENTATION_STATUS: numtests=1</span><br><span class="line">info: [debug] [UIAUTOMATOR STDOUT] INSTRUMENTATION_STATUS: stream=.</span><br><span class="line">info: [debug] [UIAUTOMATOR STDOUT] INSTRUMENTATION_STATUS: id=UiAutomatorTestRunner</span><br><span class="line">info: [debug] [UIAUTOMATOR STDOUT] INSTRUMENTATION_STATUS: <span class="built_in">test</span>=testRunServer</span><br><span class="line">info: [debug] [UIAUTOMATOR STDOUT] INSTRUMENTATION_STATUS: class=io.appium.android.bootstrap.Bootstrap</span><br><span class="line">info: [debug] [UIAUTOMATOR STDOUT] INSTRUMENTATION_STATUS: current=1</span><br><span class="line">info: [debug] [UIAUTOMATOR STDOUT] INSTRUMENTATION_STATUS_CODE: 0</span><br><span class="line">info: [debug] [UIAUTOMATOR STDOUT] INSTRUMENTATION_STATUS: stream=</span><br><span class="line">info: [debug] [UIAUTOMATOR STDOUT] Test results <span class="keyword">for</span> WatcherResultPrinter=.</span><br><span class="line">info: [debug] [UIAUTOMATOR STDOUT] Time: 5.576</span><br><span class="line">info: [debug] [UIAUTOMATOR STDOUT] OK (1 <span class="built_in">test</span>)</span><br><span class="line">info: [debug] [UIAUTOMATOR STDOUT] INSTRUMENTATION_STATUS_CODE: -1</span><br><span class="line">info: [debug] Sent shutdown <span class="built_in">command</span>, waiting <span class="keyword">for</span> UiAutomator to stop...</span><br><span class="line">info: [debug] UiAutomator shut down normally</span><br><span class="line">info: [debug] Cleaning up android objects</span><br><span class="line">info: [debug] Cleaning up appium session</span><br><span class="line">info: [debug] Responding to client with success: &#123;<span class="string">"status"</span>:0,<span class="string">"value"</span>:null,<span class="string">"sessionId"</span>:<span class="string">"7da33fde-d7a2-4c56-89ad</span></span><br><span class="line"><span class="string">-21d3564cd8d4"</span>&#125;</span><br><span class="line">info: &lt;-- DELETE /wd/hub/session/7da33fde-d7a2-4c56-89ad-21d3564cd8d4 200 1152.228 ms - 76 &#123;<span class="string">"status"</span>:0,<span class="string">"value"</span></span><br><span class="line">:null,<span class="string">"sessionId"</span>:<span class="string">"7da33fde-d7a2-4c56-89ad-21d3564cd8d4"</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Appium</category>
      </categories>
      <tags>
        <tag>appium</tag>
      </tags>
  </entry>
  <entry>
    <title>Appium-Python各种元素定位及操作方法解析</title>
    <url>/2016/03/27/2016-03-27-Appium-python-positioning-and-operation-methods/</url>
    <content><![CDATA[<h3 id="元素定位方法-site-packages-selenium-webdriver-remote-webdriver-py"><a href="#元素定位方法-site-packages-selenium-webdriver-remote-webdriver-py" class="headerlink" title="元素定位方法    # /site-packages/selenium/webdriver/remote/webdriver.py"></a>元素定位方法 # /site-packages/selenium/webdriver/remote/webdriver.py</h3><h4 id="通过id定位元素"><a href="#通过id定位元素" class="headerlink" title="通过id定位元素"></a>通过id定位元素</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">find_element_by_id(self, id_)                       <span class="comment"># Usage: driver.find_element_by_id('foo')</span></span><br><span class="line">find_elements_by_id(self, id_)                      <span class="comment"># Usage: driver.find_elements_by_id('foo')</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="通过xpath-相对路径-定位元素"><a href="#通过xpath-相对路径-定位元素" class="headerlink" title="通过xpath(相对路径)定位元素"></a>通过xpath(相对路径)定位元素</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">find_element_by_xpath(self, xpath)                  <span class="comment"># Usage: driver.find_element_by_xpath('//div/td[1]')</span></span><br><span class="line">find_elements_by_xpath(self, xpath)                 <span class="comment"># Usage: driver.find_elements_by_xpath("//div[contains(@class, 'foo')]")</span></span><br></pre></td></tr></table></figure><h4 id="通过link-text定位元素"><a href="#通过link-text定位元素" class="headerlink" title="通过link_text定位元素"></a>通过link_text定位元素</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">find_element_by_link_text(self, link_text)          <span class="comment"># Usage: driver.find_element_by_link_text('Sign In')</span></span><br><span class="line">find_elements_by_link_text(self, link_text)         <span class="comment"># Usage: driver.find_elements_by_link_text('Sign In')</span></span><br></pre></td></tr></table></figure><h4 id="通过partial-link-text定位元素"><a href="#通过partial-link-text定位元素" class="headerlink" title="通过partial_link_text定位元素"></a>通过partial_link_text定位元素</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">find_element_by_partial_link_text(self, link_text)  <span class="comment"># Usage: driver.find_element_by_partial_link_text('Sign')</span></span><br><span class="line">find_elements_by_partial_link_text(self, link_text) <span class="comment"># Usage: driver.find_elements_by_partial_link_text('Sign')</span></span><br></pre></td></tr></table></figure><h4 id="通过name定位元素（被accessibility-id替代）"><a href="#通过name定位元素（被accessibility-id替代）" class="headerlink" title="通过name定位元素（被accessibility_id替代）"></a>通过name定位元素（被accessibility_id替代）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">find_element_by_name(self, name)                    <span class="comment"># Usage: driver.find_element_by_name('foo')</span></span><br><span class="line">find_elements_by_name(self, name)                   <span class="comment"># Usage: driver.find_elements_by_name('foo')</span></span><br></pre></td></tr></table></figure><h4 id="通过accessibility-id定位元素"><a href="#通过accessibility-id定位元素" class="headerlink" title="通过accessibility_id定位元素"></a>通过accessibility_id定位元素</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">find_element_by_accessibility_id(self, id)          <span class="comment"># Usage: driver.find_element_by_accessibility_id('id')</span></span><br><span class="line">find_elements_by_accessibility_id(self, id)         <span class="comment"># Usage: driver.find_elements_by_accessibility_id('id')</span></span><br></pre></td></tr></table></figure><h4 id="通过tag-name定位元素（被class-name替代）"><a href="#通过tag-name定位元素（被class-name替代）" class="headerlink" title="通过tag_name定位元素（被class_name替代）"></a>通过tag_name定位元素（被class_name替代）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">find_element_by_tag_name(self, name)                <span class="comment"># Usage: driver.find_element_by_tag_name('foo')</span></span><br><span class="line">find_elements_by_tag_name(self, name)               <span class="comment"># Usage: driver.find_elements_by_tag_name('foo')</span></span><br></pre></td></tr></table></figure><h4 id="通过class-name定位元素"><a href="#通过class-name定位元素" class="headerlink" title="通过class_name定位元素"></a>通过class_name定位元素</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">find_element_by_class_name(self, name)              <span class="comment"># Usage: driver.find_element_by_class_name('foo')</span></span><br><span class="line">find_elements_by_class_name(self, name)             <span class="comment"># Usage: driver.find_elements_by_class_name('foo')</span></span><br></pre></td></tr></table></figure><h4 id="通过css-selector定位元素"><a href="#通过css-selector定位元素" class="headerlink" title="通过css_selector定位元素"></a>通过css_selector定位元素</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">find_element_by_css_selector(self, css_selector)    <span class="comment"># Usage: driver.find_element_by_css_selector('#foo')</span></span><br><span class="line">find_elements_by_css_selector(self, css_selector)   <span class="comment"># Usage: driver.find_elements_by_css_selector('#foo')</span></span><br></pre></td></tr></table></figure><h4 id="截取当前窗口的截图，如果有写入错误会返回False，其它返回True"><a href="#截取当前窗口的截图，如果有写入错误会返回False，其它返回True" class="headerlink" title="截取当前窗口的截图，如果有写入错误会返回False，其它返回True"></a>截取当前窗口的截图，如果有写入错误会返回False，其它返回True</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">get_screenshot_as_file(self, filename)              <span class="comment"># Usage: driver.get_screenshot_as_file('c:/foo.png')</span></span><br></pre></td></tr></table></figure><h4 id="获取当前屏幕的分辨率（长和宽）"><a href="#获取当前屏幕的分辨率（长和宽）" class="headerlink" title="获取当前屏幕的分辨率（长和宽）"></a>获取当前屏幕的分辨率（长和宽）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">get_window_size(self, windowHandle=<span class="string">'current'</span>)       <span class="comment"># Usage: driver.get_window_size()</span></span><br></pre></td></tr></table></figure><h4 id="获取当前页面的网址"><a href="#获取当前页面的网址" class="headerlink" title="获取当前页面的网址"></a>获取当前页面的网址</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">current_url(self)                                   <span class="comment"># Usage: driver.current_url</span></span><br></pre></td></tr></table></figure><h4 id="获取当前页面的源"><a href="#获取当前页面的源" class="headerlink" title="获取当前页面的源"></a>获取当前页面的源</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">page_source(self)                                   <span class="comment"># driver.page_source</span></span><br></pre></td></tr></table></figure><h4 id="关闭当前窗口"><a href="#关闭当前窗口" class="headerlink" title="关闭当前窗口"></a>关闭当前窗口</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">close(self)                                         <span class="comment"># driver.close()</span></span><br></pre></td></tr></table></figure><h4 id="退出脚本运行并关闭每个相关的窗口连接"><a href="#退出脚本运行并关闭每个相关的窗口连接" class="headerlink" title="退出脚本运行并关闭每个相关的窗口连接"></a>退出脚本运行并关闭每个相关的窗口连接</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">quit(self)                                          <span class="comment"># driver.quit()</span></span><br></pre></td></tr></table></figure><h4 id="切换webview与native"><a href="#切换webview与native" class="headerlink" title="切换webview与native"></a>切换webview与native</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.switch_to.context(<span class="string">"WEBVIEW"</span>)</span><br></pre></td></tr></table></figure><h3 id="操作-python-client-appium-webdriver-webdriver-py"><a href="#操作-python-client-appium-webdriver-webdriver-py" class="headerlink" title="操作        # python-client/appium/webdriver/webdriver.py"></a>操作 # python-client/appium/webdriver/webdriver.py</h3><h4 id="从元素origin-el滚动至元素destination-el"><a href="#从元素origin-el滚动至元素destination-el" class="headerlink" title="从元素origin_el滚动至元素destination_el"></a>从元素origin_el滚动至元素destination_el</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scroll(self, origin_el, destination_el)                                 <span class="comment"># Usage: driver.scroll(el1, el2)</span></span><br></pre></td></tr></table></figure><h4 id="将元素origin-el拖到目标元素destination-el"><a href="#将元素origin-el拖到目标元素destination-el" class="headerlink" title="将元素origin_el拖到目标元素destination_el"></a>将元素origin_el拖到目标元素destination_el</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">drag_and_drop(self, origin_el, destination_el)                          <span class="comment"># Usage: driver.drag_and_drop(el1,el2)</span></span><br></pre></td></tr></table></figure><h4 id="模拟手指点击（最多五个手指），可设置按住时间长度（毫秒）"><a href="#模拟手指点击（最多五个手指），可设置按住时间长度（毫秒）" class="headerlink" title="模拟手指点击（最多五个手指），可设置按住时间长度（毫秒）"></a>模拟手指点击（最多五个手指），可设置按住时间长度（毫秒）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tap(self, positions, duration=<span class="literal">None</span>)                                     <span class="comment"># Usage: driver.tap([(x,y),(x1,y1),(x2,y2)],500)</span></span><br></pre></td></tr></table></figure><h4 id="从A点滑动至B点，滑动时间为毫秒"><a href="#从A点滑动至B点，滑动时间为毫秒" class="headerlink" title="从A点滑动至B点，滑动时间为毫秒"></a>从A点滑动至B点，滑动时间为毫秒</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">swipe(self, start_x, start_y, end_x, end_y, duration=<span class="literal">None</span>)              <span class="comment"># Usage: driver.swipe(x1,y1,x2,y2,500)</span></span><br></pre></td></tr></table></figure><h4 id="按住A点后快速滑动至B点"><a href="#按住A点后快速滑动至B点" class="headerlink" title="按住A点后快速滑动至B点"></a>按住A点后快速滑动至B点</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flick(self, start_x, start_y, end_x, end_y)                             <span class="comment"># Usage: driver.flick(100, 100, 100, 400)</span></span><br></pre></td></tr></table></figure><h4 id="在元素上执行模拟双指捏（缩小操作）"><a href="#在元素上执行模拟双指捏（缩小操作）" class="headerlink" title="在元素上执行模拟双指捏（缩小操作）"></a>在元素上执行模拟双指捏（缩小操作）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pinch(self, element=<span class="literal">None</span>, percent=<span class="number">200</span>, steps=<span class="number">50</span>)                        <span class="comment"># Usage: driver.pinch(element)</span></span><br></pre></td></tr></table></figure><h4 id="在元素上执行放大操作"><a href="#在元素上执行放大操作" class="headerlink" title="在元素上执行放大操作"></a>在元素上执行放大操作</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">zoom(self, element=<span class="literal">None</span>, percent=<span class="number">200</span>, steps=<span class="number">50</span>)                         <span class="comment"># Usage: driver.zoom(element)</span></span><br></pre></td></tr></table></figure><h4 id="重置应用（类似删除应用数据）"><a href="#重置应用（类似删除应用数据）" class="headerlink" title="重置应用（类似删除应用数据）"></a>重置应用（类似删除应用数据）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">reset(self)                                                             <span class="comment"># Usage: driver.reset()</span></span><br></pre></td></tr></table></figure><h4 id="隐藏键盘-iOS使用key-name隐藏，安卓不使用参数"><a href="#隐藏键盘-iOS使用key-name隐藏，安卓不使用参数" class="headerlink" title="隐藏键盘,iOS使用key_name隐藏，安卓不使用参数"></a>隐藏键盘,iOS使用key_name隐藏，安卓不使用参数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hide_keyboard(self, key_name=<span class="literal">None</span>, key=<span class="literal">None</span>, strategy=<span class="literal">None</span>)             <span class="comment"># Usage: driver.hide_keyboard()</span></span><br></pre></td></tr></table></figure><h4 id="发送按键码（安卓仅有），按键码可以上网址中找到"><a href="#发送按键码（安卓仅有），按键码可以上网址中找到" class="headerlink" title="发送按键码（安卓仅有），按键码可以上网址中找到"></a>发送按键码（安卓仅有），按键码可以上<a href="http://developer.android.com/reference/android/view/KeyEvent.html" target="_blank" rel="noopener">网址</a>中找到</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">keyevent(self, keycode, metastate=<span class="literal">None</span>)                                 <span class="comment"># Usage: driver.keyevent('4')</span></span><br></pre></td></tr></table></figure><h4 id="发送按键码（安卓仅有），按键码可以上网址中找到-1"><a href="#发送按键码（安卓仅有），按键码可以上网址中找到-1" class="headerlink" title="发送按键码（安卓仅有），按键码可以上网址中找到"></a>发送按键码（安卓仅有），按键码可以上<a href="http://developer.android.com/reference/android/view/KeyEvent.html" target="_blank" rel="noopener">网址</a>中找到</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">press_keycode(self, keycode, metastate=<span class="literal">None</span>)                            <span class="comment"># Usage: driver.press_keycode('4')</span></span><br></pre></td></tr></table></figure><h4 id="发送一个长按的按键码（长按某键）"><a href="#发送一个长按的按键码（长按某键）" class="headerlink" title="发送一个长按的按键码（长按某键）"></a>发送一个长按的按键码（长按某键）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">long_press_keycode(self, keycode, metastate=<span class="literal">None</span>)                       <span class="comment"># Usage: driver.long_press_keycode(4)</span></span><br></pre></td></tr></table></figure><h4 id="获取当前的activity"><a href="#获取当前的activity" class="headerlink" title="获取当前的activity"></a>获取当前的activity</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">current_activity(self)                                                  <span class="comment"># Usage: print(driver.current_activity)</span></span><br></pre></td></tr></table></figure><h4 id="等待指定的activity出现直到超时，interval为扫描间隔1秒；即每隔几秒获取一次当前的activity；返回的True-或-False"><a href="#等待指定的activity出现直到超时，interval为扫描间隔1秒；即每隔几秒获取一次当前的activity；返回的True-或-False" class="headerlink" title="等待指定的activity出现直到超时，interval为扫描间隔1秒；即每隔几秒获取一次当前的activity；返回的True 或 False"></a>等待指定的activity出现直到超时，interval为扫描间隔1秒；即每隔几秒获取一次当前的activity；返回的True 或 False</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wait_activity(self, activity, timeout, interval=<span class="number">1</span>)                      <span class="comment"># Usage: driver.wait_activity('.activity.xxx',5,2)</span></span><br></pre></td></tr></table></figure><h4 id="后台运行app多少秒"><a href="#后台运行app多少秒" class="headerlink" title="后台运行app多少秒"></a>后台运行app多少秒</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">background_app(self, seconds)                                           <span class="comment"># Usage: driver.background_app(5)   置后台5秒后再运行</span></span><br></pre></td></tr></table></figure><h4 id="检查app是否有安装"><a href="#检查app是否有安装" class="headerlink" title="检查app是否有安装"></a>检查app是否有安装</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">is_app_installed(self, bundle_id)                                       <span class="comment"># Usage: driver.is_app_installed("com.xxxx")</span></span><br></pre></td></tr></table></figure><h4 id="安装app-app-path为安装包路径"><a href="#安装app-app-path为安装包路径" class="headerlink" title="安装app,app_path为安装包路径"></a>安装app,app_path为安装包路径</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">install_app(self, app_path)                                             <span class="comment"># Usage: driver.install_app(app_path)</span></span><br></pre></td></tr></table></figure><h4 id="删除app"><a href="#删除app" class="headerlink" title="删除app"></a>删除app</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">remove_app(self, app_id)                                                <span class="comment"># Usage: driver.remove_app("com.xxx.")</span></span><br></pre></td></tr></table></figure><h4 id="启动app"><a href="#启动app" class="headerlink" title="启动app"></a>启动app</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">launch_app(self)                                                        <span class="comment"># Usage: driver.launch_app()</span></span><br></pre></td></tr></table></figure><h4 id="关闭app"><a href="#关闭app" class="headerlink" title="关闭app"></a>关闭app</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">close_app(self)                                                         <span class="comment"># Usage: driver.close_app()</span></span><br></pre></td></tr></table></figure><h4 id="在测试过程中打开任意活动。如果活动属于另一个应用程序，该应用程序的启动和活动被打开。"><a href="#在测试过程中打开任意活动。如果活动属于另一个应用程序，该应用程序的启动和活动被打开。" class="headerlink" title="在测试过程中打开任意活动。如果活动属于另一个应用程序，该应用程序的启动和活动被打开。"></a>在测试过程中打开任意活动。如果活动属于另一个应用程序，该应用程序的启动和活动被打开。</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">start_activity(self, app_package, app_activity, **opts)                 <span class="comment"># Usage: driver.start_activity(app_package, app_activity)</span></span><br></pre></td></tr></table></figure><h4 id="摇一摇手机"><a href="#摇一摇手机" class="headerlink" title="摇一摇手机"></a>摇一摇手机</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">shake(self)                                                             <span class="comment"># Usage: driver.shake()</span></span><br></pre></td></tr></table></figure><h4 id="打系统通知栏（仅支持API-18-以上的安卓系统）"><a href="#打系统通知栏（仅支持API-18-以上的安卓系统）" class="headerlink" title="打系统通知栏（仅支持API 18 以上的安卓系统）"></a>打系统通知栏（仅支持API 18 以上的安卓系统）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">open_notifications(self)                                                <span class="comment"># Usage: driver.open_notifications()</span></span><br></pre></td></tr></table></figure><h4 id="返回网络类型-数值"><a href="#返回网络类型-数值" class="headerlink" title="返回网络类型  数值"></a>返回网络类型 数值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">network_connection(self)                                                <span class="comment"># Usage: driver.network_connection</span></span><br></pre></td></tr></table></figure><h4 id="设置网络类型"><a href="#设置网络类型" class="headerlink" title="设置网络类型"></a>设置网络类型</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set_network_connection(self, connectionType)                            <span class="comment"># Usage: dr.set_network_connection(ConnectionType.WIFI_ONLY)  //from appium.webdriver.connectiontype import ConnectionType</span></span><br></pre></td></tr></table></figure><h4 id="打开安卓设备上的位置定位设置"><a href="#打开安卓设备上的位置定位设置" class="headerlink" title="打开安卓设备上的位置定位设置"></a>打开安卓设备上的位置定位设置</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">toggle_location_services(self)                                          <span class="comment"># Usage: driver.toggle_location_services()</span></span><br></pre></td></tr></table></figure><h4 id="设置设备的经纬度"><a href="#设置设备的经纬度" class="headerlink" title="设置设备的经纬度"></a>设置设备的经纬度</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set_location(self, latitude, longitude, altitude)                       <span class="comment"># Usage: driver.set_location(纬度，经度，高度)</span></span><br></pre></td></tr></table></figure><h3 id="安卓输入法操作"><a href="#安卓输入法操作" class="headerlink" title="安卓输入法操作"></a>安卓输入法操作</h3><h4 id="返回安卓设备可用的输入法"><a href="#返回安卓设备可用的输入法" class="headerlink" title="返回安卓设备可用的输入法"></a>返回安卓设备可用的输入法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">available_ime_engines(self)                                             <span class="comment"># Usage: print(driver.available_ime_engines)</span></span><br></pre></td></tr></table></figure><h4 id="检查设备是否有输入法服务活动。返回真-假。"><a href="#检查设备是否有输入法服务活动。返回真-假。" class="headerlink" title="检查设备是否有输入法服务活动。返回真/假。"></a>检查设备是否有输入法服务活动。返回真/假。</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">is_ime_active(self)                                                     <span class="comment"># Usage: print(driver.is_ime_active())</span></span><br></pre></td></tr></table></figure><h4 id="激活安卓设备中的指定输入法，设备可用输入法可以从“available-ime-engines”获取"><a href="#激活安卓设备中的指定输入法，设备可用输入法可以从“available-ime-engines”获取" class="headerlink" title="激活安卓设备中的指定输入法，设备可用输入法可以从“available_ime_engines”获取"></a>激活安卓设备中的指定输入法，设备可用输入法可以从“available_ime_engines”获取</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">activate_ime_engine(self, engine)                                       <span class="comment"># Usage: driver.activate_ime_engine(“com.android.inputmethod.latin/.LatinIME”)</span></span><br></pre></td></tr></table></figure><h4 id="关闭安卓设备当前的输入法"><a href="#关闭安卓设备当前的输入法" class="headerlink" title="关闭安卓设备当前的输入法"></a>关闭安卓设备当前的输入法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">deactivate_ime_engine(self)                                             <span class="comment"># Usage: driver.deactivate_ime_engine()</span></span><br></pre></td></tr></table></figure><h4 id="返回当前输入法的包名"><a href="#返回当前输入法的包名" class="headerlink" title="返回当前输入法的包名"></a>返回当前输入法的包名</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">active_ime_engine(self)                                                 <span class="comment"># Usage: driver.active_ime_engine</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Appium</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>appium</tag>
      </tags>
  </entry>
  <entry>
    <title>Appium根据xpath获取控件</title>
    <url>/2016/03/31/2016-03-31-Appium-Get-control-based-on-xpath/</url>
    <content><![CDATA[<h3 id="本文就是尝试通过自己的试验来尝试对Appium如何用xpath来定位控件做一个阐述"><a href="#本文就是尝试通过自己的试验来尝试对Appium如何用xpath来定位控件做一个阐述" class="headerlink" title="本文就是尝试通过自己的试验来尝试对Appium如何用xpath来定位控件做一个阐述"></a>本文就是尝试通过自己的试验来尝试对Appium如何用xpath来定位控件做一个阐述</h3>]]></content>
      <categories>
        <category>Appium</category>
      </categories>
      <tags>
        <tag>appium</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh免密码登录</title>
    <url>/2016/05/26/2016-05-26-Ssh-password-free-login/</url>
    <content><![CDATA[<h3 id="免密介绍"><a href="#免密介绍" class="headerlink" title="免密介绍"></a>免密介绍</h3><p>其实不能说是免密码登录，你在第一次登录进账户的时候还是需要密码的。但是再用该受信任用户身份访问其他节点的时候可以让你不用输入密码。也就是一次验证，处处通行。真正的术语叫做公钥登录。</p><blockquote><p>所谓”公钥登录”，原理很简单，就是用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码。这种方法要求用户必须提供自己的公钥。如果没有现成的，可以直接用ssh-keygen生成一个。</p></blockquote><a id="more"></a><p>具体的原理相对来说就比较复杂了。参见阮一峰的这篇博客<a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html" target="_blank" rel="noopener">SSH原理与运用(一):远程登录</a>。</p><h3 id="设置免密"><a href="#设置免密" class="headerlink" title="设置免密"></a>设置免密</h3><p>免密码登录：<br>生成本用户的密钥，再把公钥存成authorized_key文件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh user@host <span class="string">'mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys'</span> &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>过程是：</p><ol><li><code>ssh user@host</code>，表示登录远程主机,当然远程用户名和本地一致的时候可以省略，直接使用<code>ssh host</code>。</li><li><code>mkdir -p .ssh</code>，如果用户主目录中的.ssh目录不存在，就创建一个。</li><li><code>&#39;cat &gt;&gt; .ssh/authorized_keys&#39; &lt; ~/.ssh/id_rsa.pub</code>的作用，是将本地的公钥文件<code>~/.ssh/id_rsa.pub</code>，重定向追加到远程文件authorized_key的末尾。</li></ol><p>写入authorized_keys文件后，公钥登录的设置就完成了。<br>最后还要对<code>.ssh</code>目录和<code>.ssh/authorized_keys</code>文件的权限做确认，<code>.ssh</code>目录的权限必须是<code>700</code>，<code>.ssh/authorized_keys</code>文件权限必须是<code>600</code>。</p><h3 id="设置快捷登录"><a href="#设置快捷登录" class="headerlink" title="设置快捷登录"></a>设置快捷登录</h3><p>我们可以利用<code>ssh</code>的用户配置文件<code>config</code>管理 多个免密码<code>ssh</code>会话。<code>ssh</code>的用户配置文件是放在当前用户根目录下的<code>.ssh</code>文件夹里（<strong><code>~/.ssh/config</code></strong>，不存在则新创建一个），其配置写法如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 别名：比如 jhost</span></span><br><span class="line">Host 别名</span><br><span class="line">    <span class="comment"># 用户名：比如 taoyi</span></span><br><span class="line">    User 用户名</span><br><span class="line">    <span class="comment"># 主机名：比如 192.168.1.1，主机名也可以是域名</span></span><br><span class="line">    HostName 主机名</span><br><span class="line">    <span class="comment"># 密钥文件的路径：比如 ~/.ssh/id_rsa</span></span><br><span class="line">    IdentityFile 密钥文件的路径</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>git常用命令</title>
    <url>/2016/05/26/2016-05-26-Git-common-commands/</url>
    <content><![CDATA[<h3 id="初始配置"><a href="#初始配置" class="headerlink" title="初始配置"></a>初始配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir d:\git_test</span><br><span class="line">git config --global user.name <span class="string">"Your name"</span></span><br><span class="line">git config --global user.email <span class="string">"you@example.com"</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="获取当前git配置"><a href="#获取当前git配置" class="headerlink" title="获取当前git配置"></a>获取当前git配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --version</span><br><span class="line">git config --global user.name         <span class="comment"># 获取当前登录的用户</span></span><br><span class="line">git config --global user.email        <span class="comment"># 获取当前登录用户的邮箱</span></span><br></pre></td></tr></table></figure><h3 id="创建文件并写入内容"><a href="#创建文件并写入内容" class="headerlink" title="创建文件并写入内容"></a>创建文件并写入内容</h3><p>如果文件不存在，则创建文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"hello git"</span></span><br><span class="line">&gt; index.html                          <span class="comment"># 将'hello git'写入到index.html中</span></span><br></pre></td></tr></table></figure><p>单个<code>&gt;</code>箭头表示写入，<code>&gt;&gt;</code>表示追加</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init                        <span class="comment"># 初始化当前所在目录的这个项目</span></span><br><span class="line">git status                      <span class="comment"># 查看项目状态，有没有添加或者修改文件</span></span><br><span class="line">git add .                       <span class="comment"># 给目前的项目制作一个快照snapshot（快照只是登记留名，快照不等于记录在案，git管快照叫做索引index）</span></span><br><span class="line">git commit                      <span class="comment"># 将快照里登记的内容永久写入git仓库</span></span><br><span class="line">git commit -a                   <span class="comment"># 直接提交所有修改，省去了``git add``和``git diff``和``git commit``的工序</span></span><br><span class="line">                                <span class="comment"># 无法把新增文件或文件夹加入进来，所以，如果你新增了文件或文件夹，那么就要老老实实的先``git add ..``，再``git commit``</span></span><br><span class="line">git push                        <span class="comment"># 把更新推送到远程分支</span></span><br><span class="line">git <span class="built_in">log</span> -p                      <span class="comment"># git不但会给出开发日志，而且会显示每个开发版本的代码区别所在</span></span><br><span class="line">git <span class="built_in">log</span> --online                <span class="comment"># 查看版本</span></span><br><span class="line">git diff                        <span class="comment"># 比较暂存区和工作区的差别</span></span><br><span class="line">git diff --cached               <span class="comment"># 比较暂存区和历史区的差别</span></span><br><span class="line">git diff master                 <span class="comment"># 比较历史区和工作区的差别（修改）</span></span><br><span class="line">git checkout index.html         <span class="comment"># 用暂存区中的内容或者版本库中的内容覆盖掉工作区</span></span><br><span class="line">git reset HEAD index.html       <span class="comment"># 取消增加到暂存区的内容（添加时）</span></span><br><span class="line">git rm index.html --cached      <span class="comment"># 使用--cached表示只删除缓冲区中的内容</span></span><br><span class="line">git reset --hard HEAD/commit_id <span class="comment"># 回滚版本</span></span><br><span class="line">git reflog                      <span class="comment"># 回滚到未来</span></span><br></pre></td></tr></table></figure><p>总结：先<code>git add</code>修改过的文件，再<code>git diff</code>并<code>git status</code>查看确认，然后<code>git commit</code>提交，然后输入开发日志，然后<code>git push</code>推送到远程分支，最后<code>git log</code>再次确认。</p><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch                      <span class="comment"># 查看分支列表</span></span><br><span class="line">git branch experiment           <span class="comment"># 创建experiment分支</span></span><br><span class="line">git checkout experiment         <span class="comment"># 切换到experiment分支</span></span><br><span class="line">git checkout -b experiment      <span class="comment"># 创建分支并切换分支</span></span><br><span class="line">git commit -a                   <span class="comment"># 在分支上提交工作</span></span><br><span class="line">git checkout master             <span class="comment"># 切换到主干道</span></span><br><span class="line">git merge experiment            <span class="comment"># 合并分支到主干道</span></span><br><span class="line">git branch -d experiment        <span class="comment"># -d，表示“在分支已经合并到主干后删除分支”。如果使用大写的-D的话，则表示“不论如何都删除分支”</span></span><br></pre></td></tr></table></figure><h3 id="使用git-stash命令保存和恢复进度"><a href="#使用git-stash命令保存和恢复进度" class="headerlink" title="使用git stash命令保存和恢复进度"></a>使用git stash命令保存和恢复进度</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash                       <span class="comment"># 保留当前工作区进度，会把暂存区和工作区的改动保存起来</span></span><br><span class="line">git stash save <span class="string">'message...'</span>     <span class="comment"># 保存当前工作区，并添加备注</span></span><br><span class="line">git stash list                  <span class="comment"># 显示保存进度的列表。也就意味着，git stash命令可以多次执行。</span></span><br><span class="line">git stash pop                   <span class="comment"># 恢复最新的进度到工作区并删除。git默认会把工作区和缓存区的改动都恢复到工作区。</span></span><br><span class="line">git stash apply                 <span class="comment"># 恢复最新的进度到工作区不删除</span></span><br><span class="line">git stash drop [stash_id]       <span class="comment"># 删除一个存储的进度，如果不指定stash_id，则默认删除最新的存储进度，stash_id从git stash list获取</span></span><br><span class="line">git stash clear                 <span class="comment"># 删除所有存储的进度</span></span><br></pre></td></tr></table></figure><h3 id="撤销一次已经提交到Github的内容"><a href="#撤销一次已经提交到Github的内容" class="headerlink" title="撤销一次已经提交到Github的内容"></a>撤销一次已经提交到Github的内容</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD~1</span><br><span class="line">git push --force</span><br></pre></td></tr></table></figure><p>该命令执行后，会隐藏掉Github库中的被撤销掉的记录，但是指定到该被隐藏掉的记录来访问，依旧可以访问。</p><h3 id="GitHub更新自己fork的代码"><a href="#GitHub更新自己fork的代码" class="headerlink" title="GitHub更新自己fork的代码"></a>GitHub更新自己fork的代码</h3><ol><li><code>clone</code>已经<code>fork</code>到自己账号的代码<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/shadow000902/ApiTestEngine.git</span><br><span class="line"><span class="built_in">cd</span> ApiTestEngine</span><br></pre></td></tr></table></figure></li><li>查看远程分支列表<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">╭─taoyi at TaoYi-Mac <span class="keyword">in</span> ~/git_projects/GitHub/ApiTestEngine on master✔ using ‹› 17-08-23 - 15:01:23</span><br><span class="line">╰─○ git remote -v</span><br><span class="line">debugtalk	https://github.com/debugtalk/ApiTestEngine.git (fetch)</span><br><span class="line">debugtalk	https://github.com/debugtalk/ApiTestEngine.git (push)</span><br><span class="line">origin	https://github.com/shadow000902/ApiTestEngine.git (fetch)</span><br><span class="line">origin	https://github.com/shadow000902/ApiTestEngine.git (push)</span><br></pre></td></tr></table></figure></li><li><code>fetch</code>原始源代码的新版本到本地<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch debugtalk</span><br></pre></td></tr></table></figure></li><li>合并两个版本的代码<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge debugtalk/master</span><br></pre></td></tr></table></figure></li><li>如果合并代码后有冲突，解决冲突</li><li>把合并好的最新的代码提交到自己的<code>GitHub</code>账号上<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure></li></ol><h3 id="git撤销最后一次commit"><a href="#git撤销最后一次commit" class="headerlink" title="git撤销最后一次commit"></a>git撤销最后一次commit</h3><ol><li><p>使用<code>git log</code>查看<code>commit</code>记录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">commit-id1</span><br><span class="line">commit-id2</span><br><span class="line">commit-id3</span><br></pre></td></tr></table></figure><p>如果想要撤销<code>commit-id1</code>的话，就要选择<code>commit-id2</code></p></li><li><p>使用命令撤销提交</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset commit-id2				<span class="comment"># 只是撤销提交，修改的内容不变</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard commit-id2			<span class="comment"># 撤销提交，并撤销修改的内容</span></span><br><span class="line">git push origin HARD --force		<span class="comment"># 撤销后，强制提交并push到远程分支</span></span><br></pre></td></tr></table></figure><h3 id="修改最新一次已提交但未-push-的-message"><a href="#修改最新一次已提交但未-push-的-message" class="headerlink" title="修改最新一次已提交但未 push 的 message"></a>修改最新一次已提交但未 push 的 message</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit --amend -m <span class="string">"your new message"</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Appium踩过的坑</title>
    <url>/2016/05/31/2016-05-31-Appium-stepped-on-the-pit/</url>
    <content><![CDATA[<h4 id="每次运行测试，app都会重新安装"><a href="#每次运行测试，app都会重新安装" class="headerlink" title="每次运行测试，app都会重新安装"></a>每次运行测试，app都会重新安装</h4><p>1.1 在case里不要设置app的安装路径，只要设置<code>desired_caps[&#39;appPackage&#39;]</code>（app的包名）和<code>desired_caps[&#39;appActivity&#39;]</code>（启动时的activity）即可<br>1.2 在启动appium的时候，加上<code>--no-reset</code>参数</p><a id="more"></a><h4 id="等待操作"><a href="#等待操作" class="headerlink" title="等待操作"></a>等待操作</h4><p>2.1 尽量不要使用sleep方法<br>2.2 使用<code>implicitly_wait(1000)</code>方法，<strong>隐性等待/如果一个无素没有出现都会默认等待你所设定的时间，直到超时或者元素出现</strong><br>2.3 <code>WebDriverWait()</code>，同样也是 webdirver 提供的方法。<strong>在设置时间内，默认每隔一段时间检测一次当前。页面元素是否存在，如果超过设置时间检测不到则抛出异常。</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line">element = WebDriverWait(driver, <span class="number">10</span>).until(<span class="keyword">lambda</span> x: x.find_element_by_id(“someId”))</span><br><span class="line">is_disappeared = WebDriverWait(driver, <span class="number">30</span>, <span class="number">1</span>, (ElementNotVisibleException)).</span><br><span class="line">until_not(<span class="keyword">lambda</span> x: x.find_element_by_id(“someId”).is_displayed())</span><br></pre></td></tr></table></figure><h4 id="元素无法定位"><a href="#元素无法定位" class="headerlink" title="元素无法定位"></a>元素无法定位</h4><p>3.1 使用元素坐标点定位，有两种点击方法，一种是<code>tap([(100, 20), (100, 60), (100, 100)], 500)</code>，还有一种是使用<code>swipe(630, 320, 630, 320, 500)</code>方法<br>3.2 使用<code>class_name</code>来定位：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">checkboxes = self.driver.find_elements_by_class_name(<span class="string">'android.widget.CheckBox'</span>)     <span class="comment"># 获取页面class_name为android.widget.CheckBox的所有元素，形成一个list</span></span><br><span class="line">checkboxes[<span class="number">0</span>].click()                                                               <span class="comment"># 指定元素进行操作</span></span><br><span class="line">checkboxes[<span class="number">1</span>].click()                                                               <span class="comment"># 指定元素进行操作</span></span><br></pre></td></tr></table></figure><h4 id="长按操作"><a href="#长按操作" class="headerlink" title="长按操作"></a>长按操作</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">action1 = TouchAction(self.driver)</span><br><span class="line">el_3 = self.driver.find_element_by_id(<span class="string">'cn.highing.hichat:id/topic_voice_send'</span>)</span><br><span class="line">action1.long_press(el_3).wait(<span class="number">10000</span>).perform()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">action2 = TouchAction(self.driver)</span><br><span class="line">el_3 = self.driver.find_element_by_id(<span class="string">'cn.highing.hichat:id/topic_voice_send'</span>)</span><br><span class="line">action2.moveTo(el_3).release().perform()</span><br></pre></td></tr></table></figure><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> self.driver.current_activity == <span class="string">".ui.GuideActivity"</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        做x这件事</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        x失败的话，做这里的事</span><br></pre></td></tr></table></figure><h4 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h4><h4 id="appium运行结果报告"><a href="#appium运行结果报告" class="headerlink" title="appium运行结果报告"></a>appium运行结果报告</h4><h4 id="appium设置不使用appium只带的输入法"><a href="#appium设置不使用appium只带的输入法" class="headerlink" title="appium设置不使用appium只带的输入法"></a><code>appium</code>设置不使用<code>appium</code>只带的输入法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">des.setCapability(<span class="string">"unicodeKeyboard"</span>, <span class="string">"True"</span>)</span><br><span class="line">des.setCapability(<span class="string">"resetKeyboard"</span>, <span class="string">"True"</span>)</span><br></pre></td></tr></table></figure><h4 id="一定不要搞错启动activity"><a href="#一定不要搞错启动activity" class="headerlink" title="一定不要搞错启动activity"></a>一定不要搞错启动<code>activity</code></h4><p>启动时的<code>activity</code>一般都是叫<code>SplashActivity</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line">    desired_caps = &#123;&#125;</span><br><span class="line">    desired_caps[<span class="string">'platformName'</span>] = <span class="string">'Android'</span></span><br><span class="line">    desired_caps[<span class="string">'platformVersion'</span>] = <span class="string">'6.0'</span></span><br><span class="line">    desired_caps[<span class="string">'deviceName'</span>] = <span class="string">'Nexus 5'</span></span><br><span class="line">    desired_caps[<span class="string">'appPackage'</span>] = <span class="string">'com.shadow.fengche'</span>  <span class="comment"># 被测App的包名</span></span><br><span class="line">    desired_caps[<span class="string">'appActivity'</span>] = <span class="string">'com.shadow.fengche.ui.activity.SplashActivity'</span>  <span class="comment"># 启动时的Activity</span></span><br><span class="line">    <span class="comment"># desired_caps['app'] = PATH('/Users/taoyi/Downloads/shadow.apk')</span></span><br></pre></td></tr></table></figure><h4 id="拖动操作解析"><a href="#拖动操作解析" class="headerlink" title="拖动操作解析"></a>拖动操作解析</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DragAndDrop</span><span class="params">(By dragElement, By dropElement)</span></span></span><br></pre></td></tr></table></figure><p><code>dragElement</code> <em>起点元素，不要用输入框，尽量用不可点击的显示型元素</em><br><code>dropElement</code> <em>终点元素，不要用输入框，尽量用不可点击的显示型元素</em></p><h4 id="滑动操作"><a href="#滑动操作" class="headerlink" title="滑动操作"></a>滑动操作</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">swipe_to_up</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    从下往上滑动</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    window_size = self.get_size()</span><br><span class="line">    width = window_size.get(<span class="string">"width"</span>)</span><br><span class="line">    height = window_size.get(<span class="string">"height"</span>)</span><br><span class="line">    self.driver.swipe(width / <span class="number">2</span>, height * <span class="number">3</span> / <span class="number">4</span>, width / <span class="number">2</span>, height / <span class="number">4</span>, <span class="number">500</span>)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SwipeToUp</span><span class="params">(<span class="keyword">int</span> during)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> width = driver.manage().window().getSize().width;</span><br><span class="line">	<span class="keyword">int</span> height = driver.manage().window().getSize().height;</span><br><span class="line">	driver.swipe(width / <span class="number">2</span>, height * <span class="number">3</span> / <span class="number">4</span>, width / <span class="number">2</span>, height / <span class="number">4</span>, during);</span><br><span class="line">	logger.info(<span class="string">"向上滑动屏幕的3/4"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Appium（客户端版）解决每次运行Android，都安装Appium-Setting和Unlock的方法"><a href="#Appium（客户端版）解决每次运行Android，都安装Appium-Setting和Unlock的方法" class="headerlink" title="Appium（客户端版）解决每次运行Android，都安装Appium Setting和Unlock的方法"></a><code>Appium</code>（客户端版）解决每次运行<code>Android</code>，都安装<code>Appium Setting</code>和<code>Unlock</code>的方法</h4><p>同 “Appium的几点总结” 的<code>六</code><br><code>Appium Setting</code>安装包路径：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;appium-android-driver&#x2F;node_modules&#x2F;io.appium.settings&#x2F;bin&#x2F;settings_apk-debug.apk</span><br></pre></td></tr></table></figure><p><code>Unlock</code>安装包路径：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;appium-android-driver&#x2F;node_modules&#x2F;appium-unlock&#x2F;bin&#x2F;unlock_apk-debug.apk</span><br></pre></td></tr></table></figure><p>解决方法，修改下面两个文件<br>文件1地址：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/lib/node_modules/appium/node_modules/appium-android-driver/lib/android-helpers.js</span><br></pre></td></tr></table></figure><p>文件位置：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">helpers.initDevice = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">adb, opts</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> adb.waitForDevice();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> helpers.ensureDeviceLocale(adb, opts.language, opts.locale);</span><br><span class="line">  <span class="keyword">await</span> adb.startLogcat();</span><br><span class="line">  <span class="keyword">let</span> defaultIME;</span><br><span class="line">  <span class="keyword">if</span> (opts.unicodeKeyboard) &#123;</span><br><span class="line">    defaultIME = <span class="keyword">await</span> helpers.initUnicodeKeyboard(adb);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//  await helpers.pushSettingsApp(adb);                                         # 注释掉</span></span><br><span class="line"><span class="comment">//  await helpers.pushUnlock(adb);                                              # 注释掉</span></span><br><span class="line">  <span class="keyword">return</span> defaultIME;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>文件2地址：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/lib/node_modules/appium/node_modules/appium-android-driver/build/lib/android-helpers.js</span><br></pre></td></tr></table></figure><p>文件位置：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">helpers.initDevice = <span class="function"><span class="keyword">function</span> <span class="title">callee$0$0</span>(<span class="params">adb, opts</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> defaultIME;</span><br><span class="line">  <span class="keyword">return</span> _regeneratorRuntime.async(<span class="function"><span class="keyword">function</span> <span class="title">callee$0$0$</span>(<span class="params">context$<span class="number">1</span>$<span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) <span class="keyword">switch</span> (context$<span class="number">1</span>$<span class="number">0.</span>prev = context$<span class="number">1</span>$<span class="number">0.n</span>ext) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        context$<span class="number">1</span>$<span class="number">0.n</span>ext = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> _regeneratorRuntime.awrap(adb.waitForDevice());</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        context$<span class="number">1</span>$<span class="number">0.n</span>ext = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">return</span> _regeneratorRuntime.awrap(helpers.ensureDeviceLocale(adb, opts.language, opts.locale));</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        context$<span class="number">1</span>$<span class="number">0.n</span>ext = <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">return</span> _regeneratorRuntime.awrap(adb.startLogcat());</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        defaultIME = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!opts.unicodeKeyboard) &#123;</span><br><span class="line">          context$<span class="number">1</span>$<span class="number">0.n</span>ext = <span class="number">11</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        context$<span class="number">1</span>$<span class="number">0.n</span>ext = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">return</span> _regeneratorRuntime.awrap(helpers.initUnicodeKeyboard(adb));</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        defaultIME = context$<span class="number">1</span>$<span class="number">0.</span>sent;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">        context$<span class="number">1</span>$<span class="number">0.n</span>ext = <span class="number">13</span>;</span><br><span class="line">        <span class="keyword">return</span> _regeneratorRuntime.awrap(helpers.pushSettingsApp(adb));</span><br><span class="line">        <span class="comment">// return context$1$0.abrupt('return', defaultIME);                     # 添加新的 return，相当于跳过该步骤</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">        context$<span class="number">1</span>$<span class="number">0.n</span>ext = <span class="number">15</span>;</span><br><span class="line">        <span class="keyword">return</span> _regeneratorRuntime.awrap(helpers.pushUnlock(adb));</span><br><span class="line">        <span class="comment">// return context$1$0.abrupt('return', defaultIME);                     # 添加新的 return，相当于跳过该步骤</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="number">15</span>:</span><br><span class="line">        <span class="keyword">return</span> context$<span class="number">1</span>$<span class="number">0.</span>abrupt(<span class="string">'return'</span>, defaultIME);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'end'</span>:</span><br><span class="line">        <span class="keyword">return</span> context$<span class="number">1</span>$<span class="number">0.</span>stop();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="literal">null</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Appium</category>
      </categories>
      <tags>
        <tag>appium</tag>
      </tags>
  </entry>
  <entry>
    <title>Appium的几点总结</title>
    <url>/2016/07/01/2016-07-01-Summary-of-Appium/</url>
    <content><![CDATA[<h3 id="建立session时常用命令"><a href="#建立session时常用命令" class="headerlink" title="建立session时常用命令"></a>建立session时常用命令</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DesiredCapabilities cap = new DesiredCapabilities();</span><br><span class="line">cap.SetCapability(<span class="string">"browserName"</span>, <span class="string">""</span>);                                                           // web 浏览器名称（<span class="string">'Safari'</span> ,<span class="string">'Chrome'</span>等）。如果对应用进行自动化测试，这个关键字的值应为空。</span><br><span class="line">cap.SetCapability(<span class="string">"platformName"</span>, <span class="string">"Android"</span>);                                                   //你要测试的手机操作系统</span><br><span class="line">cap.SetCapability(<span class="string">"platformVersion"</span>, <span class="string">"4.4"</span>);                                                    //手机操作系统版本</span><br><span class="line">cap.SetCapability(<span class="string">"automationName"</span>, <span class="string">"selendroid"</span>);                                              //你想使用的自动化测试引擎：Appium (默认) 或 Selendroid</span><br><span class="line">cap.SetCapability(<span class="string">"deviceName"</span>, <span class="string">" Android Emulator"</span>);                                           //使用的手机类型或模拟器类型，真机时输入Android Emulator或者手机型号</span><br><span class="line">cap.SetCapability(<span class="string">"udid"</span>, udid);                                                                //连接的物理设备的唯一设备标识,Android可以不设置</span><br><span class="line"></span><br><span class="line">cap.SetCapability(<span class="string">"newCommandTimeout"</span>, <span class="string">"300"</span>);                                                  //设置收到下一条命令的超时时间,超时appium会自动关闭session ,默认<span class="number">60</span>秒</span><br><span class="line">cap.SetCapability(<span class="string">"unicodeKeyboard"</span>, <span class="string">"True"</span>);                                                   //支持中文输入，会自动安装Unicode 输入法。默认值为 false</span><br><span class="line">cap.SetCapability(<span class="string">"resetKeyboard"</span>, <span class="string">"True"</span>);                                                     //在设定了 unicodeKeyboard 关键字的 Unicode 测试结束后，重置输入法到原有状态</span><br><span class="line"></span><br><span class="line">cap.SetCapability(<span class="string">"'app'"</span>, <span class="string">"D:\\AndroidAutomation\\AndroidAutoTest\\app\\zhongchou.apk"</span>);       //未安装应用时，设置app的路径</span><br><span class="line"></span><br><span class="line">//手机已安装app，直接从手机启动app，上面路径不设置</span><br><span class="line">cap.SetCapability(<span class="string">"appPackage"</span>, <span class="string">"com.nbbank"</span>);                                                  //你要启动的Android 应用对应的Activity名称|比如`MainActivity`, `.Settings`|</span><br><span class="line">cap.SetCapability(<span class="string">"appActivity"</span>, <span class="string">"com.nbbank.ui.ActivityShow"</span>);                                 //你想运行的Android应用的包名</span><br><span class="line">cap.SetCapability(<span class="string">"appWaitActivity"</span>, <span class="string">"com.nbbank.ui.ActivityLogo"</span>);                             //你想要等待启动的Android Activity名称|比如`SplashActivity`|</span><br><span class="line"></span><br><span class="line">Uri serverUri = new Uri(<span class="string">"http://127.0.0.1:4723/wd/hub"</span>);</span><br><span class="line">driver = new AndroidDriver&lt;IWebElement&gt;(serverUri, cap, TimeSpan.FromSeconds(<span class="number">180</span>));</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="driver常用方法及注意事项"><a href="#driver常用方法及注意事项" class="headerlink" title="driver常用方法及注意事项"></a>driver常用方法及注意事项</h3><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.HideKeyboard();                                                                  //隐藏键盘</span><br><span class="line">driver.BackgroundApp(<span class="number">60</span>);                                                               //<span class="number">60</span>秒后把当前应用放到后台去</span><br><span class="line">driver.LockDevice(<span class="number">3</span>);                                                                   //锁定屏幕</span><br><span class="line"></span><br><span class="line">//在当前应用中打开一个 activity 或者启动一个新应用并打开一个 activity</span><br><span class="line">driver.StartActivity(<span class="string">"com.iwobanas.screenrecorder.pro"</span>, <span class="string">"com.iwobanas.screenrecorder.RecorderActivity"</span>);</span><br><span class="line">driver.OpenNotifications();                                                             //打开下拉通知栏 只能在 Android 上使用</span><br><span class="line">driver.IsAppInstalled(<span class="string">"com.example.android.apis-"</span>);                                     //检查应用是否已经安装</span><br><span class="line">driver.InstallApp(<span class="string">"path/to/my.apk"</span>);                                                    //安装应用到设备中去</span><br><span class="line">driver.RemoveApp(<span class="string">"com.example.android.apis"</span>);                                           //从设备中删除一个应用</span><br><span class="line">driver.ShakeDevice();                                                                   //模拟设备摇晃</span><br><span class="line">driver.CloseApp();                                                                      //关闭应用</span><br><span class="line">driver.LaunchApp();                                                                     //根据服务关键字 (desired capabilities) 启动会话 (session) 。请注意这必须在设定 autoLaunch=false 关键字时才能生效。这不是用于启动指定的 app/activities</span><br><span class="line">driver.ResetApp();                                                                      //应用重置</span><br><span class="line">driver.GetContexts();                                                                   //列出所有的可用上下文</span><br><span class="line">driver.GetContext();                                                                    //列出当前上下文</span><br><span class="line">driver.SetContext(<span class="string">"name"</span>);                                                              //将上下文切换到默认上下文</span><br><span class="line">driver.GetAppStrings();                                                                 //获取应用的字符串</span><br><span class="line">driver.KeyEvent(<span class="number">176</span>);                                                                   //给设备发送一个按键事件:keycode</span><br><span class="line">driver.GetCurrentActivity();                                                            //获取当前 activity。只能在 Android 上使用</span><br><span class="line">//driver.Pinch(<span class="number">25</span>, <span class="number">25</span>);                                                                 //捏屏幕 (双指往内移动来缩小屏幕)</span><br><span class="line">//driver.Zoom(<span class="number">100</span>, <span class="number">200</span>);                                                                //放大屏幕 (双指往外移动来放大屏幕)</span><br><span class="line">driver.PullFile(<span class="string">"Library/AddressBook/AddressBook.sqlitedb"</span>);                            //从设备中拉出文件</span><br><span class="line">driver.PushFile(<span class="string">"/data/local/tmp/file.txt"</span>, <span class="string">"some data for the file"</span>);                  //推送文件到设备中去</span><br><span class="line"></span><br><span class="line">driver.FindElement(By.Name(<span class="string">""</span>));</span><br><span class="line">driver.FindElementById(<span class="string">"id"</span>);</span><br><span class="line">driver.FindElementByName(<span class="string">"text"</span>);</span><br><span class="line">driver.FindElementByXPath(<span class="string">"//*[@name='62']"</span>);</span><br></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>使用driver.Sendkeys(string str)向文本框输入内容前，最好先element.Click( )一下，否则某些情况下,输入的内容会请不掉，文本框提示的内容也会在 输入的文本前显示出来。sendkey方法在发送数据之前会清空一下文本框，一般不需要Clear，如前面的情况Clear后仍是存在的，click后正常</p><h3 id="等待页面加载策略"><a href="#等待页面加载策略" class="headerlink" title="等待页面加载策略"></a>等待页面加载策略</h3><h4 id="显性等待：调用selenium的方法，-需要添加WebDriver-Support引用"><a href="#显性等待：调用selenium的方法，-需要添加WebDriver-Support引用" class="headerlink" title="显性等待：调用selenium的方法， 需要添加WebDriver.Support引用"></a>显性等待：调用selenium的方法， 需要添加WebDriver.Support引用</h4><pre><code>显性等待是指在代码进行下一步操作之前等待某一个条件的发生。最不好的情况是使用Thread.sleep()去设置一段确认的时间去等待。但为什么说最不好呢？因为一个元素的加载时间有长有短，你在设置sleep的时间之前要自己把握长短，太短容易超时，太长浪费时间。selenium webdriver提供了一些方法帮助我们等待正好需要等待的时间</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(<span class="number">10</span>));</span><br><span class="line">element = wait.Until&lt;IWebElement&gt;((d) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> driver.FindElement(By.Id(<span class="string">"userName"</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="隐性等待：设置时间不易过长，设置为500或1000即可"><a href="#隐性等待：设置时间不易过长，设置为500或1000即可" class="headerlink" title="隐性等待：设置时间不易过长，设置为500或1000即可"></a>隐性等待：设置时间不易过长，设置为500或1000即可</h4><pre><code>隐性等待是指当要查找元素，而这个元素没有马上出现时，告诉WebDriver查询Dom一定时间。默认值是0,但是设置之后，这个时间将在WebDriver对象实例整个生命周期都起作用。</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.Manage().Timeouts().ImplicitlyWait(TimeSpan.FromSeconds(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><h3 id="drive-KeyEvent-int-的使用："><a href="#drive-KeyEvent-int-的使用：" class="headerlink" title="drive.KeyEvent(int )的使用："></a>drive.KeyEvent(int )的使用：</h3><p>可使用KeyEvent发送键盘数据，比如退格，Enter键等</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.KeyEvent(<span class="number">3</span>);         //KEYCODE_HOME 按键Home <span class="number">3</span></span><br><span class="line">driver.KeyEvent(<span class="number">26</span>);        //KEYCODE_POWER 电源键 <span class="number">26</span></span><br><span class="line">driver.KeyEvent(<span class="number">67</span>);        //KEYCODE_DEL 退格键 <span class="number">67</span></span><br><span class="line">driver.KeyEvent(<span class="number">66</span>);        //KEYCODE_ENTER 回车键</span><br><span class="line">driver.KeyEvent(<span class="number">122</span>);       //KEYCODE_MOVE_HOME 光标移动到开始</span><br><span class="line">driver.KeyEvent(<span class="number">123</span>);       //KEYCODE_MOVE_END 光标移动到末尾</span><br></pre></td></tr></table></figure><h3 id="坐标操作"><a href="#坐标操作" class="headerlink" title="坐标操作"></a>坐标操作</h3><p>为防止不同手机分辨率不同带来的影响，要避免使用固定的坐标，可以用以下方式获取元素的坐标</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">double Screen_X = driver.Manage().Window.Size.Width;                    //获取手机屏幕宽度</span><br><span class="line">double Screen_Y = driver.Manage().Window.Size.Height;                   //获取手机屏幕高度</span><br><span class="line">double startX = element.Location.X;                                     //获取元素的起点坐标，即元素最左上角点的横坐标</span><br><span class="line">double startY = element.Location.Y;                                     //获取元素的起点坐标，即元素最左上角点的纵坐标</span><br><span class="line">double elementWidth = element.Size.Width;                               //获取元素的宽度</span><br><span class="line">double elementHight = element.Size.Height;                              //获取元素的宽度</span><br></pre></td></tr></table></figure><p>在封装“滑动”、“ TouchAction”等操作时可以用以上方法来获取坐标进行操作。</p><p><strong>示例：分装两个元素之间的滑动</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IWebElement elmentA = null;</span><br><span class="line">IWebElement elmentB = null;</span><br><span class="line">int startX = <span class="number">0</span>, startY = <span class="number">0</span>, endX = <span class="number">0</span>, endY = <span class="number">0</span>;</span><br><span class="line">int duration=<span class="number">0</span>,time=<span class="number">0</span>;</span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 从元素A的位置滑动到元素B的位置</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name="A"&gt;元素A的名称&lt;/param&gt;</span><br><span class="line">/// &lt;param name="B"&gt;元素B的名称&lt;/param&gt;</span><br><span class="line">/// &lt;param name="sDuration"&gt;滑动持续时间&lt;/param&gt;</span><br><span class="line">/// &lt;param name="sTime"&gt;滑动次数&lt;/param&gt;</span><br><span class="line">public void SwipeAToB(string A, string B,string sDuration,string sTime)</span><br><span class="line">&#123;</span><br><span class="line">    startX = elmentA.Location.X + elmentA.Size.Width / <span class="number">2</span>;                           //元素A的中心横坐标</span><br><span class="line">    startY = elmentA.Location.Y + elmentA.Size.Height / <span class="number">2</span>;                          //元素A的中心纵坐标</span><br><span class="line">    endX = elmentB.Location.X + elmentB.Size.Width / <span class="number">2</span>;                             //元素B的中心横坐标</span><br><span class="line">    endY = elmentB.Location.Y + elmentB.Size.Height / <span class="number">2</span>;                            //元素B的中心纵坐标</span><br><span class="line"></span><br><span class="line">    duration = string.IsNullOrEmpty(sDuration) ? 1500 : int.Parse(sDuration);       //持续时间为空时，默认设置为1500毫秒</span><br><span class="line">    time = string.IsNullOrEmpty(sTime) ? 1500 : int.Parse(sTime);                   //滑动次数为空时，默认设置为滑动1次</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; time; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        driver.Swipe(startX, startY, endX, endY, duration);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：element.Loaction和element.Size,每次获取时都会重新去手机里获取，为节省时间如果有获取相同值的，建议储存成变量。</p><h3 id="取消重新安装unlock和setting"><a href="#取消重新安装unlock和setting" class="headerlink" title="取消重新安装unlock和setting"></a>取消重新安装unlock和setting</h3><p>注销如下代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Appium\node_modules\appium\lib\devices\android\android.js</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span>.series([</span><br><span class="line">    this.initJavaVersion.bind(this),</span><br><span class="line">    this.initAdb.bind(this),</span><br><span class="line">    this.packageAndLaunchActivityFromManifest.bind(this),</span><br><span class="line">    this.initUiautomator.bind(this),</span><br><span class="line">    this.prepareDevice.bind(this),</span><br><span class="line">    this.checkApiLevel.bind(this),</span><br><span class="line">    this.pushStrings.bind(this),</span><br><span class="line">    this.processFromManifest.bind(this),</span><br><span class="line">    this.uninstallApp.bind(this),</span><br><span class="line">    this.installAppForTest.bind(this),</span><br><span class="line">    this.forwardPort.bind(this),</span><br><span class="line">    this.pushAppium.bind(this),</span><br><span class="line">    this.initUnicode.bind(this),</span><br><span class="line"></span><br><span class="line">    // DO NOT push settings app <span class="keyword">and</span> unlock app</span><br><span class="line">    //this.pushSettingsApp.bind(this),</span><br><span class="line">    //this.pushUnlock.bind(this),</span><br><span class="line"></span><br><span class="line">    function (cb) &#123;this.uiautomator.start(cb);&#125;.bind(this),</span><br><span class="line">    this.wakeUp.bind(this),</span><br><span class="line">    this.unlock.bind(this),</span><br><span class="line">    this.getDataDir.bind(this),</span><br><span class="line">    this.setupCompressedLayoutHierarchy.bind(this),</span><br><span class="line">    this.startAppUnderTest.bind(this),</span><br><span class="line">    this.initAutoWebview.bind(this),</span><br><span class="line">    this.setActualCapabilities.bind(this)</span><br><span class="line">  ])</span><br></pre></td></tr></table></figure><h3 id="一台Mac电脑同时跑多个IOS-appium服务"><a href="#一台Mac电脑同时跑多个IOS-appium服务" class="headerlink" title="一台Mac电脑同时跑多个IOS appium服务"></a>一台Mac电脑同时跑多个IOS appium服务</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">iOS appium A服务：appium -p <span class="number">4723</span> --tmp /tmp/tmp4723</span><br><span class="line">iOS appium B服务：appium -p <span class="number">4724</span> --tmp /tmp/tmp4724</span><br></pre></td></tr></table></figure><p>注意：tmp参数必不可少，否则会出现跑脚本时不断切换服务器切换不到另外一台服务器的问题</p><h3 id="Android-appium服务器执行自动化脚本一个多小时总是报FATAL-ERROR-CALL-AND-RETRY-LAST-Allocation-failed-process-out-of-memory内存溢出"><a href="#Android-appium服务器执行自动化脚本一个多小时总是报FATAL-ERROR-CALL-AND-RETRY-LAST-Allocation-failed-process-out-of-memory内存溢出" class="headerlink" title="Android appium服务器执行自动化脚本一个多小时总是报FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - process out of memory内存溢出"></a>Android appium服务器执行自动化脚本一个多小时总是报FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - process out of memory内存溢出</h3><p>通过调整\Appium\node_modules.bin\appium.cmd中的–max-old-space-size内存限制大小参数值</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@IF EXIST &quot;%~dp0\node.exe&quot; (</span><br><span class="line">  &quot;%~dp0\node.exe&quot;  &quot;%~dp0\..\appium\bin\appium.js&quot; %*</span><br><span class="line">) ELSE (</span><br><span class="line">  node --max-old-space-size&#x3D;2047 --gc-global  &quot;%~dp0\..\appium\bin\appium.js&quot; %*</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>注：–max-old-space-size参数值设置超过2047，如2048启动appium服务器也会报FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - process out of memory<br>查看了相关资料，原来是Node V8做了内存限制，限制了JavaScript所能使用的内存（64位为1.9GB，32位为1GB），暂时还不明白它为啥要做此限制。</p>]]></content>
      <categories>
        <category>Appium</category>
      </categories>
      <tags>
        <tag>appium</tag>
      </tags>
  </entry>
  <entry>
    <title>Appium服务关键字</title>
    <url>/2016/07/01/2016-07-01-Appium-service-keyworks/</url>
    <content><![CDATA[<h3 id="Appium-服务关键字"><a href="#Appium-服务关键字" class="headerlink" title="Appium 服务关键字"></a>Appium 服务关键字</h3><expand_table><table><thead><tr><th>关键字</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td><code>automationName</code></td><td>你想使用的自动化测试引擎</td><td><code>Appium</code> (默认) 或 <code>Selendroid</code></td></tr><tr><td><code>platformName</code></td><td>你要测试的手机操作系统</td><td><code>iOS</code>, <code>Android</code>, 或 <code>FirefoxOS</code></td></tr><tr><td><code>platformVersion</code></td><td>手机操作系统版本</td><td>例如： <code>7.1</code>, <code>4.4</code></td></tr><tr><td><code>deviceName</code></td><td>使用的手机类型或模拟器类型</td><td><code>iPhone Simulator</code>, <code>iPad Simulator</code>, <code>iPhone Retina 4-inch</code>, <code>Android Emulator</code>, <code>Galaxy S4</code>, 等。在 iOS 上，这个关键字的值必须是使用 <code>instruments -s devices</code> 得到的可使用的设备名称之一。在 Android 上，这个关键字目前不起作用。</td></tr><tr><td><code>app</code></td><td><code>.ipa</code> or <code>.apk</code>文件所在的本地绝对路径或者远程路径,也可以是一个包括两者之一的<code>.zip</code>。 Appium会先尝试安装路径对应的应用在适当的真机或模拟器上。针对Android系统，如果你指定<code>app-package</code>和<code>app-activity</code>(具体见下面)的话，那么就可以不指定<code>app</code>。 <strong>会与 <code>browserName</code> 冲突</strong></td><td>比如<code>/abs/path/to/my.apk</code>或<code>http://myapp.com/app.ipa</code></td></tr><tr><td><code>browserName</code></td><td>需要进行自动化测试的手机 web 浏览器名称。如果是对应用进行自动化测试，这个关键字的值应为空。</td><td>iOS 系统上可以用 ‘Safari’ ，Android 系统上可以用 ‘Chrome’, ‘Chromium’, 或 ‘Browser’。</td></tr><tr><td><code>newCommandTimeout</code></td><td>设置命令超时时间，单位：秒。达到超时时间仍未接收到新的命令时 Appium 会假设客户端退出然后自动结束会话。</td><td>比如 <code>60</code></td></tr><tr><td><code>autoLaunch</code></td><td>Appium是否需要自动安装和启动应用。默认值<code>true</code></td><td><code>true</code>, <code>false</code></td></tr><tr><td><code>language</code></td><td>(Sim/Emu-only) 设定模拟器 ( simulator / emulator ) 的语言。</td><td>如： <code>fr</code></td></tr><tr><td><code>locale</code></td><td>(Sim/Emu-only) 设定模拟器 ( simulator / emulator ) 的区域设置。</td><td>如： <code>fr_CA</code></td></tr><tr><td><code>udid</code></td><td>连接的物理设备的唯一设备标识</td><td>如： <code>1ae203187fc012g</code></td></tr><tr><td><code>orientation</code></td><td>(Sim/Emu-only) 在一个设定的方向模式中开始测试</td><td><code>LANDSCAPE</code> (横向) 或 <code>PORTRAIT</code> (纵向)</td></tr><tr><td><code>autoWebview</code></td><td>直接转换到 WebView 上下文。 默认值 <code>false</code>、</td><td><code>true</code>, <code>false</code></td></tr><tr><td><code>noReset</code></td><td>不要在会话前重置应用状态。默认值<code>false</code>。</td><td><code>true</code>, <code>false</code></td></tr><tr><td><code>fullReset</code></td><td>(iOS) 删除整个模拟器目录。(Android) 通过卸载——而不是清空数据——来重置应用状态。在 Android 上，这也会在会话结束后自动清除被测应用。默认值 <code>false</code></td><td><code>true</code>, <code>false</code></td></tr></tbody></table><a id="more"></a><h3 id="Android特有"><a href="#Android特有" class="headerlink" title="Android特有"></a>Android特有</h3><expand_table><table><thead><tr><th>关键字</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td><code>appActivity</code></td><td>你要从你的应用包中启动的 Android Activity 名称。它通常需要在前面添加 <code>.</code> (如：使用<code>.MainActivity</code> 而不是 <code>MainActivity</code>)</td><td><code>MainActivity</code>, <code>.Settings</code></td></tr><tr><td><code>appPackage</code></td><td>你想运行的Android应用的包名</td><td>比如<code>com.example.android.myApp</code>, <code>com.android.settings</code></td></tr><tr><td><code>appWaitActivity</code></td><td>你想要等待启动的 Android Activity 名称</td><td><code>SplashActivity</code></td></tr><tr><td><code>deviceReadyTimeout</code></td><td>设置等待一个模拟器或真机准备就绪的超时时间</td><td><code>5</code></td></tr><tr><td><code>androidCoverage</code></td><td>用于执行测试的 instrumentation 类。作为命令 <code>adb shell am instrument -e coverage true -w</code> 的 <code>-w</code> 参数。</td><td><code>com.my.Pkg/com.my.Pkg.instrumentation.MyInstrumentation</code></td></tr><tr><td><code>enablePerformanceLogging</code></td><td>(仅适用于 Chrome 和 webview) 开启 Chromedriver 的性能日志。 (默认 <code>false</code>)</td><td><code>true</code>, <code>false</code></td></tr><tr><td><code>androidDeviceReadyTimeout</code></td><td>等待设备在启动应用后准备就绪的超时时间。以秒为单位。</td><td>如 <code>30</code></td></tr><tr><td><code>androidDeviceSocket</code></td><td>开发工具的 socket 名称。只有在被测应用是一个使用 Chromium 内核的浏览器时需要。 socket 会被浏览器打开，然后 Chromedriver 把它作为开发者工具来进行连接。</td><td>如 <code>chrome_devtools_remote</code></td></tr><tr><td><code>avd</code></td><td>需要启动的 AVD (安卓虚拟设备) 名称。</td><td>如 <code>api19</code></td></tr><tr><td><code>avdLaunchTimeout</code></td><td>以毫秒为单位，等待 AVD 启动并连接到 ADB 的超时时间。(默认值 <code>120000</code>)</td><td><code>300000</code></td></tr><tr><td><code>avdReadyTimeout</code></td><td>以毫秒为单位，等待 AVD 完成启动动画的超时时间。(默认值 <code>120000</code>)</td><td><code>300000</code></td></tr><tr><td><code>avdArgs</code></td><td>启动 AVD 时需要加入的额外的参数。</td><td>如 <code>-netfast</code></td></tr><tr><td><code>useKeystore</code></td><td>使用一个自定义的 keystore 来对 apk 进行重签名。默认值 <code>false</code></td><td><code>true</code> or <code>false</code></td></tr><tr><td><code>keystorePath</code></td><td>自定义 keystore 的路径。默认： ~/.android/debug.keystore</td><td>如 <code>/path/to.keystore</code></td></tr><tr><td><code>keystorePassword</code></td><td>自定义 keystore 的密码。</td><td>如 <code>foo</code></td></tr><tr><td><code>keyAlias</code></td><td>key 的别名</td><td>如 <code>androiddebugkey</code></td></tr><tr><td><code>keyPassword</code></td><td>key 的密码</td><td>如 <code>foo</code></td></tr><tr><td><code>chromedriverExecutable</code></td><td>webdriver 可执行文件的绝对路径 (如果 Chromium 核心提供了对应的 webdriver， 应该用它代替 Appium 自带的 webdriver)</td><td><code>/abs/path/to/webdriver</code></td></tr><tr><td><code>autoWebviewTimeout</code></td><td>以毫秒为单位，等待 Webview 上下文激活的时间。默认值 <code>2000</code></td><td>如 <code>4</code></td></tr><tr><td><code>intentAction</code></td><td>用于启动 activity 的 intent action。 (默认值 <code>android.intent.action.MAIN</code>)</td><td>如 <code>android.intent.action.MAIN</code>, <code>android.intent.action.VIEW</code></td></tr><tr><td><code>intentCategory</code></td><td>用于启动 activity 的 intent category。 (默认值 <code>android.intent.category.LAUNCHER</code>)</td><td>如 <code>android.intent.category.LAUNCHER</code>, <code>android.intent.category.APP_CONTACTS</code></td></tr><tr><td><code>intentFlags</code></td><td>用于启动 activity 的标识 ( flags ) (默认值 <code>0x10200000</code>)</td><td>如 <code>0x10200000</code></td></tr><tr><td><code>optionalIntentArguments</code></td><td>用于启动 activity 的额外 intent 参数。请查看 <a href="http://developer.android.com/tools/help/adb.html#IntentSpec" target="_blank" rel="noopener">Intent 参数</a></td><td>如 <code>--esn &lt;EXTRA_KEY&gt;</code>, <code>--ez &lt;EXTRA_KEY&gt; &lt;EXTRA_BOOLEAN_VALUE&gt;</code></td></tr><tr><td><code>stopAppOnReset</code></td><td>在使用 adb 启动应用前停止被测应用的进程 ( process ) 。如果被测应用是被另一个应用创建的，当这个参数被设定为 false 时，允许另一个应用的进程在使用 adb 启动被测应用时继续存活。默认值 <code>true</code></td><td><code>true</code> 或 <code>false</code></td></tr><tr><td><code>unicodeKeyboard</code></td><td>使用 Unicode 输入法。默认值 <code>false</code></td><td><code>true</code> 或 <code>false</code></td></tr><tr><td><code>resetKeyboard</code></td><td>在设定了 <code>unicodeKeyboard</code> 关键字的 Unicode 测试结束后，重置输入法到原有状态。如果单独使用，将会被忽略。默认值 <code>false</code></td><td><code>true</code> 或 <code>false</code></td></tr><tr><td><code>noSign</code></td><td>跳过检查和对应用进行 debug 签名的步骤。只能在使用 UiAutomator 时使用，使用 selendroid 是不行。默认值 <code>false</code></td><td><code>true</code> 或 <code>false</code></td></tr><tr><td><code>ignoreUnimportantViews</code></td><td>调用 uiautomator 的函数 <code>setCompressedLayoutHierarchy()</code>。由于 Accessibility 命令在忽略部分元素的情况下执行速度会加快，这个关键字能加快测试执行的速度。被忽略的元素将不能够被找到，因此这个关键字同时也被实现成可以随时改变的 *设置 ( settings ) * 。默认值 <code>false</code></td><td><code>true</code> 或 <code>false</code></td></tr></tbody></table><h3 id="iOS特有"><a href="#iOS特有" class="headerlink" title="iOS特有"></a>iOS特有</h3><expand_table><table><thead><tr><th>关键字</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td><code>calendarFormat</code></td><td>(Sim-only) 为iOS的模拟器设置日历格式</td><td>如 <code>gregorian</code> (公历)</td></tr><tr><td><code>bundleId</code></td><td>被测应用的 bundle ID 。用于在真实设备中启动测试，也用于使用其他需要 bundle ID 的关键字启动测试。在使用 bundle ID 在真实设备上执行测试时，你可以不提供 <code>app</code> 关键字，但你必须提供 <code>udid</code> 。</td><td>如 <code>io.appium.TestApp</code></td></tr><tr><td><code>udid</code></td><td>连接的真实设备的唯一设备编号 ( Unique device identifier )</td><td>如 <code>1ae203187fc012g</code></td></tr><tr><td><code>launchTimeout</code></td><td>以毫秒为单位，在 Appium 运行失败之前设置一个等待 instruments 的时间</td><td>比如： <code>20000</code></td></tr><tr><td><code>locationServicesEnabled</code></td><td>(Sim-only) 强制打开或关闭定位服务。默认值是保持当前模拟器的设定</td><td><code>true</code> 或 <code>false</code></td></tr><tr><td><code>locationServicesAuthorized</code></td><td>(Sim-only) 通过修改 plist 文件设定是否允许应用使用定位服务，从而避免定位服务的警告出现。默认值是保持当前模拟器的设定。请注意在使用这个关键字时，你同时需要使用 <code>bundleId</code> 关键字来发送你的应用的 bundle ID。</td><td><code>true</code> 或者 <code>false</code></td></tr><tr><td><code>autoAcceptAlerts</code></td><td>当 iOS 的个人信息访问警告 (如 位置、联系人、图片) 出现时，自动选择接受( Accept )。默认值 <code>false</code>。</td><td><code>true</code> 或者 <code>false</code></td></tr><tr><td><code>autoDismissAlerts</code></td><td>当 iOS 的个人信息访问警告 (如 位置、联系人、图片) 出现时，自动选择不接受( Dismiss )。默认值 <code>false</code>。</td><td><code>true</code> 或者 <code>false</code></td></tr><tr><td><code>nativeInstrumentsLib</code></td><td>使用原生 intruments 库 (即关闭 instruments-without-delay )</td><td><code>true</code> 或者 <code>false</code></td></tr><tr><td><code>nativeWebTap</code></td><td>(Sim-only) 在Safari中允许”真实的”，非基于 javascript 的 web 点击 (tap) 。 默认值： <code>false</code>。注意：取决于 viewport 大小/比例， 点击操作不一定能精确地点中对应的元素。</td><td><code>true</code> 或者 <code>false</code></td></tr><tr><td><code>safariInitialUrl</code></td><td>(Sim-only) (&gt;= 8.1) 初始化 safari 的时使用的地址。默认是一个本地的欢迎页面</td><td>如 <code>https://www.github.com</code></td></tr><tr><td><code>safariAllowPopups</code></td><td>(Sim-only) 允许 javascript 在 Safari 中创建新窗口。默认保持模拟器当前设置。</td><td><code>true</code> 或者 <code>false</code></td></tr><tr><td><code>safariIgnoreFraudWarning</code></td><td>(Sim-only) 阻止 Safari 显示此网站可能存在风险的警告。默认保持浏览器当前设置。</td><td><code>true</code> 或者 <code>false</code></td></tr><tr><td><code>safariOpenLinksInBackground</code></td><td>(Sim-only) Safari 是否允许链接在新窗口打开。默认保持浏览器当前设置。</td><td><code>true</code> 或者 <code>false</code></td></tr><tr><td><code>keepKeyChains</code></td><td>(Sim-only) 当 Appium 会话开始/结束时是否保留存放密码存放记录 (keychains) (库(Library)/钥匙串(Keychains))</td><td><code>true</code> 或者 <code>false</code></td></tr><tr><td><code>localizableStringsDir</code></td><td>从哪里查找本地化字符串。默认值 <code>en.lproj</code></td><td><code>en.lproj</code></td></tr><tr><td><code>processArguments</code></td><td>通过 instruments 传递到 AUT 的参数</td><td>如 <code>-myflag</code></td></tr><tr><td><code>interKeyDelay</code></td><td>以毫秒为单位，按下每一个按键之间的延迟时间。</td><td>如 <code>100</code></td></tr><tr><td><code>showIOSLog</code></td><td>是否在 Appium 的日志中显示设备的日志。默认值 <code>false</code></td><td><code>true</code> 或者 <code>false</code></td></tr><tr><td><code>sendKeyStrategy</code></td><td>输入文字到文字框的策略。模拟器默认值：<code>oneByOne</code> (一个接着一个) 。真实设备默认值：<code>grouped</code> (分组输入)</td><td><code>oneByOne</code>, <code>grouped</code> 或 <code>setValue</code></td></tr><tr><td><code>screenshotWaitTimeout</code></td><td>以秒为单位，生成屏幕截图的最长等待时间。默认值： 10。</td><td>如 <code>5</code></td></tr><tr><td><code>waitForAppScript</code></td><td>用于判断 “应用是否被启动” 的 iOS 自动化脚本代码。默认情况下系统等待直到页面内容非空。结果必须是布尔类型。</td><td>例如 <code>true;</code>, <code>target.elements().length &gt; 0;</code>, <code>$.delay(5000); true;</code></td></tr></tbody></table></expand_table></expand_table></expand_table>]]></content>
      <categories>
        <category>Appium</category>
      </categories>
      <tags>
        <tag>appium</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下命令行安装配置android-sdk</title>
    <url>/2016/07/07/2016-07-07-Linux-install-android-sdk-by-command/</url>
    <content><![CDATA[<ol><li><p>首先需要下载android sdk tools only</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;dl.google.com&#x2F;android&#x2F;android-sdk_r24.4.1-linux.tgz</span><br><span class="line">tar -zxvf android-sdk_r24.4.1-linux.tgz</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>查看可用的SDK组件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android list sdk --all</span><br></pre></td></tr></table></figure></li><li><p>下载需要的组件, 注意–all 这个参数一定要加上, 否则后面filter里的序号不起作用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android update sdk -u --all --filter 1,2,3,5</span><br></pre></td></tr></table></figure></li><li><p>更新已安装的<code>SDK</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android update sdk --no-ui</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>sdk</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Appcrawler执行</title>
    <url>/2016/07/19/2016-07-19-Appcrawler-doing/</url>
    <content><![CDATA[<h4 id="启动Appium服务器"><a href="#启动Appium服务器" class="headerlink" title="启动Appium服务器"></a>启动Appium服务器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TaoYi-Mac:~ taoyi$  appium --session-override -p 4730 --no-reset</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="运行appcrawler，执行测试"><a href="#运行appcrawler，执行测试" class="headerlink" title="运行appcrawler，执行测试"></a>运行appcrawler，执行测试</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TaoYi-Mac:appcrawler taoyi$ java -jar appcrawler-1.2.1.jar -a /usr/<span class="built_in">local</span>/TestGroupCode/appcrawler/fengche.apk</span><br></pre></td></tr></table></figure><p>如果APP的包名和启动时的Activity无法自动识别的话，需要手动指定</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TaoYi-Mac:appcrawler taoyi$ java -jar appcrawler-1.2.1.jar -a /usr/<span class="built_in">local</span>/TestGroupCode/appcrawler/fengche.apk --capability appPackage=com.shadow.fengche,appActivity=com.shadow.fengche.ui.activity.SplashActivity</span><br></pre></td></tr></table></figure><p>使用配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-c /usr/<span class="built_in">local</span>/TestGroupCode/appcrawler/fengche_profile.yml</span><br></pre></td></tr></table></figure><p>帮助文档</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: appcrawler [options]</span><br><span class="line"></span><br><span class="line">  -a, --app &lt;value&gt;        Android或者iOS的文件地址, 可以是网络地址, 赋值给appium的app选项</span><br><span class="line">  -c, --conf &lt;value&gt;       配置文件地址</span><br><span class="line">  -p, --platform &lt;value&gt;   平台类型android或者ios, 默认会根据app后缀名自动判断</span><br><span class="line">  -t, --maxTime &lt;value&gt;    最大运行时间. 单位为秒. 超过此值会退出. 默认最长运行3个小时</span><br><span class="line">  -u, --appium &lt;value&gt;     appium的url地址</span><br><span class="line">  -o, --output &lt;value&gt;     遍历结果的保存目录. 里面会存放遍历生成的截图, 思维导图和日志</span><br><span class="line">  --capability k1=v1,k2=v2...</span><br><span class="line">                           appium capability选项, 这个参数会覆盖-c指定的配置模板参数, 用于在模板配置之上的参数微调</span><br><span class="line">  -r, --report &lt;value&gt;     输出html和xml报告</span><br><span class="line">  --template &lt;value&gt;       输出代码模板</span><br><span class="line">  --master &lt;value&gt;         master的diff.yml文件地址</span><br><span class="line">  --candidate &lt;value&gt;      candidate环境的diff.yml文件</span><br><span class="line">  --diff                   执行diff对比</span><br><span class="line">  -vv, --verbose           是否展示更多debug信息</span><br><span class="line">  --<span class="built_in">help</span>                   </span><br><span class="line">示例</span><br><span class="line">appcrawler -a xueqiu.apk</span><br><span class="line">appcrawler -a xueqiu.apk --capability noReset=<span class="literal">true</span></span><br><span class="line">appcrawler -c conf/xueqiu.json -p android -o result/</span><br><span class="line">appcrawler -c xueqiu.json --capability udid=[你的udid] -a Snowball.app</span><br><span class="line">appcrawler -c xueqiu.json -a Snowball.app -u 4730</span><br><span class="line">appcrawler -c xueqiu.json -a Snowball.app -u http://127.0.0.1:4730/wd/hub</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动已经安装过的app</span></span><br><span class="line">appcrawler --capability appPackage=com.xueqiu.android,appActivity=.welcomeActivity</span><br><span class="line"></span><br><span class="line"><span class="comment">#从已经结束的结果中重新生成报告</span></span><br><span class="line">appcrawler --report result/</span><br><span class="line"></span><br><span class="line"><span class="comment">#新老版本对比</span></span><br><span class="line">appcrawler --candidate result/ --master pre/ --report ./</span><br><span class="line"></span><br><span class="line"><span class="comment">#自动生成Page Object代码模板文件</span></span><br><span class="line">appcrawler --template PageObjectDemo.ssp --output result/</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据wda的inspector生成测试用例代码</span></span><br><span class="line">appcrawler --template PageObjectDemo.ssp -u http://localhost:8100</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>appcrawler</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven常用命令介绍</title>
    <url>/2016/09/18/2016-09-18-Maven-common-command-introduction/</url>
    <content><![CDATA[<ol><li><code>mvn clean</code><br>清除产生的项目</li><li><code>mvn compile</code><br>编译源代码,生成对应的CLASS文件</li><li><code>mvn package</code><br>打包,生成JAR文件，只能本程序用，或者拷贝到其它项目使用<a id="more"></a></li></ol><ol start="4"><li><code>mvn install -Dmaven.test.skip=ture</code><br>给任何目标添加maven.test.skip 属性就能跳过测试</li><li><code>mvn test</code><br>运行测试,生成对应的CLASS文件</li><li><code>mvn site</code><br>生成项目相关信息的网站</li><li><code>mvn site-deploy</code><br>生成项目相关信息的网站并部署</li><li><code>mvn install</code><br>打包,生成JAR文件，并在本地仓库生成JAR和POM文件，供其它Maven项目共享</li><li><code>mvn help:effective-pom</code><br>看这个“有效的 (effective)”POM，它暴露了 Maven的默认设置</li><li><code>mvn dependency:analyze</code> 或 <code>mvn dependency:tree</code></li></ol><p>11.</p>]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>pip命令使用</title>
    <url>/2016/08/08/2016-08-08-pip-command-use/</url>
    <content><![CDATA[<ol><li><p>安装<code>mitmproxy</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -H pip install mitmproxy --upgrade --ignore-installed six</span><br></pre></td></tr></table></figure><a id="more"></a></li></ol><p>由于<code>six-1.4.1</code>无法被卸载，也无法被更新，所以在安装需要更新six的软件时，就会一直报错。<br>解决办法就是安装软件的时候，忽略<code>six-1.4.1</code>，也就是<code>--ignore-installed six</code></p><ol start="2"><li><p>列出已经安装的第三方库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip list --format=columns</span><br></pre></td></tr></table></figure></li><li><p>设置默认的<code>pip list</code>显示方式<br>在<code>~/.pip/pip.conf</code>配置文件中，修改默认的<code>list</code>访问方式。<br>添加一个配置项：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[list]</span><br><span class="line">format=columns</span><br></pre></td></tr></table></figure></li><li><p>修改<code>pip</code>镜像源</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = http://pypi.douban.com/simple</span><br><span class="line"></span><br><span class="line">[install]</span><br><span class="line">trusted-host=pypi.douban.com</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/2016/05/15/2016-05-15-Linux-common-commands/</url>
    <content><![CDATA[<h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><h4 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h4><ol><li><p>Moving files</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv test0001.txt /opt/</span><br></pre></td></tr></table></figure></li><li><p>Moving multiple files</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv test0001.txt test0002.txt /opt/</span><br><span class="line">mv *.txt /opt/</span><br></pre></td></tr></table></figure></li><li><p>Moving directory</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv /tmp/test0001 /opt/</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>Renaming files or directory</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv test0001.txt test0002.txt</span><br></pre></td></tr></table></figure></li><li><p>Renaming directory</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv test0001 test0002</span><br></pre></td></tr></table></figure></li><li><p>Print what happen</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv -v *.txt /opt/</span><br></pre></td></tr></table></figure></li><li><p>Using interactive mode</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv -i *.txt /opt/</span><br></pre></td></tr></table></figure></li><li><p>Using update option</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv -uv *.txt /opt/</span><br></pre></td></tr></table></figure></li><li><p>Do not overwrite any existing file</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv -vn *.txt /opt/</span><br></pre></td></tr></table></figure></li><li><p>Create backup when copying</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv -bv *.txt /opt/</span><br></pre></td></tr></table></figure><p><a href="https://linoxide.com/linux-command/mv-command-linux/" target="_blank" rel="noopener">10 Practical mv Command Examples</a></p></li></ol><h4 id="cp-copy"><a href="#cp-copy" class="headerlink" title="cp(copy)"></a>cp(copy)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp -r /opt/android/tools /opt/      <span class="comment"># -r 复制文件夹</span></span><br></pre></td></tr></table></figure><h4 id="ps-process-status"><a href="#ps-process-status" class="headerlink" title="ps(process status)"></a>ps(process status)</h4><p>参数说明：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps 的参数非常多, 在此仅列出几个常用的参数并大略介绍含义</span><br><span class="line">-A 列出所有的行程</span><br><span class="line">-w 显示加宽可以显示较多的资讯</span><br><span class="line">-au 显示较详细的资讯</span><br><span class="line">-aux 显示所有包含其他使用者的行程</span><br><span class="line">au(x) 输出格式 :</span><br><span class="line">USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND</span><br><span class="line">USER: 行程拥有者</span><br><span class="line">PID: pid</span><br><span class="line">%CPU: 占用的 CPU 使用率</span><br><span class="line">%MEM: 占用的记忆体使用率</span><br><span class="line">VSZ: 占用的虚拟记忆体大小</span><br><span class="line">RSS: 占用的记忆体大小</span><br><span class="line">TTY: 终端的次要装置号码 (minor device number of tty)</span><br><span class="line">STAT: 该行程的状态:</span><br><span class="line">D: 无法中断的休眠状态 (通常 IO 的进程)</span><br><span class="line">R: 正在执行中</span><br><span class="line">S: 静止状态</span><br><span class="line">T: 暂停执行</span><br><span class="line">Z: 不存在但暂时无法消除</span><br><span class="line">W: 没有足够的记忆体分页可分配</span><br><span class="line">&lt;: 高优先序的行程</span><br><span class="line">N: 低优先序的行程</span><br><span class="line">L: 有记忆体分页分配并锁在记忆体内 (实时系统或捱A I&#x2F;O)</span><br><span class="line">START: 行程开始时间</span><br><span class="line">TIME: 执行的时间</span><br><span class="line">COMMAND:所执行的指令</span><br></pre></td></tr></table></figure><ol><li>简单应用<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep tomcat</span><br></pre></td></tr></table></figure></li><li>复杂查询展示<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:&lt;&lt;BLOCK</span><br><span class="line">循环20次</span><br><span class="line">-o 参数用来格式化输出``指定字段``，字段头为%mem, 只展示指定进程的该字段</span><br><span class="line">tail -1 取每次循环结果的最后一行，且间隔1秒</span><br><span class="line">awk用于处理结果展示，展示第一列值和每次的平均值</span><br><span class="line">BLOCK</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(seq 20); \</span><br><span class="line"><span class="keyword">do</span> ps -o %mem -p 20752 \</span><br><span class="line">| tail -1;sleep 1;<span class="keyword">done</span> \</span><br><span class="line">| awk <span class="string">'&#123;t+=$1;print $1,t/NR&#125;'</span></span><br></pre></td></tr></table></figure></li><li><code>-o</code>参数使用<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># shadow @ shadow in ~ [9:14:44] C:130</span></span><br><span class="line">   $ ps -o pid,ppid,pgrp,session,tpgid,comm </span><br><span class="line">     PID  PPID  PGRP  SESS TPGID COMMAND</span><br><span class="line">    4415  4414  4415  4223  4618 zsh</span><br><span class="line">    4618  4415  4618  4223  4618 ps</span><br></pre></td></tr></table></figure></li></ol><h4 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h4><h4 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h4><h4 id="swatch-simple-watcher"><a href="#swatch-simple-watcher" class="headerlink" title="swatch(simple watcher)"></a>swatch(simple watcher)</h4><h4 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h4><h4 id="tar-tape-archive"><a href="#tar-tape-archive" class="headerlink" title="tar(tape archive)"></a>tar(tape archive)</h4><h4 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h4><h4 id="git"><a href="#git" class="headerlink" title="git"></a>git</h4><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">一次显示整个文件:cat filename</span><br><span class="line">从键盘创建一个文件:cat &gt; filename 只能创建新文件,不能编辑已有文件.</span><br><span class="line">将几个文件合并为一个文件:cat file1 file2 &gt; file</span><br></pre></td></tr></table></figure><ol><li><em>合并文件</em><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat *.csv &gt; all-in-one.csv														<span class="comment"># 合并多个CSV文件，不考虑顺序</span></span><br><span class="line">cat file1.csv file2.csv file3.csv ... file[n].csv &gt; all-in-one.csv				<span class="comment"># 合并多个CSV文件，考虑顺序</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="chmod-change-mode-更改文件／文件夹权限"><a href="#chmod-change-mode-更改文件／文件夹权限" class="headerlink" title="chmod(change mode)    # 更改文件／文件夹权限"></a>chmod(change mode) # 更改文件／文件夹权限</h4><h4 id="chown-change-owner-更改文件／文件夹所有者"><a href="#chown-change-owner-更改文件／文件夹所有者" class="headerlink" title="chown(change owner)   # 更改文件／文件夹所有者"></a>chown(change owner) # 更改文件／文件夹所有者</h4><h4 id="cd-change-directory-进入某目录"><a href="#cd-change-directory-进入某目录" class="headerlink" title="cd(change directory)  # 进入某目录"></a>cd(change directory) # 进入某目录</h4><h4 id="df-disk-free"><a href="#df-disk-free" class="headerlink" title="df(disk free)"></a>df(disk free)</h4><h4 id="dirs"><a href="#dirs" class="headerlink" title="dirs"></a>dirs</h4><h4 id="列举当前目录文件ls、ll-list"><a href="#列举当前目录文件ls、ll-list" class="headerlink" title="列举当前目录文件ls、ll(list)"></a>列举当前目录文件<code>ls</code>、<code>ll</code>(list)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ll -t                     <span class="comment"># 当前目录文件按倒叙排列，最新的排最前面</span></span><br><span class="line">ll -t | tac               <span class="comment"># 当前目录文件按顺序排列，最早的排最前面</span></span><br></pre></td></tr></table></figure><h4 id="mkdir-make-directories"><a href="#mkdir-make-directories" class="headerlink" title="mkdir(make directories)"></a>mkdir(make directories)</h4><h4 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -f 					<span class="comment"># 直接删除文件，无需确认</span></span><br><span class="line">rm -r 					<span class="comment"># 删除文件夹，需要确认</span></span><br><span class="line">rm -rf 					<span class="comment"># 直接删除目录及其中的全部文件，无需确认</span></span><br></pre></td></tr></table></figure><h4 id="fdisk"><a href="#fdisk" class="headerlink" title="fdisk"></a>fdisk</h4><h4 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h4><h4 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h4><h4 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tail -f catalina.out | grep request      <span class="comment"># 查看Linux服务器实时日志，catalina.out为服务器实时记录日志的文件</span></span><br></pre></td></tr></table></figure><h4 id="touch-创建文件（夹）命令"><a href="#touch-创建文件（夹）命令" class="headerlink" title="touch           # 创建文件（夹）命令"></a>touch # 创建文件（夹）命令</h4><ol><li>使用文件名作为参数，可以同时创建多个文件。当目标文件已经存在时，将更新该文件的时间标记，否则将创建指定名称的空文件。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch file1 file2</span><br></pre></td></tr></table></figure></li><li>创建新的目录<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost home]<span class="comment"># mkdir dir1</span></span><br><span class="line">[root@localhost home]<span class="comment"># mkdir dir2/dir</span></span><br><span class="line">mkdir: 无法创建目录<span class="string">"dir2/dir"</span>: 没有那个文件或目录</span><br><span class="line">[root@localhost home]<span class="comment"># mkdir -p dir2/dir                    # -p 确保目录名称存在，不存在的就建一个</span></span><br><span class="line">[root@localhost home]<span class="comment">#</span></span><br></pre></td></tr></table></figure></li><li>同时创建多级目录<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost home]<span class="comment"># ls</span></span><br><span class="line">justin lost+found t</span><br><span class="line">[root@localhost home]<span class="comment"># mkdir -p &#123;dir1,dir2/&#123;dir3,dir4&#125;&#125;</span></span><br><span class="line">[root@localhost home]<span class="comment"># ls</span></span><br><span class="line">dir1 dir2 justin lost+found t</span><br><span class="line">[root@localhost home]<span class="comment"># ls dir2</span></span><br><span class="line">dir3 dir4</span><br><span class="line">[root@localhost home]<span class="comment">#</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="rmdir-删除文件（夹）命令"><a href="#rmdir-删除文件（夹）命令" class="headerlink" title="rmdir            # 删除文件（夹）命令"></a>rmdir # 删除文件（夹）命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost home]<span class="comment"># mkdir -p &#123;dir1,dir2/dir3&#125;            # -p 当子目录被删除后也成为空目录的话，则顺便一并删除</span></span><br><span class="line">[root@localhost home]<span class="comment"># ls</span></span><br><span class="line">dir1 dir2 justin lost+found t</span><br><span class="line">[root@localhost home]<span class="comment"># rmdir dir1</span></span><br><span class="line">[root@localhost home]<span class="comment"># rmdir dir2</span></span><br><span class="line">rmdir: 删除 <span class="string">"dir2"</span>失败: 目录非空</span><br><span class="line">[root@localhost home]<span class="comment"># rmdir -p dir2/dir3/</span></span><br><span class="line">[root@localhost home]<span class="comment"># ls</span></span><br><span class="line">justin lost+found t</span><br><span class="line">[root@localhost home]<span class="comment">#</span></span><br></pre></td></tr></table></figure><h4 id="更改文件（夹）权限"><a href="#更改文件（夹）权限" class="headerlink" title="更改文件（夹）权限"></a>更改文件（夹）权限</h4><ol><li>更改所有者权限<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chmod 600 ××× <span class="comment">#（只有所有者有读和写的权限）</span></span><br><span class="line">sudo chmod 644 ××× <span class="comment">#（所有者有读和写的权限，组用户只有读的权限）</span></span><br><span class="line">sudo chmod 700 ××× <span class="comment">#（只有所有者有读和写以及执行的权限）</span></span><br><span class="line">sudo chmod 666 ××× <span class="comment">#（每个人都有读和写的权限）</span></span><br><span class="line">sudo chmod 777 ××× <span class="comment">#（每个人都有读和写以及执行的权限）</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">sudo chmod -（代表类型）[×××（所有者）×××（组用户）×××（其他用户）]           # xxx为一个二进制组合</span><br></pre></td></tr></table></figure>其中×××指文件名（也可以是文件夹名，不过要在chmod后加-ld）。<br>三位数的每一位都表示一个用户类型的权限设置。取值是0～7，即二进制的[000]~[111]。<br>这个三位的二进制数的每一位分别表示读、写、执行权限。<br>如000表示三项权限均无，而100表示只读。这样，我们就有了下面的对应：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0 [000] 无任何权限</span><br><span class="line">4 [100] 只读权限</span><br><span class="line">6 [110] 读写权限</span><br><span class="line">7 [111] 读写执行权限</span><br></pre></td></tr></table></figure></li><li>更改文件（夹）权限<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod [-cfvR] [--<span class="built_in">help</span>] [--version] mode file...</span><br><span class="line">mode : 权限设定字串, 格式如下 : [ugoa...][[+-=][rwxX]...][,...]</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">u 表示该档案的拥有者，</span><br><span class="line">g 表示与该档案的拥有者属于同一个群体(group)者，</span><br><span class="line">o 表示其他以外的人，</span><br><span class="line">a 表示这三者皆是。 </span><br><span class="line"><span class="bullet">+ </span>表示增加权限、- 表示取消权限、= 表示唯一设定权限。 </span><br><span class="line">r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该档案是个子目录或者该档案已经被设定过为可执行。 </span><br><span class="line">-c : 若该档案权限确实已经更改，才显示其更改动作 </span><br><span class="line">-f : 若该档案权限无法被更改也不要显示错误讯息 </span><br><span class="line">-v : 显示权限变更的详细资料 </span><br><span class="line">-R : 对目前目录下的所有档案与子目录进行相同的权限变更(即以递回的方式逐个变更) </span><br><span class="line">--help : 显示辅助说明 </span><br><span class="line">--version : 显示版本</span><br></pre></td></tr></table></figure></li><li>文件（夹）的权限<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">-rw------- (600) -- 只有属主有读写权限。 </span><br><span class="line">-rw-r--r-- (644) -- 只有属主有读写权限；而属组用户和其他用户只有读权限。 </span><br><span class="line">-rwx------ (700) -- 只有属主有读、写、执行权限。 </span><br><span class="line">-rwxr-xr-x (755) -- 属主有读、写、执行权限；而属组用户和其他用户只有读、执行权限。 </span><br><span class="line">-rwx--x--x (711) -- 属主有读、写、执行权限；而属组用户和其他用户只有执行权限。 </span><br><span class="line">-rw-rw-rw- (666) -- 所有用户都有文件读、写权限。这种做法不可取。 </span><br><span class="line">-rwxrwxrwx (777) -- 所有用户都有读、写、执行权限。更不可取的做法。</span><br></pre></td></tr></table></figure>以下是对目录的两个普通设定:<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">drwx------ (700) - 只有属主可在目录中读、写。 </span><br><span class="line">drwxr-xr-x (755) - 所有用户可读该目录，但只有属主才能改变目录中的内容。</span><br></pre></td></tr></table></figure></li></ol><h4 id="查看目录剩余空间大小，du-disk-usage"><a href="#查看目录剩余空间大小，du-disk-usage" class="headerlink" title="查看目录剩余空间大小，du(disk usage)"></a>查看目录剩余空间大小，<em>du(disk usage)</em></h4><ol><li><p>df -hl # 查看磁盘剩余空间</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">文件系统       容量    已用   可用                      已用%          挂载点</span><br><span class="line">Filesystem   Size   Used  Avail Capacity iused      ifree %iused  Mounted on</span><br><span class="line">/dev/disk1  112Gi   91Gi   21Gi    82% 1900939 4293066340    0%   /</span><br></pre></td></tr></table></figure></li><li><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">df -h              <span class="comment"># 命令查看整个硬盘的大小 ，-h表示人可读的</span></span><br><span class="line">du -sh [目录名]     <span class="comment"># 返回该目录的大小</span></span><br><span class="line">du -sm [文件夹]     <span class="comment"># 返回该文件夹总M数</span></span><br><span class="line">df --<span class="built_in">help</span>          <span class="comment"># 查看更多功能</span></span><br><span class="line">du --<span class="built_in">help</span>          <span class="comment"># 查看更多功能</span></span><br></pre></td></tr></table></figure><p>32.3</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">du -sh xmldb/</span><br><span class="line">du -sm * | sort -n      <span class="comment"># 统计当前目录大小并按大小排序</span></span><br><span class="line">du -sk * | grep taoyi   <span class="comment"># 查看一个人的大小</span></span><br><span class="line">du -m | cut <span class="string">"/"</span> -f 2    <span class="comment"># 查看第二个/字符前的文字</span></span><br><span class="line">wc [-lmw]               <span class="comment"># -l: 多少行；-m: 多少字符；-w: 多少字</span></span><br></pre></td></tr></table></figure></li><li><p>查看当前目录下各文件夹的大小</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">du -h --max-depth=1</span><br><span class="line">du -d 1 -h              <span class="comment"># 命令查看当前目录下所有文件夹的大小 -d 指深度，后面加一个数值</span></span><br></pre></td></tr></table></figure><p><code>--max-depth=n</code>表示深入到第<code>n</code>层目录，此处设置为<code>1</code>，即表示深入<code>1</code>层，即查看当前目录下各个文件夹的大小；如果设置为<code>0</code>，表示不深入到子目录，那得出的就是当前目录的总大小。</p></li><li><p>du命令参数</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">du [-abcDhHklmsSx] [-L &lt;符号连接&gt;][-X &lt;文件&gt;][--block-size][--exclude=&lt;目录或文件&gt;] [--max-depth=&lt;目录层数&gt;][--<span class="built_in">help</span>][--version][目录或文件]</span><br></pre></td></tr></table></figure><ul><li><code>-a或-all</code>：为每个指定文件显示磁盘使用情况，或者为目录中每个文件显示各自磁盘使用情况。</li><li><code>-b或-bytes</code>：显示目录或文件大小时，以byte为单位。</li><li><code>-c或–total</code>：除了显示目录或文件的大小外，同时也显示所有目录或文件的总和。</li><li><code>-D或–dereference-args</code>：显示指定符号连接的源文件大小。</li><li><code>-h或–human-readable</code>：以K，M，G为单位，提高信息的可读性。</li><li><code>-H或–si</code>：与-h参数相同，但是K，M，G是以1000为换算单位,而不是以1024为换算单位。</li><li><code>-k或–kilobytes</code>：以1024 bytes为单位。</li><li><code>-l或–count-links</code>：重复计算硬件连接的文件。</li><li><code>-L&lt;符号连接&gt;或–dereference&lt;符号连接&gt;</code>：显示选项中所指定符号连接的源文件大小。</li><li><code>-m或–megabytes</code>：以1MB为单位。</li><li><code>-s或–summarize</code>：仅显示总计，即当前目录的大小。</li><li><code>-S或–separate-dirs</code>：显示每个目录的大小时，并不含其子目录的大小。</li><li><code>-x或–one-file-xystem</code>：以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。</li><li><code>-X&lt;文件&gt;或–exclude-from=&lt;文件&gt;</code>：在&lt;文件&gt;指定目录或文件。</li><li><code>–exclude=&lt;目录或文件&gt;</code>：略过指定的目录或文件。</li><li><code>–max-depth=&lt;目录层数&gt;</code>：超过指定层数的目录后，予以忽略。</li><li><code>–help</code>：显示帮助。</li><li><code>–version</code>：显示版本信息。</li><li><code>-0</code>：（杠零）表示每列出一个目录的信息，不换行，而是直接输出下一个目录的信息。</li></ul></li></ol><h4 id="修改root密码"><a href="#修改root密码" class="headerlink" title="修改root密码"></a>修改root密码</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@shadow000902 /]<span class="comment"># passwd								# 修改密码命令</span></span><br><span class="line">Changing password <span class="keyword">for</span> user root.</span><br><span class="line">New password: 												<span class="comment"># 输入新的密码</span></span><br><span class="line">Retype new password: 										<span class="comment"># 确认新的密码</span></span><br><span class="line">passwd: all authentication tokens updated successfully.		<span class="comment"># 成功修改密码提示</span></span><br></pre></td></tr></table></figure><h4 id="永久修改ubuntu主机名"><a href="#永久修改ubuntu主机名" class="headerlink" title="永久修改ubuntu主机名"></a>永久修改<code>ubuntu</code>主机名</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/hostname</span><br></pre></td></tr></table></figure><h4 id="永久修改redhat-centos主机名"><a href="#永久修改redhat-centos主机名" class="headerlink" title="永久修改redhat/centos主机名"></a>永久修改<code>redhat/centos</code>主机名</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network</span><br></pre></td></tr></table></figure><p>修改<code>HOSTNAME</code>字段值即修改了主机名</p><h4 id="创建用户及用户组，并修改密码切换用户"><a href="#创建用户及用户组，并修改密码切换用户" class="headerlink" title="创建用户及用户组，并修改密码切换用户"></a>创建用户及用户组，并修改密码切换用户</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># root @ shadow in ~ [10:30:20] C:1</span></span><br><span class="line">$ adduser shadow                            <span class="comment"># 创建用户</span></span><br><span class="line"><span class="comment"># root @ shadow in ~ [10:34:45]</span></span><br><span class="line">$ groupadd shadow                           <span class="comment"># 创建用户组</span></span><br><span class="line">groupadd：“shadow”组已存在                    <span class="comment"># 在创建用户的时候，已经同时创建了同名的用户组</span></span><br><span class="line"><span class="comment"># root @ shadow in ~ [10:36:52]</span></span><br><span class="line">$ passwd shadow                             <span class="comment"># 修改用户密码</span></span><br><span class="line">更改用户 shadow 的密码 。</span><br><span class="line">新的 密码：</span><br><span class="line">重新输入新的 密码：</span><br><span class="line">passwd：所有的身份验证令牌已经成功更新。</span><br><span class="line"><span class="comment"># root @ shadow in ~ [10:38:41]</span></span><br><span class="line">$ su - shadow                               <span class="comment"># 切换用户</span></span><br><span class="line">[shadow@shadow ~]$                          <span class="comment"># 切换用户成功</span></span><br></pre></td></tr></table></figure><h4 id="删除用户及用户文件夹"><a href="#删除用户及用户文件夹" class="headerlink" title="删除用户及用户文件夹"></a>删除用户及用户文件夹</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有用户</span></span><br><span class="line">cat /etc/passwd|grep -v nologin|grep -v halt|grep -v shutdown|awk -F<span class="string">":"</span> <span class="string">'&#123; print $1"|"$3"|"$4 &#125;'</span>|more</span><br><span class="line">su - root                                   <span class="comment"># 首先需要切换到root用户</span></span><br><span class="line">userdel -r shadow                           <span class="comment"># 删除shadow用户及用户文件夹</span></span><br></pre></td></tr></table></figure><h4 id="CentOS卸载软件"><a href="#CentOS卸载软件" class="headerlink" title="CentOS卸载软件"></a>CentOS卸载软件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove tomcat</span><br></pre></td></tr></table></figure><h4 id="“shadow-is-not-in-the-sudoers-file-This-incident-will-be-reported-”解决方法"><a href="#“shadow-is-not-in-the-sudoers-file-This-incident-will-be-reported-”解决方法" class="headerlink" title="“shadow is not in the sudoers file.  This incident will be reported.”解决方法"></a>“shadow is not in the sudoers file. This incident will be reported.”解决方法</h4><p>在<code>root</code>用户下，执行<code>visudo</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">91 <span class="comment">## Allow root to run any commands anywhere</span></span><br><span class="line">92 root    ALL=(ALL)       ALL</span><br><span class="line">93 shadow  ALL=(ALL)       ALL        <span class="comment"># 添加这段内容，第一个单词是，需要可以使用sudo权限的用户名</span></span><br><span class="line">94</span><br><span class="line">95 <span class="comment">## Allows members of the 'sys' group to run networking, software,</span></span><br></pre></td></tr></table></figure><h4 id="Ubuntu-命令行安装语言包"><a href="#Ubuntu-命令行安装语言包" class="headerlink" title="Ubuntu 命令行安装语言包"></a>Ubuntu 命令行安装语言包</h4><p>中文语言包:</p><ul><li>language-pack-zh-hans 简体中文</li><li>language-pack-zh-hans-base</li><li>language-pack-zh-hant 繁体中文</li><li>language-pack-zh-hant-base<br>安装命令：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install  language-pack-zh-han*</span><br></pre></td></tr></table></figure><p>最后运行语言支持检查</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install $(check-language-support)</span><br></pre></td></tr></table></figure><p>会更新最新的语言支持包。</p><h4 id="查找文件夹"><a href="#查找文件夹" class="headerlink" title="查找文件夹"></a>查找文件夹</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -name mysql</span><br></pre></td></tr></table></figure><h4 id="tree-Mac下树形查看当前目录文件"><a href="#tree-Mac下树形查看当前目录文件" class="headerlink" title="tree Mac下树形查看当前目录文件"></a>tree Mac下树形查看当前目录文件</h4><ol><li>使用<code>find</code>命令模拟出<code>tree</code>命令的效果<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -<span class="built_in">print</span> | sed -e <span class="string">'s;[^/]*/;|____;g;s;____|; |;g'</span></span><br></pre></td></tr></table></figure>当然也可以写一个别名来快速执行该命令，运行如下命令，将上面这个命令写到<code>~/.bash_profile</code>里，以后直接运行<code>tree</code>命令就更方便了:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> tree=<span class="string">"find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'"</span></span><br></pre></td></tr></table></figure></li><li>使用 <code>homebrew</code> 安装 <code>tree</code> 命令行<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install tree</span><br></pre></td></tr></table></figure>这样就在你的<code>mac</code>上安装了 <code>tree</code> 命令行了。</li><li><code>tree</code>命令行参数（只实用与安装了<code>tree</code>命令行工具）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-a 显示所有文件和目录。</span><br><span class="line">-A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。</span><br><span class="line">-C 在文件和目录清单加上色彩，便于区分各种类型。</span><br><span class="line">-d 显示目录名称而非内容。</span><br><span class="line">-D 列出文件或目录的更改时间。</span><br><span class="line">-f 在每个文件或目录之前，显示完整的相对路径名称。</span><br><span class="line">-F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上&quot;*&quot;,&quot;&#x2F;&quot;,&quot;&#x3D;&quot;,&quot;@&quot;,&quot;|&quot;号。</span><br><span class="line">-g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。</span><br><span class="line">-i 不以阶梯状列出文件或目录名称。</span><br><span class="line">-I 不显示符合范本样式的文件或目录名称。</span><br><span class="line">-l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。</span><br><span class="line">-n 不在文件和目录清单加上色彩。</span><br><span class="line">-N 直接列出文件和目录名称，包括控制字符。</span><br><span class="line">-p 列出权限标示。</span><br><span class="line">-P 只显示符合范本样式的文件或目录名称。</span><br><span class="line">-q 用&quot;?&quot;号取代控制字符，列出文件和目录名称。</span><br><span class="line">-s 列出文件或目录大小。</span><br><span class="line">-t 用文件和目录的更改时间排序。</span><br><span class="line">-u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。</span><br><span class="line">-x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。</span><br></pre></td></tr></table></figure></li><li><code>tree</code>结果乱码解决<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tree -N</span><br></pre></td></tr></table></figure><ul><li>-N Print non-printable characters as is instead of as escaped octal numbers.</li></ul></li></ol><h4 id="ls-R"><a href="#ls-R" class="headerlink" title="ls -R"></a>ls -R</h4><p>列出当前目录下所有目录及文件的相对路径</p><img src="/2016/05/15/2016-05-15-Linux-common-commands/%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%E5%8F%8A%E6%96%87%E4%BB%B6%E5%A4%B9.png" title="当前目录下的所有文件及文件夹"><h4 id="last显示最近的登录用户信息"><a href="#last显示最近的登录用户信息" class="headerlink" title="last显示最近的登录用户信息"></a><code>last</code>显示最近的登录用户信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># shadow @ kickseed in ~ [11:34:38]</span></span><br><span class="line">$ last -n 5</span><br><span class="line">shadow   pts/1        172.17.53.161    Tue Dec 11 11:34   still logged <span class="keyword">in</span></span><br><span class="line">shadow   pts/1        172.17.49.117    Tue Dec 11 11:16 - 11:17  (00:00)</span><br><span class="line">shadow   pts/1        172.17.53.161    Tue Dec 11 10:47 - 10:48  (00:00)</span><br><span class="line">shadow   pts/1        172.17.52.197    Mon Dec 10 18:57 - 18:58  (00:01)</span><br><span class="line">shadow   pts/4        172.17.53.34     Mon Dec 10 17:05 - 17:34  (00:28)</span><br><span class="line"></span><br><span class="line">wtmp begins Mon Dec  3 10:06:15 2018</span><br></pre></td></tr></table></figure><h3 id="进阶命令"><a href="#进阶命令" class="headerlink" title="进阶命令"></a>进阶命令</h3><h4 id="top"><a href="#top" class="headerlink" title="top"></a>top</h4><p>参数：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-b：以批处理模式操作,搭配&#96;n&#96;参数一起使用，可以用来将&#96;top&#96;的结果输出到档案内</span><br><span class="line">-c：切换显示模式，共有两种模式，一是只显示执行档的名称，另一种是显示完整的路径与名称S : 累积模式，会将己完成或消失的子行程 ( dead child process ) 的 CPU time 累积起来</span><br><span class="line">-d：屏幕刷新间隔时间；</span><br><span class="line">-I：忽略失效过程；</span><br><span class="line">-s：保密模式；</span><br><span class="line">-S：累积模式；</span><br><span class="line">-i：不显示任何闲置 (idle) 或无用 (zombie) 的行程；</span><br><span class="line">-u&lt;用户名&gt;：指定用户名；</span><br><span class="line">-p&lt;进程号&gt;：指定进程；</span><br><span class="line">-n&lt;次数&gt;：循环显示的次数，完成后将会退出 top</span><br></pre></td></tr></table></figure><ol><li>监控每个进程的情况<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">top -b -d 1 -n 20 -p 3951 | grep --line-buffered ^3951 | awk <span class="string">'&#123;cpu+=$9;mem+=$10&#125;&#123;print $9,$10,cpu/NR,mem/NR&#125;'</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="文本去重"><a href="#文本去重" class="headerlink" title="文本去重"></a>文本去重</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/bin/sh</span></span><br><span class="line">file=<span class="string">'test.txt'</span></span><br><span class="line">sort -n <span class="variable">$file</span> | uniq</span><br><span class="line">sort -n <span class="variable">$file</span> | awk <span class="string">'&#123;if($0!=line)print; line=$0&#125;'</span></span><br><span class="line">sort -n <span class="variable">$file</span> | sed <span class="string">'$!N; /^\(.*\)\n\1$/!P; D'</span></span><br></pre></td></tr></table></figure><h4 id="scp-本地文件与服务器文件交互"><a href="#scp-本地文件与服务器文件交互" class="headerlink" title="scp     # 本地文件与服务器文件交互"></a>scp # 本地文件与服务器文件交互</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从服务器下载文件</span></span><br><span class="line">scp username@servername:/remote_path/filename ~/local_destination</span><br><span class="line"><span class="comment"># 上传本地文件到服务器</span></span><br><span class="line">scp ~/local_path/local_filename username@servername:/remote_path</span><br><span class="line"><span class="comment"># 从服务器下载整个目录</span></span><br><span class="line">scp -r username@servername:/remote_path/remote_dir/ ~/local_destination</span><br><span class="line"><span class="comment"># 上传目录到服务器</span></span><br><span class="line">scp  -r ~/local_dir username@servername:/remote_path/remote_dir</span><br></pre></td></tr></table></figure><h4 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h4><p>参数：<br>-a或–all: 显示所有连线中的Socket。<br>-A&lt;网络类型&gt;或–&lt;网络类型&gt;: 列出该网络类型连线中的相关地址。<br>-c或–continuous: 持续列出网络状态。<br>-C或–cache: 显示路由器配置的快取信息。<br>-e或–extend: 显示网络其他相关信息。<br>-F或–fib: 显示FIB。<br>-g或–groups: 显示多重广播功能群组组员名单。<br>-h或–help: 在线帮助。<br>-i或–interfaces: 显示网络界面信息表单。<br>-l或–listening: 显示监控中的服务器的Socket。<br>-M或–masquerade: 显示伪装的网络连线。<br>-n或–numeric: 直接使用IP地址，而不通过域名服务器。<br>-N或–netlink或–symbolic: 显示网络硬件外围设备的符号连接名称。<br>-o或–timers: 显示计时器。<br>-p或–programs: 显示正在使用Socket的程序识别码和程序名称。<br>-r或–route 显示Routing: Table。<br>-s或–statistice: 显示网络工作信息统计表。<br>-t或–tcp: 显示TCP传输协议的连线状况。<br>-u或–udp: 显示UDP传输协议的连线状况。<br>-v或–verbose: 显示指令执行过程。<br>-V或–version: 显示版本信息。<br>-w或–raw: 显示RAW传输协议的连线状况。<br>-x或–unix 此参数的效果和指定”-A: unix”参数相同。<br>–ip或–inet 此参数的效果和指定”-A: inet”参数相同。</p><ol><li>获取端口占用情况【Linux系统】<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># shadow @ shadow in ~ [0:33:06] </span></span><br><span class="line">$ netstat -anp | grep 80</span><br><span class="line">(No info could be <span class="built_in">read</span> <span class="keyword">for</span> <span class="string">"-p"</span>: geteuid()=1000 but you should be root.)</span><br><span class="line">tcp        0      0 172.16.194.20:41622     100.100.45.73:80        TIME_WAIT   -                   </span><br><span class="line">tcp        0      0 172.16.194.20:39718     100.100.30.25:80        ESTABLISHED -                   </span><br><span class="line">tcp6       0      0 :::8080                 :::*                    LISTEN      -                   </span><br><span class="line">unix  2      [ ACC ]     STREAM     LISTENING     2056613  -                    @/containerd-shim/moby/ebda2e07d80217a8cd7876f119624690f5cf6fda30a1f2a6d53607b63502680e/shim.sock</span><br><span class="line">unix  3      [ ]         STREAM     CONNECTED     2057472  -                    @/containerd-shim/moby/ebda2e07d80217a8cd7876f119624690f5cf6fda30a1f2a6d53607b63502680e/shim.sock</span><br><span class="line">unix  3      [ ]         STREAM     CONNECTED     11580    -                    /run/systemd/journal/stdout</span><br><span class="line">unix  3      [ ]         STREAM     CONNECTED     11801    -</span><br></pre></td></tr></table></figure></li><li>获取不重复的网络连接数量<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:&lt;&lt;BLOCK</span><br><span class="line">获取所有的网络连接</span><br><span class="line">取第五列</span><br><span class="line">对第五列数据用``:``分隔，并取第一列</span><br><span class="line">数据升序排列</span><br><span class="line">对重复数据进行去重，``-c``统计出现次数</span><br><span class="line">识别每行开头的数字，对结果降序排列</span><br><span class="line">计算一共有多少个不重复的数据</span><br><span class="line">BLOCK</span><br><span class="line">netstat -tnp \</span><br><span class="line">| awk <span class="string">'&#123;print $5&#125;'</span> \</span><br><span class="line">| awk -F: <span class="string">'&#123;print $1&#125;'</span> \</span><br><span class="line">| sort \</span><br><span class="line">| uniq -c \</span><br><span class="line">| sort -nr \</span><br><span class="line">| wc -l</span><br></pre></td></tr></table></figure><ol start="3"><li>显示tcp，udp的端口和进程等相关情况<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@shadow ~]<span class="comment"># netstat -tunlp</span></span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      24569/sshd          </span><br><span class="line">udp        0      0 0.0.0.0:4038            0.0.0.0:*                           724/dhclient        </span><br><span class="line">udp        0      0 0.0.0.0:68              0.0.0.0:*                           724/dhclient        </span><br><span class="line">udp        0      0 172.17.0.1:123          0.0.0.0:*                           32364/ntpd          </span><br><span class="line">udp        0      0 172.16.194.20:123       0.0.0.0:*                           32364/ntpd          </span><br><span class="line">udp        0      0 127.0.0.1:123           0.0.0.0:*                           32364/ntpd          </span><br><span class="line">udp        0      0 0.0.0.0:123             0.0.0.0:*                           32364/ntpd          </span><br><span class="line">udp6       0      0 :::61028                :::*                                724/dhclient        </span><br><span class="line">udp6       0      0 :::123                  :::*                                32364/ntpd</span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="lsof-Mac下查看端口占用情况"><a href="#lsof-Mac下查看端口占用情况" class="headerlink" title="lsof    # Mac下查看端口占用情况"></a>lsof # Mac下查看端口占用情况</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TyMac in ~ [1:54:51] C:130</span></span><br><span class="line">$ lsof -i tcp:5555</span><br><span class="line">COMMAND   PID  USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME</span><br><span class="line">adb     94280 taoyi   14u  IPv4 0x38c46a3265bac391      0t0  TCP 192.168.31.71:49360-&gt;192.168.31.233:personal-agent (ESTABLISHED)</span><br></pre></td></tr></table></figure><h3 id="Linux-三剑客"><a href="#Linux-三剑客" class="headerlink" title="Linux 三剑客"></a>Linux 三剑客</h3><h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><ol><li>在文件中查找单词<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep shadow /etc/hosts</span><br></pre></td></tr></table></figure></li><li>在多个文件中查找单词<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep shadow /etc/hosts /etc/hosts1</span><br></pre></td></tr></table></figure></li><li>列出包含指定单词的文件的文件名<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep -l shadow /etc/hosts /etc/hosts1 /etc/hosts2 /etc/hosts3</span><br></pre></td></tr></table></figure></li><li>在文件中查找指定单词并显示匹配行的行号<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep -n shadow /etc/hosts /etc/hosts1</span><br></pre></td></tr></table></figure></li><li>输出不包含指定单词的行<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep -v shadow /etc/hosts</span><br></pre></td></tr></table></figure></li><li>输出所有以指定单词开头的行<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep ^ shadow /etc/hosts</span><br></pre></td></tr></table></figure></li><li>输出所有以指定单词结尾的行<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep shadow$ /etc/hosts</span><br></pre></td></tr></table></figure></li><li>参数递归地查找指定单词<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep -r shadow /etc/hosts</span><br></pre></td></tr></table></figure></li><li>查找文件中所有的空行<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep ^$ /etc/hosts</span><br></pre></td></tr></table></figure></li><li>同时查找多个单词<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep -e shadow -e shadows /etc/hosts</span><br></pre></td></tr></table></figure></li><li>计算匹配到的单词的数量<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep -c -f shadow /etc/hosts</span><br></pre></td></tr></table></figure></li><li><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep -irn <span class="string">"SyncWriteStream"</span> ./node_modules/hexo-deployer-git/</span><br></pre></td></tr></table></figure></li><li>打印查找结果匹配行的上下n行<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 前后5行</span></span><br><span class="line">grep -5 <span class="string">'parttern'</span> inputfile</span><br><span class="line"><span class="comment"># 后5行</span></span><br><span class="line">grep -A 5 <span class="string">'parttern'</span> inputfile</span><br><span class="line"><span class="comment"># 前5行</span></span><br><span class="line">grep -B 5 <span class="string">'parttern'</span> inputfile</span><br></pre></td></tr></table></figure></li><li>不查找有些文件夹<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 排除单个目录</span></span><br><span class="line">grep -E <span class="string">"http"</span> ./ -R --exclude-dir=.git</span><br><span class="line"><span class="comment"># 排除多个目录</span></span><br><span class="line">grep -E <span class="string">"http"</span> . -R --exclude-dir=&#123;.git,venv&#125;</span><br><span class="line"><span class="comment"># 排除多个文件</span></span><br><span class="line">grep -E <span class="string">"http"</span> . -R --exclude=&#123;_config.yml,debug.log&#125;</span><br><span class="line"><span class="comment"># 排除多个类型后缀的文件</span></span><br><span class="line">grep -E <span class="string">"http"</span> . -R --exclude=*.&#123;py,js&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h4><p>参数：<br>NR：表示从awk开始执行后，按照记录分隔符读取的数据次数，默认的记录分隔符为换行符，因此默认的就是读取的数据行数，NR可以理解为Number of Record的缩写。<br>NF：表示目前的记录被分割的字段的数目，NF可以理解为Number of Field。<br>BEGIN：模式指定的操作在读取任何输入之前执行，且只执行一次。<br>END：模式指定的操作在读取所有的输入后执行。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ll | awk <span class="string">'&#123;print $9&#125;'</span>                                   <span class="comment"># 输出ll命令拿到的信息，并只打印出第九列</span></span><br><span class="line">ll | awk <span class="string">'&#123;$1=$2=$3=$4=$5=$6=$7=$8=""; print $0&#125;'</span>       <span class="comment"># 排除多列，并打印出后面的所有列，“0”表示所有</span></span><br><span class="line">ll | awk <span class="string">'&#123;print $1, $2&#125;'</span>                               <span class="comment"># 输出ll命令拿到的信息，并只打印出第一、第二列</span></span><br><span class="line">awk <span class="string">'&#123;print $1 $2&#125;'</span> filename                            <span class="comment"># 打印完文件的第一行，再打印文件的第二行</span></span><br><span class="line">awk <span class="string">'END&#123;print NR&#125;'</span> filename                            <span class="comment"># 打印文本文件的总行数</span></span><br><span class="line">awk <span class="string">'NR==1&#123;print&#125;'</span> filename                             <span class="comment"># 打印文本第一行</span></span><br><span class="line">ps -ef | grep tomcat | awk <span class="string">'&#123;printf $2 "\t" &#125;'</span>          <span class="comment"># 获取 ps 出来的结果的第二列；printf 打印结果时，取消换行符；"\t"把结果之间用空格分隔</span></span><br></pre></td></tr></table></figure><ol><li>获取 Linux 服务器下所有的 tomcat<br>原始数据：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shadow   14034     1  0 Dec07 ?        00:26:10 /opt/shadow/java/bin/java -Djava.util.logging.config.file=/home/shadow/tomcats/12005_ironman-test/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djdk.tls.ephemeralDHKeySize=2048 -Djava.protocol.handler.pkgs=org.apache.catalina.webresources -Dignore.endorsed.dirs= -classpath /home/shadow/tomcats/12005_ironman-test/bin/bootstrap.jar:/home/shadow/tomcats/12005_ironman-test/bin/tomcat-juli.jar -Dcatalina.base=/home/shadow/tomcats/12005_ironman-test -Dcatalina.home=/home/shadow/tomcats/12005_ironman-test -Djava.io.tmpdir=/home/shadow/tomcats/12005_ironman-test/temp org.apache.catalina.startup.Bootstrap start</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep tomcat | awk <span class="string">'END&#123;print "The end!"&#125;BEGIN&#123;FS="/"&#125;&#123;print $10&#125;'</span></span><br><span class="line"><span class="comment"># 同</span></span><br><span class="line">ps -ef | grep tomcat | awk -F <span class="string">"/"</span> <span class="string">'&#123;print $10&#125;'</span></span><br></pre></td></tr></table></figure>获取结果：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">12005_ironman-test</span><br><span class="line">The end!</span><br></pre></td></tr></table></figure>其中<code>END{print &quot;The end!&quot;}</code>这一段非必要</li><li>awk 命令的参数<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ARGC               命令行参数个数</span><br><span class="line">ARGV               命令行参数排列</span><br><span class="line">ENVIRON            支持队列中系统环境变量的使用</span><br><span class="line">FILENAME           awk浏览的文件名</span><br><span class="line">FNR                浏览文件的记录数</span><br><span class="line">FS                 设置输入域分隔符，等价于命令行 -F选项</span><br><span class="line">NF                 浏览记录的域的个数</span><br><span class="line">NR                 已读的记录数</span><br><span class="line">OFS                输出域分隔符</span><br><span class="line">ORS                输出记录分隔符</span><br><span class="line">RS                 控制记录分隔符</span><br></pre></td></tr></table></figure></li><li>awk 命令格式<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">'条件1 &#123;动作1&#125; 条件2｛动作2｝…'</span> 文件名                  <span class="comment"># 命令方式一</span></span><br><span class="line">commend | awk <span class="string">'条件1 &#123;动作1&#125; 条件2｛动作2｝…'</span>              <span class="comment"># 命令方式二</span></span><br></pre></td></tr></table></figure></li><li>awk 结果排序<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># shadow @ kickseed in ~/tomcats [12:48:05] C:2</span></span><br><span class="line">$ ps -ef | grep tomcat | awk <span class="string">'END&#123;print "The end!"&#125;BEGIN&#123;FS="/"&#125;&#123;print $10 | "sort -r -n"&#125;'</span></span><br><span class="line">The end!</span><br><span class="line">12021_venom-test</span><br><span class="line">12020_asgard-test</span><br><span class="line">12019_redline-test</span><br><span class="line">12018_whiteDragonHorse-test</span><br><span class="line">12017_topgear-flow-test</span><br><span class="line">12014_topgear-test3</span><br><span class="line">12012_audit-test</span><br><span class="line">12005_ironman-test</span><br></pre></td></tr></table></figure>其中<code>-r</code>表示从大到小，不加该参数表示从小到大，<code>-n</code>表示按照数字排序</li></ol><h4 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h4><p><a href="https://www.cnblogs.com/maxincai/p/5146338.html" target="_blank" rel="noopener">sed命令用法</a></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[root@www ~]# sed [-nefr] [动作]</span><br><span class="line">选项与参数：</span><br><span class="line">-n ：使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN 的数据一般都会被列出到终端上。但如果加上 -n 参数后，则只有经过sed 特殊处理的那一行(或者动作)才会被列出来。</span><br><span class="line">-e ：直接在命令列模式上进行 sed 的动作编辑；</span><br><span class="line">-f ：直接将 sed 的动作写在一个文件内， -f filename 则可以运行 filename 内的 sed 动作；</span><br><span class="line">-r ：sed 的动作支持的是延伸型正规表示法的语法。(默认是基础正规表示法语法)</span><br><span class="line">-i ：直接修改读取的文件内容，而不是输出到终端。</span><br><span class="line"></span><br><span class="line">动作说明： [n1[,n2]]function</span><br><span class="line">n1, n2 ：不见得会存在，一般代表『选择进行动作的行数』，举例来说，如果我的动作是需要在 10 到 20 行之间进行的，则『 10,20[动作行为] 』</span><br><span class="line"></span><br><span class="line">function：</span><br><span class="line">a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～</span><br><span class="line">c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！</span><br><span class="line">d ：删除，因为是删除啊，所以 d 后面通常不接任何咚咚；</span><br><span class="line">i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；</span><br><span class="line">p ：列印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～</span><br><span class="line">s ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是啦！</span><br></pre></td></tr></table></figure><ol><li>以行为单位删除<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nl ~/test.txt | sed <span class="string">'2,5d'</span>                         <span class="comment"># 删除2～5行</span></span><br><span class="line">nl ~/test.txt | sed <span class="string">'2d'</span>                           <span class="comment"># 删除第2行</span></span><br><span class="line">nl ~/test.txt | sed <span class="string">'3,$d'</span>                         <span class="comment"># 删除3到最后一行</span></span><br></pre></td></tr></table></figure></li><li>以行为单位新增<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nl ~/test.txt | sed <span class="string">'2a drink tea'</span>                 <span class="comment"># 在第二行后即第三行加上“drink tea”</span></span><br><span class="line">nl ~/test.txt | sed <span class="string">'2i drink tea'</span>                 <span class="comment"># 在第二行前即第二行加上“drink tea”</span></span><br><span class="line">nl ~/test.txt | sed <span class="string">'2a drink tea or ......\'</span>      <span class="comment"># 在第二行后加上两行，每一行之间都必须要以反斜杠『 \ 』来进行新行的添加</span></span><br></pre></td></tr></table></figure></li><li>以行为单位替换<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nl ~/test.txt | sed <span class="string">'2,5c No 2-5 number'</span>           <span class="comment"># 将第2-5行的内容取代成为『No 2-5 number</span></span><br><span class="line">nl ~/test.txt | sed -n <span class="string">'5,7p'</span>                      <span class="comment"># 列出 ~/test.txt 文件内的第 5-7 行</span></span><br></pre></td></tr></table></figure></li><li>数据的搜索并显示<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nl ~/test.txt | sed <span class="string">'/root/p'</span>                      <span class="comment"># 如果root找到，除了输出所有行，还会输出匹配行</span></span><br><span class="line">nl ~/test.txt | sed -n <span class="string">'/root/p'</span>                   <span class="comment"># 只打印包含root的行</span></span><br></pre></td></tr></table></figure></li><li>数据的搜索并删除<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nl ~/test.txt | sed <span class="string">'/root/d'</span>                      <span class="comment"># 删除包含root的行，其他行输出</span></span><br></pre></td></tr></table></figure></li><li>数据的搜索并执行命令<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nl ~/test.txt | sed -n <span class="string">'/root/&#123;s/bash/blueshell/;p&#125;'</span>       <span class="comment"># 找到root对应的行，执行后面花括号中的一组命令，每个命令之间用分号分隔，这里把bash替换为blueshell，再输出这行</span></span><br><span class="line">nl ~/test.txt | sed -n <span class="string">'/root/&#123;s/bash/blueshell/;p;q&#125;'</span>     <span class="comment"># 最后的q是退出</span></span><br></pre></td></tr></table></figure></li><li><strong>数据的搜索并替换</strong><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed <span class="string">'s/要被取代的字串/新的字串/g'</span></span><br></pre></td></tr></table></figure></li><li>多点编辑<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nl ~/test.txt | sed -e <span class="string">'3,$d'</span> -e <span class="string">'s/bash/blueshell/'</span>       <span class="comment"># -e表示多点编辑，一条sed命令，删除/etc/passwd第三行到末尾的数据，并把bash替换为blueshell</span></span><br></pre></td></tr></table></figure></li><li><strong>直接修改文件内容</strong><br><code>sed</code>可以直接修改文件的内容，不必使用管道命令或数据流重导向<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">'s/\.$/\!/g'</span> test.txt                               <span class="comment"># 将 test.txt 内每一行结尾若为 . 则换成 ! sed 的『 -i 』选项可以直接修改文件内容</span></span><br><span class="line"><span class="comment"># 如果 -i 参数不生效的话，需要使用 -ig 参数</span></span><br><span class="line">sed -ig<span class="string">'s/要被取代的字串/新的字串/g'</span> test.txt</span><br><span class="line">sed -i <span class="string">'$a # This is a test'</span> test.txt                      <span class="comment"># 在 test.txt 最后一行加入『# This is a test』 $代表的是最后一行，而a的动作是新增</span></span><br></pre></td></tr></table></figure></li><li><strong>直接修改文件内容进阶</strong><br>对同一个文件中的多个字段同时做修改，并对原文件做备份。<br>原文本与替换文本之间用3个<code>@</code>分隔成两段<br>如果替换后的值，需要参数化取值，则只需要把<code>&#39;</code>换成<code>&quot;</code>即可。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i.backup -E \</span><br><span class="line">  -e <span class="string">"s@maCode = \".*\"@maCode = \"<span class="variable">$&#123;maCode&#125;</span>\"@"</span> \</span><br><span class="line">  -e <span class="string">"s@orderCode = \".*\"@orderCode = \"<span class="variable">$&#123;orderCode&#125;</span>\"@"</span> \</span><br><span class="line">  <span class="variable">$&#123;WORKSPACE&#125;</span>/mainStream/topgear/customMS001/customMS001_<span class="variable">$&#123;ENV&#125;</span>.py</span><br></pre></td></tr></table></figure></li><li><strong>删除和插入文件的倒数指定行</strong><br>删除文件的倒数第二行<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i.backup $(($(cat <span class="variable">$&#123;dest_file&#125;</span> | wc -l)))<span class="string">'d'</span> <span class="variable">$&#123;dest_file&#125;</span></span><br></pre></td></tr></table></figure>在倒数第二行开始插入字符「即倒数第一行和第二行之间插入需要插入的字符」<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i $(($(cat <span class="variable">$&#123;dest_file&#125;</span> | wc -l)+1))<span class="string">"i\\<span class="variable">$line</span>"</span> <span class="variable">$dest_file</span></span><br></pre></td></tr></table></figure></li><li><strong>匹配+替换的组合使用</strong><br>使用 \1 , \2代表第一个和第二个正则分组，用来分别取出 161～163 的第2列和第3列。<br>由于使用 () 的分组正则属于扩展正则表达式，所以需要增加 -E 选项来开启扩展正则的支持。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TyMac in ~ [13:32:06] </span></span><br><span class="line">   $ seq 161 163 | sed -E <span class="string">'s#.(.)(.)#\1#'</span></span><br><span class="line">   <span class="comment"># 以下为结果</span></span><br><span class="line">   6</span><br><span class="line">   6</span><br><span class="line">   6</span><br><span class="line">   </span><br><span class="line">   <span class="comment"># taoyi @ TyMac in ~ [13:32:46] </span></span><br><span class="line">   $ seq 161 163 | sed -E <span class="string">'s#.(.)(.)#\2#'</span></span><br><span class="line">   <span class="comment"># 以下为结果</span></span><br><span class="line">   1</span><br><span class="line">   2</span><br><span class="line">   3</span><br></pre></td></tr></table></figure></li><li><strong>在文件开头插入指定内容</strong><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在jobList文件的开头插入字符串`123456`</span></span><br><span class="line">sed -i <span class="string">"1i\\123456"</span> jobsList</span><br></pre></td></tr></table></figure></li></ol><h3 id="其它常用命令"><a href="#其它常用命令" class="headerlink" title="其它常用命令"></a>其它常用命令</h3><h4 id="jq"><a href="#jq" class="headerlink" title="jq"></a>jq</h4><h4 id="alias-用于简化shell命令"><a href="#alias-用于简化shell命令" class="headerlink" title="alias    # 用于简化shell命令"></a>alias # 用于简化shell命令</h4><p>在环境变量中加入如下内容</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> tree=<span class="string">'tree -N'</span></span><br></pre></td></tr></table></figure><p>然后执行<code>tree</code>，就相当于执行了<code>tree -N</code></p>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Robot-Framework测试用例编写规范</title>
    <url>/2016/05/19/2016-05-19-Robot-Framework-testcase-writing-specification/</url>
    <content><![CDATA[<h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><h4 id="测试套件的命名"><a href="#测试套件的命名" class="headerlink" title="测试套件的命名"></a>测试套件的命名</h4><p>Robotframework 的套件名称是直接从文件/目录的名字转换来的。文件的后缀名被去掉了而且下划线会被转换成空格，如果你的用到的单词都是小写的，那么开头字母会被转换成大写的。<br>比如 login_test.txt 会被转换成 Login Test, DHCP_and_DNS 会被转换成 DHCP and DNS。</p><a id="more"></a><h4 id="测试用例的命名"><a href="#测试用例的命名" class="headerlink" title="测试用例的命名"></a>测试用例的命名</h4><p>表达你需要做什么。</p><h4 id="关键词命名"><a href="#关键词命名" class="headerlink" title="关键词命名"></a>关键词命名</h4><p>表达这个关键词干了什么，而不是如何去做。<br>关键词应该是非常不同的抽象层次（比如，「输入字符」或者「用户登录到系统」）。</p><h4 id="生成和分解的命名"><a href="#生成和分解的命名" class="headerlink" title="生成和分解的命名"></a>生成和分解的命名</h4><p>用名称来描述这个步骤完成了什么。<br>如果生成或者分解包含了不相关的步骤，那么可以接受更抽象一点的名称<br>4.1 在名称中列举步骤是一个重复化和维护的问题（比如：登入系统，添加用户，激活警报和检查平衡）。<br>4.2 或许需要用到一些通用一些的名称比如「初始化系统」<br>每个用到这几个测试用例的人都需要明白这几个生成或者分解动作是干什么的</p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><h4 id="测试套件的结构"><a href="#测试套件的结构" class="headerlink" title="测试套件的结构"></a>测试套件的结构</h4><p>在套件中的用例应该是互相相关的。<br>1.1 如果测试用例拥有同样的生成或者分解部分，那么他们应该是属于一个套件的。<br>1.2 除非是数据驱动的，在一个套件中不要放10个以上的测试用例。<br>1.3 测试用例应该是独立的，用生成和分解来初始化他们。<br>1.4 如果测试用例之间无法避免地相关联。比如说，它可能是因为把所有的用例独立出来要化太多的时间在初始化上。<br>相关联的测试用例就那么几个（最多4到5个）。<br>下一个用例是用来验证上一个用例的结果的。（用${PREV TEST STATUS} 这个变量）。</p><h4 id="测试用例的结构"><a href="#测试用例的结构" class="headerlink" title="测试用例的结构"></a>测试用例的结构</h4><pre><code>2.1 测试用例应该是易懂的：一个测试用例只测试一件事情。
2.2 选择一个合适的抽象层面：一致地使用抽象水平（单一水平的抽象原则）；只包含与测试相关的信息。
2.3 用例可以分为两种：工作流程的测试用例；数据驱动的测试用例。</code></pre><h3 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h3><h4 id="工作流程的测试用例"><a href="#工作流程的测试用例" class="headerlink" title="工作流程的测试用例"></a>工作流程的测试用例</h4><pre><code>1.1 通常来说有以下这些部分：</code></pre><p>◦前置条件（可选，通常在生成部分）<br>◦动作 （对被测系统执行一些动作）<br>◦验证 （必须有一个验证的部分！）<br>◦清理 （可选，通常在分解部分，以保证用例已经执行完毕）</p><pre><code>1.2 关键词是用来描述这个用例做了什么。</code></pre><p>◦用清晰的关键词名称和合适的抽象层次。<br>◦应该包含足够的信息使得手动执行可以启动。<br>◦应该从来不需要文档或者沟通来告诉你这个用例在做什么。</p><pre><code>1.3 不同的用例可以有不同的抽象层次。</code></pre><p>◦详细的功能测试是更精确的。<br>◦端到端的测试可以是一个很高的抽象层次。<br>◦一个测试用例应该只使用一种抽象层次。</p><pre><code>1.4 不同的风格</code></pre><p>◦对于底层的详细测试和集成测试用例来讲应该是更关注技术细节。<br>◦「可执行定义」来扮演需求。<br>◦使用领域中的语言（术语？）。<br>◦所有人（包括顾客和产品负责人）都应该可以看明白。</p><pre><code>1.5 不复杂的逻辑</code></pre><p>◦不用 for 循环或者 if/else 判断结构。<br>◦小心给变量赋值。<br>◦测试用例不应该看起来像脚本一样难读。</p><pre><code>1.6 最多10步，越少越好。</code></pre><h4 id="数据驱动的测试用例"><a href="#数据驱动的测试用例" class="headerlink" title="数据驱动的测试用例"></a>数据驱动的测试用例</h4><pre><code>2.1 每个测试用例有一个高层次的关键词。</code></pre><p>•不同的参数创建不同的测试。<br>•关键词通常包含了与同一个用例文件中工作流程测试用例中描述的流程类似的流程。</p><pre><code>2.2 推荐使用测试模板功能。</code></pre><p>•不需要多次地去重复关键词。<br>•在一个用例里去测试更容易去测试多种变化。</p><pre><code>2.3 如果可能，推荐在列头部命名。
2.4 如果真的需要很多测试用例，考虑把他们做成依赖于外部的模型。</code></pre><h3 id="用户自定义关键词"><a href="#用户自定义关键词" class="headerlink" title="用户自定义关键词"></a>用户自定义关键词</h3><ol><li><p>应该容易让人理解<br>◦和工作流程测试用例一样的标准。</p></li><li><p>不同的抽象层次。</p></li><li><p>可以包含一些编程逻辑（for 循环，if 判断这些）<br>◦特别对于底层的的关键词。<br>◦复杂的逻辑应该放在库里而不是用户定义的关键词里。</p></li></ol><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>•封装常的或者复杂的值。<br>•从命令行传递信息。<br>•在关键词之间传递信息。</p><h4 id="变量的命名"><a href="#变量的命名" class="headerlink" title="变量的命名"></a>变量的命名</h4><pre><code>1.1 清楚，但是不要太长。
1.2 可以在变量表格里用注释来说明。
1.3 对每个使用场景保持一致：</code></pre><p>•小写的本地变量只在当前的用例或者关键词中可用。<br>•全局变量或者套件，用例级别的变量需要大写。<br>•空格或者下划线都可以用来分割变量中的词。</p><pre><code>1.4 推荐在变量表格中也把设置成动态的变量也列出来。</code></pre><p>•用Set Global/Suite/Test variable关键词来命名变量。<br>•变量的初始值应该可以解释真实的值应该是什么。</p><h4 id="传递和返回值"><a href="#传递和返回值" class="headerlink" title="传递和返回值"></a>传递和返回值</h4><pre><code>2.1 通常的方式是通过关键词来返回值，把他们赋给变量，然后传递给其他关键词的参数。</code></pre><p>•清楚易懂地遵循这个方法。<br>•看起来像是编程。</p><pre><code>2.2 备选方案是使用Set Test Variable关键词</code></pre><p>•不需要在测试用例层面上有什么编程风格。<br>•要遵循起来比较复杂，很难重用关键词。<br>•避免以下这种测试用例层级。</p><h4 id="避免使用sleeping"><a href="#避免使用sleeping" class="headerlink" title="避免使用sleeping"></a>避免使用sleeping</h4><pre><code>3.1 Sleeping 是非常脆弱的。
3.2 平均来说，安全的边界值会使得 Sleeping 很长时间。
3.3 用包含了一定的动作触发的关键词来替代 Sleeping</code></pre><p>•等待需要有一个超时的值。<br>•关键词可以用 Wait Until… 来开头<br>•可能的话用<a href="https://code.google.com/p/robotframework/wiki/BuiltInLibrary" target="_blank" rel="noopener">内置的关键词</a> Wait Until Keyword Succeeds来包装其他关键词。</p><pre><code>3.4 有时候 Sleeping 是一种最简单的解决方式</code></pre><p>•请总是小心使用，不要在经常用到的自定义关键词或者其他关键词中用 Sleeping。</p><pre><code>3.5 在 Debugging 的时候 Sleeping 用来暂停测试执行还是很有用的。</code></pre><p>•虽然 <a href="https://code.google.com/p/robotframework/wiki/DialogsLibrary" target="_blank" rel="noopener">DialogsLibrary</a> 通常更适合用来干这个。</p><p>作者：抽屉(chouti)<br>链接：<a href="https://zhuanlan.zhihu.com/p/19565445" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/19565445</a><br>来源：知乎</p>]]></content>
      <categories>
        <category>RobotFramework</category>
      </categories>
      <tags>
        <tag>robot-framework</tag>
      </tags>
  </entry>
  <entry>
    <title>Appium-Maven-Jenkins自动化测试框架</title>
    <url>/2016/09/19/2016-09-19-autotest-framework-with-Appium-Maven-Jenkins/</url>
    <content><![CDATA[<h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><ol><li><p><code>JDK</code>安装</p></li><li><p><code>Appium</code>安装［<code>node</code>安装，<code>npm</code>安装］</p></li><li><p><code>Maven</code>安装</p></li><li><p><code>Jenkins slave</code>设置</p></li><li><p><code>Android SDK</code>安装</p><a id="more"></a></li></ol><h3 id="环境可用的情况"><a href="#环境可用的情况" class="headerlink" title="环境可用的情况"></a>环境可用的情况</h3><ol><li><code>adb -devices</code>命令可用</li><li><code>appium --session-override</code>服务可用</li><li><code>mvn package</code>编译可用</li></ol><h3 id="框架介绍"><a href="#框架介绍" class="headerlink" title="框架介绍"></a>框架介绍</h3><p>框架主要以<code>appium</code>测试框架为基础，用maven进行依赖的管理，以及编译执行测试。</p><h4 id="框架目录结构"><a href="#框架目录结构" class="headerlink" title="框架目录结构"></a>框架目录结构</h4><img src="/2016/09/19/2016-09-19-autotest-framework-with-Appium-Maven-Jenkins/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" title="目录结构"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── data                                                                    # 项目测试数据存放位置</span><br><span class="line">│   ├── login.xls</span><br><span class="line">│   └── workbench.xls</span><br><span class="line">├── default.xml</span><br><span class="line">├── grid</span><br><span class="line">│   ├── 1.Start_Android_Emulator.sh</span><br><span class="line">│   ├── 2.Start_Appium_Grid_Server.sh</span><br><span class="line">│   ├── 3.Start_Appium_Server_001.sh</span><br><span class="line">│   ├── 4.Start_Appium_Server_002.sh</span><br><span class="line">│   ├── nodeconfig_1.json</span><br><span class="line">│   ├── nodeconfig_2.json</span><br><span class="line">│   └── selenium-server-standalone.jar</span><br><span class="line">├── pom.xml                                                                 # maven项目文件</span><br><span class="line">├── README.md</span><br><span class="line">├── res                                                                     # 项目测试app存放位置</span><br><span class="line">│   ├── app</span><br><span class="line">│   │   ├── android</span><br><span class="line">│   │   │   └── android.txt</span><br><span class="line">│   │   └── ios</span><br><span class="line">│   │       └── ios.txt</span><br><span class="line">│   └── properties</span><br><span class="line">│       ├── app.properties</span><br><span class="line">│       └── config.properties</span><br><span class="line">├── runAll.xml                                                              # testng执行入口</span><br><span class="line">├── runSingle.xml</span><br><span class="line">├── runSmoke.xml</span><br><span class="line">├── testngForParallel.xml</span><br><span class="line">└── src</span><br><span class="line">    ├── main</span><br><span class="line">    │   └── java</span><br><span class="line">    │       └── com</span><br><span class="line">    │           └── shadow</span><br><span class="line">    │               └── dfcAppium</span><br><span class="line">    │                   └── App.java</span><br><span class="line">    └── test</span><br><span class="line">        └── java</span><br><span class="line">            └── com</span><br><span class="line">                └── shadow</span><br><span class="line">                    └── dfcAppium</span><br><span class="line">                        ├── base                                            # 项目基础类</span><br><span class="line">                        │   ├── BasePrepare.java</span><br><span class="line">                        │   ├── StartAppium.java</span><br><span class="line">                        │   └── StopAppium.java</span><br><span class="line">                        ├── pages                                           # 页面元素类</span><br><span class="line">                        │   ├── InitPage.java</span><br><span class="line">                        │   ├── LoginPage.java</span><br><span class="line">                        │   ├── StockmanagePage.java</span><br><span class="line">                        │   └── WorkbenchPage.java</span><br><span class="line">                        ├── pageshelper                                     # 页面元素帮助类</span><br><span class="line">                        │   ├── InitPageHelper.java</span><br><span class="line">                        │   ├── LoginPageHelper.java</span><br><span class="line">                        │   ├── StockmanagePageHelper.java</span><br><span class="line">                        │   └── WorkbenchPageHelper.java</span><br><span class="line">                        ├── plugins                                         # 报告插件</span><br><span class="line">                        │   ├── excelReporter                               # excel报告插件</span><br><span class="line">                        │   │   ├── ExcelReporter.java</span><br><span class="line">                        │   │   ├── TestResultListener.java</span><br><span class="line">                        │   │   └── utils</span><br><span class="line">                        │   │       └── CreateExcelForResult.java</span><br><span class="line">                        │   └── htmlReporter                                # html报告插件</span><br><span class="line">                        │       ├── PowerEmailableReporter.java</span><br><span class="line">                        │       ├── RetryListener.java</span><br><span class="line">                        │       ├── TestngRetry.java</span><br><span class="line">                        │       ├── TestResultListener.java</span><br><span class="line">                        │       └── utils</span><br><span class="line">                        │           └── ConfigReader.java</span><br><span class="line">                        ├── testcases                                       # 测试用例存放位置</span><br><span class="line">                        │   ├── login</span><br><span class="line">                        │   │   └── LoginPage_001_Login_Test.java</span><br><span class="line">                        │   └── workbench</span><br><span class="line">                        │       └── WorkbenchPage_001_Workbench_Test.java</span><br><span class="line">                        └── utils                                           # 各种工具类</span><br><span class="line">                            ├── AppiumUtil.java</span><br><span class="line">                            ├── ExcelDataProvider.java</span><br><span class="line">                            ├── LogConfiguration.java</span><br><span class="line">                            ├── PropertiesDataProvider.java</span><br><span class="line">                            └── SelectDriver.java</span><br></pre></td></tr></table></figure><h4 id="框架运行介绍"><a href="#框架运行介绍" class="headerlink" title="框架运行介绍"></a>框架运行介绍</h4><p><code>testcases</code>下的测试用例都是继承至<code>BasePrepare.java</code>类，这个类的主要作用是启动和关闭APP，以及数据提供。</p><p>举<code>Login</code>的例子，介绍框架中用例的运行原理：<br>1）<code>LoginPage_001_Login_Test</code>继承至<code>BasePrepare</code>类，启动app，后续步骤中<code>BasePrepare</code>作为数据提供者提供数据，步骤中，调用帮助类从页面元素类中获取元素，进行<code>输入／点击</code>等操作，帮助类又会调用<code>AppiumUtil</code>的<code>API</code>进行操作并输出实时的操作日志。<br>大致结构如下图所示：</p><img src="/2016/09/19/2016-09-19-autotest-framework-with-Appium-Maven-Jenkins/%E7%94%A8%E4%BE%8B%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%84.png" title="用例运行结构"><p>最后<code>testng</code>文件调用<code>excel</code>插件生成<code>excel</code>报告。</p><h3 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h3><h4 id="前置条件-1"><a href="#前置条件-1" class="headerlink" title="前置条件"></a>前置条件</h4><pre><code>[代码仓库地址](http://git.shadow.com/testGroup/dfcAppium.git)
``Jenkins``上配置好安卓测试环境，包括本地配置的所有环境。</code></pre><p>由于大风车有<code>Native Library</code>，导致无法在<code>X86</code>的模拟器上安装，而且<code>arm</code>的模拟器奇慢，所以选择在安卓真机上执行测试。在执行测试前要确保指定的设备与运行持续集成的服务器通讯正常。</p><h4 id="持续集成结果展示："><a href="#持续集成结果展示：" class="headerlink" title="持续集成结果展示："></a>持续集成结果展示：</h4><img src="/2016/09/19/2016-09-19-autotest-framework-with-Appium-Maven-Jenkins/Excel%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A.png" title="Excel测试报告"><h3 id="备注：appium源码安装"><a href="#备注：appium源码安装" class="headerlink" title="备注：appium源码安装"></a>备注：appium源码安装</h3><h4 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h4 id="下载源代码"><a href="#下载源代码" class="headerlink" title="下载源代码"></a>下载源代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;appium&#x2F;appium.git</span><br></pre></td></tr></table></figure><h4 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd appium               # 进入appium源码目录</span><br><span class="line">cnpm install            # 执行安装</span><br></pre></td></tr></table></figure><h4 id="用cnpm-link命令将appium-link到系统，可以忽略warn"><a href="#用cnpm-link命令将appium-link到系统，可以忽略warn" class="headerlink" title="用cnpm link命令将appium link到系统，可以忽略warn"></a>用<code>cnpm link</code>命令将<code>appium link</code>到系统，可以忽略<code>warn</code></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm link</span><br></pre></td></tr></table></figure><h4 id="查看安装结果"><a href="#查看安装结果" class="headerlink" title="查看安装结果"></a>查看安装结果</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">appium -v</span><br><span class="line"></span><br><span class="line">➜  appium git:(master) appium -v</span><br><span class="line">1.6.0-beta3</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Appium</category>
      </categories>
      <tags>
        <tag>appium</tag>
        <tag>maven</tag>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 安装 shadowsocks</title>
    <url>/2016/10/09/2016-10-09-Linux-install-shadowsocks/</url>
    <content><![CDATA[<h3 id="安装shadowsocks命令行程序，配置命令"><a href="#安装shadowsocks命令行程序，配置命令" class="headerlink" title="安装shadowsocks命令行程序，配置命令"></a>安装shadowsocks命令行程序，配置命令</h3><h4 id="python-pip安装shadowsocks"><a href="#python-pip安装shadowsocks" class="headerlink" title="python pip安装shadowsocks"></a><code>python</code> <code>pip</code>安装<code>shadowsocks</code></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install python-pip</span><br><span class="line">sudo apt-get install python-setuptools m2crypto</span><br><span class="line">pip install shadowsocks</span><br><span class="line">sudo apt install shadowsocks                                            # ubuntu 16.04的安装方法</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="启动shadowsocks"><a href="#启动shadowsocks" class="headerlink" title="启动shadowsocks"></a>启动<code>shadowsocks</code></h4><p>安装好后，在本地需要用到<code>sslocal</code>，<br>使用方法：<code>sslocal -c</code> 后面加上我们的<code>json</code>配置文件，或者像下面这样直接命令参数写上运行.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sslocal -s 11.22.33.44 -p 50003 -k &quot;123456&quot; -l 1080 -t 600 -m aes-256-cfb</span><br><span class="line">-s                          # 代表服务IP</span><br><span class="line">-p                          # 代表服务器的端口</span><br><span class="line">-k                          # 代表密码，需要加双引号（&quot;&quot;）</span><br><span class="line">-l                          # 代表本地端口</span><br><span class="line">-t                          # 代表超时时间，单位毫秒</span><br><span class="line">-m                          # 代表加密方法，默认为（aes-256-cfb）</span><br></pre></td></tr></table></figure><p>为了方便我推荐直接用 <code>sslcoal -c</code> 配置文件路径 这样的方式，简单好用。<br>在<code>/home/user/</code>下新建一个<code>shadowsocks.json</code>文件。<br>内容如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;:&quot;11.22.33.44&quot;,</span><br><span class="line">    &quot;server_port&quot;:50003,</span><br><span class="line">    &quot;local_port&quot;:1080,</span><br><span class="line">    &quot;password&quot;:&quot;123456&quot;,</span><br><span class="line">    &quot;timeout&quot;:600,</span><br><span class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行<code>shadowsocks</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sslocal -c &#x2F;home&#x2F;user&#x2F;shadowsocks.json</span><br></pre></td></tr></table></figure><h3 id="安装shadowsocks-GUI图形界面程序"><a href="#安装shadowsocks-GUI图形界面程序" class="headerlink" title="安装shadowsocks GUI图形界面程序"></a>安装shadowsocks GUI图形界面程序</h3><p>在<code>ubuntu</code>上可以通过<code>PPA</code>源码安装</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:hzwhuang&#x2F;ss-qt5</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install shadowsocks-qt5</span><br></pre></td></tr></table></figure><p>然后在应用程序中就可以找到，之后的配置和windows一样。</p>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Log那些事儿</title>
    <url>/2016/10/08/2016-10-08-Android-Log/</url>
    <content><![CDATA[<h3 id="实时日志抓取"><a href="#实时日志抓取" class="headerlink" title="实时日志抓取"></a>实时日志抓取</h3><ol><li><p>抓取应用程序的日志</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logcat -b main -v threadtime &gt; &#x2F;sdcard&#x2F;main.log</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>抓取跟 radio/telephony 相关的信息</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logcat -b radio -v threadtime &gt; &#x2F;sdcard&#x2F;radio.log</span><br></pre></td></tr></table></figure></li><li><p>抓取系统事件日志，如触屏事件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logcat -b events -v threadtime &gt; &#x2F;sdcard&#x2F;events.log</span><br></pre></td></tr></table></figure></li><li><p>抓取kernel log</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logcat -b kernel &gt; &#x2F;sdcard&#x2F;kernel.log</span><br></pre></td></tr></table></figure></li><li><p>导出当前缓存的 kernel log</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell dmesg &gt; &#x2F;sdcard&#x2F;dmesg.log</span><br></pre></td></tr></table></figure></li><li><p>实时查看kernel log</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell kmsgcat</span><br></pre></td></tr></table></figure></li><li><p>抓取 printk生成的内核消息</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell cat &#x2F;proc&#x2F;kmsg &gt; kernel.log</span><br></pre></td></tr></table></figure></li><li><p>抓取 TCP/IP协议相关的日志</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell tcpdump -s 10000 -w &#x2F;sdcard&#x2F;tcpip.pcap</span><br></pre></td></tr></table></figure></li></ol><h3 id="状态Log"><a href="#状态Log" class="headerlink" title="状态Log"></a>状态Log</h3><ol><li><p>获取系统状态信息，如手机的内存信息、CPU信息、缓存等</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell dumpstate &gt; &#x2F;sdcard&#x2F;dumpstate.log</span><br></pre></td></tr></table></figure></li><li><p>获取系统进程有关的信息。比如：当前运行的服务，进程信息等</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys</span><br></pre></td></tr></table></figure></li><li><p>如果想查看特定进程的特定service ，如 com.android.mms进程的meminfo，可以使用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys meminfo com.shadow.fengche</span><br><span class="line">meminfo                                     # 显示内存信息</span><br><span class="line">cpuinfo                                     # 显示CPU信息</span><br><span class="line">account                                     # 显示accounts信息</span><br><span class="line">activity                                    # 显示activities的信息</span><br><span class="line">window                                      # 显示键盘，窗口和它们的关系</span><br><span class="line">wifi                                        # 显示wifi信息</span><br></pre></td></tr></table></figure></li><li><p>获取 所有状态信息。包括 dumpsys,dmesg和dumpstate</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell bugreport &gt; &#x2F;sdcard&#x2F;bugreport.log</span><br></pre></td></tr></table></figure></li><li><p>查看内存信息</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell cat &#x2F;proc&#x2F;meminfo</span><br></pre></td></tr></table></figure></li><li><p>查看虚拟内存信息</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell cat &#x2F;proc&#x2F;vmstate</span><br></pre></td></tr></table></figure></li></ol><h3 id="Log分析"><a href="#Log分析" class="headerlink" title="Log分析"></a>Log分析</h3><ol><li><p><code>Exception</code><br>有没有捕获异常</p></li><li><p><code>ANR</code><br><code>ANR</code>的<code>log</code>一般都位于 <code>/data/anr/</code><br>例子： <code>E/ActivityManager( 957): ANR in com.ipanel.join.appstore</code></p></li><li><p><code>Fatal</code><br><code>Fatal</code> 一般比较严重，很多都很动态库和空指针有关，一般会接下来打印 <code>&quot;Build fingerprint:&quot;</code> 或 <code>&quot;NullPointerException&quot;</code></p></li><li><p><code>Build fingerprint</code><br>动态库问题</p></li><li><p><code>NullPointerException</code><br>空指针问题</p></li><li><p><code>kernel panic</code><br>只有加载到内核空间的驱动模块才能直接导致<code>kernel panic</code>，你可以在系统正常的情况下，使用<code>lsmod</code>查看当前系统加载了哪些模块。<br>除此之外，内建在内核里的组件（比如memory map等）也能导致panic。<br><code>kernel panic</code>分为 两种：<br><code>hard panic</code>（关键字： <code>Aieee</code>)<br><code>soft panic</code>（关键字： <code>Oops</code>）</p></li><li><p><code>tombstone</code><br><code>tombstone</code> 一般是由Dalvik错误，状态监视调试器，C层代码以及libc的一些问题导致的。<br>当系统发生<code>tombstone</code>的时候，<code>kernel</code>首先会上报一个严重的警告信号（<code>signal</code>）,上层接收到之后，进程的调试工具会把进程中当时的调用栈现场保存起来，并在系统创建了<code>data/tombstones</code>目录后把异常时的进程信息写在此目录里面，开发者需要通过调用栈来分析整个调用流程来找出出问题的点。<br>日志路径： <code>/data/tombstones</code></p></li><li><p><code>system crash</code><br><code>kernel log</code>会出现： <code>service &#39;activity&#39; died</code><br><code>&#39;activity&#39;</code> 可以是任意的<code>activity</code>。</p></li></ol>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>adb</tag>
        <tag>log</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下压缩&amp;解压缩命令详解</title>
    <url>/2016/07/07/2016-07-07-decompression-command-under-Linux/</url>
    <content><![CDATA[<ol><li><p>zip&amp;unzip</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zip -r filename.zip dirname               # 压缩mydata文件夹到mydata.zip</span><br><span class="line">unzip filename.zip -d dirname             # 把mydata.zip解压到mydatabak文件夹中</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>tar</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf filename.tar                    # 解压到当前目录</span><br><span class="line">tar -zxvf filename.tgz                    # 解压到当前目录</span><br><span class="line">tar -czvf filename.tar dirname            # 目录文件夹dirname的内容打包到filename.tar</span><br><span class="line">tar -zcvf filename.tar.gz dirname         # 目录文件夹dirname的内容打包到filename.tar.gz</span><br><span class="line">tar -zcvf filename.tar.gz dirname1 dirname2 dirname3 .....      # 打包多个文件及文件夹到filename.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>XXX.tar.xz</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xz -d XXX.tar.xz</span><br><span class="line">tar xvf XXX.tar</span><br></pre></td></tr></table></figure></li><li><p>XXX.tgz &amp; XXX.tar.gz</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gunzip XXX.tgz</span><br><span class="line">tar xvf XXX.tar</span><br><span class="line">or</span><br><span class="line">tar xvf XXX.tar.gz</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 下Django 环境搭建</title>
    <url>/2016/11/03/2016-11-03-Django-environment-under-Mac/</url>
    <content><![CDATA[<ol><li><p>安装<code>Homebrew</code></p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span></span><br></pre></td></tr></table></figure></li><li><p>安装<code>PostgreSQL</code></p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">brew install postgresql -v</span><br></pre></td></tr></table></figure><a id="more"></a></li></ol><p>2.1 初始化数据库</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">initdb /usr/local/var/postgres -E utf8</span><br></pre></td></tr></table></figure><p>2.2 设成开机启动<code>PostgreSQL</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ln -sfv /usr/<span class="built_in">local</span>/opt/postgresql/*.plist ~/Library/LaunchAgents</span><br><span class="line">launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist</span><br></pre></td></tr></table></figure><p>2.3 启动<code>PostgreSQL</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pg_ctl -D /usr/<span class="built_in">local</span>/var/postgres -l /usr/<span class="built_in">local</span>/var/postgres/server.log start</span><br></pre></td></tr></table></figure><p>2.4 关闭<code>PostgreSQL</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pg_ctl -D /usr/<span class="built_in">local</span>/var/postgres stop -s -m fast</span><br></pre></td></tr></table></figure><p>2.5 创建一个<code>PostgreSQL</code>用户</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">createuser username -P</span><br><span class="line"><span class="comment">#Enter password for new role:</span></span><br><span class="line"><span class="comment">#Enter it again:</span></span><br></pre></td></tr></table></figure><p>2.6 创建数据库</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">createdb dbname -O username -E UTF8 -e</span><br></pre></td></tr></table></figure><p>2.7 连接数据库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">psql -U username -d dbname -h 127.0.0.1</span><br></pre></td></tr></table></figure><p>2.8 <code>PostgreSQL</code>数据库操作</p><p>显示已创建的数据库：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">\l</span><br></pre></td></tr></table></figure><p>在不连接进 PostgreSQL 数据库的情况下，也可以在终端上查看显示已创建的列表：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">psql -l</span><br></pre></td></tr></table></figure><p>连接数据库</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">\c dbname</span><br></pre></td></tr></table></figure><p>显示数据库表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">\d</span><br></pre></td></tr></table></figure><p>创建一个名为 test 的表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">test</span>(<span class="keyword">id</span> <span class="built_in">int</span>, <span class="built_in">text</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>));</span><br></pre></td></tr></table></figure><p>插入一条记录</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">test</span>(<span class="keyword">id</span>, <span class="built_in">text</span>) <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">'sdfsfsfsdfsdfdf'</span>);</span><br></pre></td></tr></table></figure><p>查询记录</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>更新记录</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">test</span> <span class="keyword">SET</span> <span class="built_in">text</span> = <span class="string">'aaaaaaaaaaaaa'</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>删除指定的记录</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>删除表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">test</span>;</span><br></pre></td></tr></table></figure><p>删除数据库</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> dbname;</span><br></pre></td></tr></table></figure><p>或者利用 dropdb 指令，在终端上删除数据库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dropdb -U user dbname</span><br></pre></td></tr></table></figure><ol start="3"><li><p>安装<code>virtualenv</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install virtualenv</span><br><span class="line">virtualenv myenv</span><br><span class="line"><span class="built_in">cd</span> myenv</span><br><span class="line">. bin/activate</span><br></pre></td></tr></table></figure></li><li><p>安装<code>Django</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install django</span><br><span class="line"><span class="built_in">export</span> CFLAGS=-Qunused-arguments</span><br><span class="line"><span class="built_in">export</span> CPPFLAGS=-Qunused-arguments</span><br><span class="line">sudo pip install psycopg2                   <span class="comment"># 安装 psycopg2 前需要执行上面两条 export 命令</span></span><br><span class="line">pip install djangorestframework</span><br></pre></td></tr></table></figure></li><li><p>启动服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> AndroidTools</span><br><span class="line">python ./manage.py runserver 0.0.0.0:9999</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      <categories>
        <category>环境搭建</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>django</tag>
        <tag>postgresql</tag>
      </tags>
  </entry>
  <entry>
    <title>Appium-WebView测试</title>
    <url>/2016/11/21/2016-11-21-Appium-WebView-test/</url>
    <content><![CDATA[<p>现在多数App都是混合型的，有原生的也包含WebView的，appium测试的时候就需要在原生和WebView之间切换才能完成测试。</p><h4 id="查看所有context"><a href="#查看所有context" class="headerlink" title="查看所有context"></a>查看所有context</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;String&gt; contextNames = driver.getContextHandles();</span><br><span class="line">System.print(contextNames);</span><br></pre></td></tr></table></figure><a id="more"></a><p>结果包含目前所有打开的app</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[NATIVE_APP, WEBVIEW_com.test.android, WEBVIEW_com.estrongs.android.pop, WEBVIEW_com.xxxxx.sjj]</span><br></pre></td></tr></table></figure><p>NATIVE_APP就是我的被测应用原生界面<br>WEBVIEW_com.test.android 是我的被测应用打开的WebView<br>另外两个一个是ES， 一个其他的应用（混合型的）</p><h4 id="切换到WebView"><a href="#切换到WebView" class="headerlink" title="切换到WebView"></a>切换到WebView</h4><p>我们可以通过context方法切换到指定的应用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;pre name=<span class="string">"code"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"java"</span>&gt;driver.context(<span class="string">"WEBVIEW_com.test.android"</span>);</span><br><span class="line">driver.findElementByID(<span class="string">"wd"</span>);</span><br></pre></td></tr></table></figure><p>切换完成后就可以像测试web应用一样测试了，所有的定位和web相同。</p><h4 id="切换到NativeApp"><a href="#切换到NativeApp" class="headerlink" title="切换到NativeApp"></a>切换到NativeApp</h4><p>测试完web应用，需要操作原生应用的时候就需要切换回NATIVE_APP<br>我们可以通过context方法切换到原生应用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;pre name=<span class="string">"code"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"java"</span>&gt;driver.context(<span class="string">"NATIVE_APP"</span>);</span><br></pre></td></tr></table></figure><p>这样之后的操作就都是原生应用的操作了</p><h4 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Switch to NATIVE_APP or WEBVIEW</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sWindow window name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">switchToWindow</span><span class="params">(String sWindow)</span> </span>&#123;</span><br><span class="line">        LogManager.getLogger(<span class="keyword">this</span>.getClass()).info(<span class="string">"Swith to window: "</span> + sWindow);</span><br><span class="line">        Set&lt;String&gt; contextNames = driver.getContextHandles();</span><br><span class="line">        LogManager.getLogger(<span class="keyword">this</span>.getClass()).info(<span class="string">"Exists windows: "</span> + contextNames.toString());</span><br><span class="line">        <span class="keyword">for</span> (String contextName : contextNames) &#123;</span><br><span class="line">            <span class="keyword">if</span> (contextName.contains(sWindow)) &#123;</span><br><span class="line">                driver.context(contextName);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">switchToWindow(<span class="string">"WEBVIEW_com.test.android"</span>);</span><br><span class="line">switchToWindow(<span class="string">"NATIVE_APP"</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Appium</category>
      </categories>
      <tags>
        <tag>appium</tag>
        <tag>webview</tag>
      </tags>
  </entry>
  <entry>
    <title>反编译工具介绍</title>
    <url>/2016/10/25/2016-10-25-Decompilation-tool-introduction/</url>
    <content><![CDATA[<h3 id="官方网站"><a href="#官方网站" class="headerlink" title="官方网站"></a>官方网站</h3><p><a href="https://ibotpeaches.github.io/Apktool/" target="_blank" rel="noopener">Apktool</a></p><h3 id="aapt"><a href="#aapt" class="headerlink" title="aapt"></a>aapt</h3><h4 id="Androidmanifest-xml文件解析"><a href="#Androidmanifest-xml文件解析" class="headerlink" title="Androidmanifest.xml文件解析"></a><code>Androidmanifest.xml</code>文件解析</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;aapt dump xmltree  &#x2F;Users&#x2F;taoyi&#x2F;Downloads&#x2F;de4aa7e390346478bd6a54549d27787b.apk AndroidManifest.xml</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="apk-包信息获取"><a href="#apk-包信息获取" class="headerlink" title="apk 包信息获取"></a><code>apk</code> 包信息获取</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;aapt dump badging &#x2F;Users&#x2F;taoyi&#x2F;Downloads&#x2F;fengche.apk</span><br></pre></td></tr></table></figure><h4 id="搜索当前目录下所有文件中包含XXX的语句和所在文件"><a href="#搜索当前目录下所有文件中包含XXX的语句和所在文件" class="headerlink" title="搜索当前目录下所有文件中包含XXX的语句和所在文件"></a>搜索当前目录下所有文件中包含<code>XXX</code>的语句和所在文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep -R &quot;百度贴吧&quot; .</span><br></pre></td></tr></table></figure><h4 id="解压-apk"><a href="#解压-apk" class="headerlink" title="解压 apk"></a>解压 <code>apk</code></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unzip &#x2F;Users&#x2F;taoyi&#x2F;Downloads&#x2F;fengche.apk</span><br></pre></td></tr></table></figure><h3 id="Apktool"><a href="#Apktool" class="headerlink" title="Apktool"></a>Apktool</h3><h4 id="使用教程（-MAC-下）"><a href="#使用教程（-MAC-下）" class="headerlink" title="使用教程（ MAC 下）"></a>使用教程（ MAC 下）</h4><p>1). 下载<a href="https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/osx/apktool" target="_blank" rel="noopener">脚本</a>，保存到 apktool 文件<br>2). 下载<a href="https://bitbucket.org/iBotPeaches/apktool/downloads" target="_blank" rel="noopener">apktool_x.jar</a>，目前最新的为2.2.1版本，重命名为 <code>apktool.jar</code><br>3). 将两个文件移动到<code>/usr/local/bin</code>目录下<br>4). 给两个文件赋予可执行权限<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chmod a+x apktool</span><br><span class="line">sudo chmod a+x apktool.jar</span><br></pre></td></tr></table></figure><br>5). 执行反编译命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apktool d XXX.apk</span><br></pre></td></tr></table></figure><p></p><pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  .&#x2F;apktool d XXX.apk</span><br><span class="line">I: Using Apktool 2.2.1 on XXX.apk</span><br><span class="line">I: Loading resource table...</span><br><span class="line">I: Decoding AndroidManifest.xml with resources...</span><br><span class="line">I: Loading resource table from file: &#x2F;Users&#x2F;taoyi&#x2F;Library&#x2F;apktool&#x2F;framework&#x2F;1.apk</span><br><span class="line">I: Regular manifest package...</span><br><span class="line">I: Decoding file-resources...</span><br><span class="line">I: Decoding values *&#x2F;* XMLs...</span><br><span class="line">I: Baksmaling classes.dex...</span><br><span class="line">I: Copying assets and libs...</span><br><span class="line">I: Copying unknown files...</span><br><span class="line">I: Copying original files...</span><br></pre></td></tr></table></figure></code></pre><p>6). 重新编译回 apk<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apktool b XXX</span><br></pre></td></tr></table></figure><p></p><pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  .&#x2F;apktool b XXX</span><br><span class="line">I: Using Apktool 2.2.1</span><br><span class="line">I: Checking whether sources has changed...</span><br><span class="line">I: Smaling smali folder into classes.dex...</span><br><span class="line">I: Checking whether resources has changed...</span><br><span class="line">I: Building resources...</span><br><span class="line">I: Copying libs... (&#x2F;lib)</span><br><span class="line">I: Building apk file...</span><br><span class="line">I: Copying unknown files&#x2F;dir...</span><br></pre></td></tr></table></figure></code></pre><h4 id="反编译失败解决方法"><a href="#反编译失败解决方法" class="headerlink" title="反编译失败解决方法"></a>反编译失败解决方法</h4><p>1). 删除 <code>/Users/your user/Library/apktool/framework/1.apk</code><br>2). 导出手机 <code>/system/framework/framework-res.apk</code> 放入上面目录<br>3). 重新反编译</p>]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>aapt</tag>
        <tag>apktool</tag>
      </tags>
  </entry>
  <entry>
    <title>Logcat日志过滤与解析</title>
    <url>/2016/11/21/2016-11-21-Logcat-log-filtering-and-parsing/</url>
    <content><![CDATA[<h4 id="logcat指定某APP輸出ERROR以上級別的日誌，显示同一个进程的所有输出"><a href="#logcat指定某APP輸出ERROR以上級別的日誌，显示同一个进程的所有输出" class="headerlink" title="logcat指定某APP輸出ERROR以上級別的日誌，显示同一个进程的所有输出"></a><code>logcat</code>指定<code>某APP</code>輸出<code>ERROR</code>以上級別的日誌，<code>显示同一个进程的所有输出</code></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#!/bin/sh  </span><br><span class="line">echo 本腳本實現顯示指定包名APP的ERROR以上級別的日誌，建議崩潰之後，重新開啓此腳本  </span><br><span class="line">package_name=$<span class="number">1</span>  </span><br><span class="line">pid=`adb shell ps | grep $package_name |awk <span class="string">'&#123;print $2&#125;'</span>`  </span><br><span class="line">adb logcat -v time *:E | grep -E --color=auto $pid</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="只显示需要的输出，白名单"><a href="#只显示需要的输出，白名单" class="headerlink" title="只显示需要的输出，白名单"></a>只显示需要的输出，白名单</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb logcat | grep MyApp</span><br><span class="line">adb logcat | grep -i myapp <span class="comment">#忽略大小写。</span></span><br><span class="line">adb logcat | grep --color=auto -i  myapp <span class="comment">#设置匹配字符串颜色。更多设置请查看 grep 帮助。</span></span><br></pre></td></tr></table></figure><p>仅显示 Error 级别 tag 为 MyApp 的输出：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb logcat | grep &quot;^E.MyApp&quot;</span><br></pre></td></tr></table></figure><p>也可以匹配多个，使用 | 分割多个匹配表达式，要加转义符。例如要匹配 tag 为 MyApp 和 MyActivity 的输出：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb logcat | grep &quot;^..MyApp\|^..MyActivity&quot;</span><br><span class="line">adb logcat | grep -E &quot;^..MyApp|^..MyActivity&quot;  #使用 egrep 无须转义符</span><br></pre></td></tr></table></figure><h4 id="过滤不需要的输出，黑名单"><a href="#过滤不需要的输出，黑名单" class="headerlink" title="过滤不需要的输出，黑名单"></a>过滤不需要的输出，黑名单</h4><p>还是使用 grep，用法也跟上面的一样，加一个 -v 即可。例如要过滤 tag 为 MyApp 和 MyActivity 的输出：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb logcat | grep -v &quot;^..MyApp\|^..MyActivity&quot;</span><br><span class="line">adb logcat | grep -vE &quot;^..MyApp|^..MyActivity&quot;  #使用 egrep 无须转义符</span><br></pre></td></tr></table></figure><h4 id="从当前开始显示"><a href="#从当前开始显示" class="headerlink" title="从当前开始显示"></a>从当前开始显示</h4><p>logcat 有缓存，如果仅需要查看当前开始的 log，需要清空之前的。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb logcat -c &amp;&amp; adb logcat</span><br></pre></td></tr></table></figure><h4 id="过滤log文件"><a href="#过滤log文件" class="headerlink" title="过滤log文件"></a>过滤<code>log</code>文件</h4><p>有时需要分析 log 文件，过滤 log 文件还是使用 grep。例如 log 文件为 myapp.log，要匹配 tag 为 MyApp 和 MyActivity 的输出，然后输出到 newmyapp.log：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat myapp.log | grep &quot;^..MyApp\|^..MyActivity&quot; &gt; newmyapp.log</span><br></pre></td></tr></table></figure><h4 id="logcat-详细用法"><a href="#logcat-详细用法" class="headerlink" title="logcat 详细用法"></a>logcat 详细用法</h4><h5 id="日志输出优先级"><a href="#日志输出优先级" class="headerlink" title="日志输出优先级"></a>日志输出优先级</h5><p>优先级有下列集中，是按照从低到高顺利排列的:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">V — Verbose (lowest priority)</span><br><span class="line">D — Debug</span><br><span class="line">I — Info</span><br><span class="line">W — Warning</span><br><span class="line">E — Error</span><br><span class="line">F — Fatal</span><br><span class="line">S — Silent (highest priority, on which nothing is ever printed)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb logcat ActivityManager:I MyApp:D *:S</span><br><span class="line">adb logcat *:W                                                                  # 输出日志等级高于&#96;&#96;Warning&#96;&#96;的日志</span><br></pre></td></tr></table></figure><h5 id="日志输出的格式"><a href="#日志输出的格式" class="headerlink" title="日志输出的格式"></a>日志输出的格式</h5><p>日志信息包括了许多元数据域包括标签和优先级。可以修改日志的输出格式，所以可以显示出特 定的元数据域。可以通过 -v 选项得到格式化输出日志的相关信息。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brief — Display priority&#x2F;tag and PID of originating process (the default format).</span><br><span class="line">process — Display PID only.</span><br><span class="line">tag — Display the priority&#x2F;tag only.</span><br><span class="line">thread — Display process:thread and priority&#x2F;tag only.</span><br><span class="line">raw — Display the raw log message, with no other metadata fields.</span><br><span class="line">time — Display the date, invocation time, priority&#x2F;tag, and PID of the originating process.</span><br><span class="line">long — Display all metadata fields and separate messages with a blank lines.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb logcat -v thread</span><br></pre></td></tr></table></figure><p>只能通过 <code>-v</code>选项来规定输出格式 <code>option</code></p><h5 id="查看可用日志的缓冲区"><a href="#查看可用日志的缓冲区" class="headerlink" title="查看可用日志的缓冲区"></a>查看可用日志的缓冲区</h5><p>Android日志系统有循环缓冲区，并不是所有的日志系统都有默认循环缓冲区。为了得到 日志信息，你需要通过-b 选项来启动logcat 。如果要使用循环缓冲区，你需要查看剩余的 循环缓冲期:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">radio — 查看缓冲区的相关的信息.</span><br><span class="line">events — 查看和事件相关的的缓冲区.</span><br><span class="line">main — 查看主要的日志缓冲区</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb logcat -b radio</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>adb</tag>
        <tag>logcat</tag>
      </tags>
  </entry>
  <entry>
    <title>MAC系统空间清理</title>
    <url>/2016/11/29/2016-11-29-MAC-clean-space/</url>
    <content><![CDATA[<ol><li><p>删除Emacs——可以节省出60MB+的硬盘空间</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo rm -rf &#x2F;usr&#x2F;share&#x2F;emacs&#x2F;</span><br></pre></td></tr></table></figure></li><li><p>移除系统嗓音文件——可以节省出500MB-3GB+硬盘空间</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;System&#x2F;Library&#x2F;Speech&#x2F;</span><br><span class="line">sudo rm -rf Voices&#x2F;*</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>删除所有系统日志——可以节省出100MB-2GB硬盘空间</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo rm -rf &#x2F;private&#x2F;var&#x2F;log&#x2F;*</span><br></pre></td></tr></table></figure></li><li><p>删除快速查看生成的缓存文件——可以节省出100MB-300MB硬盘空间</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo rm -rf &#x2F;private&#x2F;var&#x2F;folders&#x2F;</span><br></pre></td></tr></table></figure></li><li><p>禁用SafeSleep休眠模式——能节省出4GB-16GB空间</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pmset -a hibernatemode 0                           # 禁用SafeSleep功能</span><br><span class="line">cd &#x2F;private&#x2F;var&#x2F;vm&#x2F;</span><br><span class="line">sudo rm sleepimage</span><br><span class="line">touch sleepimage                                        # 要防止OS X继续创建该文件，所以我们需要下面的命令生成一个无法被替换的空文件</span><br><span class="line">chmod 000 &#x2F;private&#x2F;var&#x2F;vm&#x2F;sleepimage</span><br><span class="line">sudo pmset -a hibernatemode 3                           # 重新开启SafeSleep功能</span><br><span class="line">sudo rm &#x2F;private&#x2F;var&#x2F;vm&#x2F;sleepimage</span><br></pre></td></tr></table></figure></li><li><p>清除缓存文件——可以节省1GB-10GB硬盘空间</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~&#x2F;Library&#x2F;Caches&#x2F;</span><br><span class="line">rm -rf ~&#x2F;Library&#x2F;Caches&#x2F;*</span><br></pre></td></tr></table></figure></li><li><p>删除临时文件——可以节省500MB-5GB硬盘空间</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;private&#x2F;var&#x2F;tmp&#x2F;</span><br><span class="line">rm -rf TM*</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>MAC系统导入HTMLTestRunner</title>
    <url>/2016/06/19/2016-06-19-MAC-import-HTMLTestRunner/</url>
    <content><![CDATA[<ol><li><p>下载：<a href="http://tungwaiyip.info/software/HTMLTestRunner_0_8_2/HTMLTestRunner.py" target="_blank" rel="noopener">HTMLTestRunner.py</a> &amp; <a href="http://tungwaiyip.info/software/HTMLTestRunner_0_8_2/test_HTMLTestRunner.py" target="_blank" rel="noopener">test_HTMLTestRunner.py</a></p></li><li><p>HTMLTestRunner放入Python环境中</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo cp ~/Downloads/HTMLTestRunner.py /Library/Python/<span class="number">2.7</span>/site-packages</span><br><span class="line">sudo cp ~/Downloads/test_HTMLTestRunner.py /Library/Python/<span class="number">2.7</span>/site-packages</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>执行 <code>import HTMLTestRunner</code>， 如果没有报错，则导入成功。</p></li><li><p>通过 <code>dir(HTMLTestRunner)</code>， 查看HTMLTestRunner包含方法：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">'HTMLTestRunner'</span>, <span class="string">'OutputRedirector'</span>, <span class="string">'StringIO'</span>, <span class="string">'Template_mixin'</span>, <span class="string">'TestProgram'</span>, <span class="string">'TestResult'</span>, <span class="string">'_TestResult'</span>, <span class="string">'__author__'</span>, <span class="string">'__builtins__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__file__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'__version__'</span>, <span class="string">'datetime'</span>, <span class="string">'main'</span>, <span class="string">'saxutils'</span>, <span class="string">'stderr_redirector'</span>, <span class="string">'stdout_redirector'</span>, <span class="string">'sys'</span>, <span class="string">'time'</span>, <span class="string">'unittest'</span>]</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>自动化测试报告</tag>
      </tags>
  </entry>
  <entry>
    <title>八大排序算法的Java实现</title>
    <url>/2017/01/02/2017-01-02-Java-implementation-of-eight-sorting-algorithms/</url>
    <content><![CDATA[<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>　　冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。<br>　　冒泡排序的<strong>示例</strong>：<br><img src="http://upload-images.jianshu.io/upload_images/196518-49509183dfb68c64.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><a id="more"></a><p>冒泡排序的<strong>算法实现</strong>如下:【排序后，数组从小到大排列】</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 冒泡排序</span></span><br><span class="line"><span class="comment"> * 比较相邻的元素。如果第一个比第二个大，就交换他们两个。  </span></span><br><span class="line"><span class="comment"> * 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。  </span></span><br><span class="line"><span class="comment"> * 针对所有的元素重复以上的步骤，除了最后一个。</span></span><br><span class="line"><span class="comment"> * 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> numbers 需要排序的整型数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] numbers)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> size = numbers.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; size-<span class="number">1</span>; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ;j &lt; size-<span class="number">1</span>-i ; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(numbers[j] &gt; numbers[j+<span class="number">1</span>])  <span class="comment">//交换两数位置</span></span><br><span class="line">        &#123;</span><br><span class="line">        temp = numbers[j];</span><br><span class="line">        numbers[j] = numbers[j+<span class="number">1</span>];</span><br><span class="line">        numbers[j+<span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p><strong>快速排序的基本思想</strong>：<br>通过一趟排序将待排序记录分割成独立的两部分，其中一部分记录的关键字均比另一部分关键字小，则分别对这两部分继续进行排序，直到整个序列有序。<br>快速排序的<strong>示例</strong>：<br>（a）一趟排序的过程：<br><img src="http://upload-images.jianshu.io/upload_images/196518-d8f8ad1138df64c7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>（b）排序的全过程：<br><img src="http://upload-images.jianshu.io/upload_images/196518-d7667720de515784.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>　　把整个序列看做一个数组，把第零个位置看做中轴，和最后一个比，如果比它小交换，比它大不做任何处理；交换了以后再和小的那端比，比它小不交换，比他大交换。这样循环往复，一趟排序完成，左边就是比中轴小的，右边就是比中轴大的，然后再用分治法，分别对这两个独立的数组进行排序。</p><p>代码实现如下：</p><h4 id="查找中轴（最低位作为中轴）所在位置："><a href="#查找中轴（最低位作为中轴）所在位置：" class="headerlink" title="查找中轴（最低位作为中轴）所在位置："></a>查找中轴（最低位作为中轴）所在位置：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查找出中轴（默认是最低位low）的在numbers数组排序后所在位置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> numbers 带查找数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> low   开始位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> high  结束位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  中轴所在位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMiddle</span><span class="params">(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = numbers[low]; <span class="comment">//数组的第一个作为中轴</span></span><br><span class="line">    <span class="keyword">while</span>(low &lt; high)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">while</span>(low &lt; high &amp;&amp; numbers[high] &gt; temp)</span><br><span class="line">    &#123;</span><br><span class="line">        high--;</span><br><span class="line">    &#125;</span><br><span class="line">    numbers[low] = numbers[high];<span class="comment">//比中轴小的记录移到低端</span></span><br><span class="line">    <span class="keyword">while</span>(low &lt; high &amp;&amp; numbers[low] &lt; temp)</span><br><span class="line">    &#123;</span><br><span class="line">        low++;</span><br><span class="line">    &#125;</span><br><span class="line">    numbers[high] = numbers[low] ; <span class="comment">//比中轴大的记录移到高端</span></span><br><span class="line">    &#125;</span><br><span class="line">    numbers[low] = temp ; <span class="comment">//中轴记录到尾</span></span><br><span class="line">    <span class="keyword">return</span> low ; <span class="comment">// 返回中轴的位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="递归形式的分治排序算法："><a href="#递归形式的分治排序算法：" class="headerlink" title="递归形式的分治排序算法："></a>递归形式的分治排序算法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> numbers 带排序数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> low  开始位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> high 结束位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] numbers,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(low &lt; high)</span><br><span class="line">    &#123;</span><br><span class="line">    　　<span class="keyword">int</span> middle = getMiddle(numbers,low,high); <span class="comment">//将numbers数组进行一分为二</span></span><br><span class="line">    　　quickSort(numbers, low, middle-<span class="number">1</span>);   <span class="comment">//对低字段表进行递归排序</span></span><br><span class="line">    　　quickSort(numbers, middle+<span class="number">1</span>, high); <span class="comment">//对高字段表进行递归排序</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="快速排序提供方法调用："><a href="#快速排序提供方法调用：" class="headerlink" title="快速排序提供方法调用："></a>快速排序提供方法调用：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> numbers 带排序数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quick</span><span class="params">(<span class="keyword">int</span>[] numbers)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(numbers.length &gt; <span class="number">0</span>)   <span class="comment">//查看数组是否为空</span></span><br><span class="line">    &#123;</span><br><span class="line">    quickSort(numbers, <span class="number">0</span>, numbers.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分析：</strong><br>快速排序是通常被认为在同数量级（O(nlog2n)）的排序方法中平均性能最好的。但若初始序列按关键码有序或基本有序时，快排序反而蜕化为冒泡排序。为改进之，通常以“三者取中法”来选取基准记录，即将排序区间的两个端点与中点三个记录关键码居中的调整为支点记录。快速排序是一个不稳定的排序方法。</p><h4 id="方法测试"><a href="#方法测试" class="headerlink" title="方法测试"></a>方法测试</h4><p>打印函数：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArr</span><span class="params">(<span class="keyword">int</span>[] numbers)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; numbers.length ; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">    System.out.print(numbers[i] + <span class="string">","</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] numbers = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">1</span>,-<span class="number">5</span>,<span class="number">55</span>&#125;;</span><br><span class="line">    System.out.print(<span class="string">"排序前："</span>);</span><br><span class="line">    printArr(numbers);</span><br><span class="line"></span><br><span class="line">    bubbleSort(numbers);</span><br><span class="line">    System.out.print(<span class="string">"冒泡排序后："</span>);</span><br><span class="line">    printArr(numbers);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    quick(numbers);</span><br><span class="line">    System.out.print(<span class="string">"快速排序后："</span>);</span><br><span class="line">    printArr(numbers);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><pre><code>排序前：10,20,15,0,6,7,2,1,-5,55,
冒泡排序后：-5,0,1,2,6,7,10,15,20,55,
快速排序后：-5,0,1,2,6,7,10,15,20,55,</code></pre><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>　　<strong>1、基本思想</strong>：在要排序的一组数中，选出最小的一个数与第一个位置的数交换；然后在剩下的数当中再找最小的与第二个位置的数交换，如此循环到倒数第二个数和最后一个数比较为止。<br>　　<strong>2、实例</strong>：<br><img src="http://upload-images.jianshu.io/upload_images/196518-d78721e606ac9113.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>　　<strong>3、算法实现</strong>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 选择排序算法</span></span><br><span class="line"><span class="comment"> * 在未排序序列中找到最小元素，存放到排序序列的起始位置  </span></span><br><span class="line"><span class="comment"> * 再从剩余未排序元素中继续寻找最小元素，然后放到排序序列末尾。</span></span><br><span class="line"><span class="comment"> * 以此类推，直到所有元素均排序完毕。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> numbers</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] numbers)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> size = numbers.length; <span class="comment">//数组长度</span></span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span> ; <span class="comment">//中间变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; size ; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> k = i;   <span class="comment">//待确定的位置</span></span><br><span class="line">    <span class="comment">//选择出应该在第i个位置的数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = size -<span class="number">1</span> ; j &gt; i ; j--)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(numbers[j] &lt; numbers[k])</span><br><span class="line">    &#123;</span><br><span class="line">        k = j;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//交换两个数</span></span><br><span class="line">    temp = numbers[i];</span><br><span class="line">    numbers[i] = numbers[k];</span><br><span class="line">    numbers[k] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>　　<strong>1、基本思想</strong>：每步将一个待排序的记录，按其顺序码大小插入到前面已经排序的字序列的合适位置（从后向前找到合适位置后），直到全部插入排序完为止。<br>　　<strong>2、实例</strong>：<br><img src="http://upload-images.jianshu.io/upload_images/196518-d3c35e80e0474225.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>　　<strong>3、算法实现</strong>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 插入排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 从第一个元素开始，该元素可以认为已经被排序</span></span><br><span class="line"><span class="comment"> * 取出下一个元素，在已经排序的元素序列中从后向前扫描</span></span><br><span class="line"><span class="comment"> * 如果该元素（已排序）大于新元素，将该元素移到下一位置  </span></span><br><span class="line"><span class="comment"> * 重复步骤3，直到找到已排序的元素小于或者等于新元素的位置  </span></span><br><span class="line"><span class="comment"> * 将新元素插入到该位置中  </span></span><br><span class="line"><span class="comment"> * 重复步骤2  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> numbers  待排序数组</span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] numbers)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> size = numbers.length;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span> ;</span><br><span class="line"><span class="keyword">int</span> j =  <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; size ; i++)</span><br><span class="line">&#123;</span><br><span class="line">    temp = numbers[i];</span><br><span class="line">    <span class="comment">//假如temp比前面的值小，则将前面的值后移</span></span><br><span class="line">    <span class="keyword">for</span>(j = i ; j &gt; <span class="number">0</span> &amp;&amp; temp &lt; numbers[j-<span class="number">1</span>] ; j --)</span><br><span class="line">    &#123;</span><br><span class="line">    numbers[j] = numbers[j-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    numbers[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　<strong>4、效率</strong>：<br>时间复杂度：O（n^2）.</p><h3 id="希尔算法"><a href="#希尔算法" class="headerlink" title="希尔算法"></a>希尔算法</h3><p><strong>1、基本思想：</strong><br>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。<br><strong>2、操作方法：</strong></p><p>1、选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；</p><p>2、按增量序列个数k，对序列进行k 趟排序；</p><p>3、每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</p><p>希尔排序的示例：<br><img src="http://upload-images.jianshu.io/upload_images/196518-9ba273ecfd05bd93.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><strong>3、**</strong>算法实现：**</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**希尔排序的原理:根据需求，如果你想要结果从大到小排列，它会首先将数组进行分组，然后将较大值移到前面，较小值</span></span><br><span class="line"><span class="comment"> * 移到后面，最后将整个数组进行插入排序，这样比起一开始就用插入排序减少了数据交换和移动的次数，可以说希尔排序是加强</span></span><br><span class="line"><span class="comment"> * 版的插入排序</span></span><br><span class="line"><span class="comment"> * 拿数组5, 2, 8, 9, 1, 3，4来说，数组长度为7，当increment为3时，数组分为两个序列</span></span><br><span class="line"><span class="comment"> * 5，2，8和9，1，3，4，第一次排序，9和5比较，1和2比较，3和8比较，4和比其下标值小increment的数组值相比较</span></span><br><span class="line"><span class="comment"> * 此例子是按照从大到小排列，所以大的会排在前面，第一次排序后数组为9, 2, 8, 5, 1, 3，4</span></span><br><span class="line"><span class="comment"> * 第一次后increment的值变为3/2=1,此时对数组进行插入排序，</span></span><br><span class="line"><span class="comment"> *实现数组从大到小排</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//每次将步长缩短为原来的一半</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> increment = data.length / <span class="number">2</span>; increment &gt; <span class="number">0</span>; increment /= <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = increment; i &lt; data.length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = data[i];</span><br><span class="line">        <span class="keyword">for</span> (j = i; j &gt;= increment; j -= increment)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">if</span>(temp &gt; data[j - increment])<span class="comment">//如想从小到大排只需修改这里</span></span><br><span class="line">        &#123;   </span><br><span class="line">            data[j] = data[j - increment];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        data[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4、效率</strong>：<br>时间复杂度：O（n^2）.</p><h3 id="归并排序算法"><a href="#归并排序算法" class="headerlink" title="归并排序算法"></a>归并排序算法</h3><p><strong>基本思想：</strong><br>　　归并（Merge）排序法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。<br>归并排序示例：<br><img src="http://upload-images.jianshu.io/upload_images/196518-4281c79eb1d8bbd2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><strong>合并方法：</strong><br>设r[i…n]由两个有序子表r[i…m]和r[m+1…n]组成，两个子表长度分别为n-i +1、n-m。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、j&#x3D;m+1；k&#x3D;i；i&#x3D;i; &#x2F;&#x2F;置两个子表的起始下标及辅助数组的起始下标</span><br><span class="line">2、若i&gt;m 或j&gt;n，转⑷ &#x2F;&#x2F;其中一个子表已合并完，比较选取结束</span><br><span class="line">3、&#x2F;&#x2F;选取r[i]和r[j]较小的存入辅助数组rf</span><br><span class="line">        如果r[i]&lt;r[j]，rf[k]&#x3D;r[i]； i++； k++； 转⑵</span><br><span class="line">        否则，rf[k]&#x3D;r[j]； j++； k++； 转⑵</span><br><span class="line">4、&#x2F;&#x2F;将尚未处理完的子表中元素存入rf</span><br><span class="line">        如果i&lt;&#x3D;m，将r[i…m]存入rf[k…n] &#x2F;&#x2F;前一子表非空</span><br><span class="line">        如果j&lt;&#x3D;n ,  将r[j…n] 存入rf[k…n] &#x2F;&#x2F;后一子表非空</span><br><span class="line">5、合并结束。</span><br></pre></td></tr></table></figure><p><strong>算法实现：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 归并排序</span></span><br><span class="line"><span class="comment"> * 简介:将两个（或两个以上）有序表合并成一个新的有序表 即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列</span></span><br><span class="line"><span class="comment"> * 时间复杂度为O(nlogn)</span></span><br><span class="line"><span class="comment"> * 稳定排序方式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums 待排序数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 输出有序数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> low, <span class="keyword">int</span> high) &#123;</span><br><span class="line">    <span class="keyword">int</span> mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="comment">// 左边</span></span><br><span class="line">        sort(nums, low, mid);</span><br><span class="line">        <span class="comment">// 右边</span></span><br><span class="line">        sort(nums, mid + <span class="number">1</span>, high);</span><br><span class="line">        <span class="comment">// 左右归并</span></span><br><span class="line">        merge(nums, low, mid, high);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将数组中low到high位置的数进行排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums 待排序数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> low 待排的开始位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mid 待排中间位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> high 待排结束位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> low, <span class="keyword">int</span> mid, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[high - low + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> i = low;<span class="comment">// 左指针</span></span><br><span class="line">    <span class="keyword">int</span> j = mid + <span class="number">1</span>;<span class="comment">// 右指针</span></span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把较小的数先移到新数组中</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= high) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &lt; nums[j]) &#123;</span><br><span class="line">            temp[k++] = nums[i++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            temp[k++] = nums[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把左边剩余的数移入数组</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) &#123;</span><br><span class="line">        temp[k++] = nums[i++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把右边边剩余的数移入数组</span></span><br><span class="line">    <span class="keyword">while</span> (j &lt;= high) &#123;</span><br><span class="line">        temp[k++] = nums[j++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把新数组中的数覆盖nums数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k2 = <span class="number">0</span>; k2 &lt; temp.length; k2++) &#123;</span><br><span class="line">        nums[k2 + low] = temp[k2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆排序算法"><a href="#堆排序算法" class="headerlink" title="堆排序算法"></a>堆排序算法</h3><p><strong>1、基本思想：</strong><br>　　堆排序是一种树形选择排序，是对直接选择排序的有效改进。<br>　　堆的定义下：具有n个元素的序列 （h1,h2,…,hn),当且仅当满足（hi&gt;=h2i,hi&gt;=2i+1）或（hi&lt;=h2i,hi&lt;=2i+1） (i=1,2,…,n/2)时称之为堆。在这里只讨论满足前者条件的堆。由堆的定义可以看出，堆顶元素（即第一个元素）必为最大项（大顶堆）。完全二 叉树可以很直观地表示堆的结构。堆顶为根，其它为左子树、右子树。<br>　　思想:初始时把要排序的数的序列看作是一棵顺序存储的二叉树，调整它们的存储序，使之成为一个 堆，这时堆的根节点的数最大。然后将根节点与堆的最后一个节点交换。然后对前面(n-1)个数重新调整使之成为堆。依此类推，直到只有两个节点的堆，并对 它们作交换，最后得到有n个节点的有序序列。从算法描述来看，堆排序需要两个过程，一是建立堆，二是堆顶与堆的最后一个元素交换位置。所以堆排序有两个函数组成。一是建堆的渗透函数，二是反复调用渗透函数实现排序的函数。<br><strong>2、实例：</strong><br>初始序列：46,79,56,38,40,84<br>　　建堆：<br><img src="http://upload-images.jianshu.io/upload_images/196518-65ab0a125c803bd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>　　交换，从堆中踢出最大数：<br><img src="http://upload-images.jianshu.io/upload_images/196518-aaffe2862da0c322.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>依次类推：最后堆中剩余的最后两个结点交换，踢出一个，排序完成。<br><strong>3.算法实现：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a=&#123;<span class="number">49</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>,<span class="number">13</span>,<span class="number">27</span>,<span class="number">49</span>,<span class="number">78</span>,<span class="number">34</span>,<span class="number">12</span>,<span class="number">64</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> arrayLength=a.length;  </span><br><span class="line">        <span class="comment">//循环建堆  </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arrayLength-<span class="number">1</span>;i++)&#123;  </span><br><span class="line">            <span class="comment">//建堆  </span></span><br><span class="line">            buildMaxHeap(a,arrayLength-<span class="number">1</span>-i);  </span><br><span class="line">            <span class="comment">//交换堆顶和最后一个元素  </span></span><br><span class="line">            swap(a,<span class="number">0</span>,arrayLength-<span class="number">1</span>-i);  </span><br><span class="line">            System.out.println(Arrays.toString(a));  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对data数组从0到lastIndex建大顶堆</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buildMaxHeap</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> lastIndex)</span></span>&#123;</span><br><span class="line">         <span class="comment">//从lastIndex处节点（最后一个节点）的父节点开始</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=(lastIndex-<span class="number">1</span>)/<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="comment">//k保存正在判断的节点</span></span><br><span class="line">            <span class="keyword">int</span> k=i;</span><br><span class="line">            <span class="comment">//如果当前k节点的子节点存在  </span></span><br><span class="line">            <span class="keyword">while</span>(k*<span class="number">2</span>+<span class="number">1</span>&lt;=lastIndex)&#123;</span><br><span class="line">                <span class="comment">//k节点的左子节点的索引</span></span><br><span class="line">                <span class="keyword">int</span> biggerIndex=<span class="number">2</span>*k+<span class="number">1</span>;</span><br><span class="line">                <span class="comment">//如果biggerIndex小于lastIndex，即biggerIndex+1代表的k节点的右子节点存在</span></span><br><span class="line">                <span class="keyword">if</span>(biggerIndex&lt;lastIndex)&#123;  </span><br><span class="line">                    <span class="comment">//若果右子节点的值较大  </span></span><br><span class="line">                    <span class="keyword">if</span>(data[biggerIndex]&lt;data[biggerIndex+<span class="number">1</span>])&#123;  </span><br><span class="line">                        <span class="comment">//biggerIndex总是记录较大子节点的索引  </span></span><br><span class="line">                        biggerIndex++;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="comment">//如果k节点的值小于其较大的子节点的值  </span></span><br><span class="line">                <span class="keyword">if</span>(data[k]&lt;data[biggerIndex])&#123;  </span><br><span class="line">                    <span class="comment">//交换他们  </span></span><br><span class="line">                    swap(data,k,biggerIndex);  </span><br><span class="line">                    <span class="comment">//将biggerIndex赋予k，开始while循环的下一次循环，重新保证k节点的值大于其左右子节点的值  </span></span><br><span class="line">                    k=biggerIndex;  </span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">                    <span class="keyword">break</span>;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//交换</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> tmp=data[i];  </span><br><span class="line">        data[i]=data[j];  </span><br><span class="line">        data[j]=tmp;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="各种算法的时间复杂度"><a href="#各种算法的时间复杂度" class="headerlink" title="各种算法的时间复杂度"></a>各种算法的时间复杂度</h3><p><img src="http://upload-images.jianshu.io/upload_images/196518-584a80a392639ce7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>Jmeter使用知识点</title>
    <url>/2016/04/09/2016-04-09-Jmeter-use-knowledge-points/</url>
    <content><![CDATA[<h3 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h3><h4 id="HTTP-RequestHTTP请求"><a href="#HTTP-RequestHTTP请求" class="headerlink" title="HTTP RequestHTTP请求"></a><code>HTTP Request</code>HTTP请求</h4><p>一个线程组或者集合中，所用的请求都使用相同的“Web服务器”，就可以添加一个“HTTP 请求默认值”组件，在其中设置好“服务器地址”、“端口号”、“延时”，这样所有的请求就都会使用该组件中的设置。</p><a id="more"></a><h4 id="HTTP-Cookie-管理器"><a href="#HTTP-Cookie-管理器" class="headerlink" title="HTTP Cookie 管理器"></a>HTTP Cookie 管理器</h4><p>需要在登录状态下才能发起的请求，在线程组中有一个登录的请求，这样再在该线程组中添加一个“HTTP Cookie 管理器”组件，登录请求完成时，该组件就会自动保存登录的Cookie，这样其他需要登录态才能进行的请求就也能成功进行。</p><h4 id="HTTP-Header-ManagerHTTP信息头管理器"><a href="#HTTP-Header-ManagerHTTP信息头管理器" class="headerlink" title="HTTP Header ManagerHTTP信息头管理器"></a><code>HTTP Header Manager</code>HTTP信息头管理器</h4><p>有些服务器限制了需要正常的浏览器才能访问，但是Jmeter在发送请求时，默认使用的“User-Agent”是“Apache-HttpClient/4.2.6 (java 1.5)”，所以需要添加一个“HTTP 信息头管理器”组件，用于模拟正常的浏览器，模拟的内容需要自己手动添加到该组件中，如：User-Agent | Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0</p><h4 id="Backend-Listener后端监听器"><a href="#Backend-Listener后端监听器" class="headerlink" title="Backend Listener后端监听器"></a><code>Backend Listener</code>后端监听器</h4><p>收集<code>Jmeter</code>运行中的数据并传输给<code>Influxdb</code>，从而可以在<code>Grafana</code>平台上展示</p><img src="/2016/04/09/2016-04-09-Jmeter-use-knowledge-points/%E5%90%8E%E7%AB%AF%E7%9B%91%E5%90%AC%E5%99%A8.png" title="后端监听器"><p>对默认值进行修改，增加数据的抓取值：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">samplersList：market.*</span><br><span class="line">userRegexpForSamplersList：True</span><br></pre></td></tr></table></figure><h4 id="jp-gc-Stepping-Thread-Group阶梯加压插件"><a href="#jp-gc-Stepping-Thread-Group阶梯加压插件" class="headerlink" title="jp@gc - Stepping Thread Group阶梯加压插件"></a><code>jp@gc - Stepping Thread Group</code>阶梯加压插件</h4><ul><li>线程组一共启动1000个线程数量，</li><li>启动第一个线程前，需要等待0s，</li><li>最开始启动100个线程，</li><li>每隔1s，在1s内，启动100个线程，</li><li>全部线程加载完毕后，持续运行600s，</li><li>最后，在1s内停止100个线程。<img src="/2016/04/09/2016-04-09-Jmeter-use-knowledge-points/%E9%98%B6%E6%A2%AF%E5%8A%A0%E5%8E%8B%E6%8F%92%E4%BB%B6.png" title="阶梯加压插件"></li></ul><h4 id="CSV-Data-Set-Config参数化插件"><a href="#CSV-Data-Set-Config参数化插件" class="headerlink" title="CSV Data Set Config参数化插件"></a><code>CSV Data Set Config</code>参数化插件</h4><p>在压测过程中需要提前准备一些数据，使用该插件，在测试前提前准备好B端手机号，用于批量生成可用于压测的token和ShareId数据</p><img src="/2016/04/09/2016-04-09-Jmeter-use-knowledge-points/%E5%8F%82%E6%95%B0%E5%8C%96%E6%8F%92%E4%BB%B6.png" title="参数化插件"><h4 id="Regular-Expression-Extractor正则表达式提取器"><a href="#Regular-Expression-Extractor正则表达式提取器" class="headerlink" title="Regular Expression Extractor正则表达式提取器"></a><code>Regular Expression Extractor</code>正则表达式提取器</h4><p>数据准备阶段，用于获取response中的值</p><img src="/2016/04/09/2016-04-09-Jmeter-use-knowledge-points/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8F%90%E5%8F%96%E5%99%A8.png" title="正则表达式提取器"><h4 id="BeanShell-PostProcessorBeanShell-后置处理程序"><a href="#BeanShell-PostProcessorBeanShell-后置处理程序" class="headerlink" title="BeanShell PostProcessorBeanShell 后置处理程序"></a><code>BeanShell PostProcessor</code>BeanShell 后置处理程序</h4><p>测试中用到了token和shareId，使用后置处理程序获取多个字段，并把多个字段用逗号分隔，并写入文件</p><img src="/2016/04/09/2016-04-09-Jmeter-use-knowledge-points/BeanShell%E5%90%8E%E7%BD%AE%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F.png" title="BeanShell后置处理程序"><p>脚本如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.BufferedWriter;</span><br><span class="line">import java.io.FileWriter;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">String shareId&#x3D;bsh.args[0];</span><br><span class="line">	try &#123;</span><br><span class="line">		FileWriter fstream &#x3D; new FileWriter(&quot;&#x2F;Users&#x2F;taoyi&#x2F;Desktop&#x2F;JMETER&#x2F;tokenandShareId.csv&quot;,true);</span><br><span class="line">		BufferedWriter out &#x3D; new BufferedWriter(fstream);</span><br><span class="line">		out.write(&quot;$&#123;token&#125;&quot;+&quot;,&quot;+vars.get(&quot;shareId&quot;)+&quot;\n&quot;);</span><br><span class="line">		out.close();</span><br><span class="line">		fstream.close();</span><br><span class="line">	&#125; catch (IOException e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure><h4 id="jp-gc-Hits-per-SecondHPS打点值获取"><a href="#jp-gc-Hits-per-SecondHPS打点值获取" class="headerlink" title="jp@gc - Hits per SecondHPS打点值获取"></a><code>jp@gc - Hits per Second</code>HPS打点值获取</h4><p>测试执行过程中，用于获取HPS值</p><img src="/2016/04/09/2016-04-09-Jmeter-use-knowledge-points/HPS%E6%89%93%E7%82%B9%E5%80%BC.png" title="HPS打点值"><h3 id="三方脚本"><a href="#三方脚本" class="headerlink" title="三方脚本"></a>三方脚本</h3><h4 id="不同并发数自动执行jmeter脚本shell命令"><a href="#不同并发数自动执行jmeter脚本shell命令" class="headerlink" title="不同并发数自动执行jmeter脚本shell命令"></a>不同并发数自动执行jmeter脚本shell命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="built_in">export</span> jmx_template=<span class="string">"market"</span></span><br><span class="line"><span class="built_in">export</span> suffix=<span class="string">".jmx"</span></span><br><span class="line"><span class="built_in">export</span> jmx_template_filename=<span class="string">"<span class="variable">$&#123;jmx_template&#125;</span><span class="variable">$&#123;suffix&#125;</span>"</span></span><br><span class="line"><span class="built_in">export</span> os_type=`uname`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要在系统变量中定义jmeter根目录的位置，如下</span></span><br><span class="line"> <span class="built_in">export</span> jmeter_path=<span class="string">"/opt/apache-jmeter/"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空nohup.out</span></span><br><span class="line">cat /dev/null &gt; nohup.out</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制杀掉JMeter进程</span></span><br><span class="line">killJMeter()</span><br><span class="line">&#123;</span><br><span class="line">    pid=`ps -ef|grep jmeter|grep java|awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"jmeter Id list :<span class="variable">$pid</span>"</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="string">"<span class="variable">$pid</span>"</span> = <span class="string">""</span> ]]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"no jmeter pid alive"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">kill</span> -9 <span class="variable">$pid</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置执行5次测试，每次的线程数分别是【10、20、30、40、50】</span></span><br><span class="line"><span class="comment"># 每次测试的持续时间，由jmeter脚本中的调度器【Scheduler】的持续时间（秒）【Duration(seconds)】来定</span></span><br><span class="line">thread_number_array=(10 20 30 40 50)</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> <span class="string">"<span class="variable">$&#123;thread_number_array[@]&#125;</span>"</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="comment"># 生成对应压测线程的jmx文件</span></span><br><span class="line">    <span class="built_in">export</span> jmx_filename=<span class="string">"<span class="variable">$&#123;jmx_template&#125;</span>_<span class="variable">$&#123;num&#125;</span><span class="variable">$&#123;suffix&#125;</span>"</span></span><br><span class="line">    <span class="built_in">export</span> jtl_filename=<span class="string">"test_<span class="variable">$&#123;num&#125;</span>.jtl"</span></span><br><span class="line"></span><br><span class="line">    rm -f <span class="variable">$&#123;jmx_filename&#125;</span> <span class="variable">$&#123;jtl_filename&#125;</span></span><br><span class="line">    cp <span class="variable">$&#123;jmx_template_filename&#125;</span> <span class="variable">$&#123;jmx_filename&#125;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"生成jmx压测脚本 <span class="variable">$&#123;jmx_filename&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="string">"<span class="variable">$&#123;os_type&#125;</span>"</span> == <span class="string">"Darwin"</span> ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="comment"># Mac下执行该语句</span></span><br><span class="line">        sed -i <span class="string">""</span> <span class="string">"s/thread_num/<span class="variable">$&#123;num&#125;</span>/g"</span> <span class="variable">$&#123;jmx_filename&#125;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment"># Linux下执行该语句</span></span><br><span class="line">        sed -i <span class="string">"s/thread_num/<span class="variable">$&#123;num&#125;</span>/g"</span> <span class="variable">$&#123;jmx_filename&#125;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># JMeter 静默压测</span></span><br><span class="line">    nohup <span class="variable">$&#123;jmeter_path&#125;</span>/bin/jmeter -n -t <span class="variable">$&#123;jmx_filename&#125;</span> -l <span class="variable">$&#123;jtl_filename&#125;</span> &amp;</span><br><span class="line">    sleep 65</span><br><span class="line">    killJMeter</span><br><span class="line">    rm -f <span class="variable">$&#123;jmx_filename&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"自动化压测全部结束"</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>jmeter</tag>
      </tags>
  </entry>
  <entry>
    <title>八大排序算法的Python实现</title>
    <url>/2017/01/02/2017-01-02-Python-implementation-of-eight-sorting-algorithms/</url>
    <content><![CDATA[<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(lists)</span>:</span></span><br><span class="line">    <span class="comment"># 冒泡排序</span></span><br><span class="line">    count = len(lists)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, count):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, count):</span><br><span class="line">            <span class="keyword">if</span> lists[i] &gt; lists[j]:</span><br><span class="line">                lists[i], lists[j] = lists[j], lists[i]</span><br><span class="line">    <span class="keyword">return</span> lists</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(lists, left, right)</span>:</span></span><br><span class="line">    <span class="comment"># 快速排序</span></span><br><span class="line">    <span class="keyword">if</span> left &gt;= right:</span><br><span class="line">        <span class="keyword">return</span> lists</span><br><span class="line">    key = lists[left]</span><br><span class="line">    low = left</span><br><span class="line">    high = right</span><br><span class="line">    <span class="keyword">while</span> left &lt; right:</span><br><span class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> lists[right] &gt;= key:</span><br><span class="line">            right -= <span class="number">1</span></span><br><span class="line">        lists[left] = lists[right]</span><br><span class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> lists[left] &lt;= key:</span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">        lists[right] = lists[left]</span><br><span class="line">    lists[right] = key</span><br><span class="line">    quick_sort(lists, low, left - <span class="number">1</span>)</span><br><span class="line">    quick_sort(lists, left + <span class="number">1</span>, high)</span><br><span class="line">    <span class="keyword">return</span> lists</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序，时间复杂度为O(n^2)。是稳定的排序方法。插入算法把要排序的数组分成两部分：第一部分包含了这个数组的所有元素，但将最后一个元素除外（让数组多一个空间才有插入的位置），而第二部分就只包含这一个元素（即待插入元素）。在第一部分排序完成后，再将这个最后元素插入到已排好序的第一部分中。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(lists)</span>:</span></span><br><span class="line">    <span class="comment"># 插入排序</span></span><br><span class="line">    count = len(lists)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, count):</span><br><span class="line">        key = lists[i]</span><br><span class="line">        j = i - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> lists[j] &gt; key:</span><br><span class="line">                lists[j + <span class="number">1</span>] = lists[j]</span><br><span class="line">                lists[j] = key</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> lists</span><br></pre></td></tr></table></figure><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>希尔排序(Shell Sort)是插入排序的一种。也称缩小增量排序，是直接插入排序算法的一种更高效的改进版本。希尔排序是非稳定排序算法。该方法因DL．Shell于1959年提出而得名。 希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_sort</span><span class="params">(lists)</span>:</span></span><br><span class="line">    <span class="comment"># 希尔排序</span></span><br><span class="line">    count = len(lists)</span><br><span class="line">    step = <span class="number">2</span></span><br><span class="line">    group = count / step</span><br><span class="line">    <span class="keyword">while</span> group &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, group):</span><br><span class="line">            j = i + group</span><br><span class="line">            <span class="keyword">while</span> j &lt; count:</span><br><span class="line">                k = j - group</span><br><span class="line">                key = lists[j]</span><br><span class="line">                <span class="keyword">while</span> k &gt;= <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">if</span> lists[k] &gt; key:</span><br><span class="line">                        lists[k + group] = lists[k]</span><br><span class="line">                        lists[k] = key</span><br><span class="line">                    k -= group</span><br><span class="line">                j += group</span><br><span class="line">        group /= step</span><br><span class="line">    <span class="keyword">return</span> lists</span><br></pre></td></tr></table></figure><h3 id="直接选择排序"><a href="#直接选择排序" class="headerlink" title="直接选择排序"></a>直接选择排序</h3><p>基本思想：第1趟，在待排序记录r1 ~ r[n]中选出最小的记录，将它与r1交换；第2趟，在待排序记录r2 ~ r[n]中选出最小的记录，将它与r2交换；以此类推，第i趟在待排序记录r[i] ~ r[n]中选出最小的记录，将它与r[i]交换，使有序序列不断增长直到全部排序完毕。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span><span class="params">(lists)</span>:</span></span><br><span class="line">    <span class="comment"># 选择排序</span></span><br><span class="line">    count = len(lists)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, count):</span><br><span class="line">        min = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, count):</span><br><span class="line">            <span class="keyword">if</span> lists[min] &gt; lists[j]:</span><br><span class="line">                min = j</span><br><span class="line">        lists[min], lists[i] = lists[i], lists[min]</span><br><span class="line">    <span class="keyword">return</span> lists</span><br></pre></td></tr></table></figure><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p>堆排序(Heapsort)是指利用堆积树（堆）这种数据结构所设计的一种排序算法，它是选择排序的一种。可以利用数组的特点快速定位指定索引的元素。堆分为大根堆和小根堆，是完全二叉树。大根堆的要求是每个节点的值都不大于其父节点的值，即A[PARENT[i]] &gt;= A[i]。在数组的非降序排序中，需要使用的就是大根堆，因为根据大根堆的要求可知，最大的值一定在堆顶。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 调整堆</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">adjust_heap</span><span class="params">(lists, i, size)</span>:</span></span><br><span class="line">    lchild = <span class="number">2</span> * i + <span class="number">1</span></span><br><span class="line">    rchild = <span class="number">2</span> * i + <span class="number">2</span></span><br><span class="line">    max = i</span><br><span class="line">    <span class="keyword">if</span> i &lt; size / <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> lchild &lt; size <span class="keyword">and</span> lists[lchild] &gt; lists[max]:</span><br><span class="line">            max = lchild</span><br><span class="line">        <span class="keyword">if</span> rchild &lt; size <span class="keyword">and</span> lists[rchild] &gt; lists[max]:</span><br><span class="line">            max = rchild</span><br><span class="line">        <span class="keyword">if</span> max != i:</span><br><span class="line">            lists[max], lists[i] = lists[i], lists[max]</span><br><span class="line">            adjust_heap(lists, max, size)</span><br><span class="line"><span class="comment"># 创建堆</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_heap</span><span class="params">(lists, size)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, (size/<span class="number">2</span>))[::<span class="number">-1</span>]:</span><br><span class="line">        adjust_heap(lists, i, size)</span><br><span class="line"><span class="comment"># 堆排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span><span class="params">(lists)</span>:</span></span><br><span class="line">    size = len(lists)</span><br><span class="line">    build_heap(lists, size)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, size)[::<span class="number">-1</span>]:</span><br><span class="line">        lists[<span class="number">0</span>], lists[i] = lists[i], lists[<span class="number">0</span>]</span><br><span class="line">        adjust_heap(lists, <span class="number">0</span>, i)</span><br></pre></td></tr></table></figure><h3 id="归并排序算法"><a href="#归并排序算法" class="headerlink" title="归并排序算法"></a>归并排序算法</h3><p>描述：归并排序是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。<br>归并过程为：比较a[i]和a[j]的大小，若a[i]≤a[j]，则将第一个有序表中的元素a[i]复制到r[k]中，并令i和k分别加上1；否则将第二个有序表中的元素a[j]复制到r[k]中，并令j和k分别加上1，如此循环下去，直到其中一个有序表取完，然后再将另一个有序表中剩余的元素复制到r中从下标k到下标t的单元。归并排序的算法我们通常用递归实现，先把待排序区间[s,t]以中点二分，接着把左边子区间排序，再把右边子区间排序，最后把左区间和右区间用一次归并操作合并成有序的区间[s,t]。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(left, right)</span>:</span></span><br><span class="line">    i, j = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">while</span> i &lt; len(left) <span class="keyword">and</span> j &lt; len(right):</span><br><span class="line">        <span class="keyword">if</span> left[i] &lt;= right[j]:</span><br><span class="line">            result.append(left[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(right[j])</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    result += left[i:]</span><br><span class="line">    result += right[j:]</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(lists)</span>:</span></span><br><span class="line">    <span class="comment"># 归并排序</span></span><br><span class="line">    <span class="keyword">if</span> len(lists) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> lists</span><br><span class="line">    num = len(lists) / <span class="number">2</span></span><br><span class="line">    left = merge_sort(lists[:num])</span><br><span class="line">    right = merge_sort(lists[num:])</span><br><span class="line">    <span class="keyword">return</span> merge(left, right)</span><br></pre></td></tr></table></figure><h3 id="基数排序算法"><a href="#基数排序算法" class="headerlink" title="基数排序算法"></a>基数排序算法</h3><p>基数排序（radix sort）属于“分配式排序”（distribution sort），又称“桶子法”（bucket sort）或bin sort，顾名思义，它是透过键值的部份资讯，将要排序的元素分配至某些“桶”中，藉以达到排序的作用，基数排序法是属于稳定性的排序，其时间复杂度为O (nlog(r)m)，其中r为所采取的基数，而m为堆数，在某些时候，基数排序法的效率高于其它的稳定性排序法。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">radix_sort</span><span class="params">(lists, radix=<span class="number">10</span>)</span>:</span></span><br><span class="line">    k = int(math.ceil(math.log(max(lists), radix)))</span><br><span class="line">    bucket = [[] <span class="keyword">for</span> i <span class="keyword">in</span> range(radix)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, k+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> lists:</span><br><span class="line">            bucket[j/(radix**(i<span class="number">-1</span>)) % (radix**i)].append(j)</span><br><span class="line">        <span class="keyword">del</span> lists[:]</span><br><span class="line">        <span class="keyword">for</span> z <span class="keyword">in</span> bucket:</span><br><span class="line">            lists += z</span><br><span class="line">            <span class="keyword">del</span> z[:]</span><br><span class="line">    <span class="keyword">return</span> lists</span><br></pre></td></tr></table></figure><h3 id="各种算法的时间复杂度"><a href="#各种算法的时间复杂度" class="headerlink" title="各种算法的时间复杂度"></a>各种算法的时间复杂度</h3>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>docker学习笔记</title>
    <url>/2016/12/08/2016-12-08-Docker-study-notes/</url>
    <content><![CDATA[<h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><p>官网下载 Docker for Mac</p><h3 id="无法删除docker镜像时，处理方法"><a href="#无法删除docker镜像时，处理方法" class="headerlink" title="无法删除docker镜像时，处理方法"></a>无法删除docker镜像时，处理方法</h3><p>有依赖该image的container，先删除container再删除image</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -a | grep <span class="string">"Exited"</span> | awk <span class="string">'&#123;print $1 &#125;'</span>|xargs docker stop</span><br><span class="line">docker ps -a | grep <span class="string">"Exited"</span> | awk <span class="string">'&#123;print $1 &#125;'</span>|xargs docker rm</span><br><span class="line">docker images|grep none|awk <span class="string">'&#123;print $3 &#125;'</span>|xargs docker rmi</span><br></pre></td></tr></table></figure><p>这样清空掉残余的容器后，再删除images就没有异常的提示了。</p><a id="more"></a><h3 id="安装docker-amp-boot2docker"><a href="#安装docker-amp-boot2docker" class="headerlink" title="安装docker&amp;boot2docker"></a>安装<code>docker&amp;boot2docker</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install boot2docker</span><br></pre></td></tr></table></figure><h3 id="Docker-images存放位置"><a href="#Docker-images存放位置" class="headerlink" title="Docker images存放位置"></a><code>Docker images</code>存放位置</h3><p><code>Docker for Mac</code>版本，所有的docker images 保存在下面这个文件里：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/Users/&#123;YourUserName&#125;/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/Docker.qcow2</span><br></pre></td></tr></table></figure><p>到目前为止，还是没有办法指定<code>images</code>和<code>Container</code>的保存路径，你只能任由<code>docker</code>吃掉你的主盘。</p><p>docker2版本增加了<code>move disk image</code>的入口，可以修改docker Disk image的路径</p><h3 id="docker镜像的常用操作"><a href="#docker镜像的常用操作" class="headerlink" title="docker镜像的常用操作"></a>docker镜像的常用操作</h3><ol><li><p>获取镜像</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull &lt;域名&gt;/&lt;namespace&gt;/&lt;repo&gt;:&lt;tag&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull redis											<span class="comment"># 不指定别的信息，默认从官方库下载latest标签的内容</span></span><br></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TyMac in ~ using ‹› 17-06-26 - 12:25:35</span></span><br><span class="line">$ docker pull redis</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/redis</span><br><span class="line">f5cc0ee7a6f6: Pull complete 														<span class="comment"># f5cc0ee7a6f6是redis镜像的层ID，一个镜像由多层组成</span></span><br><span class="line">5fc25ed18e87: Pull complete </span><br><span class="line">e025bc8872f6: Pull complete </span><br><span class="line">0d8edb7c8bd1: Pull complete </span><br><span class="line">654cb9d60232: Pull complete </span><br><span class="line">44888ef53075: Pull complete 														<span class="comment"># redis镜像一共有6层</span></span><br><span class="line">Digest: sha256:4e2af5470298aa3c79fba07216f0245fff5278b66f40681cf448eabca0bb966b</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> redis:latest</span><br></pre></td></tr></table></figure></li><li><p>查看镜像列表</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TyMac in ~ using ‹› 17-06-26 - 12:27:31</span></span><br><span class="line">$ docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">jenkins             latest              0b4d4d677a26        2 days ago          681 MB</span><br><span class="line">redis               latest              4e482b286430        2 days ago          99 MB</span><br></pre></td></tr></table></figure><p>查看镜像的详细信息：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect redis</span><br></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TyMac in ~ using ‹› 17-06-26 - 12:32:43</span></span><br><span class="line">$ docker inspect redis</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"Id"</span>: <span class="string">"sha256:4e482b286430fc5abed4cd26965ef200c59b727739919489d9ba42d5c361576c"</span>,</span><br><span class="line">        <span class="string">"RepoTags"</span>: [</span><br><span class="line">            <span class="string">"redis:latest"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"RepoDigests"</span>: [</span><br><span class="line">            <span class="string">"redis@sha256:4e2af5470298aa3c79fba07216f0245fff5278b66f40681cf448eabca0bb966b"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"Parent"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"Comment"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"Created"</span>: <span class="string">"2017-06-23T05:48:12.360604857Z"</span>,</span><br><span class="line">        <span class="string">"Container"</span>: <span class="string">"8192875e4177261796f2e1ade286f9ace2f2ec3cd0a306737c8b2df840c255bc"</span>,</span><br><span class="line">        <span class="string">"ContainerConfig"</span>: &#123;</span><br><span class="line">            <span class="string">"Hostname"</span>: <span class="string">"40a0c0f8b2f7"</span>,</span><br><span class="line">            <span class="string">"Domainname"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"User"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"AttachStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"AttachStdout"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"AttachStderr"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"ExposedPorts"</span>: &#123;</span><br><span class="line">                <span class="string">"6379/tcp"</span>: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"Tty"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"OpenStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"StdinOnce"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"Env"</span>: [</span><br><span class="line">                <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span>,</span><br><span class="line">                <span class="string">"GOSU_VERSION=1.10"</span>,</span><br><span class="line">                <span class="string">"REDIS_VERSION=3.2.9"</span>,</span><br><span class="line">                <span class="string">"REDIS_DOWNLOAD_URL=http://download.redis.io/releases/redis-3.2.9.tar.gz"</span>,</span><br><span class="line">                <span class="string">"REDIS_DOWNLOAD_SHA=6eaacfa983b287e440d0839ead20c2231749d5d6b78bbe0e0ffa3a890c59ff26"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"Cmd"</span>: [</span><br><span class="line">                <span class="string">"/bin/sh"</span>,</span><br><span class="line">                <span class="string">"-c"</span>,</span><br><span class="line">                <span class="string">"#(nop) "</span>,</span><br><span class="line">                <span class="string">"CMD [\"redis-server\"]"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"ArgsEscaped"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">"Image"</span>: <span class="string">"sha256:d5b0d131d2b9f60cf036f54e27c97de3cbda19979b6ef039061df7b11e80b9cc"</span>,</span><br><span class="line">            <span class="string">"Volumes"</span>: &#123;</span><br><span class="line">                <span class="string">"/data"</span>: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"WorkingDir"</span>: <span class="string">"/data"</span>,</span><br><span class="line">            <span class="string">"Entrypoint"</span>: [</span><br><span class="line">                <span class="string">"docker-entrypoint.sh"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"OnBuild"</span>: [],</span><br><span class="line">            <span class="string">"Labels"</span>: &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"DockerVersion"</span>: <span class="string">"17.03.1-ce"</span>,</span><br><span class="line">        <span class="string">"Author"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"Config"</span>: &#123;</span><br><span class="line">            <span class="string">"Hostname"</span>: <span class="string">"40a0c0f8b2f7"</span>,</span><br><span class="line">            <span class="string">"Domainname"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"User"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"AttachStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"AttachStdout"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"AttachStderr"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"ExposedPorts"</span>: &#123;</span><br><span class="line">                <span class="string">"6379/tcp"</span>: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"Tty"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"OpenStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"StdinOnce"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"Env"</span>: [</span><br><span class="line">                <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span>,</span><br><span class="line">                <span class="string">"GOSU_VERSION=1.10"</span>,</span><br><span class="line">                <span class="string">"REDIS_VERSION=3.2.9"</span>,</span><br><span class="line">                <span class="string">"REDIS_DOWNLOAD_URL=http://download.redis.io/releases/redis-3.2.9.tar.gz"</span>,</span><br><span class="line">                <span class="string">"REDIS_DOWNLOAD_SHA=6eaacfa983b287e440d0839ead20c2231749d5d6b78bbe0e0ffa3a890c59ff26"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"Cmd"</span>: [</span><br><span class="line">                <span class="string">"redis-server"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"ArgsEscaped"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">"Image"</span>: <span class="string">"sha256:d5b0d131d2b9f60cf036f54e27c97de3cbda19979b6ef039061df7b11e80b9cc"</span>,</span><br><span class="line">            <span class="string">"Volumes"</span>: &#123;</span><br><span class="line">                <span class="string">"/data"</span>: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"WorkingDir"</span>: <span class="string">"/data"</span>,</span><br><span class="line">            <span class="string">"Entrypoint"</span>: [</span><br><span class="line">                <span class="string">"docker-entrypoint.sh"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"OnBuild"</span>: [],</span><br><span class="line">            <span class="string">"Labels"</span>: &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Architecture"</span>: <span class="string">"amd64"</span>,</span><br><span class="line">        <span class="string">"Os"</span>: <span class="string">"linux"</span>,</span><br><span class="line">        <span class="string">"Size"</span>: 98969736,</span><br><span class="line">        <span class="string">"VirtualSize"</span>: 98969736,</span><br><span class="line">        <span class="string">"GraphDriver"</span>: &#123;</span><br><span class="line">            <span class="string">"Name"</span>: <span class="string">"overlay2"</span>,</span><br><span class="line">            <span class="string">"Data"</span>: &#123;</span><br><span class="line">                <span class="string">"LowerDir"</span>: <span class="string">"/var/lib/docker/overlay2/2a988e8e8467a83cc2e5947dd7ee8edea6718aa01bcee44825baa2fe726dbab1/diff:/var/lib/docker/overlay2/bba45f5b1aa9fcb7d72bc8c8746ba1819c970815f3a852f978b5becbfcbcad5d/diff:/var/lib/docker/overlay2/82c9bcce7485cbd0cc5e6d9b2081451d34d6e93a8035835e66d48c30ad32acb8/diff:/var/lib/docker/overlay2/e5239d20d683ebfde2f855673710b82d06b3c1088b3c16bd6fce9226786f241d/diff:/var/lib/docker/overlay2/102a35bfaa68de0e2d04b05accf398ad8b0625ec65f054284d47dd6f4df14642/diff"</span>,</span><br><span class="line">                <span class="string">"MergedDir"</span>: <span class="string">"/var/lib/docker/overlay2/2eda23f85ac044336950781a1f20811346c4bf22032b3ebcc7f9e1a95cb3f1b8/merged"</span>,</span><br><span class="line">                <span class="string">"UpperDir"</span>: <span class="string">"/var/lib/docker/overlay2/2eda23f85ac044336950781a1f20811346c4bf22032b3ebcc7f9e1a95cb3f1b8/diff"</span>,</span><br><span class="line">                <span class="string">"WorkDir"</span>: <span class="string">"/var/lib/docker/overlay2/2eda23f85ac044336950781a1f20811346c4bf22032b3ebcc7f9e1a95cb3f1b8/work"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"RootFS"</span>: &#123;</span><br><span class="line">            <span class="string">"Type"</span>: <span class="string">"layers"</span>,</span><br><span class="line">            <span class="string">"Layers"</span>: [</span><br><span class="line">                <span class="string">"sha256:d08535b0996bcfbc19d5cc21f01813115dda20e6fdf43bd29e19a8038bc76cf6"</span>,</span><br><span class="line">                <span class="string">"sha256:74072b982a3d85ef4ab02792808db47aec546d972c8cbc564b835c3fc27b1c11"</span>,</span><br><span class="line">                <span class="string">"sha256:13964fab05984c7879450d90ce4efa53d19acd19033c80d00a3cc1aee8bef2cf"</span>,</span><br><span class="line">                <span class="string">"sha256:6f223f268efe8c0be9e665b65016c3a0f6dd8c1a3a03c40117f3e1ef4e7928ab"</span>,</span><br><span class="line">                <span class="string">"sha256:d9fe002e0a416f0c6f231a853a9c8a7bedd2dacf8d0c7190be0ff78691e76d12"</span>,</span><br><span class="line">                <span class="string">"sha256:23e630c4c6552a4d166ba35b2b89e3560e7c3822df556238f89106873f46d6d3"</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>查看镜像的制作操作系统：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect -f &#123;&#123;.Os&#125;&#125; 4e482b286430</span><br><span class="line">docker inspect -f &#123;&#123;.Os&#125;&#125; 4e482							<span class="comment"># 以前几位可区分的标识也可以获取到信息</span></span><br></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TyMac in ~ using ‹› 17-06-26 - 12:34:23</span></span><br><span class="line">$ docker inspect -f &#123;&#123;.Os&#125;&#125; 4e482b286430</span><br><span class="line">linux</span><br></pre></td></tr></table></figure></li><li><p>查找镜像</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker search redis</span><br></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TyMac in ~ using ‹› 17-06-26 - 12:36:55</span></span><br><span class="line">$ docker search redis</span><br><span class="line">NAME                      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">redis                     Redis is an open <span class="built_in">source</span> key-value store th...   3889      [OK]       </span><br><span class="line">sameersbn/redis                                                           54                   [OK]</span><br><span class="line">bitnami/redis             Bitnami Redis Docker Image                      50                   [OK]</span><br><span class="line">torusware/speedus-redis   Always updated official Redis docker image...    32                   [OK]</span><br><span class="line">webhippie/redis           Docker images <span class="keyword">for</span> redis                         7                    [OK]</span><br><span class="line">anapsix/redis             11MB Redis server image over AlpineLinux        6                    [OK]</span><br><span class="line">williamyeh/redis          Redis image <span class="keyword">for</span> Docker                          3                    [OK]</span><br><span class="line">clue/redis-benchmark      A minimal docker image to ease running the...   3                    [OK]</span><br><span class="line">unblibraries/redis        Leverages phusion/baseimage to deploy a ba...   2                    [OK]</span><br><span class="line">abzcoding/tomcat-redis    a tomcat container with redis as session m...   2                    [OK]</span><br><span class="line">frodenas/redis            A Docker Image <span class="keyword">for</span> Redis                        1                    [OK]</span><br><span class="line">greytip/redis             redis 3.0.3                                     1                    [OK]</span><br><span class="line">xataz/redis               Light redis image                               1                    [OK]</span><br><span class="line">miko2u/redis              Redis                                           1                    [OK]</span><br><span class="line">nanobox/redis             Redis service <span class="keyword">for</span> nanobox.io                    0                    [OK]</span><br><span class="line">yfix/redis                Yfix docker redis                                 0                    [OK]</span><br><span class="line">cloudposse/redis          Standalone redis service                        0                    [OK]</span><br><span class="line">continuouspipe/redis      Redis                                           0                    [OK]</span><br><span class="line">appelgriebsch/redis       Configurable redis container based on Alpi...    0                    [OK]</span><br><span class="line">maestrano/redis           Redis is an open <span class="built_in">source</span> key-value store th...   0                    [OK]</span><br><span class="line">trelllis/redis            Redis Primary                                   0                    [OK]</span><br><span class="line">drupaldocker/redis        Redis <span class="keyword">for</span> Drupal                                0                    [OK]</span><br><span class="line">higebu/redis-commander    Redis Commander Docker image. https://gith...   0                    [OK]</span><br><span class="line">watsco/redis              Watsco redis base                               0                    [OK]</span><br><span class="line">maxird/redis              Redis                                           0                    [OK]</span><br></pre></td></tr></table></figure></li><li><p>删除镜像</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rmi &lt;image&gt;:&lt;tag&gt;</span><br></pre></td></tr></table></figure><p>一个镜像有多个tag时，删除tag并不会影响镜像的存在<br>镜像有对应容器存在时，也无法正常删除，需要先停止并删除对应的容器，然后才能正常删除镜像<br>也可以强制删除镜像，<code>docker rmi -f &lt;image&gt;:&lt;tag&gt;</code>，但不建议这么操作，容易造成一些异常</p></li><li><p>创建镜像<br>创建镜像的方法有三种：基于已有镜像的容器创建、基于本地模板的导入、基于Dockerfile创建。<br>基于已有镜像的容器创建：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TyMac in ~ using ‹› 17-06-26 - 12:40:17</span></span><br><span class="line">$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line"><span class="comment"># taoyi @ TyMac in ~ using ‹› 17-06-26 - 12:44:55</span></span><br><span class="line">$ docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS               NAMES</span><br><span class="line">eed91a25662b        jenkins             <span class="string">"/bin/tini -- /usr..."</span>   16 hours ago        Exited (130) 16 hours ago                       myJenkins</span><br><span class="line"><span class="comment"># taoyi @ TyMac in ~ using ‹› 17-06-26 - 12:57:23</span></span><br><span class="line">$ docker commit -a <span class="string">"author"</span> -m <span class="string">" "</span> eed91a25662b shadow/testjenkins</span><br><span class="line">sha256:7fdb1ba1c4a59310c61907c574567502fb2b4c9faad6d3fa1cde7ac24a1d7974</span><br></pre></td></tr></table></figure></li><li><p>迁出镜像</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker save -o &lt;image&gt;.tar &lt;image&gt;:&lt;tag&gt;						<span class="comment"># 其中的image可以为标签或ID</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TyMac in ~ using ‹› 17-06-26 - 12:57:45</span></span><br><span class="line">$ docker images</span><br><span class="line">REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">shadow/testjenkins   latest              7fdb1ba1c4a5        3 minutes ago       681 MB</span><br><span class="line">jenkins              latest              0b4d4d677a26        2 days ago          681 MB</span><br><span class="line">redis                latest              4e482b286430        2 days ago          99 MB</span><br><span class="line"><span class="comment"># taoyi @ TyMac in ~ using ‹› 17-06-26 - 13:01:35</span></span><br><span class="line">$ docker save -o testjenkins.tar 7fdb1ba1c4a5</span><br><span class="line"><span class="comment"># taoyi @ TyMac in ~ using ‹› 17-06-26 - 13:02:41</span></span><br><span class="line">$ ll</span><br><span class="line">-rw-------   1 taoyi  staff   664M  6 26 13:02 testjenkins.tar					<span class="comment"># 镜像被迁出到了当前目录</span></span><br></pre></td></tr></table></figure></li><li><p>载入镜像</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker load --input &lt;image&gt;.tar</span><br><span class="line">docker load</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TyMac in ~ using ‹› 17-06-26 - 13:04:54</span></span><br><span class="line">$ docker images</span><br><span class="line">REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">shadow/testjenkins   latest              7fdb1ba1c4a5        10 minutes ago      681 MB</span><br><span class="line">jenkins              latest              0b4d4d677a26        2 days ago          681 MB</span><br><span class="line">redis                latest              4e482b286430        2 days ago          99 MB</span><br><span class="line"><span class="comment"># taoyi @ TyMac in ~ using ‹› 17-06-26 - 13:08:01</span></span><br><span class="line">$ docker rmi 7fdb1ba1c4a5</span><br><span class="line">Untagged: shadow/testjenkins:latest</span><br><span class="line">Deleted: sha256:7fdb1ba1c4a59310c61907c574567502fb2b4c9faad6d3fa1cde7ac24a1d7974</span><br><span class="line">Deleted: sha256:ffe123eea6f84d7dc5626bffd1930b23d898ee65d0eb371d2a57da0abdfd5c87</span><br><span class="line"><span class="comment"># taoyi @ TyMac in ~ using ‹› 17-06-26 - 13:08:15</span></span><br><span class="line">$ docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">jenkins             latest              0b4d4d677a26        2 days ago          681 MB</span><br><span class="line">redis               latest              4e482b286430        2 days ago          99 MB</span><br><span class="line"><span class="comment"># taoyi @ TyMac in ~ using ‹› 17-06-26 - 13:08:24</span></span><br><span class="line">$ docker load --input testjenkins.tar</span><br><span class="line">57ee77a34bd9: Loading layer [==================================================&gt;]  2.56 kB/2.56 kB</span><br><span class="line">Loaded image ID: sha256:7fdb1ba1c4a59310c61907c574567502fb2b4c9faad6d3fa1cde7ac24a1d7974</span><br><span class="line"><span class="comment"># taoyi @ TyMac in ~ using ‹› 17-06-26 - 13:08:54</span></span><br><span class="line">$ docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">&lt;none&gt;              &lt;none&gt;              7fdb1ba1c4a5        11 minutes ago      681 MB</span><br><span class="line">jenkins             latest              0b4d4d677a26        2 days ago          681 MB</span><br><span class="line">redis               latest              4e482b286430        2 days ago          99 MB</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TyMac in ~ using ‹› 17-06-26 - 13:09:05</span></span><br><span class="line">$ docker tag 7fdb1ba1c4a5 <span class="string">"test0jenkins"</span>											<span class="comment"># 给容器命名</span></span><br><span class="line"><span class="comment"># taoyi @ TyMac in ~ using ‹› 17-06-26 - 13:13:50</span></span><br><span class="line">$ docker images                         </span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">test0jenkins        latest              7fdb1ba1c4a5        16 minutes ago      681 MB</span><br><span class="line">jenkins             latest              0b4d4d677a26        2 days ago          681 MB</span><br><span class="line">redis               latest              4e482b286430        2 days ago          99 MB</span><br></pre></td></tr></table></figure></li><li><p>上传镜像</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker push &lt;域名&gt;/&lt;namespace&gt;/&lt;repo&gt;:&lt;tag&gt;</span><br></pre></td></tr></table></figure><p>默认上传到DockerHub官方仓库。<br>登录Docker：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TyMac in ~ using ‹› 17-06-26 - 13:17:59</span></span><br><span class="line">$ docker login</span><br><span class="line">Login with your Docker ID to push and pull images from Docker Hub. If you don<span class="string">'t have a Docker ID, head over to https://hub.docker.com to create one.</span></span><br><span class="line"><span class="string">Username: shadow000902</span></span><br><span class="line"><span class="string">Password: </span></span><br><span class="line"><span class="string">Login Succeeded</span></span><br></pre></td></tr></table></figure></li><li><p>容器从拉取到启动到删除过程</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 宿主机</span></span><br><span class="line">docker pull tomcat</span><br><span class="line"><span class="comment"># 宿主机</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># 宿主机</span></span><br><span class="line">docker run -it --name tomcat -p 8080:8080 tomcat /bin/bash</span><br><span class="line"><span class="comment"># 宿主机</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="comment"># 容器内 root@63beef310cae:/usr/local/tomcat#</span></span><br><span class="line">./bin/catalina.sh run</span><br><span class="line"><span class="comment"># 宿主机 退出后，重新进入容器</span></span><br><span class="line">docker attach tomcat</span><br><span class="line"><span class="comment"># 容器内，退出容器</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment"># 宿主机 停止容器</span></span><br><span class="line">docker stop tomcat</span><br><span class="line"><span class="comment"># 宿主机 删除容器</span></span><br><span class="line">docker rm tomcat</span><br><span class="line"><span class="comment"># 强制删除正在运行的容器</span></span><br><span class="line">docker rm -f tomcat </span><br><span class="line"><span class="comment"># 宿主机 docker 进程已经删除</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="comment"># 宿主机 docker 镜像依旧存在</span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure></li></ol><h3 id="登录docker容器"><a href="#登录docker容器" class="headerlink" title="登录docker容器"></a>登录docker容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it myjenkins bash</span><br><span class="line"><span class="comment"># 直接使用docker执行命令</span></span><br><span class="line">docker <span class="built_in">exec</span> myjenkins ping www.baidu.com</span><br><span class="line"><span class="comment"># 复制宿主机文件到容器内</span></span><br><span class="line">docker cp `<span class="built_in">pwd</span>`/text.txt myjenkins:/home</span><br></pre></td></tr></table></figure><h3 id="docker端口与宿主机端口映射"><a href="#docker端口与宿主机端口映射" class="headerlink" title="docker端口与宿主机端口映射"></a>docker端口与宿主机端口映射</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name myjenkins -p 8080:8080 jenkins</span><br></pre></td></tr></table></figure><pre><code>-d ：后台运行
--name ：为启动的docker进程取名
-p 宿主机端口:docker端口 ：用于映射宿主机和docker的端口，用于外网访问
-v 宿主机目录:docker目录 ：用于映射docker运行目录，用于数据持久化存储，docker容器被删除后，数据依旧可以保存下来</code></pre><h3 id="docker网络模式"><a href="#docker网络模式" class="headerlink" title="docker网络模式"></a>docker网络模式</h3><pre><code>docker docker启动的时候就启动的bridge
eth0
虚拟网卡 成对出现，
--net=Host</code></pre><h3 id="docker-命令解释"><a href="#docker-命令解释" class="headerlink" title="docker 命令解释"></a>docker 命令解释</h3><ol><li><code>docker exec</code><br><code>docker exec</code> 命令用来启动 <code>sh</code> 或 <code>bash</code>，并通过它们实现对容器内的虚拟环境的控制。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># shadow @ shadow in ~ [19:58:31]</span></span><br><span class="line">$ sudo docker <span class="built_in">exec</span> -it tomcat /bin/bash</span><br><span class="line">root@ebda2e07d802:/usr/<span class="built_in">local</span>/tomcat<span class="comment">#</span></span><br></pre></td></tr></table></figure>命令中的两个选项不可或缺，即 <code>-i</code> 和 <code>-t</code> ( 它们俩可以利用简写机制合并成 <code>-it</code> )。<br><code>-i</code> ( <code>--interactive</code> ) 表示保持我们的输入流，只有使用它才能保证控制台程序能够正确识别我们的命令。<br><code>-t</code> ( <code>--tty</code> ) 表示启用一个伪终端，形成我们与 <code>bash</code> 的交互，如果没有它，我们无法看到 <code>bash</code> 内部的执行结果。</li></ol>]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows平台下载Android源码</title>
    <url>/2016/04/26/2016-04-26-Windows-platform-to-download-Android-source-code/</url>
    <content><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li><p>需要<a href="https://git-scm.com/download/" target="_blank" rel="noopener">git</a>软件，自行下载安装</p></li><li><p>需要<a href="https://www.python.org/" target="_blank" rel="noopener">python</a>环境，自行下载安装</p><a id="more"></a></li></ol><h3 id="使用git手动下载android源码"><a href="#使用git手动下载android源码" class="headerlink" title="使用git手动下载android源码"></a>使用git手动下载android源码</h3><ol><li>自行新建用来存放android源码的文件夹，如android-source，即目录D:/android-source</li><li>依次执行如下命令：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> D:/android-source</span><br><span class="line">git <span class="built_in">clone</span> https://android.googlesource.com/platform/manifest.git    <span class="comment"># 遇到443错误码的就是被墙了，自行翻墙解决</span></span><br><span class="line"><span class="built_in">cd</span> manifest</span><br><span class="line">git tag                                                             <span class="comment"># 列出android各个分支版本</span></span><br><span class="line">git checkout android-6.0.1_r1                                       <span class="comment"># 下载需要的android源码</span></span><br></pre></td></tr></table></figure></li><li>等待完成就下载完了所有对应版本的android源码，manifest/default.xml文件中记录的就是android6.0.1系统各个模块的路径.</li></ol><h3 id="使用python脚本批量下载"><a href="#使用python脚本批量下载" class="headerlink" title="使用python脚本批量下载"></a>使用python脚本批量下载</h3><h4 id="download-src-py脚本"><a href="#download-src-py脚本" class="headerlink" title="download-src.py脚本"></a>download-src.py脚本</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.dom.minidom</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> call</span><br><span class="line"></span><br><span class="line"><span class="comment">#downloaded source path</span></span><br><span class="line">rootdir = <span class="string">"D:/android-source"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#git program path</span></span><br><span class="line">git = <span class="string">"D:/Program Files/Git/bin/git.exe"</span></span><br><span class="line"></span><br><span class="line">dom = xml.dom.minidom.parse(<span class="string">"D:/manifest/default.xml"</span>)</span><br><span class="line">root = dom.documentElement</span><br><span class="line"></span><br><span class="line">prefix = git + <span class="string">" clone https://android.googlesource.com/"</span></span><br><span class="line">suffix = <span class="string">".git"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(rootdir):</span><br><span class="line">    os.mkdir(rootdir)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> node <span class="keyword">in</span> root.getElementsByTagName(<span class="string">"project"</span>):</span><br><span class="line">    os.chdir(rootdir)</span><br><span class="line">    d = node.getAttribute(<span class="string">"path"</span>)</span><br><span class="line">    last = d.rfind(<span class="string">"/"</span>)</span><br><span class="line">    <span class="keyword">if</span> last != <span class="number">-1</span>:</span><br><span class="line">        d = rootdir + <span class="string">"/"</span> + d[:last]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(d):</span><br><span class="line">            os.makedirs(d)</span><br><span class="line">        os.chdir(d)</span><br><span class="line">    cmd = prefix + node.getAttribute(<span class="string">"name"</span>) + suffix</span><br><span class="line">    call(cmd)</span><br></pre></td></tr></table></figure><h4 id="执行此脚本的前提"><a href="#执行此脚本的前提" class="headerlink" title="执行此脚本的前提"></a>执行此脚本的前提</h4><p>已经执行了git checkout，选择好了要下载的Android源码版本，如果你的manifest文件不是D:/manifest/default.xml，还要把里面的git.exe的路经修改成你的安装路径，请自行修改脚本，执行这个脚本之后，就开始自动下载了</p>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title>UBUNTU服务器设置局域网远程访问</title>
    <url>/2016/11/29/2016-11-29-UBUNTU-server-sets-up-LAN-remote-access/</url>
    <content><![CDATA[<h4 id="安装ssh"><a href="#安装ssh" class="headerlink" title="安装ssh"></a>安装<code>ssh</code></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure><h4 id="查看ssh服务是否启动"><a href="#查看ssh服务是否启动" class="headerlink" title="查看ssh服务是否启动"></a>查看<code>ssh</code>服务是否启动</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ef | grep ssh</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="如果ssh服务没有启动，启动ssh服务"><a href="#如果ssh服务没有启动，启动ssh服务" class="headerlink" title="如果ssh服务没有启动，启动ssh服务"></a>如果<code>ssh</code>服务没有启动，启动<code>ssh</code>服务</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service ssh start</span><br></pre></td></tr></table></figure><h4 id="修改ssh配置文件"><a href="#修改ssh配置文件" class="headerlink" title="修改ssh配置文件"></a>修改<code>ssh</code>配置文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Authentication:</span></span><br><span class="line">LoginGraceTime 120</span><br><span class="line"><span class="meta">#</span><span class="bash">PermitRootLogin without-password               <span class="comment"># 该行首加一个“#”注释掉该行</span></span></span><br><span class="line">PermitRootLogin yes                             # 添加该行，增加一个配置项</span><br><span class="line">StrictModes yes</span><br></pre></td></tr></table></figure><h4 id="局域网远程访问"><a href="#局域网远程访问" class="headerlink" title="局域网远程访问"></a>局域网远程访问</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh root@192.168.0.1</span><br><span class="line"><span class="meta">#</span><span class="bash"> root 远程服务器访问用户名</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 192.168.0.1 远程服务器局域网IP</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Extent测试报告使用</title>
    <url>/2017/01/18/2017-01-18-Useing-Extent-test-report/</url>
    <content><![CDATA[<h3 id="安装MongoDB数据库"><a href="#安装MongoDB数据库" class="headerlink" title="安装MongoDB数据库"></a>安装MongoDB数据库</h3><ol><li><p>下载<a href="https://fastdl.mongodb.org/osx/mongodb-osx-x86_64-3.4.1.tgz" target="_blank" rel="noopener">MongoDB</a></p></li><li><p>安装<code>MongoDB</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf mongodb-osx-x86_64-3.4.1.tgz</span><br><span class="line">mv mongodb-osx-x86_64-3.4.1 /opt/mongodb-3.4.1/</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>把<code>MongoDB</code>加入环境变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/opt/mongodb-3.4.1/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></li><li><p>创建<code>MongoDB</code>数据库存放数据的目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /data/mongodb</span><br></pre></td></tr></table></figure></li><li><p>启动<code>MongoDB</code>数据库，并把目录指向指定的目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongod --dbpath /data/mongodb/</span><br></pre></td></tr></table></figure><p>默认方式启动<code>MongoDB</code>的话，目录会默认指向<code>/data/db/</code>目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongod          <span class="comment"># 默认方式启动</span></span><br></pre></td></tr></table></figure></li><li><p>启动成功的日志</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ mongod --dbpath /data/mongodb/</span><br><span class="line">2017-01-22T00:25:23.191+0800 I CONTROL  [initandlisten] MongoDB starting : pid=2411 port=27017 dbpath=/data/mongodb/ 64-bit host=TaoYi-Mac.local</span><br><span class="line">2017-01-22T00:25:23.192+0800 I CONTROL  [initandlisten] db version v3.4.1</span><br><span class="line">2017-01-22T00:25:23.192+0800 I CONTROL  [initandlisten] git version: 5e103c4f5583e2566a45d740225dc250baacfbd7</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ol><h3 id="安装ExtentX服务"><a href="#安装ExtentX服务" class="headerlink" title="安装ExtentX服务"></a>安装ExtentX服务</h3><h4 id="下载ExtentX代码"><a href="#下载ExtentX代码" class="headerlink" title="下载ExtentX代码"></a>下载<code>ExtentX</code>代码</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/anshooarora/extentx.git</span><br></pre></td></tr></table></figure><h4 id="启动ExtentX服务"><a href="#启动ExtentX服务" class="headerlink" title="启动ExtentX服务"></a>启动<code>ExtentX</code>服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> extentx</span><br><span class="line">node app.js</span><br></pre></td></tr></table></figure><h4 id="启动成功的日志"><a href="#启动成功的日志" class="headerlink" title="启动成功的日志"></a>启动成功的日志</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  extentx git:(master) node app.js</span><br><span class="line">info:</span><br><span class="line">info:                .-..-.</span><br><span class="line">info:</span><br><span class="line">info:    Sails              &lt;|    .-..-.</span><br><span class="line">info:    v0.12.4             |\</span><br><span class="line">info:                       /|.\</span><br><span class="line">info:                      / || \</span><br><span class="line">info:                    ,<span class="string">'  |'</span>  \</span><br><span class="line">info:                 .-<span class="string">'.-==|/_--'</span></span><br><span class="line">info:                 --<span class="string">'-------'</span></span><br><span class="line">info:    __---___--___---___--___---___--___</span><br><span class="line">info:  ____---___--___---___--___---___--___-__</span><br><span class="line">info:</span><br><span class="line">info: Server lifted <span class="keyword">in</span> `/Users/taoyi/git_projects/ExtentX`</span><br><span class="line">info: To see your app, visit http://localhost:1337</span><br><span class="line">info: To shut down Sails, press &lt;CTRL&gt; + C at any time.</span><br><span class="line"></span><br><span class="line">debug: -------------------------------------------------------</span><br><span class="line">debug: :: Sun Jan 22 2017 00:27:28 GMT+0800 (CST)</span><br><span class="line"></span><br><span class="line">debug: Environment : development</span><br><span class="line">debug: Port        : 1337</span><br><span class="line">debug: -------------------------------------------------------</span><br></pre></td></tr></table></figure><p>启动<code>ExtentX</code>服务时，可能会报一些错，是因为少一些依赖的包，使用<code>npm install 错误提示的包名</code>安装好需要的依赖，之后就可以正常启动了</p><h4 id="ExtentX服务默认的用户名和密码"><a href="#ExtentX服务默认的用户名和密码" class="headerlink" title="ExtentX服务默认的用户名和密码"></a><code>ExtentX</code>服务默认的用户名和密码</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user:       root</span><br><span class="line">password:   password</span><br></pre></td></tr></table></figure><h3 id="测试框架集成extent测试报告框架"><a href="#测试框架集成extent测试报告框架" class="headerlink" title="测试框架集成extent测试报告框架"></a>测试框架集成extent测试报告框架</h3><h4 id="pom-xml文件中增加依赖"><a href="#pom-xml文件中增加依赖" class="headerlink" title="pom.xml文件中增加依赖"></a><code>pom.xml</code>文件中增加依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.relevantcodes<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>extentreports<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.41.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="testng-xml文件中修改listeners"><a href="#testng-xml文件中修改listeners" class="headerlink" title="testng.xml文件中修改listeners"></a><code>testng.xml</code>文件中修改<code>listeners</code></h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listeners</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- extent报告 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span> <span class="attr">class-name</span>=<span class="string">"com.shadow.dfcAppium.plugins.extentReporter.ExtentTestNGITestListener"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listeners</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="加载报告插件"><a href="#加载报告插件" class="headerlink" title="加载报告插件"></a>加载报告插件</h4><img src="/2017/01/18/2017-01-18-Useing-Extent-test-report/%E6%8A%A5%E5%91%8A%E6%8F%92%E4%BB%B6%E5%AD%98%E6%94%BE%E4%BD%8D%E7%BD%AE.png" title="报告插件存放位置">]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>测试报告</tag>
      </tags>
  </entry>
  <entry>
    <title>app-inspector元素定位工具使用介绍</title>
    <url>/2017/02/13/2017-02-13-app-inspector-Introduction/</url>
    <content><![CDATA[<h4 id="前置安装配置，包括如下："><a href="#前置安装配置，包括如下：" class="headerlink" title="前置安装配置，包括如下："></a>前置安装配置，包括如下：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">info AppiumDoctor  ✔ The Node.js binary was found at: /usr/<span class="built_in">local</span>/bin/node</span><br><span class="line">info AppiumDoctor  ✔ Node version is 6.9.0</span><br><span class="line">info AppiumDoctor  ✔ Xcode is installed at: /Applications/Xcode.app/Contents/Developer</span><br><span class="line">info AppiumDoctor  ✔ Xcode Command Line Tools are installed.</span><br><span class="line">info AppiumDoctor  ✔ DevToolsSecurity is enabled.</span><br><span class="line">info AppiumDoctor  ✔ The Authorization DB is <span class="built_in">set</span> up properly.</span><br><span class="line">info AppiumDoctor  ✔ Carthage was found at: /usr/<span class="built_in">local</span>/bin/carthage</span><br><span class="line">info AppiumDoctor  ✔ HOME is <span class="built_in">set</span> to: /Users/taoyi</span><br><span class="line">info AppiumDoctor  ✔ ANDROID_HOME is <span class="built_in">set</span> to: /opt/android-sdk-macosx</span><br><span class="line">info AppiumDoctor  ✔ JAVA_HOME is <span class="built_in">set</span> to: /Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home</span><br><span class="line">info AppiumDoctor  ✔ adb exists at: /opt/android-sdk-macosx/platform-tools/adb</span><br><span class="line">info AppiumDoctor  ✔ android exists at: /opt/android-sdk-macosx/tools/android</span><br><span class="line">info AppiumDoctor  ✔ emulator exists at: /opt/android-sdk-macosx/tools/emulator</span><br><span class="line">info AppiumDoctor  ✔ Bin directory of <span class="variable">$JAVA_HOME</span> is <span class="built_in">set</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="安装app-inspector"><a href="#安装app-inspector" class="headerlink" title="安装app-inspector"></a>安装app-inspector</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g app-inspector</span><br></pre></td></tr></table></figure><h4 id="获取设备UDID"><a href="#获取设备UDID" class="headerlink" title="获取设备UDID"></a>获取设备UDID</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb devices                 <span class="comment"># android</span></span><br><span class="line">xcrun simctl list           <span class="comment"># IOS</span></span><br></pre></td></tr></table></figure><h4 id="启动app-inspector"><a href="#启动app-inspector" class="headerlink" title="启动app-inspector"></a>启动app-inspector</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">app-inspector -u YOUR-DEVICE-ID</span><br></pre></td></tr></table></figure><p>启动成功</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ app-inspector -u 0862E662-79FE-4831-9EF7-D0D0D1055FFF</span><br><span class="line">&gt;&gt; xctest-client start with port: 8900</span><br><span class="line">&gt;&gt; WebDriverAgent version: 1.0.41</span><br><span class="line">&gt;&gt; iOS device started: 0862E662-79FE-4831-9EF7-D0D0D1055FFF</span><br><span class="line">&gt;&gt; inspector start at: http://192.168.31.20:5678</span><br><span class="line">  &lt;-- GET /</span><br><span class="line">  --&gt; GET / 200</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>浏览器查看结果如图：</p><img src="/2017/02/13/2017-02-13-app-inspector-Introduction/app-inspector%E8%8E%B7%E5%8F%96IOS%E5%85%83%E7%B4%A0%E7%A4%BA%E4%BE%8B.png" title="app-inspector获取IOS元素示例"><p>ANDROID启动成功</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ app-inspector -u 127.0.0.1:62001</span><br><span class="line">INSTRUMENTATION_STATUS: numtests=1</span><br><span class="line">&gt;&gt; socket server ready</span><br><span class="line">&gt;&gt; socket client ready</span><br><span class="line">&gt;&gt; Android device started: 127.0.0.1:62001</span><br><span class="line">&gt;&gt; inspector start at: http://172.16.8.99:5678</span><br><span class="line">  &lt;-- GET /</span><br><span class="line">recive: &#123;<span class="string">"cmd"</span>:<span class="string">"getSource"</span>,<span class="string">"args"</span>:&#123;&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span>: &#123;<span class="string">"data"</span>:&#123;<span class="string">"value"</span>:<span class="literal">true</span>,<span class="string">"status"</span>:0&#125;,<span class="string">"success"</span>:<span class="literal">true</span>&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt; Dump Android XML success, save to /usr/<span class="built_in">local</span>/lib/node_modules/app-inspector/.temp/android.json</span><br><span class="line">  --&gt; GET / 200</span><br><span class="line">  &lt;-- GET /</span><br><span class="line">  ···</span><br></pre></td></tr></table></figure><p>浏览器查看结果如图：</p><img src="/2017/02/13/2017-02-13-app-inspector-Introduction/app-inspector%E8%8E%B7%E5%8F%96ANDROID%E5%85%83%E7%B4%A0%E7%A4%BA%E4%BE%8B.png" title="app-inspector获取ANDROID元素示例">]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>app-inspector</tag>
      </tags>
  </entry>
  <entry>
    <title>vim的基本使用</title>
    <url>/2017/03/14/2017-03-14-vim-basic-use/</url>
    <content><![CDATA[<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">i                        # 进入插入模式  </span><br><span class="line">:q                       # 退出vim  </span><br><span class="line">:w                       # 保存  </span><br><span class="line">:wq                      # 保存并退出  </span><br><span class="line">:set syn=c               # 设置c风格的语法高亮</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="vim编辑器配置"><a href="#vim编辑器配置" class="headerlink" title="vim编辑器配置"></a>vim编辑器配置</h3><p>配置vim的配置文件【Mac】</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~&gt; vim ~/.vimrc                     <span class="comment"># 默认不存在该文件，需要新建。该文件中不允许出现中文的空格和符合</span></span><br></pre></td></tr></table></figure><p>添加如下内容</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">syntax on                           "开启语法高亮  </span><br><span class="line">set tabstop=4                       "设置tab为4个字符</span><br><span class="line">set softtabstop=4</span><br><span class="line">set shiftwidth=4                    "缩进宽度  </span><br><span class="line">set autoindent                      "自动缩进  </span><br><span class="line">set cindent                         "c风格缩进  </span><br><span class="line">set nu                              "显示行号  </span><br><span class="line">set vb t_vb=  "close the bell       "关闭vim响铃</span><br></pre></td></tr></table></figure><h3 id="移动光标类命令"><a href="#移动光标类命令" class="headerlink" title="移动光标类命令"></a>移动光标类命令</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">h                        # 光标左移一个字符</span><br><span class="line">l                        # 光标右移一个字符</span><br><span class="line">space                    # 光标右移一个字符</span><br><span class="line">Backspace                # 光标左移一个字符</span><br><span class="line">k或Ctrl+p                 # 光标上移一行 </span><br><span class="line">j或Ctrl+n                 # 光标下移一行 </span><br><span class="line">Enter                    # 光标下移一行 </span><br><span class="line">w或W                      # 光标右移一个字至字首 </span><br><span class="line">b或B                      # 光标左移一个字至字首 </span><br><span class="line">e或E                     # 光标右移一个字至字尾 </span><br><span class="line">)                       # 光标移至句尾 </span><br><span class="line">(                       # 光标移至句首 </span><br><span class="line">&#125;                       # 光标移至段落开头 </span><br><span class="line">&#123;                       # 光标移至段落结尾 </span><br><span class="line">nG                      # 光标移至第n行首 </span><br><span class="line">n+                      # 光标下移n行 </span><br><span class="line">n-                      # 光标上移n行 </span><br><span class="line">n$                      # 光标移至第n行尾 </span><br><span class="line">H                       # 光标移至屏幕顶行 </span><br><span class="line">M                       # 光标移至屏幕中间行 </span><br><span class="line">L                       # 光标移至屏幕最后行 </span><br><span class="line">0                       # （注意是数字零）光标移至当前行首 </span><br><span class="line">$                       # 光标移至当前行尾</span><br></pre></td></tr></table></figure><h3 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">x                        # 删除一个字符</span><br><span class="line">dd                       # 删除一行</span><br><span class="line">ndd                      # 删除光标所在行向下 n 行</span><br><span class="line">d1G                      # 删除光标所在行到第一行的所有数据</span><br><span class="line">dG                       # 删除光标所在行到最后一行的所有数据</span><br><span class="line">ctrl+v                   # 移动键盘上的“上下左右”键，将要删除的字符串选中，然后使用d就删除了</span><br></pre></td></tr></table></figure><h3 id="撤销命令"><a href="#撤销命令" class="headerlink" title="撤销命令"></a>撤销命令</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">u                        # 恢复一次删除，恢复多次可以按多次u</span><br><span class="line">ctrl+r                   # 恢复后又想删除</span><br></pre></td></tr></table></figure><h3 id="复制命令"><a href="#复制命令" class="headerlink" title="复制命令"></a>复制命令</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">yy                       # 复制光标所在的那一行</span><br><span class="line">nyy                      # 复制光标所在行向下 n 行</span><br><span class="line">y1G                      # 复制光标所在行到第一行的所有数据</span><br><span class="line">yG                       # 复制光标所在行到最后一行的所有数据</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac系统自带Terminal登录ssh自动记录密码</title>
    <url>/2016/07/12/2016-07-12-Mac-login-ssh-automatically-record-passwords/</url>
    <content><![CDATA[<p>系统自带终端的ssh是标准的OpenSSH client</p><p>如果需要克隆会话功能，可以通过配置打开。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.ssh/config</span><br></pre></td></tr></table></figure><a id="more"></a><p>把一下内容：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Host *</span><br><span class="line">    ControlMaster auto</span><br><span class="line">    ControlPath ~/.ssh/%h-%p-%r</span><br><span class="line">    ControlPersist yes</span><br></pre></td></tr></table></figure><p>填入config文件中</p><p>查看config中的内容：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat .ssh&#x2F;config</span><br><span class="line">Host *</span><br><span class="line">    ControlMaster auto</span><br><span class="line">    ControlPath ~&#x2F;.ssh&#x2F;%h-%p-%r</span><br><span class="line">    ControlPersist yes</span><br></pre></td></tr></table></figure><p>这样每连上一个服务器都会自动在~/.ssh/下创建一个socket文件，下次用相同用户名、端口、主机名进行连接就会自动复用。</p>]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>ssh</tag>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令创建及启动Android虚拟机</title>
    <url>/2016/07/14/2016-07-14-Linux-create-and-launch-Android-virtual-machine/</url>
    <content><![CDATA[<h4 id="提升Android原生模拟器速度的方法"><a href="#提升Android原生模拟器速度的方法" class="headerlink" title="提升Android原生模拟器速度的方法"></a>提升Android原生模拟器速度的方法</h4><p>在Android SDK Manager中勾选中Inter X86 Emulator Accelerator (HAXM installer)，然后安装它</p><h4 id="查看支持的模拟器Android版本号"><a href="#查看支持的模拟器Android版本号" class="headerlink" title="查看支持的模拟器Android版本号"></a>查看支持的模拟器Android版本号</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android list</span><br></pre></td></tr></table></figure><a id="more"></a><p>显示如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TaoYi-Mac:~ taoyi$ android list</span><br><span class="line">Available Android targets:</span><br><span class="line">----------</span><br><span class="line">id: 1 or &quot;android-23&quot;</span><br><span class="line">     Name: Android 6.0</span><br><span class="line">     Type: Platform</span><br><span class="line">     API level: 23</span><br><span class="line">     Revision: 3</span><br><span class="line">     Skins: HVGA, QVGA, WQVGA400, WQVGA432, WSVGA, WVGA800 (default), WVGA854, WXGA720, WXGA800, WXGA800-7in</span><br><span class="line"> Tag&#x2F;ABIs : default&#x2F;armeabi-v7a, default&#x2F;x86, default&#x2F;x86_64, google_apis&#x2F;armeabi-v7a, google_apis&#x2F;x86, google_apis&#x2F;x86_64</span><br><span class="line">----------</span><br><span class="line">id: 2 or &quot;android-24&quot;</span><br><span class="line">     Name: Android N</span><br><span class="line">     Type: Platform</span><br><span class="line">     API level: 24</span><br><span class="line">     Revision: 1</span><br><span class="line">     Skins: HVGA, QVGA, WQVGA400, WQVGA432, WSVGA, WVGA800 (default), WVGA854, WXGA720, WXGA800, WXGA800-7in</span><br><span class="line"> Tag&#x2F;ABIs : no ABIs.</span><br><span class="line">----------</span><br><span class="line">id: 3 or &quot;Google Inc.:Google APIs:23&quot;</span><br><span class="line">     Name: Google APIs</span><br><span class="line">     Type: Add-On</span><br><span class="line">     Vendor: Google Inc.</span><br><span class="line">     Revision: 1</span><br><span class="line">     Description: Android + Google APIs</span><br><span class="line">     Based on Android 6.0 (API level 23)</span><br><span class="line">     Libraries:</span><br><span class="line">      * com.android.future.usb.accessory (usb.jar)</span><br><span class="line">          API for USB Accessories</span><br><span class="line">      * com.google.android.media.effects (effects.jar)</span><br><span class="line">          Collection of video effects</span><br><span class="line">      * com.google.android.maps (maps.jar)</span><br><span class="line">          API for Google Maps</span><br><span class="line">     Skins: HVGA, QVGA, WQVGA400, WQVGA432, WSVGA, WVGA800 (default), WVGA854, WXGA720, WXGA800, WXGA800-7in</span><br><span class="line"> Tag&#x2F;ABIs : no ABIs.</span><br><span class="line">Available Android Virtual Devices:</span><br><span class="line">Available devices definitions:</span><br><span class="line">id: 0 or &quot;tv_1080p&quot;</span><br><span class="line">    Name: Android TV (1080p)</span><br><span class="line">    OEM : Google</span><br><span class="line">    Tag : android-tv</span><br><span class="line">---------</span><br><span class="line">id: 1 or &quot;tv_720p&quot;</span><br><span class="line">    Name: Android TV (720p)</span><br><span class="line">    OEM : Google</span><br><span class="line">    Tag : android-tv</span><br><span class="line">---------</span><br><span class="line">id: 2 or &quot;wear_round&quot;</span><br><span class="line">    Name: Android Wear Round</span><br><span class="line">    OEM : Google</span><br><span class="line">    Tag : android-wear</span><br><span class="line">---------</span><br><span class="line">id: 3 or &quot;wear_round_chin_320_290&quot;</span><br><span class="line">    Name: Android Wear Round Chin</span><br><span class="line">    OEM : Google</span><br><span class="line">    Tag : android-wear</span><br><span class="line">---------</span><br><span class="line">id: 4 or &quot;wear_square&quot;</span><br><span class="line">    Name: Android Wear Square</span><br><span class="line">    OEM : Google</span><br><span class="line">    Tag : android-wear</span><br><span class="line">---------</span><br><span class="line">id: 5 or &quot;Device001&quot;</span><br><span class="line">    Name: Device001</span><br><span class="line">    OEM : User</span><br><span class="line">---------</span><br><span class="line">id: 6 or &quot;Galaxy Nexus&quot;</span><br><span class="line">    Name: Galaxy Nexus</span><br><span class="line">    OEM : Google</span><br><span class="line">---------</span><br><span class="line">id: 7 or &quot;Nexus 10&quot;</span><br><span class="line">    Name: Nexus 10</span><br><span class="line">    OEM : Google</span><br><span class="line">---------</span><br><span class="line">id: 8 or &quot;Nexus 4&quot;</span><br><span class="line">    Name: Nexus 4</span><br><span class="line">    OEM : Google</span><br><span class="line">---------</span><br><span class="line">id: 9 or &quot;Nexus 5&quot;</span><br><span class="line">    Name: Nexus 5</span><br><span class="line">    OEM : Google</span><br><span class="line">---------</span><br><span class="line">id: 10 or &quot;Nexus 6&quot;</span><br><span class="line">    Name: Nexus 6</span><br><span class="line">    OEM : Google</span><br><span class="line">---------</span><br><span class="line">id: 11 or &quot;Nexus 7 2013&quot;</span><br><span class="line">    Name: Nexus 7</span><br><span class="line">    OEM : Google</span><br><span class="line">---------</span><br><span class="line">id: 12 or &quot;Nexus 7&quot;</span><br><span class="line">    Name: Nexus 7 (2012)</span><br><span class="line">    OEM : Google</span><br><span class="line">---------</span><br><span class="line">id: 13 or &quot;Nexus 9&quot;</span><br><span class="line">    Name: Nexus 9</span><br><span class="line">    OEM : Google</span><br><span class="line">---------</span><br><span class="line">id: 14 or &quot;Nexus One&quot;</span><br><span class="line">    Name: Nexus One</span><br><span class="line">    OEM : Google</span><br><span class="line">---------</span><br><span class="line">id: 15 or &quot;Nexus S&quot;</span><br><span class="line">    Name: Nexus S</span><br><span class="line">    OEM : Google</span><br><span class="line">---------</span><br><span class="line">id: 16 or &quot;2.7in QVGA&quot;</span><br><span class="line">    Name: 2.7&quot; QVGA</span><br><span class="line">    OEM : Generic</span><br><span class="line">---------</span><br><span class="line">id: 17 or &quot;2.7in QVGA slider&quot;</span><br><span class="line">    Name: 2.7&quot; QVGA slider</span><br><span class="line">    OEM : Generic</span><br><span class="line">---------</span><br><span class="line">id: 18 or &quot;3.2in HVGA slider (ADP1)&quot;</span><br><span class="line">    Name: 3.2&quot; HVGA slider (ADP1)</span><br><span class="line">    OEM : Generic</span><br><span class="line">---------</span><br><span class="line">id: 19 or &quot;3.2in QVGA (ADP2)&quot;</span><br><span class="line">    Name: 3.2&quot; QVGA (ADP2)</span><br><span class="line">    OEM : Generic</span><br><span class="line">---------</span><br><span class="line">id: 20 or &quot;3.3in WQVGA&quot;</span><br><span class="line">    Name: 3.3&quot; WQVGA</span><br><span class="line">    OEM : Generic</span><br><span class="line">---------</span><br><span class="line">id: 21 or &quot;3.4in WQVGA&quot;</span><br><span class="line">    Name: 3.4&quot; WQVGA</span><br><span class="line">    OEM : Generic</span><br><span class="line">---------</span><br><span class="line">id: 22 or &quot;3.7 FWVGA slider&quot;</span><br><span class="line">    Name: 3.7&quot; FWVGA slider</span><br><span class="line">    OEM : Generic</span><br><span class="line">---------</span><br><span class="line">id: 23 or &quot;3.7in WVGA (Nexus One)&quot;</span><br><span class="line">    Name: 3.7&quot; WVGA (Nexus One)</span><br><span class="line">    OEM : Generic</span><br><span class="line">---------</span><br><span class="line">id: 24 or &quot;4in WVGA (Nexus S)&quot;</span><br><span class="line">    Name: 4&quot; WVGA (Nexus S)</span><br><span class="line">    OEM : Generic</span><br><span class="line">---------</span><br><span class="line">id: 25 or &quot;4.65in 720p (Galaxy Nexus)&quot;</span><br><span class="line">    Name: 4.65&quot; 720p (Galaxy Nexus)</span><br><span class="line">    OEM : Generic</span><br><span class="line">---------</span><br><span class="line">id: 26 or &quot;4.7in WXGA&quot;</span><br><span class="line">    Name: 4.7&quot; WXGA</span><br><span class="line">    OEM : Generic</span><br><span class="line">---------</span><br><span class="line">id: 27 or &quot;5.1in WVGA&quot;</span><br><span class="line">    Name: 5.1&quot; WVGA</span><br><span class="line">    OEM : Generic</span><br><span class="line">---------</span><br><span class="line">id: 28 or &quot;5.4in FWVGA&quot;</span><br><span class="line">    Name: 5.4&quot; FWVGA</span><br><span class="line">    OEM : Generic</span><br><span class="line">---------</span><br><span class="line">id: 29 or &quot;7in WSVGA (Tablet)&quot;</span><br><span class="line">    Name: 7&quot; WSVGA (Tablet)</span><br><span class="line">    OEM : Generic</span><br><span class="line">---------</span><br><span class="line">id: 30 or &quot;10.1in WXGA (Tablet)&quot;</span><br><span class="line">    Name: 10.1&quot; WXGA (Tablet)</span><br><span class="line">    OEM : Generic</span><br></pre></td></tr></table></figure><h4 id="创建AVD模拟器"><a href="#创建AVD模拟器" class="headerlink" title="创建AVD模拟器"></a>创建AVD模拟器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android create avd -n TestDevices001 -t 1 -b armeabi-v7a</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-t --target         # 新的AVD的Target ID（必须）</span><br><span class="line">-c --sdcard         # 指定一个共享的SD存储卡的路径或者是为新的AVD定制的新的SD存储卡的容量大小，如：-t 512M。（“M”必须大写）</span><br><span class="line">-p --path           # 新的AVD将被创建的位置路径</span><br><span class="line">-n --Name           # 新的AVD的名字（必须）</span><br><span class="line">-f --force          # 强制创建（覆盖已存在的AVD）</span><br><span class="line">-s --skin           # 新的AVD的皮肤</span><br><span class="line">-b --abi            # 例如android-24里面的abi有armeabi-v7a&#x2F;x86&#x2F;x86_64，此时就需要指定，如果只有一个abi，则不需要指定</span><br></pre></td></tr></table></figure><h4 id="查看AVD是否创建成功"><a href="#查看AVD是否创建成功" class="headerlink" title="查看AVD是否创建成功"></a>查看AVD是否创建成功</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android list avd</span><br></pre></td></tr></table></figure><p>结果如下，就说明创建成功了</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TaoYi-Mac:~ taoyi$ android list avd</span><br><span class="line">Available Android Virtual Devices:</span><br><span class="line">    Name: TestDevices001</span><br><span class="line">    Path: &#x2F;Users&#x2F;taoyi&#x2F;.android&#x2F;avd&#x2F;TestDevices001.avd</span><br><span class="line">  Target: Android 6.0 (API level 23)</span><br><span class="line"> Tag&#x2F;ABI: default&#x2F;armeabi-v7a</span><br><span class="line">    Skin: WVGA800</span><br></pre></td></tr></table></figure><h4 id="启动AVD"><a href="#启动AVD" class="headerlink" title="启动AVD"></a>启动AVD</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TaoYi-Mac:~ taoyi$ emulator -avd TestDevices001</span><br><span class="line">emulator: WARNING: Increasing RAM size to 1024MB</span><br><span class="line">emulator: WARNING: Classic qemu does not support SMP. The hw.cpu.ncore option from your config file is ignored.</span><br><span class="line">Creating filesystem with parameters:</span><br><span class="line">    Size: 69206016</span><br><span class="line">    Block size: 4096</span><br><span class="line">    Blocks per group: 32768</span><br><span class="line">    Inodes per group: 4224</span><br><span class="line">    Inode size: 256</span><br><span class="line">    Journal blocks: 1024</span><br><span class="line">    Label:</span><br><span class="line">    Blocks: 16896</span><br><span class="line">    Block groups: 1</span><br><span class="line">    Reserved block group size: 7</span><br><span class="line">Created filesystem with 11&#x2F;4224 inodes and 1302&#x2F;16896 blocks</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TaoYi-Mac:~ taoyi$ emulator  -port 5676  -avd TestDevices001  -no-window -no-skin -no-audio -no-boot-anim &amp;</span><br><span class="line">sh: 1: glxinfo: not found</span><br><span class="line">emulator: WARNING: Increasing RAM size to 1024MB</span><br><span class="line">sh: 1: glxinfo: not found</span><br><span class="line">emulator: WARNING: Classic qemu does not support SMP. The hw.cpu.ncore option from your config file is ignored.</span><br><span class="line"></span><br><span class="line">Your emulator is out of date, please update by launching Android Studio:</span><br><span class="line"> - Start Android Studio</span><br><span class="line"> - Select menu &quot;Tools &gt; Android &gt; SDK Manager&quot;</span><br><span class="line"> - Click &quot;SDK Tools&quot; tab</span><br><span class="line"> - Check &quot;Android SDK Tools&quot; checkbox</span><br><span class="line"> - Click &quot;OK&quot;</span><br></pre></td></tr></table></figure><h4 id="删除AVD"><a href="#删除AVD" class="headerlink" title="删除AVD"></a>删除AVD</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android delete avd -n TestDevices001</span><br></pre></td></tr></table></figure><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><ol><li><code>sdkmanager</code>命令执行，提示<code>Could not create settings</code>问题处理</li></ol><ul><li><p>错误提示如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./sdkmanager --list</span><br><span class="line">Warning: Could not create settings</span><br><span class="line">java.lang.IllegalArgumentException</span><br><span class="line">        at com.android.sdklib.tool.sdkmanager.SdkManagerCliSettings.&lt;init&gt;(SdkManagerCliSettings.java:428)</span><br><span class="line">        at com.android.sdklib.tool.sdkmanager.SdkManagerCliSettings.createSettings(SdkManagerCliSettings.java:152)</span><br><span class="line">        at com.android.sdklib.tool.sdkmanager.SdkManagerCliSettings.createSettings(SdkManagerCliSettings.java:134)</span><br><span class="line">        at com.android.sdklib.tool.sdkmanager.SdkManagerCli.main(SdkManagerCli.java:57)</span><br><span class="line">        at com.android.sdklib.tool.sdkmanager.SdkManagerCli.main(SdkManagerCli.java:48)</span><br><span class="line">Usage:</span><br><span class="line">  sdkmanager [--uninstall] [&lt;common args&gt;] [--package_file=&lt;file&gt;] [&lt;packages&gt;...]</span><br><span class="line">  sdkmanager --update [&lt;common args&gt;]</span><br><span class="line">  sdkmanager --list [&lt;common args&gt;]</span><br><span class="line">  sdkmanager --licenses [&lt;common args&gt;]</span><br><span class="line">  sdkmanager --version</span><br></pre></td></tr></table></figure><p>即使设置了<code>ANDROID_SDK_HOME</code>环境变量，也把<code>sdkmanager</code>所在目录加入到了<code>PATH</code>，仍然会报同样的错误</p></li><li><p><em>临时解决方案</em>：<br>在执行<code>sdkmanager</code>命令的时候，加上<code>--sdk_root=...</code>的参数</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./sdkmanager --list --sdk_root=~/Downloads/tools/bin</span><br><span class="line">[=======================================] 100% Computing updates...             </span><br><span class="line">Available Packages:</span><br></pre></td></tr></table></figure><p>这样就能得到正确的输出了，但是每次都要加上<code>--sdk_root</code>也不是长久之计。</p></li><li><p><em>根本解决方案</em>：</p></li></ul><p>一句话描述即为：通过下载的<code>commandlinetools-mac-6609375_latest.zip</code>文件解压后，生成的目录中的<code>sdkmanager</code>，重新下载生成整个<code>androidsdk</code>目录，并加入到环境变量中，然后删除下载解压的目录，使用重新生成的目录。</p><ul><li><p>下载创建新的基础<code>androidsdk</code>目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/androidsdk</span><br><span class="line">$ unzip commandlinetools-mac-6609375_latest.zip</span><br><span class="line">$ ll</span><br><span class="line">commandlinetools-mac-6609375_latest.zip</span><br><span class="line">tools</span><br><span class="line">$ <span class="built_in">cd</span> tools/bin</span><br><span class="line">$ ./sdkmanager --sdk_root=~/androidsdk/tools <span class="string">"cmdline-tools;latest"</span></span><br><span class="line">$ <span class="built_in">cd</span> ~/androidsdk/cmdline-tools/latest</span><br><span class="line">$ ll</span><br><span class="line">total 216</span><br><span class="line">-rwxr-xr-x@  1 shadow  staff    83K  7  2 10:59 NOTICE.txt</span><br><span class="line">drwxr-xr-x@  7 shadow  staff   224B  7  2 10:59 bin</span><br><span class="line">drwxr-xr-x@ 22 shadow  staff   704B  7  2 10:59 lib</span><br><span class="line">-rw-r--r--@  1 shadow  staff    17K  7  2 10:59 package.xml</span><br><span class="line">-rwxr-xr-x@  1 shadow  staff    84B  7  2 10:59 source.properties</span><br></pre></td></tr></table></figure><p>通过以上命令，即生成了可用的<code>sdkmanager</code>命令可用的<code>androidsdk</code>目录</p></li><li><p>设置环境变量</p><p>设置环境变量的系统变量，增加一个<code>ANDROID_SDK_HOME</code>，设置为<code>~/androidsdk</code><br>设置环境变量的用户变量，在<code>PATH</code>中增加<code>$ANDROID_SDK_HOME/cmdline-tools/latest/bin</code><br>最后就可以删除之前下载解压的<code>tools</code>目录了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sdkmanager --version                                          </span><br><span class="line">26.1.1</span><br></pre></td></tr></table></figure><p>然后命令就正常了，也不需要<code>--sdk_root</code>参数了</p></li></ul><ol start="2"><li><code>emulator</code>命令执行，提示<code>No such file or directory</code>问题处理</li></ol><ul><li><p>SDK根目录如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># shadow @ kickseed in ~/androidsdk [18:55:54] </span></span><br><span class="line">$ ll</span><br><span class="line">total 36K</span><br><span class="line">drwxrwxr-x 3 shadow shadow 4.0K Jul 14 11:52 build-tools</span><br><span class="line">drwxrwxr-x 3 shadow shadow 4.0K Jul 14 11:32 cmdline-tools</span><br><span class="line">drwxrwxr-x 7 shadow shadow 4.0K Jul 14 11:48 emulator</span><br><span class="line">drwxrwxr-x 2 shadow shadow 4.0K Jul 14 11:52 licenses</span><br><span class="line">drwxrwxr-x 3 shadow shadow 4.0K Jul 14 11:46 patcher</span><br><span class="line">drwxrwxr-x 3 shadow shadow 4.0K Jul 14 11:49 platforms</span><br><span class="line">drwxrwxr-x 5 shadow shadow 4.0K Jul 14 11:45 platform-tools</span><br><span class="line">drwxrwxr-x 3 shadow shadow 4.0K Jul 14 11:52 system-images</span><br><span class="line">drwxrwxr-x 6 shadow shadow 4.0K Jul 16 18:54 tools</span><br></pre></td></tr></table></figure></li><li><p>报错信息如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">emulator: error <span class="keyword">while</span> loading shared libraries: libtcmalloc_minimal.so.4: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span> emulator </span><br><span class="line">/home/shadow/androidsdk/tools/emulator</span><br></pre></td></tr></table></figure><p>执行<code>which emulator</code>命令，发现调用的是<code>tools</code>目录下的<code>emulator</code>，导致无法找到创建的<code>avd</code>，因为安卓虚拟机对应的命令路径是在<code>emulator</code>目录下。<br>所以我们需要让默认调用的<code>emulator</code>命令变成<code>emulator</code>目录下的<code>emulator</code>命令<br>方法一：调整环境变量，让初始化环境变量的时候，<code>tools</code>目录位于<code>emulator</code>目录之前，这样就能确保<code>emulator</code>目录下的<code>emulator</code>命令覆盖<code>tools</code>目录下的命令<br>方法二：直接删除<code>tools</code>目录下的<code>emulator</code>命令文件</p></li></ul>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac上MySQL的简单使用</title>
    <url>/2017/06/03/2017-06-03-Simple-use-of-MySQL-on-Mac/</url>
    <content><![CDATA[<ol><li><p>启动、停止、重启MySQL服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /usr/<span class="built_in">local</span>/MySQL/support-files/mysql.server start</span><br><span class="line">sudo /usr/<span class="built_in">local</span>/mysql/support-files/mysql.server stop</span><br><span class="line">sudo /usr/<span class="built_in">local</span>/mysql/support-files/mysql.server restart</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>登录MySQL数据库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -h 地址 -P 端口 -u 用户名 -p 密码</span><br></pre></td></tr></table></figure></li><li><p>查看数据库</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure></li><li><p>查看当前库的所有表</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure></li><li><p>字符匹配查询</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查询 Attributes 中包含 SQL 字符的数据</span><br><span class="line">select * from database where Attributes like &quot;%SQL%&quot;;</span><br><span class="line"># 查询 Attributes 中以 a 开头以 b 结尾的字符串数据</span><br><span class="line">select * from database where Attributes like &quot;a%b&quot;;</span><br><span class="line"># 查询 Attributes 中以 m 开头以 n 结尾的3个字符的数据，中间 _ 只能代表一个字符</span><br><span class="line">select * from database where Attributes like &quot;m_n&quot;;</span><br><span class="line"># 查询出指定字段</span><br><span class="line">select name,id,age from database [where 条件];</span><br></pre></td></tr></table></figure></li><li><p>多条件查询</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from database where Attributes1&#x3D;a and Attributes2 like &quot;My_SQL&quot;;</span><br><span class="line">select * from database where Attributes1&#x3D;a or Attributes2 like &quot;My_SQL&quot;;</span><br></pre></td></tr></table></figure></li><li><p>查询不重复的记录</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查询name不一样的数据</span><br><span class="line">select distinct name from database;</span><br><span class="line"># 查询name和age都不一样的数据</span><br><span class="line">select distinct name,age from database;</span><br></pre></td></tr></table></figure><p>1.distinct必须放在最开头<br>2.distinct只能使用需要去重的字段进行操作。 —-也就是说我distinct了name,age两个字段，我后面想根据id进行排序，是不可以的，因为只能name,age两个字段进行操作.<br>3.distinct去重多个字段时，含义是：几个字段<code>同时重复</code>时才会被<code>过滤</code>。</p></li><li><p>对查询结果进行排序</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 倒叙（降序）排列</span><br><span class="line">select * from database orderby id desc;</span><br><span class="line"># 正序（升序）排列</span><br><span class="line">select * from database orderby id asc;</span><br></pre></td></tr></table></figure></li><li><p>分组查询</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select name,id from database GROUP BY id;</span><br><span class="line"># 当id字段的值相等时，再按照name字段分组</span><br><span class="line">select name,id from database GROUP BY name,id;</span><br></pre></td></tr></table></figure></li><li><p>限制查询结果的数量</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># **前面的数字表示从第n+1条开始取，后面的食指表示取m条数据**</span><br><span class="line"># 取两条数据，正序，从第三条开始</span><br><span class="line">select * from database orderby id asc limit 2,3;</span><br><span class="line"># 取两条数据，倒序，从倒数第三条结束，只显示倒数前两条</span><br><span class="line">select * from database orderby id desc limit 2,3;</span><br></pre></td></tr></table></figure></li><li><p>聚合</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 字段 fun_name from 表名 [where 条件] [group by field1,field2...] [with rollup] [having 条件];</span><br></pre></td></tr></table></figure><p>1.fun_name 表示要做的聚合操作，也就是说聚合函数，常用的有 : sum(求和)、count(*)(记录数)、max(最大值)、min(最小值)。<br>2.group by关键字 表示要进行分类聚合的字段。比如要按照部门分类统计员工数量，部门就应该写在group by 后面。<br>3.with rollup 是可选语法，表明是否对分类聚合后的结果进行再汇总<br>4.having 关键字表示对分类后的结果再进行条件过滤。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 库表使用Horgarts课程的示例库的salaries表</span><br><span class="line"># 统计总行数</span><br><span class="line">select count(1) from salaries;</span><br><span class="line"># 统计每个员工下发了多少个月的工资</span><br><span class="line">select emp_no,count(1) from salaries group by emp_no;</span><br><span class="line"># 既要统计每个员工发了几个月工资，也要统计总共发了多少个月工资</span><br><span class="line">select emp_no,count(1) from salaries group by emp_no with rollup;</span><br><span class="line"># 统计发工资月数超过17的员工和具体发工资的月数</span><br><span class="line">select emp_no,count(1) from salaries group by emp_no having count(1) &gt; 17;</span><br><span class="line"># 统计总月数、总工资、平均工资、最小最大工资</span><br><span class="line">select count(1),sum(salary),avg(salary),max(salary),min(salary) from salaries;</span><br></pre></td></tr></table></figure></li><li><p>表连接<br>示例数据：<br>员工表staff</p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>Steve</td></tr><tr><td>2</td><td>Jobs</td></tr><tr><td>3</td><td>Drake</td></tr><tr><td>4</td><td>Tom</td></tr><tr><td>5</td><td>Jay</td></tr><tr><td>6</td><td>Li</td></tr><tr><td>7</td><td>Chuan</td></tr><tr><td>8</td><td>Anna</td></tr><tr><td>9</td><td>Satan</td></tr></tbody></table><p>职位表deptno</p><table><thead><tr><th>name</th><th>deptname</th></tr></thead><tbody><tr><td>Steve</td><td>tech</td></tr><tr><td>Jobs</td><td>seal</td></tr><tr><td>Drake</td><td>tech</td></tr><tr><td>Tom</td><td>seal</td></tr><tr><td>Jay</td><td>tech</td></tr><tr><td>Li</td><td>hr</td></tr><tr><td>Chuan</td><td>ceo</td></tr><tr><td>Anna</td><td>seal</td></tr><tr><td>Satan</td><td>driver</td></tr></tbody></table><p>表连接分为内连接和外连接。<br>他们之间最主要的区别：内连接仅选出两张表中互相匹配的记录，外连接会选出其他不匹配的记录。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select staff.name,deptname from staff,deptno where staff.name&#x3D;deptno.name;</span><br></pre></td></tr></table></figure><p><em>外连接</em>分为左连接和右连接<br><strong>左连接</strong>：包含所有左边表中的记录，甚至是右边表中没有和他匹配的记录。<br><strong>右连接</strong>：包含所有右边表中的记录，甚至是右边表中没有和他匹配的记录。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select staff.name,deptname from staff left join deptno on staff.name&#x3D;deptno.name;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select deptname,deptno.name from staff right join deptno on deptno.name&#x3D;staff.name;</span><br></pre></td></tr></table></figure></li><li><p>查看当前的数据库连接数</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show processlist;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac切换Terminal为zsh</title>
    <url>/2017/05/18/2017-05-18-Mac-switch-Terminal-to-zsh/</url>
    <content><![CDATA[<h4 id="下载一个-oh-my-zsh-配置"><a href="#下载一个-oh-my-zsh-配置" class="headerlink" title="下载一个 .oh-my-zsh 配置"></a>下载一个 .oh-my-zsh 配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br></pre></td></tr></table></figure><p>新配置命令，该命令执行后会自动下载配置，并且在下载完成后会自动创建环境变量文件到<code>~/.zshrc</code>，并且询问是否切换到<code>zsh</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="创建新的配置"><a href="#创建新的配置" class="headerlink" title="创建新的配置"></a>创建新的配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp ~/.zshrc ~/.zshrc.orig                                   <span class="comment"># 如果已经有一个 .zshrc 文件，备份一下</span></span><br><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br></pre></td></tr></table></figure><h4 id="更新新的配置文件"><a href="#更新新的配置文件" class="headerlink" title="更新新的配置文件"></a>更新新的配置文件</h4><p>如果有些环境变量配置在<code>~/.bash_profile</code>的话，需要在新的配置里进行刷新</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">export</span> ZSH=~/.oh-my-zsh/</span><br><span class="line">...</span><br><span class="line">ZSH_THEME=<span class="string">"ys"</span>                   <span class="comment"># 设置选择的主题。默认是robbyrussell</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="built_in">source</span> <span class="variable">$ZSH</span>/oh-my-zsh.sh</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>并且把老的环境变量文件中的设置项拷贝到该文件中。<br>因为大多数情况下直接在<code>~/.zshrc</code>中使用<code>source ~/.bashrc</code>来初始化老的环境变量，会有一些不知名的报错。</p><h4 id="优化-terminal-样式"><a href="#优化-terminal-样式" class="headerlink" title="优化 terminal 样式"></a>优化 terminal 样式</h4><img src="/2017/05/18/2017-05-18-Mac-switch-Terminal-to-zsh/%E7%BB%88%E7%AB%AF%E6%A0%B7%E5%BC%8F%E4%BF%AE%E6%94%B9.png" title="终端样式修改"><h4 id="切换-Terminal-到-zsh"><a href="#切换-Terminal-到-zsh" class="headerlink" title="切换 Terminal 到 zsh"></a>切换 Terminal 到 zsh</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><p>ubuntu下如果不存在zsh的话，需要安装一下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install zsh</span><br></pre></td></tr></table></figure><p>重启一下 Terminal 之后，就生效了。</p><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>编辑<code>/etc/passwd</code>文件，修改如下字段</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">taoyi:x:500:500::/home/taoyi:/bin/zsh       <span class="comment"># 把对应用户下，原来的 /bin/bash 改成新的 /bin/zsh</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="效果如图"><a href="#效果如图" class="headerlink" title="效果如图"></a>效果如图</h4><img src="/2017/05/18/2017-05-18-Mac-switch-Terminal-to-zsh/Terminal%E6%95%88%E6%9E%9C%E5%9B%BE.png" title="Terminal效果图"><h4 id="如果使用-fino-time-主题"><a href="#如果使用-fino-time-主题" class="headerlink" title="如果使用 fino-time 主题"></a>如果使用 fino-time 主题</h4><p>如果使用该主题的话，会遇到一个错误：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zsh: <span class="built_in">command</span> not found: rvm-prompt</span><br><span class="line">╭─taoyi at TaoYi-Mac <span class="keyword">in</span> ~ using ‹› 17-05-18 - 20:44:28</span><br><span class="line">╰─○</span><br></pre></td></tr></table></figure><p>每次一条命令前都会有这条报错。<br>主要原因就是该主题依赖于<code>rvm-prompt</code>，这样的话，就需要安装上该组件。<br>安装步骤：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install gnupg gnupg2</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3</span><br><span class="line">\curl -sSL https://get.rvm.io | bash -s stable</span><br></pre></td></tr></table></figure><p>在<code>~/.zshrc</code>文件中加入支持：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> rvm-prompt=<span class="variable">$HOME</span>/.rvm/bin/rvm-prompt</span><br></pre></td></tr></table></figure><p>这样后，就完美了，不会再有这个报错了。</p><h4 id="安装第三方插件"><a href="#安装第三方插件" class="headerlink" title="安装第三方插件"></a>安装第三方插件</h4><ol><li>安装<code>zsh-syntax-highlighting</code>插件，文本高亮<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.oh-my-zsh/plugins/</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git</span><br></pre></td></tr></table></figure>然后编辑环境变量文件<code>~/.zshrc</code>，在其中加入插件名称<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># plugins=(git)</span></span><br><span class="line">plugin=(git zsh-syntax-highlighting)</span><br></pre></td></tr></table></figure></li><li>安装<code>zsh-autosuggestions</code>插件，历史输入自动补全<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.oh-my-zsh/plugins/</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions.git</span><br></pre></td></tr></table></figure>然后编辑环境变量文件<code>~/.zshrc</code>，在其中加入插件名称<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># plugins=(git)</span></span><br><span class="line">plugin=(git zsh-autosuggestions)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>terminal</tag>
        <tag>zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>Charles常用的九大功能</title>
    <url>/2017/04/25/2017-04-25-The-nine-functions-commonly-used-by-Charles/</url>
    <content><![CDATA[<h4 id="过滤网络请求"><a href="#过滤网络请求" class="headerlink" title="过滤网络请求"></a>过滤网络请求</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>在主界面的中部的 Filter 栏中填入需要过滤出来的关键字。</p><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>在 Charles 的菜单栏选择 <code>“Proxy”-&gt;”Recording Settings”</code>，然后选择 Include 栏，选择添加一个项目，然后填入需要监控的协议，主机地址，端口号。这样就可以只截取目标网站的封包了。</p><a id="more"></a> <img src="/2017/04/25/2017-04-25-The-nine-functions-commonly-used-by-Charles/%E8%BF%87%E6%BB%A4%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82.png" title="过滤网络请求"><p>通常情况下，我们使用方法一做一些临时性的封包过滤，使用方法二做一些经常性的封包过滤。</p><h5 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h5><p>在想过滤的网络请求上右击，选择 “Focus”，之后在 Filter 一栏勾选上 Focussed 一项，这种方式可以临时性的，快速地过滤出一些没有通过关键字的一类网络请求。</p><h4 id="截取客户端上的网络请求"><a href="#截取客户端上的网络请求" class="headerlink" title="截取客户端上的网络请求"></a>截取客户端上的网络请求</h4><h5 id="Charles上的设置"><a href="#Charles上的设置" class="headerlink" title="Charles上的设置"></a>Charles上的设置</h5><p>打开Charles代理功能。在 Charles 的菜单栏上选择 “Proxy”-&gt;”Proxy Settings”，填入代理端口 8888，并且勾上 “Enable transparent HTTP proxying” 就完成了在 Charles 上的设置</p><img src="/2017/04/25/2017-04-25-The-nine-functions-commonly-used-by-Charles/%E6%89%93%E5%BC%80Charles%E4%BB%A3%E7%90%86%E5%8A%9F%E8%83%BD.png" title="打开Charles代理功能"><h5 id="客户端上设置网络代理"><a href="#客户端上设置网络代理" class="headerlink" title="客户端上设置网络代理"></a>客户端上设置网络代理</h5><img src="/2017/04/25/2017-04-25-The-nine-functions-commonly-used-by-Charles/%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8A%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE.png" title="客户端上代理设置"><p>设置好之后，我们打开 客户端 上的任意需要网络通讯的程序，就可以看到 Charles 弹出 客户端 请求连接的确认菜单（如下图所示），点击 “Allow” 即可完成设置。</p><img src="/2017/04/25/2017-04-25-The-nine-functions-commonly-used-by-Charles/%E5%90%8C%E6%84%8F%E8%AF%B7%E6%B1%82.png" title="同意请求"><h4 id="抓取-Https-请求"><a href="#抓取-Https-请求" class="headerlink" title="抓取 Https 请求"></a>抓取 Https 请求</h4><h5 id="客户端安装证书"><a href="#客户端安装证书" class="headerlink" title="客户端安装证书"></a>客户端安装证书</h5><p>点击 Charles 的顶部菜单，选择 “Help” -&gt; “SSL Proxying” -&gt; “Install Charles Root Certificate on a Mobile Device or Remote Browser”</p><img src="/2017/04/25/2017-04-25-The-nine-functions-commonly-used-by-Charles/%E5%AE%89%E8%A3%85%E8%AF%81%E4%B9%A6%E9%93%BE%E6%8E%A5.png" title="安装证书链接"><p>按照我们之前说的教程，在设备上设置好 Charles 为代理后，在手机浏览器中访问地址：chls.pro/ssl，即可打开证书安装的界面，安装完证书后，就可以截取手机上的 Https 通讯内容了。不过同样需要注意，默认情况下 Charles 并不做截取，你还需要在要截取的网络请求上右击，选择 SSL proxy 菜单项。</p><img src="/2017/04/25/2017-04-25-The-nine-functions-commonly-used-by-Charles/%E8%A6%81%E6%8A%93%E5%8F%96HTTPS%E8%AF%B7%E6%B1%82%E7%9A%84%E5%9F%9F%E5%90%8D.png" title="要抓取HTTPS请求的域名"><p>还可以直接在对应的 HTTPS 请求上右键，选择<code>Enable SSL Proxying</code>。</p><h4 id="模拟慢速网络"><a href="#模拟慢速网络" class="headerlink" title="模拟慢速网络"></a>模拟慢速网络</h4><p>在做移动开发的时候，我们常常需要模拟慢速网络或者高延迟的网络，以测试在移动网络下，应用的表现是否正常。Charles 对此需求提供了很好的支持。<br>在 Charles 的菜单上，选择 “Proxy”-&gt;”Throttle Setting” 项，在之后弹出的对话框中，我们可以勾选上 “Enable Throttling”，并且可以设置 Throttle Preset 的类型。如下图所示：</p><img src="/2017/04/25/2017-04-25-The-nine-functions-commonly-used-by-Charles/%E6%85%A2%E9%80%9F%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE.png" title="慢速网络设置"><p>如果我们只想模拟指定网站的慢速网络，可以再勾选上图中的 “Only for selected hosts” 项，然后在对话框的下半部分设置中增加指定的 hosts 项即可。</p><h4 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h4><p>我们可以使用 Charles 的 Repeat 功能来简单地测试服务器的并发处理能力，方法如下。<br>我们在想打压的网络请求上（POST 或 GET 请求均可）右击，然后选择 「Repeat Advanced」菜单项，接着我们就可以在弹出的对话框中，选择打压的并发线程数以及打压次数，确定之后，即可开始打压。</p><img src="/2017/04/25/2017-04-25-The-nine-functions-commonly-used-by-Charles/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95.png" title="压力测试"><h4 id="修改服务器返回内容"><a href="#修改服务器返回内容" class="headerlink" title="修改服务器返回内容"></a>修改服务器返回内容</h4><p>有些时候我们想让服务器返回一些指定的内容，方便我们调试一些特殊情况。例如列表页面为空的情况，数据异常的情况，部分耗时的网络请求超时的情况等。如果没有 Charles，要服务器配合构造相应的数据显得会比较麻烦。这个时候，使用 Charles 相关的功能就可以满足我们的需求。<br>根据具体的需求，Charles 提供了 Map 功能、 Rewrite 功能以及 Breakpoints 功能，都可以达到修改服务器返回内容的目的。这三者在功能上的差异是：<br>Map 功能适合长期地将某一些请求重定向到另一个网络地址或本地文件。<br>Rewrite 功能适合对网络请求进行一些正则替换。<br>Breakpoints 功能适合做一些临时性的修改。</p><h4 id="Map-重定向功能"><a href="#Map-重定向功能" class="headerlink" title="Map 重定向功能"></a>Map 重定向功能</h4><p>Charles 的 Map 功能分 Map Remote 和 Map Local 两种，顾名思义，Map Remote 是将指定的网络请求重定向到另一个网址请求地址，Map Local 是将指定的网络请求重定向到本地文件。<br>在 Charles 的菜单中，选择 “Tools”-&gt;”Map Remote” 或 “Map Local” 即可进入到相应功能的设置页面。</p><h5 id="Map-Remote"><a href="#Map-Remote" class="headerlink" title="Map Remote"></a>Map Remote</h5><p>对于 Map Remote 功能，我们需要分别填写网络重定向的源地址和目的地址，对于不需要限制的条件，可以留空。</p><img src="/2017/04/25/2017-04-25-The-nine-functions-commonly-used-by-Charles/MapRemote.png" title="MapRemote"><h5 id="Map-Local"><a href="#Map-Local" class="headerlink" title="Map Local"></a>Map Local</h5><p>对于 Map Local 功能，我们需要填写的重定向的源地址和本地的目标文件。对于有一些复杂的网络请求结果，我们可以先使用 Charles 提供的 “Save Response…” 功能，将请求结果保存到本地（如下图所示），然后稍加修改，成为我们的目标映射文件。</p><h4 id="Rewrite-功能"><a href="#Rewrite-功能" class="headerlink" title="Rewrite 功能"></a>Rewrite 功能</h4><p>Rewrite 功能功能适合对某一类网络请求进行一些正则替换，以达到修改结果的目的。</p><img src="/2017/04/25/2017-04-25-The-nine-functions-commonly-used-by-Charles/RewriteRule.png" title="RewriteRule"><p>设置完后，每次请求到对应的值就会被替代。</p><h4 id="Breakpoints-功能"><a href="#Breakpoints-功能" class="headerlink" title="Breakpoints 功能"></a>Breakpoints 功能</h4><p>上面提供的 Rewrite 功能最适合做批量和长期的替换，但是很多时候，我们只是想临时修改一次网络请求结果，这个时候，使用 Rewrite 功能虽然也可以达到目的，但是过于麻烦，对于临时性的修改，我们最好使用 Breakpoints 功能。<br>Breakpoints 功能类似我们在 Xcode 中设置的断点一样，当指定的网络请求发生时，Charles 会截获该请求，这个时候，我们可以在 Charles 中临时修改网络请求的返回内容。</p><h5 id="breakpoints⭐️-方法实践过程"><a href="#breakpoints⭐️-方法实践过程" class="headerlink" title="breakpoints⭐️ 方法实践过程"></a>breakpoints⭐️ 方法实践过程</h5><p>在charless上要mock数据的url上右点击，弹出的列表选中breakpoint，要点击两次 Excute 才能完成一次 HTTP 请求，原因是，Charles 的断点功能分别提供了修改 HTTP Request 和 Response 的机会映射本地文件。</p><img src="/2017/04/25/2017-04-25-The-nine-functions-commonly-used-by-Charles/EditRequest.png" title="EditRequest"> <img src="/2017/04/25/2017-04-25-The-nine-functions-commonly-used-by-Charles/EditResponse.png" title="EditResponse"><p>通过修改 response 就可以修改请求的结果成为自己想要的结果，从而在客户端上查看效果。</p>]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>charles</tag>
      </tags>
  </entry>
  <entry>
    <title>Top 8 Diagrams for Understanding Java</title>
    <url>/2017/03/14/2017-03-14-Top-8-Diagrams-for-Understanding-Java/</url>
    <content><![CDATA[<h3 id="String-Immutability【字符串不变性】"><a href="#String-Immutability【字符串不变性】" class="headerlink" title="String Immutability【字符串不变性】"></a>String Immutability【字符串不变性】</h3><p>The following diagram shows what happens for the following code:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = <span class="string">"abcd"</span>;</span><br><span class="line">s = s.concat(<span class="string">"ef"</span>);</span><br></pre></td></tr></table></figure><a id="more"></a> <img src="/2017/03/14/2017-03-14-Top-8-Diagrams-for-Understanding-Java/string-immutability.jpeg" title="string-immutability"><h3 id="The-equals-and-hashCode-Contract【equals-方法、hashCode-方法的区别】"><a href="#The-equals-and-hashCode-Contract【equals-方法、hashCode-方法的区别】" class="headerlink" title="The equals() and hashCode() Contract【equals()方法、hashCode()方法的区别】"></a>The equals() and hashCode() Contract【equals()方法、hashCode()方法的区别】</h3><p>HashCode is designed to improve performance. The contract between equals() and hasCode() is that:</p><ol><li>If two objects are equal, then they must have the same hash code.</li><li>If two objects have the same hashcode, they may or may not be equal.<img src="/2017/03/14/2017-03-14-Top-8-Diagrams-for-Understanding-Java/java-hashcode.jpeg" title="java-hashcode"></li></ol><h3 id="Java-Exception-Class-Hierarchy【Java异常类的层次结构】"><a href="#Java-Exception-Class-Hierarchy【Java异常类的层次结构】" class="headerlink" title="Java Exception Class Hierarchy【Java异常类的层次结构】"></a>Java Exception Class Hierarchy【Java异常类的层次结构】</h3><p>Red colored are checked exceptions which must either be caught or declared in the method’s throws clause.</p><img src="/2017/03/14/2017-03-14-Top-8-Diagrams-for-Understanding-Java/Exception-Hierarchy-Diagram.jpeg" title="Exception-Hierarchy-Diagram"><h3 id="Collections-Class-Hierarchy【集合类的层次结构】"><a href="#Collections-Class-Hierarchy【集合类的层次结构】" class="headerlink" title="Collections Class Hierarchy【集合类的层次结构】"></a>Collections Class Hierarchy【集合类的层次结构】</h3><p>Note the difference between Collections and Collection.</p><img src="/2017/03/14/2017-03-14-Top-8-Diagrams-for-Understanding-Java/Collections.jpeg" title="Collections"> <img src="/2017/03/14/2017-03-14-Top-8-Diagrams-for-Understanding-Java/java-collection-hierarchy.jpeg" title="java-collection-hierarchy"><h3 id="Java-synchronization【Java同步】"><a href="#Java-synchronization【Java同步】" class="headerlink" title="Java synchronization【Java同步】"></a>Java synchronization【Java同步】</h3><p>Java synchronization mechanism can be illustrated by an analogy to a building.</p><img src="/2017/03/14/2017-03-14-Top-8-Diagrams-for-Understanding-Java/Java-Monitor.jpg" title="Java-Monitor"><h3 id="Aliasing【别名】"><a href="#Aliasing【别名】" class="headerlink" title="Aliasing【别名】"></a>Aliasing【别名】</h3><p>Aliasing means there are multiple aliases to a location that can be updated, and these aliases have different types.</p><img src="/2017/03/14/2017-03-14-Top-8-Diagrams-for-Understanding-Java/JavaAliasing.jpeg" title="JavaAliasing"><h3 id="Stack-and-Heap【堆和栈】"><a href="#Stack-and-Heap【堆和栈】" class="headerlink" title="Stack and Heap【堆和栈】"></a>Stack and Heap【堆和栈】</h3><p>This diagram shows where methods and objects are in run-time memory.</p><img src="/2017/03/14/2017-03-14-Top-8-Diagrams-for-Understanding-Java/Java-array-in-memory.png" title="Java-array-in-memory"><h3 id="JVM-Run-Time-Data-Areas【Java虚拟机运行时数据区域】"><a href="#JVM-Run-Time-Data-Areas【Java虚拟机运行时数据区域】" class="headerlink" title="JVM Run-Time Data Areas【Java虚拟机运行时数据区域】"></a>JVM Run-Time Data Areas【Java虚拟机运行时数据区域】</h3><img src="/2017/03/14/2017-03-14-Top-8-Diagrams-for-Understanding-Java/JVM-runtime-data-area.jpg" title="JVM-runtime-data-area"><hr><p><em>原文链接： programcreek 翻译： ImportNew.com - era_misa</em><br><em>译文链接： <a href="http://www.importnew.com/11725.html" target="_blank" rel="noopener">http://www.importnew.com/11725.html</a></em></p>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac下Redis环境搭建</title>
    <url>/2017/06/18/2017-06-18-Building-a-Redis-environment-under-Mac/</url>
    <content><![CDATA[<h4 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h4><p>下载稳定版本的安装包<a href="http://download.redis.io/redis-stable.tar.gz" target="_blank" rel="noopener">redis-stable</a></p><h4 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xvf redis-stable.tar.gz</span><br><span class="line">cp ./redis-stable /opt/</span><br><span class="line"><span class="built_in">cd</span> /opt/redis-stable</span><br><span class="line">sudo make <span class="built_in">test</span></span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="配置Redis"><a href="#配置Redis" class="headerlink" title="配置Redis"></a>配置Redis</h4><ol><li><p>创建需要的目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir bin</span><br><span class="line">mkdir etc</span><br><span class="line">mkdir db</span><br></pre></td></tr></table></figure></li><li><p>拷贝安装好的<code>redis</code>文件到创建的<code>bin</code>目录下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /usr/bin/redis-* /opt/redis-stable/bin/</span><br></pre></td></tr></table></figure><pre><code>结果``/opt/redis-stable/bin/``目录下的内容如下</code></pre><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">╭─taoyi at TaoYi-Mac <span class="keyword">in</span> /opt/redis-stable/bin using ‹› 17-06-18 - 18:06:48</span><br><span class="line">╰─○ ll</span><br><span class="line">total 6648</span><br><span class="line">-rwxr-xr-x  1 taoyi  staff    98K  6 18 18:06 redis-benchmark</span><br><span class="line">-rwxr-xr-x  1 taoyi  staff    14K  6 18 18:06 redis-check-aof</span><br><span class="line">-rwxr-xr-x  1 taoyi  staff   1.0M  6 18 18:06 redis-check-rdb</span><br><span class="line">-rwxr-xr-x  1 taoyi  staff   159K  6 18 18:06 redis-cli</span><br><span class="line">-rwxr-xr-x  1 taoyi  staff   1.0M  6 18 18:06 redis-sentinel</span><br><span class="line">-rwxr-xr-x  1 taoyi  staff   1.0M  6 18 18:06 redis-server</span><br></pre></td></tr></table></figure></li><li><p>拷贝安装目录<code>src</code>目录下的<code>mkreleasehdr.sh</code>到安装目录下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /opt/redis-stable/src/mkreleasehdr.sh /opt/redis-stable/</span><br></pre></td></tr></table></figure></li><li><p>拷贝安装目录下的<code>redis.conf</code>到创建的<code>etc</code>目录下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /opt/redis-stable/redis.conf /opt/redis-stable/etc/</span><br></pre></td></tr></table></figure></li><li><p>修改<code>redis.conf</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#修改为守护模式</span><br><span class="line">daemonize yes</span><br><span class="line">#设置进程锁文件</span><br><span class="line">pidfile &#x2F;opt&#x2F;redis-stable&#x2F;redis.pid</span><br><span class="line">#端口</span><br><span class="line">port 6379</span><br><span class="line">#客户端超时时间</span><br><span class="line">timeout 300</span><br><span class="line">#日志级别</span><br><span class="line">loglevel debug</span><br><span class="line">#日志文件位置</span><br><span class="line">logfile &#x2F;opt&#x2F;redis-stable&#x2F;log-redis.log</span><br><span class="line">#设置数据库的数量，默认数据库为0，可以使用SELECT &lt;dbid&gt;命令在连接上指定数据库id</span><br><span class="line">databases 8</span><br><span class="line">##指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</span><br><span class="line">#save &lt;seconds&gt; &lt;changes&gt;</span><br><span class="line">#Redis默认配置文件中提供了三个条件：</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">#指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，</span><br><span class="line">#可以关闭该#选项，但会导致数据库文件变的巨大</span><br><span class="line">rdbcompression yes</span><br><span class="line">#指定本地数据库文件名</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">#指定本地数据库路径</span><br><span class="line">dir &#x2F;opt&#x2F;redis-stable&#x2F;db&#x2F;</span><br><span class="line">#指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能</span><br><span class="line">#会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有</span><br><span class="line">#的数据会在一段时间内只存在于内存中</span><br><span class="line">appendonly no</span><br><span class="line">#指定更新日志条件，共有3个可选值：</span><br><span class="line">#no：表示等操作系统进行数据缓存同步到磁盘（快）</span><br><span class="line">#always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）</span><br><span class="line">#everysec：表示每秒同步一次（折衷，默认值）</span><br><span class="line">appendfsync everysec</span><br></pre></td></tr></table></figure></li><li><p>修改<code>redis</code>目录的所有者</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chown -R taoyi /opt/redis-stable</span><br></pre></td></tr></table></figure></li></ol><h4 id="启动Redis服务"><a href="#启动Redis服务" class="headerlink" title="启动Redis服务"></a>启动Redis服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./opt/redis-stable/bin/redis-server ./opt/redis-stable/etc/redis.conf</span><br></pre></td></tr></table></figure><h4 id="访问Redis服务"><a href="#访问Redis服务" class="headerlink" title="访问Redis服务"></a>访问Redis服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./opt/redis-stable/bin/redis-cli</span><br></pre></td></tr></table></figure><h3 id="Ubuntu安装redis服务"><a href="#Ubuntu安装redis服务" class="headerlink" title="Ubuntu安装redis服务"></a><code>Ubuntu</code>安装<code>redis</code>服务</h3><ol><li><p>安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install redis-server</span></span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree       </span><br><span class="line">Reading state information... Done</span><br><span class="line">The following packages were automatically installed and are no longer required:</span><br><span class="line">  dctrl-tools javascript-common libjs-jquery libjs-sphinxdoc libjs-underscore libsodium18 libyaml-0-2 libzmq5 python-cffi-backend python-chardet</span><br><span class="line">  python-concurrent.futures python-crypto python-cryptography python-dateutil python-enum34 python-gnupg python-idna python-ipaddress python-jinja2</span><br><span class="line">  python-mako python-markupsafe python-msgpack python-ndg-httpsclient python-openssl python-psutil python-pyasn1 python-pycurl python-pymysql python-requests</span><br><span class="line">  python-six python-systemd python-tornado python-urllib3 python-yaml python-zmq salt-common</span><br><span class="line">Use 'sudo apt autoremove' to remove them.</span><br><span class="line">The following additional packages will be installed:</span><br><span class="line">  libjemalloc1 redis-tools</span><br><span class="line">Suggested packages:</span><br><span class="line">  ruby-redis</span><br><span class="line">The following NEW packages will be installed:</span><br><span class="line">  libjemalloc1 redis-server redis-tools</span><br><span class="line">0 upgraded, 3 newly installed, 0 to remove and 248 not upgraded.</span><br><span class="line">Need to get 519 kB of archives.</span><br><span class="line">After this operation, 1,507 kB of additional disk space will be used.</span><br><span class="line">Do you want to continue? [Y/n] Y</span><br><span class="line">Get:1 http://mirrors.aliyun.com/ubuntu xenial/universe amd64 libjemalloc1 amd64 3.6.0-9ubuntu1 [78.9 kB]</span><br><span class="line">Get:2 http://mirrors.aliyun.com/ubuntu xenial-security/universe amd64 redis-tools amd64 2:3.0.6-1ubuntu0.4 [95.5 kB]</span><br><span class="line">Get:3 http://mirrors.aliyun.com/ubuntu xenial-security/universe amd64 redis-server amd64 2:3.0.6-1ubuntu0.4 [344 kB]</span><br><span class="line">Fetched 519 kB in 0s (1,716 kB/s) </span><br><span class="line">Selecting previously unselected package libjemalloc1.</span><br><span class="line">(Reading database ... 116705 files and directories currently installed.)</span><br><span class="line">Preparing to unpack .../libjemalloc1_3.6.0-9ubuntu1_amd64.deb ...</span><br><span class="line">Unpacking libjemalloc1 (3.6.0-9ubuntu1) ...</span><br><span class="line">Selecting previously unselected package redis-tools.</span><br><span class="line">Preparing to unpack .../redis-tools_2%3a3.0.6-1ubuntu0.4_amd64.deb ...</span><br><span class="line">Unpacking redis-tools (2:3.0.6-1ubuntu0.4) ...</span><br><span class="line">Selecting previously unselected package redis-server.</span><br><span class="line">Preparing to unpack .../redis-server_2%3a3.0.6-1ubuntu0.4_amd64.deb ...</span><br><span class="line">Unpacking redis-server (2:3.0.6-1ubuntu0.4) ...</span><br><span class="line">Processing triggers for libc-bin (2.23-0ubuntu11) ...</span><br><span class="line">Processing triggers for man-db (2.7.5-1) ...</span><br><span class="line">Processing triggers for ureadahead (0.100.0-19.1) ...</span><br><span class="line">Processing triggers for systemd (229-4ubuntu21.22) ...</span><br><span class="line">Setting up libjemalloc1 (3.6.0-9ubuntu1) ...</span><br><span class="line">Setting up redis-tools (2:3.0.6-1ubuntu0.4) ...</span><br><span class="line">Setting up redis-server (2:3.0.6-1ubuntu0.4) ...</span><br><span class="line">Processing triggers for libc-bin (2.23-0ubuntu11) ...</span><br><span class="line">Processing triggers for ureadahead (0.100.0-19.1) ...</span><br><span class="line">Processing triggers for systemd (229-4ubuntu21.22) ...</span><br></pre></td></tr></table></figure><p>安装完成后，即会自动启动redis服务</p></li><li><p>查看进程端口号</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ps -aux | grep redis</span></span><br><span class="line">redis    10727  0.0  0.0  40892  6796 ?        Ssl  10:38   0:00 /usr/bin/redis-server 127.0.0.1:6379</span><br><span class="line">shadow   10800  0.0  0.0  14980  1012 pts/1    S+   10:39   0:00 grep --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn redis</span><br></pre></td></tr></table></figure></li><li><p>查看redis服务器状态</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> netstat -nlt | grep 6379</span></span><br><span class="line">tcp        0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo /etc/init.d/redis-server status</span><br><span class="line">● redis-server.service - Advanced key-value store</span><br><span class="line">   Loaded: loaded (/lib/systemd/system/redis-server.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Thu 2021-03-18 10:38:56 CST; 1min 10s ago</span><br><span class="line">     Docs: http://redis.io/documentation,</span><br><span class="line">           man:redis-server(1)</span><br><span class="line"> Main PID: 10727 (redis-server)</span><br><span class="line">   CGroup: /system.slice/redis-server.service</span><br><span class="line">           └─10727 /usr/bin/redis-server 127.0.0.1:6379</span><br><span class="line"></span><br><span class="line">Mar 18 10:38:56 kickseed systemd[1]: Starting Advanced key-value store...</span><br><span class="line">Mar 18 10:38:56 kickseed run-parts[10719]: run-parts: executing /etc/redis/redis-server.pre-up.d/00_example</span><br><span class="line">Mar 18 10:38:56 kickseed run-parts[10728]: run-parts: executing /etc/redis/redis-server.post-up.d/00_example</span><br><span class="line">Mar 18 10:38:56 kickseed systemd[1]: Started Advanced key-value store.</span><br></pre></td></tr></table></figure></li><li><p>配置文件修改</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/redis/redis.conf</span><br></pre></td></tr></table></figure><p>开启Redis的远程连接：<br>注释掉绑定地址<code>#bind 127.0.0.1</code></p></li><li><p>重启服务</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/redis-server restart</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">sudo service redis-server restart</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">sudo redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      <categories>
        <category>环境搭建</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins中slave的设置</title>
    <url>/2017/06/24/2017-06-24-Jenkins-slave-settings/</url>
    <content><![CDATA[<h3 id="在Jenkins中配置从节点"><a href="#在Jenkins中配置从节点" class="headerlink" title="在Jenkins中配置从节点"></a>在Jenkins中配置从节点</h3><img src="/2017/06/24/2017-06-24-Jenkins-slave-settings/%E9%85%8D%E7%BD%AE%E4%BB%8E%E8%8A%82%E7%82%B9.png" title="配置从节点"><p>增加节点后，实际并没有直接连上，还需要在节点服务器上进行相应的配置</p><a id="more"></a><h3 id="在从节点服务器的host中的加入配置"><a href="#在从节点服务器的host中的加入配置" class="headerlink" title="在从节点服务器的host中的加入配置"></a>在从节点服务器的host中的加入配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/hosts</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">111.111.111.111 jenkins.shadow.com						<span class="comment"># 前部分IP为Jenkins的内网地址，后部分为Jenkins的对外访问域名</span></span><br></pre></td></tr></table></figure><h3 id="从节点服务器上配置Jenkins节点配置"><a href="#从节点服务器上配置Jenkins节点配置" class="headerlink" title="从节点服务器上配置Jenkins节点配置"></a>从节点服务器上配置Jenkins节点配置</h3><img src="/2017/06/24/2017-06-24-Jenkins-slave-settings/%E4%BB%8E%E8%8A%82%E7%82%B9%E9%85%8D%E7%BD%AE%E8%A6%81%E7%82%B9.png" title="从节点配置要点"><p>点击上图中的<code>slave.jar</code>的链接，下载该文件，放在上方指定的<code>Jenkins</code>工作目录下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">test</span>@<span class="built_in">test</span>-devtesting-00001:~/jenkins$ ll</span><br><span class="line">total 760</span><br><span class="line">drwxrwxr-x  3 <span class="built_in">test</span> <span class="built_in">test</span>   4096 Jun 23 16:04 ./</span><br><span class="line">drwx------ 18 <span class="built_in">test</span> <span class="built_in">test</span>   4096 Jun 24 13:47 ../</span><br><span class="line">-rw-rw-r--  1 <span class="built_in">test</span> <span class="built_in">test</span>   7623 Jun 23 16:04 maven33-agent.jar</span><br><span class="line">-rw-rw-r--  1 <span class="built_in">test</span> <span class="built_in">test</span>  19971 Jun 23 16:04 maven33-interceptor.jar</span><br><span class="line">-rw-rw-r--  1 <span class="built_in">test</span> <span class="built_in">test</span>   6764 Jun 23 16:04 maven3-interceptor-commons.jar</span><br><span class="line">-rw-rw-r--  1 <span class="built_in">test</span> <span class="built_in">test</span>    738 Jun  8 16:52 slave-agent.jnlp</span><br><span class="line">-rw-rw-r--  1 <span class="built_in">test</span> <span class="built_in">test</span> 717563 May  2 17:29 slave.jar								<span class="comment"># 上方下载的slave.jar文件</span></span><br><span class="line">-rwxrwxr-x  1 <span class="built_in">test</span> <span class="built_in">test</span>    114 Jun  6 19:28 start_jenkins.sh*						<span class="comment"># 启动Jenkinsslave的脚本</span></span><br><span class="line">drwxrwxr-x 14 <span class="built_in">test</span> <span class="built_in">test</span>   4096 Jun 24 12:43 workspace/								<span class="comment"># Jenkins项目的工作目录</span></span><br></pre></td></tr></table></figure><p>将提示中的启动<code>Jenkins</code>的脚本写入文件<code>start_jenkins.sh</code>中</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar slave.jar -jnlpUrl http://jenkins.shadow.com/computer/test-devtesting-00001/slave-agent.jnlp 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或</span></span><br><span class="line">java -Dfile.encoding=UTF-8 -jar agent.jar -jnlpUrl http://jenkins.shadow.com/computer/slave_51/slave-agent.jnlp -secret 815485b5788e77960f86a1sdf32es6e02d55c9fa104c0e754c1efb046e8a50b44c31cec4 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><ul><li>如果在 slave 上执行脚本出现乱码问题，可以通过加该参数<code>-Dfile.encoding=UTF-8</code>解决</li><li>如果服务器存在密码，用于免密链接需要加该参数<code>-secret 815485b5788e77960f86a6e02q3easf1cxad55c9fa104c0e754c1efb046e8a50</code>，该参数一般在 jenkins 的 slave 设置页会显示出来。</li></ul><p>赋予<code>start_jenkins.sh</code>执行权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod a+x start_jenkins.sh</span><br></pre></td></tr></table></figure><p>启动slave</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./start_jenkins.sh</span><br></pre></td></tr></table></figure><p>回到Jenkins节点列表，查看添加的节点，状态如图就说明启动成功了。</p><img src="/2017/06/24/2017-06-24-Jenkins-slave-settings/%E8%8A%82%E7%82%B9%E5%88%97%E8%A1%A8.png" title="节点列表"><p>至此，slave节点就配置并启动完毕了。</p><h3 id="通过SSH的方式连接slave"><a href="#通过SSH的方式连接slave" class="headerlink" title="通过SSH的方式连接slave"></a>通过<code>SSH</code>的方式连接<code>slave</code></h3><img src="/2017/06/24/2017-06-24-Jenkins-slave-settings/SSH%E6%96%B9%E5%BC%8F%E8%AE%BE%E7%BD%AEslave%E8%BF%9E%E6%8E%A5.png" title="SSH方式设置slave连接"><ul><li>启动方式：<code>Launch agent agents via SSH</code></li><li>主机：Agent’s Hostname or IP</li><li>Credentials：登录以上<code>主机</code>的账密信息<br>该种连接<code>slave</code>的方式依赖<code>Java</code>环境，所以需要设置一个<code>JAVA_HOME</code>的环境变量<br>如无问题，点击保存之后，就会正常连接成功了</li></ul><h3 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h3><ol><li><p>出现<code>java.net.ConnectException: Connection refused (Connection refused)</code>解决方式<br>在 jenkins 的<code>系统设置</code>中的<code>Jenkins Location</code>模块下的<code>Jenkins URL</code>中，不要使用域名，而是直接写<code>http://IP:port</code></p></li><li><p><code>slave</code>经常会掉线处理<br>首先需要获取到slave的状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://hostName/computer/slaveName/api/json?pretty=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>请求该url会得到一个slave状态的结果</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_class"</span> : <span class="string">"hudson.slaves.SlaveComputer"</span>,</span><br><span class="line">  <span class="attr">"actions"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"_class"</span> : <span class="string">"hudson.plugins.jobConfigHistory.ComputerConfigHistoryAction"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"assignedLabels"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span> : <span class="string">"Mac_slave"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"description"</span> : <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"displayName"</span> : <span class="string">"Mac_slave"</span>,</span><br><span class="line">  <span class="attr">"executors"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"icon"</span> : <span class="string">"computer.png"</span>,</span><br><span class="line">  <span class="attr">"iconClassName"</span> : <span class="string">"icon-computer"</span>,</span><br><span class="line">  <span class="attr">"idle"</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"jnlpAgent"</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"launchSupported"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"loadStatistics"</span> : &#123;</span><br><span class="line">    <span class="attr">"_class"</span> : <span class="string">"hudson.model.Label$1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"manualLaunchAllowed"</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"monitorData"</span> : &#123;</span><br><span class="line">    <span class="attr">"hudson.node_monitors.SwapSpaceMonitor"</span> : &#123;</span><br><span class="line">      <span class="attr">"_class"</span> : <span class="string">"hudson.node_monitors.SwapSpaceMonitor$MemoryUsage2"</span>,</span><br><span class="line">      <span class="attr">"availablePhysicalMemory"</span> : <span class="number">-1</span>,</span><br><span class="line">      <span class="attr">"availableSwapSpace"</span> : <span class="number">830472192</span>,</span><br><span class="line">      <span class="attr">"totalPhysicalMemory"</span> : <span class="number">-1</span>,</span><br><span class="line">      <span class="attr">"totalSwapSpace"</span> : <span class="number">1073741824</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"hudson.node_monitors.TemporarySpaceMonitor"</span> : &#123;</span><br><span class="line">      <span class="attr">"_class"</span> : <span class="string">"hudson.node_monitors.DiskSpaceMonitorDescriptor$DiskSpace"</span>,</span><br><span class="line">      <span class="attr">"timestamp"</span> : <span class="number">1596678461230</span>,</span><br><span class="line">      <span class="attr">"path"</span> : <span class="string">"/private/var/folders/3z/t812m3_x2218m6wchwd0ttdm0000gn/T"</span>,</span><br><span class="line">      <span class="attr">"size"</span> : <span class="number">63684665344</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"hudson.node_monitors.DiskSpaceMonitor"</span> : &#123;</span><br><span class="line">      <span class="attr">"_class"</span> : <span class="string">"hudson.node_monitors.DiskSpaceMonitorDescriptor$DiskSpace"</span>,</span><br><span class="line">      <span class="attr">"timestamp"</span> : <span class="number">1596678460739</span>,</span><br><span class="line">      <span class="attr">"path"</span> : <span class="string">"/Users/shadow/jenkins_slave/workspace"</span>,</span><br><span class="line">      <span class="attr">"size"</span> : <span class="number">63684665344</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"hudson.node_monitors.ArchitectureMonitor"</span> : <span class="string">"Mac OS X (x86_64)"</span>,</span><br><span class="line">    <span class="attr">"hudson.node_monitors.ResponseTimeMonitor"</span> : &#123;</span><br><span class="line">      <span class="attr">"_class"</span> : <span class="string">"hudson.node_monitors.ResponseTimeMonitor$Data"</span>,</span><br><span class="line">      <span class="attr">"timestamp"</span> : <span class="number">1596678460739</span>,</span><br><span class="line">      <span class="attr">"average"</span> : <span class="number">106</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"hudson.node_monitors.ClockMonitor"</span> : &#123;</span><br><span class="line">      <span class="attr">"_class"</span> : <span class="string">"hudson.util.ClockDifference"</span>,</span><br><span class="line">      <span class="attr">"diff"</span> : <span class="number">-45</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"numExecutors"</span> : <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"offline"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"offlineCause"</span> : <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"offlineCauseReason"</span> : <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"oneOffExecutors"</span> : [</span><br><span class="line">    </span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"temporarilyOffline"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"absoluteRemotePath"</span> : <span class="string">"/Users/shadow/jenkins_slave/workspace"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中有一个<code>offline</code>字段，<code>false</code>表示在线，<code>true</code>表示掉线，并且会在<code>offlineCauseReason</code>字段中显示掉线原因<br>然后我们可以通过定时获取<code>offline</code>字段的值来判断<code>slave</code>是否掉线，如果掉线了，就采取相应的重启<code>slave</code>的措施</p><p>处理代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSlaveStatus</span><span class="params">()</span>:</span></span><br><span class="line">    baseapi = <span class="string">'http://jenkins.shadow.com/computer/Mac_slave/api/json?pretty=true'</span></span><br><span class="line">    resp = requests.get(baseapi)</span><br><span class="line">    result = resp.json()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">judgeStatus</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        sleep(<span class="number">3</span>)</span><br><span class="line">        result = getSlaveStatus()</span><br><span class="line">        print(result)</span><br><span class="line">        status = result[<span class="string">"offline"</span>]</span><br><span class="line">        <span class="keyword">while</span> status:</span><br><span class="line">            ssh = paramiko.SSHClient()</span><br><span class="line">            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">            ssh.connect(hostname=<span class="string">'192.168.8.8'</span>, port=<span class="number">22</span>, username=<span class="string">'shadow'</span>, password=<span class="string">'V4Hubd1WBePJ'</span>)</span><br><span class="line">            stdin, stdout, stderr = ssh.exec_command(</span><br><span class="line">                <span class="string">"nohup java -Xmx1024m -jar /Users/shadow/jenkins_slave/agent.jar -jnlpUrl "</span></span><br><span class="line">                <span class="string">"http://jenkins.shadow.com/computer/Mac_slave/slave-agent.jnlp -secret "</span></span><br><span class="line">                <span class="string">"d6c66e20341aa6e628b5f057355384a1q21q1q1a462349a852eec1294ad40cbd016964cb &amp;"</span>)</span><br><span class="line">            print(stdout.read())</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    judgeStatus()</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac下删除安装的pkg</title>
    <url>/2017/08/06/2017-08-06-Remove-the-installed-pkg-under-Mac/</url>
    <content><![CDATA[<h4 id="使用pkg-uninstaller来卸载pkg安装的软件"><a href="#使用pkg-uninstaller来卸载pkg安装的软件" class="headerlink" title="使用pkg_uninstaller来卸载pkg安装的软件"></a>使用<code>pkg_uninstaller</code>来卸载<code>pkg</code>安装的软件</h4><ol><li><p>安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">[sudo] bash &lt; &lt;(curl -sL https://raw.github.com/mpapis/pkg_uninstaller/master/pkg-install)</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>加入到环境变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'PATH=$PATH:$HOME/.pkg_uninstaller'</span> &gt;&gt; <span class="variable">$HOME</span>/.bash_profile</span><br></pre></td></tr></table></figure></li><li><p>列出包含某字符串的包名</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pkg-list [name]</span><br><span class="line">pkgutil --pkgs | grep -i [name]</span><br></pre></td></tr></table></figure></li><li><p>列出<code>pkg</code>软件的所有安装文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pkg-util --files [pkg_name]</span><br></pre></td></tr></table></figure></li><li><p>卸载<code>pkg</code>软件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sudo] pkg-uninstall [pkg_name]</span><br></pre></td></tr></table></figure><p>不论是手动还是使用命令全自动删除，最终你还得告诉系统你删了这个包</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sudo] pkgutil --forget [pkg_name]</span><br></pre></td></tr></table></figure></li></ol><h4 id="使用pkg管理软件来卸载"><a href="#使用pkg管理软件来卸载" class="headerlink" title="使用pkg管理软件来卸载"></a>使用<code>pkg</code>管理软件来卸载</h4><ol><li>下载地址<br><a href="https://pan.baidu.com/s/1hsxMhHM" target="_blank" rel="noopener">破解版地址</a><br><a href="https://www.corecode.io/uninstallpkg/" target="_blank" rel="noopener">官网地址</a></li></ol>]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Robot-Framework框架系统关键字之断言</title>
    <url>/2017/08/28/2017-08-28-Robot-Framework-framework-system-keyword-assertion/</url>
    <content><![CDATA[<h4 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 三个list变量：list_a、list_b、list_c；</span></span><br><span class="line">@&#123;list_a&#125;    create list    1    a    <span class="variable">$&#123;21&#125;</span>    21    12</span><br><span class="line">@&#123;list_b&#125;    <span class="built_in">set</span> variable    1.0    a    <span class="variable">$&#123;21&#125;</span>    21    21</span><br><span class="line">@&#123;list_c&#125;    create list</span><br><span class="line"><span class="comment"># 两个scalar变量：string和name</span></span><br><span class="line"><span class="variable">$&#123;string&#125;</span>    <span class="built_in">set</span> variable    taoyi is <span class="keyword">in</span> hangzhou</span><br><span class="line"><span class="variable">$&#123;name&#125;</span>    <span class="built_in">set</span> variable    ty</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="断言实例"><a href="#断言实例" class="headerlink" title="断言实例"></a>断言实例</h4><ol><li><code>should contain</code>、<code>should not contain</code>、<code>should contain x times</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">should contain    <span class="variable">$&#123;list_b&#125;</span>    1.0</span><br><span class="line">should not contain    <span class="variable">$&#123;list_b&#125;</span>    1</span><br><span class="line">should contain x <span class="built_in">times</span>    <span class="variable">$&#123;list_b&#125;</span>    21    2</span><br><span class="line"><span class="comment"># 变量$&#123;list_b&#125;包含对象1.0而不包含对象1，且对象21在变量$&#123;lst_b&#125;出现了两次</span></span><br></pre></td></tr></table></figure></li><li><code>should be empty</code>、<code>should not be empty</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">should be empty    <span class="variable">$&#123;list_c&#125;</span></span><br><span class="line">should not be empty    <span class="variable">$&#123;list_a&#125;</span></span><br><span class="line"><span class="comment"># 变量$&#123;list_c&#125;没有赋值，所以为空；相反，变量$&#123;list_a&#125;有赋初始值，故为非空</span></span><br></pre></td></tr></table></figure></li><li><code>should be equal</code>、<code>should not be equal</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">should be equal    <span class="variable">$&#123;list_a[1]&#125;</span>    <span class="variable">$&#123;list_b[1]&#125;</span></span><br><span class="line">should not be equal    <span class="variable">$&#123;list_a&#125;</span>    <span class="variable">$&#123;list_b&#125;</span></span><br><span class="line"><span class="comment"># $&#123;list_a[1]&#125;=a，$&#123;list_b[1]&#125;=a故两个对象相等;而$&#123;list_a&#125;和$&#123;list_b&#125;有元素不一致，这两个对象不相等</span></span><br></pre></td></tr></table></figure></li><li><code>should be equal as numbers</code>、<code>should not be equal as numbers</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">should be equal as numbers    <span class="variable">$&#123;list_b[0]&#125;</span>    1.0000</span><br><span class="line">should not be equal as number    <span class="variable">$&#123;list_b[0]&#125;</span>    1.1</span><br><span class="line"><span class="comment"># $&#123;list_b[0]&#125;=1，忽略精度，故与1.0000相等；而即使是忽略精度，1与1.1还是不相等的</span></span><br></pre></td></tr></table></figure></li><li><code>should be equal as integers</code>、<code>should not be equal as integers</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">should be equal as integers    <span class="variable">$&#123;list_a[3]&#125;</span>    <span class="variable">$&#123;list_b[3]&#125;</span></span><br><span class="line">should not be equal as integers    <span class="variable">$&#123;list_a[4]&#125;</span>    <span class="variable">$&#123;list_b[4]&#125;</span></span><br><span class="line"><span class="comment"># $&#123;list_a[3]&#125;=21，$&#123;list_b[3]&#125;=21，而系统默认为字符串格式的“21”,故需要转化为整数类型，转化为整数后两个对象相等</span></span><br><span class="line"><span class="comment"># $&#123;list_a[4]&#125;=12，$&#123;list_b[4]&#125;=21，即使转化为整数后两个对象依旧是不相等</span></span><br></pre></td></tr></table></figure></li><li><code>should be equal as strings</code>、<code>should not be equal as strings</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">should be equal as strings    <span class="variable">$&#123;list_a[2]&#125;</span>    <span class="variable">$&#123;list_b[2]&#125;</span></span><br><span class="line">should not be equal as strings    <span class="variable">$&#123;list_a[0]&#125;</span>    <span class="variable">$&#123;list_b[0]&#125;</span></span><br><span class="line"><span class="comment"># $&#123;list_a[2]&#125;=$&#123;21&#125;，$&#123;list_b[2]&#125;=$&#123;21&#125;，而均为数值型的21,故需要转化为字符串类型，转化为字符串后两个对象相等</span></span><br></pre></td></tr></table></figure></li><li><code>should be true</code>、<code>should not be true</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">should be <span class="literal">true</span>    <span class="variable">$&#123;list_a[0]&#125;</span> &lt; 10</span><br><span class="line">should not be <span class="literal">true</span>    <span class="variable">$&#123;list_a[0]&#125;</span> &lt; 1</span><br><span class="line"><span class="comment"># $&#123;list_a[0]&#125;=1（字符串类型），其ASCII值比字符串10的ASCII值小</span></span><br></pre></td></tr></table></figure></li><li><code>should start with</code>、<code>should not start with</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">should start with    <span class="variable">$&#123;string&#125;</span>    tao</span><br><span class="line">should not start with    <span class="variable">$&#123;string&#125;</span>    h</span><br><span class="line"><span class="comment"># $&#123;string&#125;="taoyi is in hangzhou"是以sha开头，而非以h开头</span></span><br></pre></td></tr></table></figure></li><li><code>should end with</code>、<code>should not end with</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">should end with    <span class="variable">$&#123;string&#125;</span>    hangzhou</span><br><span class="line">should not end with    <span class="variable">$&#123;string&#125;</span>    taoyi</span><br><span class="line"><span class="comment"># $&#123;string&#125;="taoyi is in hangzhou"是以hangzhou结尾，而非以taoyi结尾</span></span><br></pre></td></tr></table></figure></li><li><code>should match</code>、<code>should not match</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">should match    <span class="variable">$&#123;name&#125;</span>    t?</span><br><span class="line">should not match    <span class="variable">$&#123;string&#125;</span>    h?*</span><br><span class="line"><span class="comment"># 模式匹配和shell中的通配符类似，它区分大小写，'*'匹配0~无穷多个字符，“？”单个字符</span></span><br><span class="line"><span class="comment"># $&#123;name&#125;=ty,由以t开头的两个字母组成</span></span><br></pre></td></tr></table></figure></li><li><code>should match regexp</code>、<code>should not match regexp</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">should match regexp    <span class="variable">$&#123;name&#125;</span>    ^\\w&#123;2&#125;$</span><br><span class="line">should not match regexp    <span class="variable">$&#123;name&#125;</span>    ^\\d&#123;2&#125;$</span><br><span class="line"><span class="comment"># 反斜杠在测试数据是转义字符，因此模式中要使用双重转义；'^'和'$'字符可以用来表示字符串的开头和结尾</span></span><br><span class="line"><span class="comment"># $&#123;name&#125;=ty，是有两个字母--w&#123;2&#125;组成，而不是由两个数字--d&#123;2&#125;组成</span></span><br></pre></td></tr></table></figure></li></ol><p><a href="http://blog.sina.com.cn/s/blog_7f66d4ea0101k3fl.html" target="_blank" rel="noopener">转载</a></p>]]></content>
      <categories>
        <category>RobotFramework</category>
      </categories>
      <tags>
        <tag>robot-framework</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins持续集成平台搭建</title>
    <url>/2017/08/16/2017-08-16-Jenkins-continuous-integration-platform-to-build/</url>
    <content><![CDATA[<h3 id="Jenkins-部署"><a href="#Jenkins-部署" class="headerlink" title="Jenkins 部署"></a>Jenkins 部署</h3><h4 id="创建Jenkins运行目录"><a href="#创建Jenkins运行目录" class="headerlink" title="创建Jenkins运行目录"></a>创建<code>Jenkins</code>运行目录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Jenkins主目录</span></span><br><span class="line">mkdir /opt/Jenkins/Home</span><br><span class="line"><span class="comment"># Jenkins缓存位置</span></span><br><span class="line">mkdir /opt/Jenkins/tmp</span><br><span class="line"><span class="comment"># 脚本存放位置</span></span><br><span class="line">mkdir /opt/Jenkins/script</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="设置jenkins主目录"><a href="#设置jenkins主目录" class="headerlink" title="设置jenkins主目录"></a>设置<code>jenkins</code>主目录</h4><ol><li>使用WEB容器工具设置<code>JENKINS_HOME</code>环境参数。</li></ol><p>打开<code>tomcat</code>的<code>bin</code>目录，编辑<code>catalina.sh</code>文件。<br>在<code># OS specific support. $var _must_ be set to either true or false.</code>上面添加：<code>export JENKINS_HOME=&quot;&quot;</code><br>在引号中填入你的路径。</p><ol start="2"><li>在环境变量中设置<code>JENKINS_HOME</code>。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑对应用户的终端的环境变量设置文件</span></span><br><span class="line"><span class="comment"># 编辑profile文件：</span></span><br><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="comment"># 在最后加入：</span></span><br><span class="line"><span class="built_in">export</span> JENKINS_HOME=<span class="string">"/home/shadow/jenkins/Home"</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="下载jenkins-war"><a href="#下载jenkins-war" class="headerlink" title="下载jenkins.war"></a>下载<code>jenkins.war</code></h4><p><a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/war/latest/jenkins.war" target="_blank" rel="noopener">最新版jenkins的war包</a><br>把下载的<code>war</code>包放入<code>/opt/Jenkins</code>目录下</p><h4 id="编写启动脚本"><a href="#编写启动脚本" class="headerlink" title="编写启动脚本"></a>编写启动脚本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/java -Dfile.encoding=UTF-8 \</span><br><span class="line">              -XX:PermSize=256m \</span><br><span class="line">               -XX:MaxPermSize=512m -Xms256m -Xmx512m \</span><br><span class="line">              -Djava.io.tmpdir=/opt/Jenkins/tmp \</span><br><span class="line">              -jar /opt/Jenkins/jenkins.war \</span><br><span class="line">              --httpListenAddress=127.0.0.1 \</span><br><span class="line">              --httpPort=8080 \</span><br><span class="line">              &gt;&gt; /opt/Jenkins/nohup.out \</span><br><span class="line">              2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置编码格式</span></span><br><span class="line">-Dfile.encoding=UTF-8</span><br><span class="line"><span class="comment"># 设置内存占用</span></span><br><span class="line">-XX:PermSize=256m -XX:MaxPermSize=512m -Xms256m -Xmx512m</span><br><span class="line"><span class="comment"># 指定Jenkins运行缓存位置</span></span><br><span class="line">-Djava.io.tmpdir=/opt/Jenkins/tmp</span><br><span class="line"><span class="comment"># 指定执行的war包</span></span><br><span class="line">-jar /opt/Jenkins/jenkins.war</span><br><span class="line"><span class="comment"># 指定本地IP，可能是127.0.0.1，也可能是内网对应的IP</span></span><br><span class="line">--httpListenAddress=127.0.0.1</span><br><span class="line"><span class="comment"># 指定本地端口</span></span><br><span class="line">--httpPort=8080</span><br><span class="line"><span class="comment"># 指定Jenkins运行日志输出位置</span></span><br><span class="line">&gt;&gt; /opt/Jenkins/nohup.out</span><br><span class="line"><span class="comment"># 设置进程在后台运行</span></span><br><span class="line">2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>新建脚本文件存放脚本<code>startJenkins.sh</code>，放到<code>script</code>目录下。<br>执行脚本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 赋予可执行权限</span></span><br><span class="line">chmod a+x startJenkins.sh</span><br><span class="line"><span class="comment"># 执行脚本，启动Jenkins</span></span><br><span class="line">./startJenkins.sh</span><br></pre></td></tr></table></figure><h4 id="Jenkins主目录介绍"><a href="#Jenkins主目录介绍" class="headerlink" title="Jenkins主目录介绍"></a><code>Jenkins</code>主目录介绍</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># jenkins主配置文件</span></span><br><span class="line">-rw-r--r--   1 taoyi  wheel   1.6K  8 16 01:43 config.xml</span><br><span class="line">-rw-r--r--   1 taoyi  wheel   159B  8 16 01:43 hudson.model.UpdateCenter.xml</span><br><span class="line">-rw-------   1 taoyi  wheel   1.7K  8 16 01:27 identity.key.enc</span><br><span class="line">-rw-r--r--   1 taoyi  wheel    94B  8 16 01:27 jenkins.CLI.xml</span><br><span class="line">-rw-r--r--   1 taoyi  wheel     4B  8 16 01:43 jenkins.install.InstallUtil.lastExecVersion</span><br><span class="line">-rw-r--r--   1 taoyi  wheel     4B  8 16 01:30 jenkins.install.UpgradeWizard.state</span><br><span class="line"><span class="comment"># 包含所有的项目，包含所有项目对应的配置文件，包括挂到slave中的项目的配置文件</span></span><br><span class="line">drwxr-xr-x   4 taoyi  wheel   136B  8 16 09:35 <span class="built_in">jobs</span></span><br><span class="line">drwxr-xr-x   4 taoyi  wheel   136B  8 16 01:29 logs</span><br><span class="line">-rw-r--r--   1 taoyi  wheel   907B  8 16 01:43 nodeMonitors.xml</span><br><span class="line"><span class="comment"># 所有的slave节点配置文件</span></span><br><span class="line">drwxr-xr-x   2 taoyi  wheel    68B  8 16 01:27 nodes</span><br><span class="line"><span class="comment"># Jenkins插件</span></span><br><span class="line">drwxr-xr-x   2 taoyi  wheel    68B  8 16 01:27 plugins</span><br><span class="line">-rw-r--r--   1 taoyi  wheel    64B  8 16 01:27 secret.key</span><br><span class="line">-rw-r--r--   1 taoyi  wheel     0B  8 16 01:27 secret.key.not-so-secret</span><br><span class="line">drwx------  15 taoyi  wheel   510B  8 16 01:44 secrets</span><br><span class="line">drwxr-xr-x   5 taoyi  wheel   170B  8 16 01:27 updates</span><br><span class="line">drwxr-xr-x   3 taoyi  wheel   102B  8 16 01:27 userContent</span><br><span class="line"><span class="comment"># 在Jenkins中添加的所有用户都会在这个目录下新建文件夹管理，每个用户都会有一个config.xml配置文件</span></span><br><span class="line">drwxr-xr-x   4 taoyi  wheel   136B  8 16 01:40 users</span><br><span class="line">drwxr-xr-x  25 taoyi  wheel   850B  8 16 01:27 war</span><br><span class="line"><span class="comment"># 挂在本机下的所有项目的工作空间</span></span><br><span class="line">drwxr-xr-x   3 taoyi  wheel   102B  8 16 01:44 workspace</span><br></pre></td></tr></table></figure><h3 id="简单操作jenkins状态"><a href="#简单操作jenkins状态" class="headerlink" title="简单操作jenkins状态"></a>简单操作jenkins状态</h3><p>关闭jenkins：<code>http://localhost:8080/exit</code><br>重启jenkins：<code>http://localhost:8080/restart</code><br>重新加载配置信息：<code>http://localhost:8080/reload</code></p><h3 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h3><h4 id="Jenkins-console输出乱码"><a href="#Jenkins-console输出乱码" class="headerlink" title="Jenkins console输出乱码"></a><code>Jenkins console</code>输出乱码</h4><p>在<code>/etc/profile</code>中添加<code>export JAVA_TOOL_OPTIONS=&quot;-Dfile.encoding=UTF-8&quot;</code><br>在<code>Jenkins</code>系统管理里，添加环境变量<code>Key</code>：<code>LANG</code>，<code>Value</code>：<code>en_US.UTF-8</code>（如果系统默认的已经是en_US.UTF-8，就不用设置了）</p><h4 id="jenkins中的WORKSPACE中的HTML文件无法打开"><a href="#jenkins中的WORKSPACE中的HTML文件无法打开" class="headerlink" title="jenkins中的WORKSPACE中的HTML文件无法打开"></a><code>jenkins</code>中的<code>WORKSPACE</code>中的<code>HTML</code>文件无法打开</h4><p>报错如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Verify that you have JavaScript enabled in your browser.</span><br><span class="line">Make sure you are using a modern enough browser. Firefox 3.5, IE 8, or equivalent is required, newer browsers are recommended.</span><br><span class="line">Check are there messages in your browser's JavaScript error log. Please report the problem if you suspect you have encountered a bug.</span><br></pre></td></tr></table></figure><p>解决方法：在<code>系统管理-脚本命令行</code>中执行如下脚本</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">System.setProperty(<span class="string">"hudson.model.DirectoryBrowserSupport.CSP"</span>,<span class="string">"sandbox allow-scripts; default-src 'none'; img-src 'self' data: ; style-src 'self' 'unsafe-inline' data: ; script-src 'self' 'unsafe-inline' 'unsafe-eval' ;"</span>)</span><br></pre></td></tr></table></figure><p>或者在 Jenkins 中新建一个项目，添加一个<code>Execute system Groovy script</code>，其中添加以上脚本，然后构建该项目。</p><h4 id="Jenkins构建时遇到的No-compiler-is-provided-in-this-environment-Perhaps-you-are-running-on-a-JRE-rather-than-a-JDK"><a href="#Jenkins构建时遇到的No-compiler-is-provided-in-this-environment-Perhaps-you-are-running-on-a-JRE-rather-than-a-JDK" class="headerlink" title="Jenkins构建时遇到的No compiler is provided in this environment. Perhaps you are running on a JRE rather than a JDK?"></a>Jenkins构建时遇到的<code>No compiler is provided in this environment. Perhaps you are running on a JRE rather than a JDK?</code></h4><p>原因：maven项目执行编译时，没有找到对应的JDK。<br>解决方案：在Jenkins的设置中加入JDK的配置。</p><img src="/2017/08/16/2017-08-16-Jenkins-continuous-integration-platform-to-build/Jenkins%E7%9A%84JDK%E9%85%8D%E7%BD%AE.png" title="Jenkins的JDK配置"><p>注意手动录入系统安装的JDK的路径，即在<code>JAVA_HOME</code>输入框手动输入JDK的安装路径，不勾选<code>Install automatically</code></p><h3 id="好用的Jenkins插件"><a href="#好用的Jenkins插件" class="headerlink" title="好用的Jenkins插件"></a>好用的Jenkins插件</h3><h4 id="Parameterized-Remote-Trigger-Plugin-【多slave项目顺序执行】-Parameterized-Trigger-Plugin-【多项目顺序执行】"><a href="#Parameterized-Remote-Trigger-Plugin-【多slave项目顺序执行】-Parameterized-Trigger-Plugin-【多项目顺序执行】" class="headerlink" title="Parameterized Remote Trigger Plugin 【多slave项目顺序执行】 Parameterized Trigger Plugin 【多项目顺序执行】"></a><code>Parameterized Remote Trigger Plugin</code> 【多slave项目顺序执行】 <code>Parameterized Trigger Plugin</code> 【多项目顺序执行】</h4><p>设置项目在某项目执行完成后，再执行当前项目<br>【构建触发器】-【<code>Build after other projects are built</code>】</p><h4 id="Build-periodically【日程表】设置"><a href="#Build-periodically【日程表】设置" class="headerlink" title="Build periodically【日程表】设置"></a><code>Build periodically</code>【日程表】设置</h4><p>设置周期性执行策略</p><blockquote><p>第一个参数代表的是分钟 minute，取值 0<del>59；<br>第二个参数代表的是小时 hour，取值 0</del>23；<br>第三个参数代表的是天 day，取值 1<del>31；<br>第四个参数代表的是月 month，取值 1</del>12；<br>最后一个参数代表的是星期 week，取值 0~7，0 和 7 都是表示星期天。</p></blockquote><p>示例：<br><code>H 8 * * 6</code>：每周六上午8点构建一次<br><code>H * * * *</code>：每小时构建一次<br><code>H 8 3 2 *</code>：每年2月3号8点构建一次</p><h4 id="Git-Parameter【构建分支-amp-Tags参数化】"><a href="#Git-Parameter【构建分支-amp-Tags参数化】" class="headerlink" title="Git Parameter【构建分支&amp;Tags参数化】"></a><code>Git Parameter</code>【构建分支&amp;Tags参数化】</h4><p>适用于项目中配置了”源码管理”的，Git分支直接从”源码管理”中拉取的代码中获取分支信息</p><img src="/2017/08/16/2017-08-16-Jenkins-continuous-integration-platform-to-build/Git_Parameter.png" title="Git_Parameter"><h4 id="List-Git-Branches-Parameter-PlugIn-【构建分支-amp-Tags参数化】plus"><a href="#List-Git-Branches-Parameter-PlugIn-【构建分支-amp-Tags参数化】plus" class="headerlink" title="List Git Branches Parameter PlugIn 【构建分支&amp;Tags参数化】plus"></a><code>List Git Branches Parameter PlugIn</code> 【构建分支&amp;Tags参数化】plus</h4><p>适用于不在项目中配置源码拉取，但是需要去获取源码的分支信息的时候</p><img src="/2017/08/16/2017-08-16-Jenkins-continuous-integration-platform-to-build/%E5%88%86%E6%94%AF%E6%BA%90%E7%A0%81%E9%85%8D%E7%BD%AE.png" title="分支源码配置"><h4 id="Build-User-Vars-Plugin【获取项目构建人】"><a href="#Build-User-Vars-Plugin【获取项目构建人】" class="headerlink" title="Build User Vars Plugin【获取项目构建人】"></a><code>Build User Vars Plugin</code>【获取项目构建人】</h4><p>插件名称：<code>user build vars plugin</code></p><p>变量值表</p><html><body><table border="1"><tr><th>Variable</th><th>Description</th></tr><tr><td>BUILD_USER</td><td>Full name (first name + last name)</td></tr><tr><td>BUILD_USER_EMAIL</td><td>Email address</td></tr><tr><td>BUILD_USER_FIRST_NAME</td><td>First name</td></tr><tr><td>BUILD_USER_ID</td><td>Jenkins user ID</td></tr><tr><td>BUILD_USER_LAST_NAME</td><td>Last name</td></tr></table></body></html><p>在jenkins任务中使用构建变量：注意需要勾选 “Set jenkins user build variables.”</p><h4 id="Naginator【任务失败重新构建插件】"><a href="#Naginator【任务失败重新构建插件】" class="headerlink" title="Naginator【任务失败重新构建插件】"></a><code>Naginator</code>【任务失败重新构建插件】</h4><p>在<code>构建后操作</code>中选择<code>Retry build after failure</code>。<code>Fixed delay</code>填写每次重试的时间延迟，单位是秒。<code>Maximum number of successive failed builds</code>文本框中填写重试次数。</p><h4 id="Publish-Over-SSH【通过ssh构建项目】"><a href="#Publish-Over-SSH【通过ssh构建项目】" class="headerlink" title="Publish Over SSH【通过ssh构建项目】"></a><code>Publish Over SSH</code>【通过ssh构建项目】</h4><h4 id="触发远程构建（例如，使用脚本）"><a href="#触发远程构建（例如，使用脚本）" class="headerlink" title="触发远程构建（例如，使用脚本）"></a><code>触发远程构建（例如，使用脚本）</code></h4><img src="/2017/08/16/2017-08-16-Jenkins-continuous-integration-platform-to-build/%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8_%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E4%BB%A4%E7%89%8C.png" title="构建触发器_身份验证令牌"><p>设置身份验证令牌<code>TOKEN_NAME</code>，可以随意定义。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认参数执行远程构建</span></span><br><span class="line">JENKINS_URL/job/JOB_NAME/build?token=TOKEN_NAME</span><br><span class="line"><span class="comment"># 参数化形式执行远程构建</span></span><br><span class="line">JENKINS_URL/job/JOB_NAME/buildWithParameters?token=TOKEN_NAME&amp;params1=params1&amp;...</span><br></pre></td></tr></table></figure><h4 id="Job-Configuration-History-Plugin【记录项目的修改记录】"><a href="#Job-Configuration-History-Plugin【记录项目的修改记录】" class="headerlink" title="Job Configuration History Plugin【记录项目的修改记录】"></a><code>Job Configuration History Plugin</code>【记录项目的修改记录】</h4><p>在项目中，点击左侧栏中的<code>Job Config History</code>，可以查看该项目的更改历史<br>在<code>Jenkins</code>主目录下，点击左侧栏中的<code>Job Config History</code>，可以查看整个系统的所有修改历史<br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Show system configs only</span><br><span class="line">Show job configs only</span><br><span class="line">Show created <span class="built_in">jobs</span> only</span><br><span class="line">Show deleted <span class="built_in">jobs</span> only</span><br><span class="line">Show all configs</span><br></pre></td></tr></table></figure><p></p><h4 id="Localization-Chinese-Simplified-切换jenkins显示语言为中文"><a href="#Localization-Chinese-Simplified-切换jenkins显示语言为中文" class="headerlink" title="Localization: Chinese (Simplified)切换jenkins显示语言为中文"></a><code>Localization: Chinese (Simplified)</code>切换jenkins显示语言为中文</h4><p>只要安装重启后，jenkins的显示语言就会自动展示为中文</p><h4 id="Startup-Triggerjenkins每次重启或者启动后自动执行任务"><a href="#Startup-Triggerjenkins每次重启或者启动后自动执行任务" class="headerlink" title="Startup Triggerjenkins每次重启或者启动后自动执行任务"></a><code>Startup Trigger</code>jenkins每次重启或者启动后自动执行任务</h4><p>在<code>jenkins</code>项目的配置中，<code>构建触发器</code>中，<code>Build when job nodes start</code>配置项中，设置<code>Quiet period</code>字段为默认值<code>0</code>，表示重启后，没有任何延迟，直接启动。</p><h4 id="Configuration-Slicing-plugin批量修改所有项目的某一个配置"><a href="#Configuration-Slicing-plugin批量修改所有项目的某一个配置" class="headerlink" title="Configuration Slicing plugin批量修改所有项目的某一个配置"></a><code>Configuration Slicing plugin</code>批量修改所有项目的某一个配置</h4><p>在<code>系统管理</code>中，<code>Configuration Slicing</code>打开，可以看多很多的设置项，点击进入自己需要批量设置的项，进行设置。</p><h4 id="Post-build-task用于在jenkins构建完成后，继续执行所需要执行的shell脚本"><a href="#Post-build-task用于在jenkins构建完成后，继续执行所需要执行的shell脚本" class="headerlink" title="Post build task用于在jenkins构建完成后，继续执行所需要执行的shell脚本"></a><code>Post build task</code>用于在jenkins构建完成后，继续执行所需要执行的<code>shell</code>脚本</h4><img src="/2017/08/16/2017-08-16-Jenkins-continuous-integration-platform-to-build/%E6%9E%84%E5%BB%BA%E5%90%8E%E6%B7%BB%E5%8A%A0PostBuildTask.png" title="构建后添加PostBuildTask"> <img src="/2017/08/16/2017-08-16-Jenkins-continuous-integration-platform-to-build/PostBuildTask%E9%85%8D%E7%BD%AE.png" title="PostBuildTask配置"><p>在<code>Script</code>中写入需要执行的<code>shell</code>命令</p><h4 id="extra-columns-视图为List-View视图的列表展示增强插件"><a href="#extra-columns-视图为List-View视图的列表展示增强插件" class="headerlink" title="extra-columns 视图为List View视图的列表展示增强插件"></a><code>extra-columns</code> 视图为<code>List View</code>视图的列表展示增强插件</h4><p>插件离线下载地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/plugins/extra-columns/" target="_blank" rel="noopener">清华大学开源软件镜像站_Index of /jenkins/plugins/extra-columns/</a></p><p>It currently provides the following columns:</p><ul><li><code>Build description</code></li><li><code>Build duration</code></li><li><code>Build parameters</code></li><li><code>Configure build button</code></li><li><code>Disable/enable Project button/icon</code></li><li><code>Job type</code></li><li><code>Last build</code> # 最后一次构建的时间</li><li><code>Last build node</code></li><li><code>Last/current build console</code></li><li><code>Last project configuration modification</code></li><li><code>Periodic build trigger</code></li><li><code>Project description</code></li><li><code>SCM type</code></li><li><code>Agent or label restriction</code></li><li><code>Test result</code></li><li><code>User name</code> # 最后一次构建的执行人</li><li><code>Workspace link</code></li></ul><h4 id="常用插件汇总"><a href="#常用插件汇总" class="headerlink" title="常用插件汇总"></a>常用插件汇总</h4><ul><li><code>Build Environment Plugin</code>构建环境插件，可以进行构建环境比较。</li><li><code>Build Flow Plugin</code>工作流插件，支持DSL脚本定义工作流</li><li><code>Build Graph View Plugin</code>build Flow插件视图（安装后需要重新才能生效）</li><li><code>Build Monitor View</code>使用心得：基于该插件可以实现dashboard功能</li><li><code>Build Pipeline Plugin View</code>Pipeline 管道流图表展示插件</li><li><code>Build Timestamp Plugin</code>任务log时间戳插件，使得job log的每次输出前面都增加当时的时间</li><li><code>Build-timeout Plugin</code>job构建超时插件</li><li><code>BuildResultTrigger Plugin</code>根据其他的job的成功或失败来启动此build。</li><li><code>Cron Column Plugin</code> 通过定时任务例行的运行一些job</li><li><code>Files Found Trigger</code>检测指定的目录，如果发现指定模式的文件则启动build。</li><li><code>HTTP Request Plugin</code>使用心得：在构建前后可以通过该插件以http形式调用各种api接口实现和内部系统的联动</li><li><code>Job Configuration History Plugin</code>使用心得：使job具备版本管理的能力，diff和rollback功能更是非常赞</li><li><code>Job Import Plugin</code>使用心得：可以快速导入其他jenkins集群的已有job，需要认证的jenkins系统导入需要提供凭证才可以</li><li><code>Join Plugin</code>这也是一个触发job的插件，亮点在于它触发job的条件是等待所有当前job的下游的job都完成才会发生。</li><li><code>Multijob Plugin</code>多任务插件</li><li><code>Naginator Plugin</code>任务重试插件</li><li><code>Parameterized Trigger Plugin</code>这是一个扩展型的插件，使各个job连接的时候可以传递一些job相关的信息</li><li><code>Persistent Parameter</code>参数化插件，用于在下次参数化构建时，保留前一次的选择记录</li><li><code>Periodic Backup</code>使用心得：备份是运维一个系统必须要保障的事情，该插件的恢复功能可能不可用，需要手工进行，好处在于可以定时备份</li><li><code>Publish Over SSH Plugin</code>通过ssh发布文件</li><li><code>Rebuild Plugin</code>重新执行插件</li><li><code>Status Monitor Plugin</code>构建状态插件</li><li><code>ws-cleanup Plugin</code>workspace清理插件</li><li><code>Node and Label parameter</code> 这个插件增加了一个新的参数类型，Node 和 Label，从而使用户通过参数可以选择项目构建运行的节点。</li></ul><h3 id="Jenkins脚本"><a href="#Jenkins脚本" class="headerlink" title="Jenkins脚本"></a><code>Jenkins</code>脚本</h3><h4 id="批量修改脚本的丢弃旧的构建设置项设置"><a href="#批量修改脚本的丢弃旧的构建设置项设置" class="headerlink" title="批量修改脚本的丢弃旧的构建设置项设置"></a>批量修改脚本的<code>丢弃旧的构建</code>设置项设置</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jenkins.model.Jenkins</span><br><span class="line"><span class="keyword">import</span> hudson.model.Job</span><br><span class="line"><span class="keyword">import</span> jenkins.model.BuildDiscarderProperty</span><br><span class="line"><span class="keyword">import</span> hudson.tasks.LogRotator</span><br><span class="line"><span class="comment">// 遍历所有的任务</span></span><br><span class="line">Jenkins.instance.allItems(Job).each &#123; job -&gt;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> ( job.isBuildable() &amp;&amp; job.supportsLogRotator() &amp;&amp; job.getProperty(BuildDiscarderProperty) == <span class="literal">null</span>) &#123;</span><br><span class="line">    println <span class="string">" \"$&#123;job.fullDisplayName&#125;\" 处理中"</span></span><br><span class="line"> </span><br><span class="line">    job.addProperty(<span class="keyword">new</span> BuildDiscarderProperty(<span class="keyword">new</span> LogRotator (<span class="number">3</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">10</span>)))</span><br><span class="line">    println <span class="string">"$job.name 已更新"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">LogRotator 构造参数分别为：</span></span><br><span class="line"><span class="comment">daysToKeep:  If not -1, history is only kept up to this days.</span></span><br><span class="line"><span class="comment">numToKeep: If not -1, only this number of build logs are kept.</span></span><br><span class="line"><span class="comment">artifactDaysToKeep: If not -1 nor null, artifacts are only kept up to this days.</span></span><br><span class="line"><span class="comment">artifactNumToKeep: If not -1 nor null, only this number of builds have their artifacts kept.</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>环境搭建</category>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓无线ADB连接</title>
    <url>/2017/11/04/2017-11-04-Android-wireless-ADB-connection/</url>
    <content><![CDATA[<ol><li><p>在手机上安装<code>QPython</code><br>GitHub上的<a href="https://github.com/qpython-android/qpython/releases" target="_blank" rel="noopener">下载链接</a></p></li><li><p>在手机上打开<code>QPython</code>软件的<code>Terminal</code>，安装<code>uiautomator2</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Since uiautomator2 is still developing, you have to add --pre to install development version</span></span><br><span class="line">pip install --pre uiautomator2</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>在手机上安装<code>app-uiautomator.apk</code><br>最新版<a href="https://github.com/openatx/android-uiautomator-server/releases" target="_blank" rel="noopener">下载链接</a></p></li><li><p>导入最新版的<code>atx-agent</code>到手机中<br>最新版<a href="https://github.com/openatx/atx-agent/releases" target="_blank" rel="noopener">下载地址</a><br>下载以<code>linux_armv7.tar.gz</code>结尾的二进制包。绝大部分手机都是linux-arm架构的。<br>解压出<code>atx-agent</code>文件，导入到手机中并启动：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb push atx-agent /data/<span class="built_in">local</span>/tmp</span><br><span class="line">adb shell chmod 755 /data/<span class="built_in">local</span>/tmp/atx-agent</span><br><span class="line"><span class="comment"># launch atx-agent in daemon mode</span></span><br><span class="line">adb shell /data/<span class="built_in">local</span>/tmp/atx-agent -d</span><br><span class="line"><span class="comment"># example: server started, listening on 192.168.28.230:7912</span></span><br></pre></td></tr></table></figure><p>假设手机的地址是<code>$DEVICE_URL</code>(eg: <code>http://192.168.28.230:7912</code>)</p></li><li><p>无线访问手机系统</p><ol><li><p>获取当前程序版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl <span class="variable">$DEVICE_URL</span>/version</span><br><span class="line"><span class="comment"># expect example: 0.0.7</span></span><br></pre></td></tr></table></figure></li><li><p>安装应用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST -d url=<span class="string">"http://some-host/some.apk"</span> <span class="variable">$DEVICE_URL</span>/install</span><br><span class="line"><span class="comment"># expect example: install id</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># get install progress</span></span><br><span class="line">curl -X GET <span class="variable">$DEVICE_URL</span>/install/1</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"1"</span>,<span class="string">"totalSize"</span>:985435,<span class="string">"copiedSize"</span>:16951,<span class="string">"message"</span>:<span class="string">"downloading"</span>&#125;</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"1"</span>,<span class="string">"totalSize"</span>:985435,<span class="string">"copiedSize"</span>:985435,<span class="string">"message"</span>:<span class="string">"success installed"</span>&#125;</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"1"</span>,<span class="string">"totalSize"</span>:985435,<span class="string">"copiedSize"</span>:342641,<span class="string">"message"</span>:<span class="string">"error install"</span>,<span class="string">"error"</span>:<span class="string">"exit status 1"</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>上传文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 上传到/sdcard目录下 (url以/结尾)</span></span><br><span class="line">curl -F <span class="string">"file=@somefile.txt"</span> <span class="variable">$DEVICE_URL</span>/upload/sdcard/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传到/sdcard/tmp.txt</span></span><br><span class="line">curl -F <span class="string">"file=@somefile.txt"</span> <span class="variable">$DEVICE_URL</span>/upload/sdcard/tmp.txt</span><br></pre></td></tr></table></figure></li><li><p>程序自升级<br>升级程序从gihub releases里面直接下载，升级完后自动重启</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 升级到最新版</span></span><br><span class="line">curl 10.0.0.1:7912/upgrade</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定升级的版本</span></span><br><span class="line">curl <span class="string">"<span class="variable">$DEVICE_URL</span>/upgrade?version=0.0.7"</span></span><br></pre></td></tr></table></figure></li><li><p><code>ATX Log Path</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/sdcard/atx-agent.log</span><br></pre></td></tr></table></figure></li></ol></li></ol><p>RESOURCE:<br><a href="https://testerhome.com/topics/10361" target="_blank" rel="noopener">testerhome_10361</a><br><a href="https://testerhome.com/topics/10298" target="_blank" rel="noopener">testerhome_10298</a><br><a href="https://github.com/openatx/uiautomator2" target="_blank" rel="noopener">github_uiautomator2</a><br><a href="https://github.com/openatx/android-uiautomator-server" target="_blank" rel="noopener">github_android-uiautomator-server</a><br><a href="https://github.com/openatx/atx-agent" target="_blank" rel="noopener">github_atx-agent</a><br><a href="https://github.com/qpython-android/qpython" target="_blank" rel="noopener">github_qpython</a></p>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>adb</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven-Web实例从服务器部署到Jenkins集成</title>
    <url>/2017/06/24/2017-06-24-Maven-Web-to-Jenkins-integration/</url>
    <content><![CDATA[<h4 id="Jenkins环境准备"><a href="#Jenkins环境准备" class="headerlink" title="Jenkins环境准备"></a>Jenkins环境准备</h4><ol><li><p>Jenkins安装，这个就不说了</p></li><li><p>Jenkins环境配置</p><p>进入 系统管理-Global Tool Configuration<br>配置JDK：建议放到用户可操作的目录下，如：/home/test/devtool/jdk1.8.0_91<br>配置MVN：建议放到用户可操作的目录下，如：/home/test/devtool/apache-maven-3.3.9</p><a id="more"></a></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">test</span>@<span class="built_in">test</span>-devtesting-00001:~/devtool$ ll</span><br><span class="line">total 8308</span><br><span class="line">drwxrwxr-x  3 <span class="built_in">test</span> <span class="built_in">test</span>    4096 Jun 23 16:18 ./</span><br><span class="line">drwx------ 18 <span class="built_in">test</span> <span class="built_in">test</span>    4096 Jun 24 12:43 ../</span><br><span class="line">drwxrwxr-x  6 <span class="built_in">test</span> <span class="built_in">test</span>    4096 Jun  6 21:39 apache-maven-3.3.9/</span><br><span class="line">lrwxrwxrwx  1 <span class="built_in">test</span> <span class="built_in">test</span>      25 Jun 23 16:18 jdk1.8.0_91/</span><br></pre></td></tr></table></figure><h4 id="服务器环境准备"><a href="#服务器环境准备" class="headerlink" title="服务器环境准备"></a>服务器环境准备</h4><ol><li>首先需要把服务器加入到Jenkins的slave中，即配置Jenkins的从节点</li><li>服务器环境配置：建议<strong>配置完全同Jenkins中的环境配置</strong>，包括JDK和MVN，不然会有很多让人头痛无法解决的问题</li></ol><h4 id="服务器部署WEB实例"><a href="#服务器部署WEB实例" class="headerlink" title="服务器部署WEB实例"></a>服务器部署WEB实例</h4><ol><li><p>在用户目录下新建两个目录，一个用来存放源代码，一个用来存放Web实例</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">test</span>@<span class="built_in">test</span>-devtesting-00001:~$ ll</span><br><span class="line">total 144</span><br><span class="line">drwx------ 18 <span class="built_in">test</span> <span class="built_in">test</span>  4096 Jun 24 12:43 ./</span><br><span class="line">drwxr-xr-x  7 root root  4096 May 24 17:55 ../</span><br><span class="line">drwxrwxr-x  3 <span class="built_in">test</span> <span class="built_in">test</span>  4096 Jun 23 16:18 devtool/						<span class="comment"># 环境配置</span></span><br><span class="line">drwxrwxr-x  3 <span class="built_in">test</span> <span class="built_in">test</span>  4096 Jun 23 16:04 jenkins/						<span class="comment"># Jenkins工作目录</span></span><br><span class="line">drwxr-xr-x 12 <span class="built_in">test</span> <span class="built_in">test</span>  4096 Jun 20 10:58 projects/					<span class="comment"># 源代码目录</span></span><br><span class="line">drwxrwxr-x 16 <span class="built_in">test</span> <span class="built_in">test</span>  4096 Jun 23 14:52 tomcats/						<span class="comment"># Web实例目录</span></span><br></pre></td></tr></table></figure><p>在projects目录下，每个项目会有一个源代码的git目录；每个源代码的git目录会对应一个Web实例地址，即一个tomcat实例</p></li><li><p>使用<code>git clone git-address</code>命令拉取源代码到<code>projects</code>目录下</p></li><li><p>在<code>tomcats</code>目录下新建一个tomcat实例，命名为自己需要的名称，最好从名称就比较好辨识</p></li><li><p>修改<code>tomcat</code>目录下的<code>conf</code>目录下的<code>server.xml</code>文件，修改本地和远程端口映射</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">"22221"</span> <span class="attr">shutdown</span>=<span class="string">"SHUTDOWN"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--该port也需要修改，不可重复--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.startup.VersionLoggerListener"</span> /&gt;</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"10021"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line">    &lt;!--这里的port对应服务器上的端口，不可重复，否知会引起冲突，无法部署成功--&gt;</span><br><span class="line">               connectionTimeout="20000"</span><br><span class="line">               redirectPort="11121" URIEncoding="utf-8"</span><br><span class="line">               <span class="comment">&lt;!--这里的redirectPort也需要修改，不可重复--&gt;</span></span><br><span class="line">               maxPostSize="0" maxHttpHeaderSize="81920"/&gt;</span><br></pre></td></tr></table></figure><p>如果只是部署在本地，也需要确保端口不冲突</p></li><li><p>编写部署的脚本<code>deploy.sh</code>，放到<code>tomcat</code>目录下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">set</span> -m</span><br><span class="line"><span class="comment">#set var</span></span><br><span class="line">dir_src=<span class="string">"/home/test/projects/git-file"</span></span><br><span class="line">dir_tomcat_home=<span class="string">"/home/test/tomcats/test-tomcat"</span></span><br><span class="line">file_war=<span class="string">"ROOT.war"</span></span><br><span class="line">file_catalina_out=<span class="variable">$dir_tomcat_home</span><span class="string">"/logs/catalina.out"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----update code from git begin"</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$dir_src</span>																				<span class="comment"># 进入源代码目录</span></span><br><span class="line">git checkout develop																	<span class="comment"># checkout需要的分支</span></span><br><span class="line"><span class="comment">#git checkout master</span></span><br><span class="line">git pull</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----update code from git end"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----build project begin"</span></span><br><span class="line">mvn clean install -U -DskipTests=<span class="literal">true</span>													<span class="comment"># maven编译war包</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----build project end"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----shutdown tomcat"</span></span><br><span class="line">ps -ef | grep <span class="variable">$dir_tomcat_home</span> | awk <span class="string">'&#123; print $2 &#125;'</span> | xargs <span class="built_in">kill</span> -9						<span class="comment"># kill当前tomcat进程</span></span><br><span class="line">sleep 1s</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----reset war file"</span></span><br><span class="line">rm -r <span class="variable">$dir_tomcat_home</span>/webapps/ROOT</span><br><span class="line">cp -r <span class="variable">$dir_src</span>/module-name/target/<span class="variable">$file_war</span> <span class="variable">$dir_tomcat_home</span>/webapps/ROOT.war			<span class="comment"># 拷贝新的war包到$dir_tomcat_home/webapps目录下，并命名为ROOT.war</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----start tomcat "</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$dir_tomcat_home</span></span><br><span class="line">touch logs/catalina.out</span><br><span class="line">sh bin/startup.sh &amp;																		<span class="comment"># 启动tomcat，并自动部署war包</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----show pid"</span></span><br><span class="line">tail -f logs/catalina.out																<span class="comment"># 实时日志输出</span></span><br></pre></td></tr></table></figure></li><li><p>部署服务<br>进入<code>tomcat</code>目录下<br>赋予脚本可执行权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod a+x deploy.sh</span><br></pre></td></tr></table></figure><p>执行脚本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./deploy.sh</span><br></pre></td></tr></table></figure><p>至此，即可完成在服务器上的Web实例部署。</p></li></ol><h4 id="Jenkins集成Web实例部署"><a href="#Jenkins集成Web实例部署" class="headerlink" title="Jenkins集成Web实例部署"></a>Jenkins集成Web实例部署</h4><ol><li><p>新建一个<code>Jenkins</code>项目<br>因为我们的Web项目是从maven进行编译的，所以在新建项目时，选择<code>构建一个maven项目</code></p></li><li><p><code>Jenkins</code>项目配置<br>勾选<code>参数化构建过程</code></p><img src="/2017/06/24/2017-06-24-Maven-Web-to-Jenkins-integration/%E5%8F%82%E6%95%B0%E5%8C%96%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B.png" title="参数化构建过程"><p>指定服务器</p><img src="/2017/06/24/2017-06-24-Maven-Web-to-Jenkins-integration/%E6%8C%87%E5%AE%9Aslave.png" title="指定slave"><p>配置源代码地址，设置分支变量获取</p><img src="/2017/06/24/2017-06-24-Maven-Web-to-Jenkins-integration/%E9%85%8D%E7%BD%AEgit%E5%9C%B0%E5%9D%80.png" title="配置git地址"><p>配置项目构建名称<code>构建次数-分支名</code></p><img src="/2017/06/24/2017-06-24-Maven-Web-to-Jenkins-integration/%E8%AE%BE%E7%BD%AE%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E5%90%8D%E7%A7%B0.png" title="设置项目构建名称"><p>Maven编译配置，有些git项目可能<code>pom.xml</code>文件并不在项目根目录下，需要手动指定，且是相对路径</p><img src="/2017/06/24/2017-06-24-Maven-Web-to-Jenkins-integration/maven%E7%BC%96%E8%AF%91%E9%85%8D%E7%BD%AE.png" title="maven编译配置"><p>最后增加<code>Execute shell</code>，完成war包部署</p><img src="/2017/06/24/2017-06-24-Maven-Web-to-Jenkins-integration/%E9%83%A8%E7%BD%B2%E4%BB%A3%E7%A0%81%E9%85%8D%E7%BD%AE.png" title="部署代码配置"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -o errexit</span><br><span class="line"><span class="built_in">set</span> -o xtrace</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> BUILD_ID=pleaseDontKillMe																		<span class="comment"># 该项设置，可以避免Jenkins部署实例的时候，部署结束，进程就被kill</span></span><br><span class="line"></span><br><span class="line">dir_tomcat_home=<span class="string">"/home/test/tomcats/test-tomcat"</span>														<span class="comment"># 设置tomcat实例变量</span></span><br><span class="line">file_war=<span class="string">"ROOT.war"</span>																						<span class="comment"># 代码打出的war包名称，需要自己先手动打包一次知道名称后再指定</span></span><br><span class="line">file_catalina_out=<span class="variable">$&#123;dir_tomcat_home&#125;</span><span class="string">"/logs/catalina.out"</span>												<span class="comment"># 设置实时日志输出目录变量</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----shutdown tomcat"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ps -ef | grep $&#123;dir_tomcat_home&#125; | awk '&#123; print $2 &#125;' | xargs kill -9</span></span><br><span class="line">ps auxwww | grep java | grep <span class="variable">$&#123;dir_tomcat_home&#125;</span> | awk <span class="string">'&#123;print $2&#125;'</span> | xargs <span class="built_in">kill</span> -9 2&gt;/dev/null;			<span class="comment"># 获取并kill当前tomcat进程，如果当前进程存在的话</span></span><br><span class="line">sleep 1s</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----reset war file"</span></span><br><span class="line">rm -rf <span class="variable">$&#123;dir_tomcat_home&#125;</span>/webapps/ROOT;																	<span class="comment"># 移除war包解压后的目录</span></span><br><span class="line">rm -rf <span class="variable">$&#123;dir_tomcat_home&#125;</span>/webapps/ROOT.war;																<span class="comment"># 移除前一次部署的war包</span></span><br><span class="line">cp -r <span class="variable">$&#123;WORKSPACE&#125;</span>/module-name/target/<span class="variable">$file_war</span> <span class="variable">$&#123;dir_tomcat_home&#125;</span>/webapps/ROOT.war						<span class="comment"># 拷贝新的war包到$&#123;dir_tomcat_home&#125;/webapps目录下，并命名为ROOT.war</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----start tomcat"</span></span><br><span class="line">sh <span class="variable">$&#123;dir_tomcat_home&#125;</span>/bin/startup.sh;																	<span class="comment"># 启动tomcat，自动部署war包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#echo "----show pid"</span></span><br><span class="line"><span class="comment">#tail -f $&#123;dir_tomcat_home&#125;/logs/catalina.out</span></span><br></pre></td></tr></table></figure><p>BUID_ID是jenkins的一个特殊的运行时变量，之所以这么做，原因就是直接使用shell启动tomcat是不行的，因为jenkins进程退出后其创建的、包括其调用的脚本创建的进程都将被一起销毁<br>至此<code>Jenkins</code>项目配置完成，保存即可。</p><p>附带另一个部署脚本：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh  </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Tomcat:<span class="variable">$1</span>"</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Module:<span class="variable">$2</span>"</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"++++++++++++++++++++++++++++++++"</span>  </span><br><span class="line">pid=$(jps -v |grep <span class="variable">$1</span> | grep -v <span class="string">'grep $1'</span> | awk <span class="string">'&#123;print $1&#125;'</span>)  </span><br><span class="line"><span class="comment">#if instance is running,shutdown it!  </span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$pid</span>"</span> ];<span class="keyword">then</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Current instance is running,pid:<span class="variable">$pid</span>"</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Shutdown now!"</span>  </span><br><span class="line">    <span class="built_in">cd</span> <span class="variable">$1</span>/bin  </span><br><span class="line">    ./shutdown.sh  </span><br><span class="line">    sleep 3s  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line"><span class="comment">#but somethimes,shutdown operation will be failure!  </span></span><br><span class="line"><span class="comment">#check status for 10 times  </span></span><br><span class="line">i=0  </span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -lt 10 ]  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">    pid=$(jps -v |grep <span class="variable">$1</span> | grep -v <span class="string">'grep $1'</span> | awk <span class="string">'&#123;print $1&#125;'</span>)  </span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$pid</span>"</span> ];<span class="keyword">then</span>  </span><br><span class="line">        sleep 1s  </span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$i</span> -ge 10 ]  </span><br><span class="line">        <span class="keyword">then</span>  </span><br><span class="line">            <span class="built_in">kill</span> -9 <span class="variable">$pid</span>  </span><br><span class="line">            <span class="built_in">break</span>  </span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">            ((i++))  </span><br><span class="line">        <span class="keyword">fi</span>  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">        <span class="built_in">break</span>  </span><br><span class="line">    <span class="keyword">fi</span>  </span><br><span class="line"><span class="keyword">done</span>  </span><br><span class="line"><span class="comment">#remove current application files  </span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$1</span>/webapps  </span><br><span class="line">rm -r -f ROOT  </span><br><span class="line">rm -f ROOT.war  </span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$1</span>/bin  </span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$WORKSPACE</span>/<span class="variable">$2</span>/target  </span><br><span class="line">cp ROOT.war <span class="variable">$1</span>/webapps  </span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$1</span>/bin  </span><br><span class="line">./startup.sh  </span><br><span class="line">sleep 3s  </span><br><span class="line">pid=$(jps -v |grep <span class="variable">$1</span> | grep -v <span class="string">'grep $1'</span> | awk <span class="string">'&#123;print $1&#125;'</span>)  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"restart ok!"</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"pid:<span class="variable">$pid</span>"</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"++++++++++++++++++++++++++++++++"</span></span><br></pre></td></tr></table></figure><p>脚本使用的脚本：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">BUILD_ID=dontKillMe /home/deploy.sh <span class="string">"&lt;tomcat_home&gt;"</span> <span class="string">"&lt;module_name&gt;"</span></span><br></pre></td></tr></table></figure><p>这个脚本，就是执行“关闭tomcat”、“删除文件”、“复制文件”、“重启tomcat”过程；脚本中可以引用jenkins的一些系统变量，比如“$WORKSPACE”表示当前build项目的工作空间；此脚本接收2个参数，我们约定，第一个参数表示“tomcat home路径”，第二个参数表示“项目module名称”用于告知需要部署那个web项目（这在多modules项目中有用）。</p></li><li><p>执行构建</p><img src="/2017/06/24/2017-06-24-Maven-Web-to-Jenkins-integration/%E5%88%86%E6%94%AF%E6%9E%84%E5%BB%BA.png" title="分支构建"></li></ol>]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>如何做好一个执行者</title>
    <url>/2017/12/04/2017-12-04-How-to-be-a-performer/</url>
    <content><![CDATA[<h4 id="如何做好基础的执行者"><a href="#如何做好基础的执行者" class="headerlink" title="如何做好基础的执行者"></a>如何做好基础的执行者</h4><ol><li><p>对于安排的任务，及时跟进，及时了解，及时产出结果，主动同步结果给leader。</p></li><li><p>有好的工作习惯，每天工作结束，对于项目情况有一个简单的总结，并能主动同步给leader。</p></li><li><p>遇到阻塞流程的问题，能够及时寻找帮助，寻找解决问题的办法。</p><a id="more"></a><p>如果遇到问题只知道自己琢磨，那就会浪费很多时间，导致项目延期；<br>如果不能及时沟通，遇到项目临时出现变故，需要紧急协调资源，你只会束手无策，不知所以；<br>职场是一个需要与人沟通的环境，如果只是单纯的基础执行者，独立模块的功能你也许能够很好的解决，对于多方合作的项目你将束手无策，当然也就不会混的太好。<br>所以有问题，主动沟通，不用怕，不用担心，不用害羞，迈出了第一步，才会有第二步。<br>做到如上，很简单，只要把心思放在工作上，任何人都可以搞定。</p></li></ol><h4 id="如何晋级为一个优秀的执行者"><a href="#如何晋级为一个优秀的执行者" class="headerlink" title="如何晋级为一个优秀的执行者"></a>如何晋级为一个优秀的执行者</h4><ol><li>工作中，能够主动思考，更好的解决方案，并善于总结。</li><li>对于工作中遇到的棘手问题解决后，能够梳理成自己的方法论，并分享给同事，共同进步。</li><li>时刻思考着，如何去通过改善流程，或者去引入小的工具，提高工作效率，更高效的执行，节省资源。<br>如上，一样可以轻松胜任，不需要什么核心技术，只要你想，都可以做到。</li></ol><h4 id="基础执行者的核心竞争力"><a href="#基础执行者的核心竞争力" class="headerlink" title="基础执行者的核心竞争力"></a>基础执行者的核心竞争力</h4><ol><li>养成好的工作习惯，善于总结，建立自己的知识体系。<br>如果单纯只是不断的执行，没有积累总结，那永远只是一个执行者，不求上进，也就只能是低级的执行者（都不能算初级执行者，初级是满足职位要求，低级连岗位需求都做不好），久而久之，只能被淘汰。</li><li>对于交代的任务，能够主动沟通，主要推进，促使任务顺畅完成。</li><li>能够不骄不躁，把简单的事情，做到极致。</li></ol>]]></content>
      <categories>
        <category>TestTheory</category>
      </categories>
      <tags>
        <tag>测试基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>TESTER的核心价值</title>
    <url>/2017/12/08/2017-12-08-TESTER&#39;s-core-values/</url>
    <content><![CDATA[<p>我认为当前测试人员的核心价值是加速整个项目的反馈以及对产品的快速验证。</p><p>这两项价值中又各自有三项主要工作：</p><a id="more"></a> <img src="/2017/12/08/2017-12-08-TESTER's-core-values/TESTER%E7%9A%84%E6%A0%B8%E5%BF%83%E4%BB%B7%E5%80%BC.png" title="TESTER的核心价值"><h4 id="加速反馈"><a href="#加速反馈" class="headerlink" title="加速反馈"></a>加速反馈</h4><ol><li><p>促进沟通<br>测试人员在整个交付团队里至关重要的工作就是促进整个项目的沟通，需要和产品团队一起工作做需求的定义，和开发团队一起工作写自动化的验证，保障项目组之间对于目标和实现都能够达成一致。<br>在这项工作中，最重要的能力是热情，看起来很虚，但是只有充满热情的人员才可能实现足够的沟通，同时高效的沟通能力也是非常重要的能力，这方面需要一些思维和沟通的工具和训练。<br>还有一个重要的能力就是能够想到一些促进项目组沟通的办法（例如交换三色卡片），这个算是一种灵气吧，但相信也和热情有很大关系。</p></li><li><p>持续交付基础设施的搭建<br>测试人员应该主持团队持续交付基础设施的搭建，从集成开始到环境自动部署，提交测试验收测试的自动触发，运行，结构展示等等，总之就是持续交付整套基础设施。<br>本着不重复造轮子的原则，这项工作的主要能力就是对业界相关工具的掌握和使用的能力，当然整合可能涉及到一些二次开发或者自己搭个WEB。并且能够像一个产品经理对产品负责一样，能够及时看到项目组使用这套基础设施的实际需求和问题并能够持续改进。<br>这里面的主要需要的能力是技术视野、工具使用的能力，以及英文文档的阅档（基本上能看的说明文档都是英文的官方文档）和平台搭建的能力。</p></li><li><p>全流程反馈规则的制定<br>除了基础设施和高效的沟通，在整个团队工作过程中还是需要制定很多各种有益的规则来促进反馈（例如对产品需求的要求，单元测试覆盖的要求，代码规范的要求等等等等）。<br>规则应该和项目组的实际情况相结合，而且很多规则并不是所有人都一开始能欣然接受，所以一方面要能够看到目前的问题和瓶颈来制定相关规则来改善更重要的是能够说服项目组的能力（当然这个能力不是说舌战群儒的说话术，更多是技术上能够说得明白，自己能够先做一些实践来证明有效等）</p></li></ol><h4 id="快速验证"><a href="#快速验证" class="headerlink" title="快速验证"></a>快速验证</h4><ol><li><p>整体角度考虑对其他部分的影响<br>测试人员的工作效率取决于他对软件和项目的理解，而不是他掌握的测试技术。（理解产品、理解用户期望、理解产品架构、了解产品元素，项目团队）在迭代中开发更关注当前功能，而测试需要做的是实时考虑对系统其它部分、相关系统的影响。<br>因此测试最应该维护的是系统当前的全貌、架构、模块调用以及核心用例。因此对项目整体的熟悉程度是测试人员不变的核心能力之一。</p></li><li><p>风险，优先级选择<br>这一项其实算是测试人员的看家本领。整个测试分析体系的知识中，最重要的基础之一就是“取舍”，选择更高优先级，更有代表性的case来减少整体case的执行数量，这个技能之于测试相当于算法的掌握之于开发。<br>在快速迭代的过程中对于优先级的选择重要性更高，因为很多时候要承担更多风险来追求交付速度，风险和速度之间的平衡才是最见功力的。这里主要是测试分析能力，RBT测试的掌握等等这些基本能力。<br>测试人员应该积累多种测试技术，综合应用它们，把一个“网”织的更密的性价比远低于用各种不同的“网”来防护。</p></li><li><p>自动化回归<br>自动化回归作为整个持续交付中的核心，重要性不用多说，怎么做好自动化回归是个很大的话题，另外找机会总结。这里只提我的一个观点。要做好和维护好一个真正有效的自动化回归，对于case和数据的设计&gt;自动化的架构&gt;编码能力。所以坚决反对不是本团队的人，不了解整个产品的人来做，也坚决反对简单按模块分解给不同的人，用case堆砌的模式做。<br>同核心用例一样，要以整体视角来做你的自动化回归，好的实践有狠多，还是另找机会总结。</p></li></ol><p>结论：<br>在持续交付的团队中，测试人员最重要的能力是对项目整体的掌握程度，技术视野以及热情。然后厚实的编码能力和测试分析能力也是必不可少的基础。反省一下，之前在招人过程中只注意了后面两项，最重要的能力项没有设计很好的题目和方法来考察。不过感觉前面的能力不光和人本身有关，团队氛围也是能够影响前面能力表达的重要因素。</p>]]></content>
      <categories>
        <category>TestTheory</category>
      </categories>
      <tags>
        <tag>测试基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>TESTER面试官</title>
    <url>/2017/12/10/2017-12-10-TESTER-Interviewer/</url>
    <content><![CDATA[<h4 id="筛选简历"><a href="#筛选简历" class="headerlink" title="筛选简历"></a>筛选简历</h4><ol><li><p>首先看学历和专业，这样就可以pass掉好多简历了。</p></li><li><p>再看工作岗位，项目经验。项目经验则需要和简历上的工作技能结合着一起看。一般项目经验里有的才是真实使用的。没有的话，就需要在面试时沟通，看是自学的，还是掺水了。</p></li><li><p>如果工作经验符合要求，技能和项目经验过关就可以约面了。</p><a id="more"></a></li></ol><h4 id="面试问题"><a href="#面试问题" class="headerlink" title="面试问题"></a>面试问题</h4><ol><li>项目介绍，工作内容介绍，说的条理清楚的，说明工作中用心总结了，第一印象比较重要。</li><li>简历上写的技能，工作中是怎么使用的？</li><li>工作中遇到困难，怎么处理的？遇到难复现的bug？与开发沟通不畅？项目紧急无法推动等等？这个主要是看面试者平时工作中解决问题的能力和沟通能力。</li><li>上份工作有哪些成长，优势有哪些？</li><li>除了工作中用到的，平时有没有其他方面的学习？这个是考察自主学习能力的。</li><li>离职原因？主要是看面试者的稳定性如何</li><li>觉得自己目前的能力与在这个工作年限应该具备的能力相符么？</li><li>还有没有什么优势，在面试过程中没有展现出来的？</li><li>你觉得你目前等级的上一级是什么状态？考察面试者对于自己的职业发展有没有去好好考虑过</li><li>你最擅长的技术是什么？</li><li>你的职业规划是怎么样的？</li><li>职业生涯，做的最有成就感的事？</li><li>为自己喜欢的事，做过什么特别的努力？</li><li>怎么确保一个需求上线没有问题？</li><li>目前的流程，是否有什么可以优化的点？</li><li>对于领导交代的任务，你会以什么样的方式来完成？</li><li>你的测试理论体系是怎么建立起来的？</li><li>什么情况下要做性能测试？</li></ol><h4 id="对项目经验描述的建议"><a href="#对项目经验描述的建议" class="headerlink" title="对项目经验描述的建议"></a>对项目经验描述的建议</h4><ol><li>什么类型项目，解决什么问题，针对的用户群，用户量级，项目业务流概述等。</li><li>主要负责什么内容，有哪些技术手段去保证质量。</li><li>什么语言，什么部署环境。</li><li>项目团队成员结构、人员占比等。</li></ol><h4 id="简历意见"><a href="#简历意见" class="headerlink" title="简历意见"></a>简历意见</h4><ol><li>基本信息中，添加关键字，简单、直接的提炼出自己的核心能力和技能。</li><li>自我评价中，尽可能的提炼自己掌握的测试相关技能，简单、直接，<code>不写自己不熟悉的技能，不要给自己挖坑</code>。后面加上几段话，用精炼的语句描述自己的核心价值，也可简要说明在上架公司的核心职责。</li><li>工作经验，不要拖沓写一堆，要用精炼的语言描述清楚产品的情况，然后分点说明自己的具体职责。</li><li>简历一般两页就够了，排版要干练清爽，不要花哨。</li></ol>]]></content>
      <categories>
        <category>TestTheory</category>
      </categories>
      <tags>
        <tag>测试基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>测试人员需要的数据库知识</title>
    <url>/2017/12/03/2017-12-03-Database-knowledge-required-by-testers/</url>
    <content><![CDATA[<h4 id="第一阶段、基础需求"><a href="#第一阶段、基础需求" class="headerlink" title="第一阶段、基础需求"></a>第一阶段、基础需求</h4><ol><li><p>知道常用的数据库类型<br>MySQL、MSSQL、Oracle、Memcached、Redis、MongoDB</p></li><li><p>数据库的安装、部署，基础使用<br>至少得会自己在服务器或自己电脑上安装个数据库</p><a id="more"></a></li><li><p>常用的数据库连接工具<br>WorkBench、Navicat、Sequel Pro等</p></li><li><p>数据库的基本配置<br>修改密码，添加用户等</p></li><li><p>库/表操作<br>创建库/表，删除库/表，查看库/表</p></li><li><p>基本命令<br>基本的增删改查语句</p></li></ol><h4 id="第二阶段、一些对数据有强需求的业务测试"><a href="#第二阶段、一些对数据有强需求的业务测试" class="headerlink" title="第二阶段、一些对数据有强需求的业务测试"></a>第二阶段、一些对数据有强需求的业务测试</h4><ol><li><p>备份、还原数据库</p></li><li><p>稍微复杂点的SQL<br>多表查询、子查询 等等</p></li><li><p>存储过程 、视图 等</p></li><li><p>数据导入、导出数据 等</p></li><li><p>造数据<br>实际测试过程中，经常需要通过数据库造一些测试数据</p></li></ol><h4 id="第三阶段、数据库的一些优化知识安全知识"><a href="#第三阶段、数据库的一些优化知识安全知识" class="headerlink" title="第三阶段、数据库的一些优化知识安全知识"></a>第三阶段、数据库的一些优化知识安全知识</h4><p>如慢sql 、sql优化、使用规范等，主要是方便定位问题、性能优化 等</p><p>待补充~</p>]]></content>
      <categories>
        <category>TestTheory</category>
      </categories>
      <tags>
        <tag>测试基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>账号体系测试总结</title>
    <url>/2017/12/11/2017-12-11-Account-system-test-summary/</url>
    <content><![CDATA[<h3 id="管理后台账号"><a href="#管理后台账号" class="headerlink" title="管理后台账号"></a>管理后台账号</h3><h3 id="客户端账号"><a href="#客户端账号" class="headerlink" title="客户端账号"></a>客户端账号</h3><h3 id="客户端账号需要登录后台管理"><a href="#客户端账号需要登录后台管理" class="headerlink" title="客户端账号需要登录后台管理"></a>客户端账号需要登录后台管理</h3>]]></content>
      <categories>
        <category>WorkSummary</category>
      </categories>
      <tags>
        <tag>worksummary</tag>
      </tags>
  </entry>
  <entry>
    <title>Robot-Framework的几点总结</title>
    <url>/2017/12/16/2017-12-16-Summary-of-Robot-Framework/</url>
    <content><![CDATA[<h4 id="命令行执行RF用例"><a href="#命令行执行RF用例" class="headerlink" title="命令行执行RF用例"></a>命令行执行RF用例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行整个项目下的所有用例</span></span><br><span class="line">pybot /opt/robotframework/</span><br><span class="line"><span class="comment"># 执行某个suite中的所有用例</span></span><br><span class="line">pybot /opt/robotframework/rf.robot</span><br><span class="line"><span class="comment"># 执行具体的某个用例</span></span><br><span class="line">pybot --<span class="built_in">test</span> case_1 /opt/robotframework/rf.robot</span><br><span class="line"><span class="comment"># 执行项目中指定标签的用例，最后的参数用于指定包含tagName的用例所在的目录或者指定到suite</span></span><br><span class="line">pybot --include tagName /opt/robotframework/</span><br><span class="line">pybot --include=tagName /opt/robotframework/</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="设置环境变量，根据环境执行测试"><a href="#设置环境变量，根据环境执行测试" class="headerlink" title="设置环境变量，根据环境执行测试"></a>设置环境变量，根据环境执行测试</h4><p>变量脚本<code>envVars.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_variables</span><span class="params">(env = <span class="string">'test'</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> env==<span class="string">'preview'</span>:</span><br><span class="line">        <span class="comment">#preview environment</span></span><br><span class="line">        variables = &#123;</span><br><span class="line">            <span class="comment"># 登录服务：大风车|广汇</span></span><br><span class="line">            <span class="string">"sso"</span> : <span class="string">"http://sso.prepub.shadow.com"</span>,</span><br><span class="line">            <span class="string">"ghsso"</span> : <span class="string">"http://hmc-sso.prepub.cgacar.com"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">elif</span> env==<span class="string">'online'</span>:</span><br><span class="line">    	<span class="comment">#online environment</span></span><br><span class="line">        variables = &#123;</span><br><span class="line">            <span class="comment"># 登录服务：大风车|广汇</span></span><br><span class="line">            <span class="string">"sso"</span> : <span class="string">"http://sso.shadow.com"</span>,</span><br><span class="line">            <span class="string">"ghsso"</span> : <span class="string">"http://hmc-sso.cgacar.com"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    	<span class="comment">#text environment</span></span><br><span class="line">        variables = &#123;</span><br><span class="line">            <span class="comment"># 登录服务：大风车|广汇</span></span><br><span class="line">            <span class="string">"sso"</span> : <span class="string">"http://dfc.shadow.net"</span>,</span><br><span class="line">            <span class="string">"ghsso"</span> : <span class="string">"http://sso.gh.shadow.net"</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    globalvars = &#123;</span><br><span class="line">        <span class="string">'productid'</span>:<span class="string">'3456'</span>,</span><br><span class="line">        <span class="string">'userid'</span>:<span class="string">'test12'</span></span><br><span class="line">        &#125;   <span class="comment">#共用变量</span></span><br><span class="line">    <span class="comment"># variables['globalvars'] = globalvars</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> variables</span><br></pre></td></tr></table></figure><p>执行脚本的命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -d results                指定日志文件目录</span></span><br><span class="line"><span class="comment"># -V ./envVars.py:online    V 要大写，变量文件路径:环境参数，可以不填参数，则是默认环境</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果有多个变量文件，可以使用多个“-V 文件路径:环境参数”</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --include=test_ty .       在当前目录下及子目录下，筛选[tag]为 test_ty 的所有 TC 并执行</span></span><br><span class="line">pybot -d results -V ./envVars.py:online -V ./orderVars.py:preview --include=test_ty .</span><br></pre></td></tr></table></figure><h4 id="IDE设置命令行执行RF用例"><a href="#IDE设置命令行执行RF用例" class="headerlink" title="IDE设置命令行执行RF用例"></a>IDE设置命令行执行RF用例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行单条用例</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/pybot -d results -t testcase001 ./</span><br></pre></td></tr></table></figure><img src="/2017/12/16/2017-12-16-Summary-of-Robot-Framework/SingleTestCase.png" title="SingleTestCase"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行单个suite</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/pybot -d results testsuite001.robot</span><br></pre></td></tr></table></figure><img src="/2017/12/16/2017-12-16-Summary-of-Robot-Framework/TestSuite.png" title="TestSuite"><h4 id="指定RF用例执行后日志的保存位置"><a href="#指定RF用例执行后日志的保存位置" class="headerlink" title="指定RF用例执行后日志的保存位置"></a>指定RF用例执行后日志的保存位置</h4><p>其实上面的<code>-d</code>参数就是用来指定Log的保存位置的，默认<code>-d results</code>指定日志保存在运行命令的目录的<code>results</code>文件夹下。<br>在<code>ride</code>中的<code>run</code>标签下，<code>Arguments</code>中填入<code>-d results</code>也能达到同样的效果。</p><h4 id="重新运行上一轮Fail的Case"><a href="#重新运行上一轮Fail的Case" class="headerlink" title="重新运行上一轮Fail的Case"></a>重新运行上一轮<code>Fail</code>的<code>Case</code></h4><p>使用<code>-R</code>参数，同<code>--rerunfailed output</code>，后面跟前次执行生成的<code>results/output.xml</code>，这样就只会运行上次失败了的Case。</p><h4 id="List中的字典循环"><a href="#List中的字典循环" class="headerlink" title="List中的字典循环"></a>List中的字典循环</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*** Test Cases ***</span><br><span class="line">takeValueFromCircle</span><br><span class="line">    # 从返回结果中提取出List</span><br><span class="line">    @&#123;items&#125;&#x3D;    set variable    $&#123;json[&quot;data&quot;][&quot;items&quot;]&#125;</span><br><span class="line">    # 循环List中的item</span><br><span class="line">    : FOR    $&#123;params&#125;    IN    @&#123;items&#125;</span><br><span class="line">    # 把item中的一个参数（每个参数都是一个字典）转化为Str格式，顺便去除 &quot;u&quot; 标识</span><br><span class="line">    \    $&#123;params&#125;    Dumps    $&#123;params&#125;</span><br><span class="line">    # 把字典转化为json</span><br><span class="line">    \    $&#123;params&#125;    to json    $&#123;params&#125;</span><br><span class="line">    #\    Log    $&#123;params[&quot;carId&quot;]&#125;</span><br><span class="line">    # 对每个item取出来的字典中的某个字段进行判断，如果是需要的值，就把另一个需要的值取出来，并打印出来</span><br><span class="line">    \    RUN KEYWORD IF    &quot;$&#123;params[&quot;carInfo&quot;][&quot;status&quot;]&#125;&quot;&#x3D;&#x3D;&quot;评估中&quot;    Log    $&#123;params[&quot;carId&quot;]&#125;</span><br></pre></td></tr></table></figure><h4 id="wait-until-keyword-succeeds关键字使用"><a href="#wait-until-keyword-succeeds关键字使用" class="headerlink" title="wait until keyword succeeds关键字使用"></a>wait until keyword succeeds关键字使用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*** Test Cases ***</span><br><span class="line">&quot;Wait until ...&quot; with normal error</span><br><span class="line">    # Keyword is run multiple times, until timeout. Each run gives an exception</span><br><span class="line">    # traceback.</span><br><span class="line">    Wait Until Keyword Succeeds    1 sec    0.5    Keyword With Normal Error</span><br><span class="line"></span><br><span class="line">&quot;Wait until ...&quot; with AttributeError</span><br><span class="line">    # Keyword is run only once, even if there is time left until the timeout.</span><br><span class="line">    # There is no exception traceback like above.</span><br><span class="line">    Wait Until Keyword Succeeds    1 sec    0.5    Keyword With AttributeError</span><br><span class="line"></span><br><span class="line">*** Keywords ***</span><br><span class="line">Keyword With Normal Error</span><br><span class="line">    $&#123;obj&#125; &#x3D;    Evaluate    &quot;foo&quot;</span><br><span class="line">    Should Be Equal As Strings    $&#123;obj&#125;    &quot;bar&quot;</span><br><span class="line"></span><br><span class="line">Keyword With AttributeError</span><br><span class="line">    # In real life, this would get an object and use some of its (valid) attributes.</span><br><span class="line">    # In case of an error, and in Teardown context (continue-on-failure), a None object</span><br><span class="line">    # is returned instead causing the next keyword to create an AttributeError.</span><br><span class="line">    $&#123;obj&#125; &#x3D;    Evaluate    &quot;foo&quot;</span><br><span class="line">    Should Be Equal As Strings    $&#123;obj.bad_attr&#125;    &quot;foo&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*** Test Cases ***</span><br><span class="line">003.导出进度-&#x2F;pc&#x2F;export&#x2F;taizhangaction&#x2F;progress.json</span><br><span class="line">    wait until keyword succeeds    3 min    5 sec    导出进度-&#x2F;pc&#x2F;export&#x2F;taizhangaction&#x2F;progress.json</span><br><span class="line">    </span><br><span class="line">*** Keywords ***</span><br><span class="line">导出进度-&#x2F;pc&#x2F;export&#x2F;taizhangaction&#x2F;progress.json</span><br><span class="line">    $&#123;params&#125;&#x3D;    Create Dictionary    jobId&#x3D;$&#123;jobId&#125;</span><br><span class="line">    &amp;&#123;json&#125;&#x3D;    Rest.Post    &#x2F;pc&#x2F;export&#x2F;taizhangaction&#x2F;progress.json    $&#123;params&#125;    form    $&#123;hosts[&quot;erp-online&quot;]&#125;</span><br><span class="line">    Should Be True    $&#123;json[&quot;success&quot;]&#125;</span><br><span class="line">    should be equal as strings    $&#123;json[&quot;data&quot;][&quot;progress&quot;]&#125;    100</span><br><span class="line">    $&#123;URL&#125;&#x3D;    set variable    $&#123;json[&quot;data&quot;][&quot;url&quot;]&#125;</span><br></pre></td></tr></table></figure><p>5秒执行一次关键字，如果<code>${json[&quot;data&quot;][&quot;progress&quot;]}!=100</code>，执行一次关键字，直到相等时，执行一次关键字中的最后一行代码。</p><h4 id="一个完整的独立case"><a href="#一个完整的独立case" class="headerlink" title="一个完整的独立case"></a>一个完整的独立case</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*** Test Cases ***</span><br><span class="line">登录</span><br><span class="line">    $&#123;dict&#125;&#x3D;    Create Dictionary    Content-Type&#x3D;application&#x2F;x-www-form-urlencoded</span><br><span class="line">    $&#123;host&#125;&#x3D;    Create Session    _session    http:&#x2F;&#x2F;dfc.shadow.com    $&#123;dict&#125;</span><br><span class="line">    $&#123;params&#125;&#x3D;    Create Dictionary    loginName&#x3D;15558135526    password&#x3D;shadow2015    jPushId&#x3D;jpushid001</span><br><span class="line">    $&#123;response&#125;&#x3D;    Post Request    _session    &#x2F;rest&#x2F;account&#x2F;login    params&#x3D;$&#123;params&#125;    headers&#x3D;$&#123;dict&#125;</span><br><span class="line">    Should Be Equal As Strings    $&#123;response.status_code&#125;    200</span><br><span class="line">    &amp;&#123;json&#125;&#x3D;    Set Variable    $&#123;response.json()&#125;</span><br><span class="line">    Should Be True    &amp;&#123;json&#125;[success]</span><br><span class="line">    Log    &amp;&#123;json&#125;[success]</span><br></pre></td></tr></table></figure><h4 id="对请求proxy、tag、headers、session、response的整体封装"><a href="#对请求proxy、tag、headers、session、response的整体封装" class="headerlink" title="对请求proxy、tag、headers、session、response的整体封装"></a>对请求proxy、tag、headers、session、response的整体封装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*** Keywords ***</span><br><span class="line">Rest.Post</span><br><span class="line">    [Arguments]    $&#123;uri&#125;    $&#123;params&#125;    $&#123;type&#125;&#x3D;form    $&#123;cur_host&#125;&#x3D;$&#123;EMPTY&#125;</span><br><span class="line">    #设置代理服务器，这样方便调试代码</span><br><span class="line">    &amp;&#123;proxy&#125;&#x3D;    Create Dictionary    http&#x3D;http:&#x2F;&#x2F;127.0.0.1:8888</span><br><span class="line">    #根据tag来区分请求应使用哪个host</span><br><span class="line">    $&#123;host&#125;&#x3D;    Set Variable    \ \ $&#123;EMPTY&#125;</span><br><span class="line">    : FOR    $&#123;tag&#125;    IN    @&#123;TEST TAGS&#125;</span><br><span class="line">    \    $&#123;host&#125;&#x3D;    Evaluate    $hosts.get($tag,&quot;&quot;)</span><br><span class="line">    \    Run Keyword If    &quot;$&#123;host&#125;&quot;!&#x3D;&quot;&quot;    Exit For Loop</span><br><span class="line">    #创建session,跨域模式，不需要维护Session</span><br><span class="line">    Run Keyword If    &quot;$&#123;cur_host&#125;&quot;!&#x3D;&quot;&quot;    Create Session    _session    $&#123;cur_host&#125;    proxies&#x3D;$&#123;proxy&#125;</span><br><span class="line">    ...    ELSE    Create Session    _session    $&#123;host&#125;    proxies&#x3D;$&#123;proxy&#125;</span><br><span class="line">    #已登录的用户在请求中带上token</span><br><span class="line">    Run Keyword If    &quot;$&#123;token&#125;&quot;!&#x3D;&quot;&quot;    Set To Dictionary    $&#123;params&#125;    token&#x3D;$&#123;token&#125;</span><br><span class="line">    Log    $&#123;token&#125;</span><br><span class="line">    #根据请求数据的类型设置header</span><br><span class="line">    &amp;&#123;headers&#125;&#x3D;    Run Keyword If    &quot;$&#123;type&#125;&quot;&#x3D;&#x3D;&quot;form&quot;    Create Dictionary    Content-Type&#x3D;application&#x2F;x-www-form-urlencoded    TT&#x3D;$&#123;token&#125;</span><br><span class="line">    ...    ELSE IF    &quot;$&#123;type&#125;&quot;&#x3D;&#x3D;&quot;json&quot;    Create Dictionary    Content-Type&#x3D;application&#x2F;json    TT&#x3D;$&#123;token&#125;</span><br><span class="line">    $&#123;response&#125;&#x3D;    Post Request    _session    $&#123;uri&#125;    $&#123;params&#125;    headers&#x3D;&amp;&#123;headers&#125;</span><br><span class="line">    Should Be Equal As Strings    $&#123;response.status_code&#125;    200</span><br><span class="line">    &amp;&#123;json&#125;&#x3D;    Set Variable    $&#123;response.json()&#125;</span><br><span class="line">    [Return]    &amp;&#123;json&#125;</span><br></pre></td></tr></table></figure><h4 id="所有的安装内容"><a href="#所有的安装内容" class="headerlink" title="所有的安装内容"></a>所有的安装内容</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install robotframework</span><br><span class="line">pip install robotframework-ride</span><br><span class="line">pip install robotframework-appiumlibrary</span><br><span class="line">pip install robotframework-selenium2library</span><br><span class="line">pip install robotframework-databaselibrary</span><br><span class="line">pip install robotframework-sshlibrary</span><br><span class="line">pip install robotframework-requests</span><br><span class="line">pip install robotframework-HttpLibrary</span><br><span class="line">pip install robotframework-difflibrary</span><br><span class="line">pip install requests</span><br><span class="line">pip install PyMySQL</span><br><span class="line">pip install MySQL-python</span><br></pre></td></tr></table></figure><h4 id="RobotFramework自带变量"><a href="#RobotFramework自带变量" class="headerlink" title="RobotFramework自带变量"></a><code>RobotFramework</code>自带变量</h4><table><thead><tr><th>Variable</th><th>Explanation</th><th>Available</th></tr></thead><tbody><tr><td>${TEST NAME}</td><td>The name of the current test case.</td><td>Test case</td></tr><tr><td>@{TEST TAGS}</td><td>Contains the tags of the current test case in alphabetical order. Can be modified dynamically using Set Tags and Remove Tags keywords.</td><td>Test case</td></tr><tr><td>${TEST DOCUMENTATION}</td><td>The documentation of the current test case. Can be set dynamically using using Set Test Documentation keyword. New in Robot Framework 2.7.</td><td>Test case</td></tr><tr><td>${TEST STATUS}</td><td>The status of the current test case, either PASS or FAIL.</td><td>Test teardown</td></tr><tr><td>${TEST MESSAGE}</td><td>The message of the current test case.</td><td>Test teardown</td></tr><tr><td>${PREV TEST NAME}</td><td>The name of the previous test case, or an empty string if no tests have been executed yet.</td><td>Everywhere</td></tr><tr><td>${PREV TEST STATUS}</td><td>The status of the previous test case: either PASS, FAIL, or an empty string when no tests have been executed.</td><td>Everywhere</td></tr><tr><td>${PREV TEST MESSAGE}</td><td>The possible error message of the previous test case.</td><td>Everywhere</td></tr><tr><td>${SUITE NAME}</td><td>The full name of the current test suite.</td><td>Everywhere</td></tr><tr><td>${SUITE SOURCE}</td><td>An absolute path to the suite file or directory.</td><td>Everywhere</td></tr><tr><td>${SUITE DOCUMENTATION}</td><td>The documentation of the current test suite. Can be set dynamically using using Set Suite Documentation keyword. New in Robot Framework 2.7.</td><td>Everywhere</td></tr><tr><td>&amp;{SUITE METADATA}</td><td>The free metadata of the current test suite. Can be set using Set Suite Metadata keyword. New in Robot Framework 2.7.4.</td><td>Everywhere</td></tr><tr><td>${SUITE STATUS}</td><td>The status of the current test suite, either PASS or FAIL.</td><td>Suite teardown</td></tr><tr><td>${SUITE MESSAGE}</td><td>The full message of the current test suite, including statistics.</td><td>Suite teardown</td></tr><tr><td>${KEYWORD STATUS}</td><td>The status of the current keyword, either PASS or FAIL. New in Robot Framework 2.7</td><td>User keyword teardown</td></tr><tr><td>${KEYWORD MESSAGE}</td><td>The possible error message of the current keyword. New in Robot Framework 2.7.</td><td>User keyword teardown</td></tr><tr><td>${LOG LEVEL}</td><td>Current log level. New in Robot Framework 2.8.</td><td>Everywhere</td></tr><tr><td>${OUTPUT FILE}</td><td>An absolute path to the output file.</td><td>Everywhere</td></tr><tr><td>${LOG FILE}</td><td>An absolute path to the log file or string NONE when no log file is created.</td><td>Everywhere</td></tr><tr><td>${REPORT FILE}</td><td>An absolute path to the report file or string NONE when no report is created.</td><td>Everywhere</td></tr><tr><td>${DEBUG FILE}</td><td>An absolute path to the debug file or string NONE when no debug file is created.</td><td>Everywhere</td></tr><tr><td>${OUTPUT DIR}</td><td>An absolute path to the output directory.</td><td>Everywhere</td></tr></tbody></table>]]></content>
      <categories>
        <category>RobotFramework</category>
      </categories>
      <tags>
        <tag>robot-framework</tag>
      </tags>
  </entry>
  <entry>
    <title>Brew命令报错问题解决</title>
    <url>/2018/01/10/2018-01-10-Brew-command-error-solving/</url>
    <content><![CDATA[<h4 id="运行任何brew命令，都提示错误"><a href="#运行任何brew命令，都提示错误" class="headerlink" title="运行任何brew命令，都提示错误"></a>运行任何<code>brew</code>命令，都提示错误</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git: error: unable to find utility <span class="string">"git"</span>, not a developer tool or <span class="keyword">in</span> PATH</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clang: error: unable to find utility <span class="string">"clang"</span>, not a developer tool or <span class="keyword">in</span> PATH</span><br></pre></td></tr></table></figure><a id="more"></a><p>原因主要是因为<code>xcode-select</code>的位置错误，需要修改指向的位置：<br>原来的位置：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TaoYi-Mac in ~/Desktop/MySQL-python-1.2.5 [13:27:05] C:72</span></span><br><span class="line">$ xcode-select --<span class="built_in">print</span>-path</span><br><span class="line">/Applications/Xcode.app/Contents/Developer</span><br></pre></td></tr></table></figure><p>修改到另一个位置：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TaoYi-Mac in /Applications/Xcode.app/Contents/Developer [13:33:33] C:1</span></span><br><span class="line">$ sudo xcode-select --switch /Library/Developer/CommandLineTools</span><br><span class="line">Password:</span><br><span class="line"></span><br><span class="line"><span class="comment"># taoyi @ TaoYi-Mac in /Applications/Xcode.app/Contents/Developer [13:33:52] </span></span><br><span class="line">$ xcode-select --<span class="built_in">print</span>-path                                     </span><br><span class="line">/Library/Developer/CommandLineTools</span><br></pre></td></tr></table></figure><p>如此操作之后，再执行brew命令，就不会再报上面的错了</p>]]></content>
      <categories>
        <category>SolveProblem</category>
      </categories>
      <tags>
        <tag>brew</tag>
      </tags>
  </entry>
  <entry>
    <title>Python通过SSH隧道连接MySQL数据库</title>
    <url>/2018/01/10/2018-01-10-Python-connects-to-MySQL-database-via-SSH-tunnel/</url>
    <content><![CDATA[<h3 id="方式一：通过MySQLdb模块"><a href="#方式一：通过MySQLdb模块" class="headerlink" title="方式一：通过MySQLdb模块"></a>方式一：通过<code>MySQLdb</code>模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">con_sshDb</span><span class="params">(self, sql)</span>:</span></span><br><span class="line">	<span class="comment"># ssh的地址，端口，用户名，密码</span></span><br><span class="line">	<span class="keyword">from</span> sshtunnel <span class="keyword">import</span> SSHTunnelForwarder</span><br><span class="line">	<span class="keyword">with</span> SSHTunnelForwarder(</span><br><span class="line">			(<span class="string">'XXX.XXX.XXX.XXX'</span>, <span class="number">22</span>),</span><br><span class="line">			ssh_password=<span class="string">"XXXXXX"</span>,</span><br><span class="line">			ssh_username=<span class="string">"XXXXXX"</span>,</span><br><span class="line">			remote_bind_address=(<span class="string">'XXX.XXX'</span>, <span class="number">3306</span>)</span><br><span class="line">			) <span class="keyword">as</span> server:</span><br><span class="line">		<span class="comment"># 此处必须是是127.0.0.1</span></span><br><span class="line">		<span class="keyword">import</span> MySQLdb</span><br><span class="line">		conn = MySQLdb.connect(host=<span class="string">'127.0.0.1'</span>,</span><br><span class="line">							   port=server.local_bind_port,</span><br><span class="line">							   <span class="comment"># Navicat常规处的链接用户名和密码，以及连接数据库名称</span></span><br><span class="line">							   user=<span class="string">'XXXXXX'</span>,</span><br><span class="line">							   passwd=<span class="string">'XXXXXX'</span>,</span><br><span class="line">							   db=<span class="string">'XXXXXX'</span>)</span><br><span class="line">		<span class="comment"># .cursor()用来获得python执行Mysql命令的方法</span></span><br><span class="line">		cursor = conn.cursor()</span><br><span class="line">		select = sql</span><br><span class="line">		<span class="comment"># .execute()执行mysql语句</span></span><br><span class="line">		cursor.execute(select)</span><br><span class="line">		<span class="comment"># fetchall()则是接收全部的返回结果行</span></span><br><span class="line">		data = cursor.fetchall()</span><br><span class="line">	<span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="方式二：通过paramiko模块"><a href="#方式二：通过paramiko模块" class="headerlink" title="方式二：通过paramiko模块"></a>方式二：通过<code>paramiko</code>模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">con_sshDb</span><span class="params">(self, sql)</span>:</span></span><br><span class="line">	<span class="keyword">import</span> paramiko</span><br><span class="line">	ssh = paramiko.SSHClient()</span><br><span class="line">	ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">	ssh.connect(<span class="string">"XXX.XXX.XXX.XXX"</span>, <span class="number">22</span>, <span class="string">"ssh_username"</span>, <span class="string">"ssh_password"</span>)</span><br><span class="line">       select = sql</span><br><span class="line">	stdin, stdout, stderr = ssh.exec_command(<span class="string">"mysql -u user -p passwd -D mysql -e 'select'"</span>)</span><br><span class="line">	<span class="keyword">print</span> stdout.readlines()</span><br><span class="line">	ssh.close()</span><br></pre></td></tr></table></figure><h3 id="方式二：通过sqlalchemy模块"><a href="#方式二：通过sqlalchemy模块" class="headerlink" title="方式二：通过sqlalchemy模块"></a>方式二：通过<code>sqlalchemy</code>模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">con_sshDb</span><span class="params">(self, sql)</span>:</span></span><br><span class="line">	<span class="keyword">from</span> sshtunnel <span class="keyword">import</span> SSHTunnelForwarder</span><br><span class="line">	<span class="keyword">with</span> SSHTunnelForwarder(</span><br><span class="line">			(<span class="string">'XXX.XXX.XXX.XXX'</span>, <span class="number">22</span>),</span><br><span class="line">			ssh_password=<span class="string">"XXXXXX"</span>,</span><br><span class="line">			ssh_username=<span class="string">"XXXXXX"</span>,</span><br><span class="line">			remote_bind_address=(<span class="string">'XXX.XXX'</span>, <span class="number">3306</span>)</span><br><span class="line">			) <span class="keyword">as</span> server:</span><br><span class="line">		server.start()  <span class="comment"># start ssh sever</span></span><br><span class="line">		<span class="keyword">print</span> <span class="string">'Server connected via SSH'</span></span><br><span class="line"></span><br><span class="line">		<span class="comment"># connect to PostgreSQL</span></span><br><span class="line">		local_port = str(server.local_bind_port)</span><br><span class="line">		<span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line">		engine = create_engine(<span class="string">'postgresql://&lt;db_user&gt;:&lt;db_pwd&gt;@127.0.0.1:'</span> + local_port +<span class="string">'/&lt;db_name&gt;'</span>)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line">		Session = sessionmaker(bind=engine)</span><br><span class="line">		session = Session()</span><br><span class="line">		<span class="keyword">print</span> <span class="string">'Database session created'</span></span><br><span class="line"></span><br><span class="line">		select = sql</span><br><span class="line">		data = session.execute(select)</span><br><span class="line">	<span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>Python对文件内容的简单操作</title>
    <url>/2018/01/11/2018-01-11-Python&#39;s-simple-operation-of-file-content/</url>
    <content><![CDATA[<h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打开文件    w会新建文件，有写的权限   r读   r+读写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#fo =open("file1.txt","w")</span></span><br><span class="line">fo =open(<span class="string">"file1.txt"</span>,<span class="string">"r+"</span>)</span><br><span class="line">print(fo)</span><br><span class="line">print(fo.read)</span><br><span class="line"></span><br><span class="line">fo.write(<span class="string">"bbbbbbbbbbbbbb"</span>)</span><br><span class="line"></span><br><span class="line">print(open(<span class="string">"file1.txt"</span>))</span><br><span class="line">fo.close() <span class="comment">#关闭之后数据才写到文件 中</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##读文件</span></span><br><span class="line"></span><br><span class="line">f1=open(<span class="string">"file1.txt"</span>)</span><br><span class="line"><span class="comment">#txt=f1.read();</span></span><br><span class="line"><span class="comment">#print(txt)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#读取所有行 []</span></span><br><span class="line"><span class="comment"># print(f1.readlines());</span></span><br><span class="line"><span class="comment">#读取一行    超出 会读空</span></span><br><span class="line">line=f1.readline();</span><br><span class="line">print(line);</span><br><span class="line">print(f1.readline());</span><br><span class="line">print(f1.readline());</span><br><span class="line"></span><br><span class="line"><span class="comment">#f1.next() 超出范围会停止</span></span><br></pre></td></tr></table></figure><h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">###写文件</span></span><br><span class="line">l=[<span class="string">"one\n"</span>,<span class="string">"two\n"</span>,<span class="string">"three\n"</span>,<span class="string">"four\n"</span>]</span><br><span class="line"><span class="comment">#f2=open("file2.txt","a")</span></span><br><span class="line"><span class="comment">#f2.writelines(l) #换行的形式写到文件后面</span></span><br><span class="line"><span class="comment">#f2.close();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f2=open(<span class="string">"file2.txt"</span>,<span class="string">"r+"</span>) <span class="comment">#是以指针的形式</span></span><br><span class="line"><span class="comment">#f2.read() #先读出 在写 不会被覆盖</span></span><br><span class="line"><span class="comment">#f2.writelines(l) #换行的形式写到文件后面</span></span><br><span class="line"><span class="comment">#f2.close();</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"1:"</span>,f2.read())</span><br><span class="line">print(<span class="string">"2:"</span>,f2.read()) <span class="comment">#读完后 指针移到尾部了 就读不出来了 可以移动指针</span></span><br><span class="line">f2.seek(<span class="number">0</span>,<span class="number">0</span>) <span class="comment">##指针移动   0=头部  1=向后移动</span></span><br><span class="line">print(<span class="string">"3:"</span>,f2.read())</span><br><span class="line">f2.seek(<span class="number">0</span>,<span class="number">0</span>) </span><br><span class="line">f2.seek(<span class="number">0</span>,<span class="number">2</span>) <span class="comment">##指针移动  结尾  可以在结尾追加数据</span></span><br><span class="line">print(<span class="string">"4:"</span>,f2.read())</span><br><span class="line"></span><br><span class="line">f2.writelines(l) <span class="comment">#在写一次 不关闭是不保存的</span></span><br><span class="line">f2.flush() <span class="comment">#提交更新  没关闭 先把写入的数据保存</span></span><br></pre></td></tr></table></figure><h3 id="查找文件中的内容"><a href="#查找文件中的内容" class="headerlink" title="查找文件中的内容"></a>查找文件中的内容</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment">#查找文件中有多少个hello</span></span><br><span class="line"></span><br><span class="line">fp=open(<span class="string">"file3.txt"</span>,<span class="string">"r"</span>)</span><br><span class="line">count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> fp.readlines():</span><br><span class="line">    li=re.findall(<span class="string">"hello"</span>, s)</span><br><span class="line">    <span class="keyword">if</span> len(li)&gt;<span class="number">0</span>:</span><br><span class="line">        count=count+len(li)</span><br><span class="line">print(<span class="string">"search:"</span>,count,<span class="string">"&gt;&gt;&gt;hello"</span>)</span><br><span class="line">fp.close()</span><br></pre></td></tr></table></figure><h3 id="替换文件内容"><a href="#替换文件内容" class="headerlink" title="替换文件内容"></a>替换文件内容</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#把文件内容替换</span></span><br><span class="line"><span class="comment">#把file3.txt 的 hello 替换为 good,并保存到file3Back.txt</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">fp3=open(<span class="string">"file3.txt"</span>,<span class="string">"r"</span>)</span><br><span class="line">fp4=open(<span class="string">"file4.txt"</span>,<span class="string">"w"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> fp3.readlines():<span class="comment">#先读出来</span></span><br><span class="line">    fp4.write(s.replace(<span class="string">"hello"</span>,<span class="string">"goood"</span>)) <span class="comment">#替换 并写入</span></span><br><span class="line"></span><br><span class="line">fp3.close()</span><br><span class="line">fp4.close()</span><br></pre></td></tr></table></figure><h3 id="在原文件中替换文件内容"><a href="#在原文件中替换文件内容" class="headerlink" title="在原文件中替换文件内容"></a>在原文件中替换文件内容</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#写在原文件中</span></span><br><span class="line">fp3=open(<span class="string">"file3.txt"</span>,<span class="string">"r+"</span>) <span class="comment">#不用w w会清空数据</span></span><br><span class="line">s=fp3.read()<span class="comment">#读出</span></span><br><span class="line">fp3.seek(<span class="number">0</span>,<span class="number">0</span>) <span class="comment">#指针移到头  原来的数据还在 是替换 会存在一个问题 如果少   会替换不了全部数据，自已思考解决!!!</span></span><br><span class="line"><span class="comment">#从头写入</span></span><br><span class="line">fp3.write(s.replace(<span class="string">"hello"</span>,<span class="string">"good"</span>))</span><br><span class="line">fp3.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> fileinput</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fileinput.input(<span class="string">"test0"</span>, inplace=<span class="number">1</span>):</span><br><span class="line">    line = line.replace(<span class="string">".."</span>, <span class="string">"C:"</span>)</span><br><span class="line">    <span class="keyword">print</span> line</span><br></pre></td></tr></table></figure><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>r</td><td>以读方式打开文件，可读取文件信息。</td></tr><tr><td>w</td><td>以写方式打开文件，可向文件写入信息。如文件存在，则清空该文件，再写入新内容</td></tr><tr><td>a</td><td>以追加模式打开文件（即一打开文件，文件指针自动移到文件末尾），如果文件不存在则创建</td></tr><tr><td>r+</td><td>以读写方式打开文件，可对文件进行读和写操作。</td></tr><tr><td>w+</td><td>消除文件内容，然后以读写方式打开文件。</td></tr><tr><td>a+</td><td>以读写方式打开文件，并把文件指针移到文件尾。</td></tr><tr><td>b</td><td>以二进制模式打开文件，而不是以文本模式。该模式只对Windows或Dos有效，类Unix的文件是用二进制模式进行操作的。</td></tr></tbody></table><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>f.close()</td><td>关闭文件，记住用open()打开文件后一定要记得关闭它，否则会占用系统的可打开文件句柄数。</td></tr><tr><td>f.fileno()</td><td>获得文件描述符，是一个数字</td></tr><tr><td>f.flush()</td><td>刷新输出缓存</td></tr><tr><td>f.isatty()</td><td>如果文件是一个交互终端，则返回True，否则返回False。</td></tr><tr><td>f.read([count])</td><td>读出文件，如果有count，则读出count个字节。</td></tr><tr><td>f.readline()</td><td>读出一行信息。</td></tr><tr><td>f.readlines()</td><td>读出所有行，也就是读出整个文件的信息。</td></tr><tr><td>f.seek(offset[,where])</td><td>把文件指针移动到相对于where的offset位置。where为0表示文件开始处，这是默认值 ；1表示当前位置；2表示文件结尾。</td></tr><tr><td>f.tell()</td><td>获得文件指针位置。</td></tr><tr><td>f.truncate([size])</td><td>截取文件，使文件的大小为size。</td></tr><tr><td>f.write(string)</td><td>把string字符串写入文件。</td></tr><tr><td>f.writelines(list)</td><td>把list中的字符串一行一行地写入文件，是连续写入文件，没有换行。</td></tr></tbody></table>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>IOS打包命令</title>
    <url>/2016/09/22/2016-09-22-IOS-packaging-command/</url>
    <content><![CDATA[<h4 id="IOS构建方式"><a href="#IOS构建方式" class="headerlink" title="IOS构建方式"></a>IOS构建方式</h4><p>对IOS源码的构建方式主要有两种，最后的目标都是生成<code>.ipa</code>文件</p><ul><li><p><code>源码</code> -&gt; <code>.archive文件</code> -&gt; <code>.ipa文件</code></p></li><li><p><code>源码</code> -&gt; <code>.app文件</code> -&gt; <code>.ipa文件</code></p><a id="more"></a></li></ul><p>主要差异在于中间产物的不一样</p><pre><code>``源码`` -&gt; ``.archive`` -&gt; ``.ipa``</code></pre><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># build archive file from source code</span></span><br><span class="line">xcodebuild \    <span class="comment"># xctool</span></span><br><span class="line">  -workspace <span class="variable">$&#123;WORKSPACE_PATH&#125;</span> \</span><br><span class="line">  -scheme <span class="variable">$&#123;SCHEME&#125;</span> \</span><br><span class="line">  -configuration <span class="variable">$&#123;CONFIGURATION&#125;</span> \</span><br><span class="line">  -sdk <span class="variable">$&#123;SDK&#125;</span></span><br><span class="line">  -archivePath <span class="variable">$&#123;archive_path&#125;</span></span><br><span class="line">  archive</span><br></pre></td></tr></table></figure><p><code>archive</code>：对编译结果进行归档，会生成一个<code>.xcarchive</code>的文件，位于<code>-archivePath</code>指定的目录中。需要注意的是，对模拟器类型的<code>sdk</code>无法使用<code>archive</code>命令。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># export ipa file from .archive</span></span><br><span class="line">xcodebuild -exportArchive \</span><br><span class="line">  -exportFormat format \</span><br><span class="line">  -archivePath xcarchivepath \</span><br><span class="line">  -exportPath destinationpath \</span><br><span class="line">  -exportProvisioningProfile profilename \</span><br><span class="line">  [-exportSigningIdentity identityname]</span><br><span class="line">  [-exportInstallerIdentity identityname]</span><br></pre></td></tr></table></figure><pre><code>``源码`` -&gt; ``.app`` -&gt; ``.ipa``</code></pre><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># build .app file from source code</span></span><br><span class="line">xcodebuild \    <span class="comment"># xctool</span></span><br><span class="line">  -workspace <span class="variable">$&#123;WORKSPACE_PATH&#125;</span> \</span><br><span class="line">  -scheme <span class="variable">$&#123;SCHEME&#125;</span> \</span><br><span class="line">  -configuration <span class="variable">$&#123;CONFIGURATION&#125;</span> \</span><br><span class="line">  -sdk <span class="variable">$&#123;SDK&#125;</span> \</span><br><span class="line">  -derivedDataPath <span class="variable">$&#123;OUTPUT_FOLDER&#125;</span> \</span><br><span class="line">  clean build</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># convert .app file to ipa file</span></span><br><span class="line">xcrun \</span><br><span class="line">  -sdk iphoneos \</span><br><span class="line">  PackageApplication \</span><br><span class="line">  -v <span class="variable">$&#123;OUTPUT_FOLDER&#125;</span>/Release-iphoneos/xxx.app \</span><br><span class="line">  -o <span class="variable">$&#123;OUTPUT_FOLDER&#125;</span>/Release-iphoneos/xxx.ipa</span><br></pre></td></tr></table></figure><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li><code>-workspace</code>：需要打包的workspace，后面接的文件一定要是<code>.xcworkspace</code>结尾的；</li><li><code>-scheme</code>：需要打包的Scheme，一般与<code>$project_name</code>相同；</li><li><code>-sdk</code>：区分iphone device和Simulator，可通过<code>xcodebuild -showsdks</code>获取，例如<code>iphoneos</code>和<code>iphonesimulator10.3.2</code>；</li><li><code>-configuration</code>：需要打包的配置文件，我们一般在项目中添加多个配置，适合不同的环境，<code>Release/Debug</code>；</li><li><code>-exportFormat</code>：导出的格式，通常填写为<code>ipa</code>；</li><li><code>-archivePath</code>：<code>.xcarchive</code>文件的路径；</li><li><code>-exportPath</code>：导出文件<code>.ipa</code>的路径；</li><li><code>-exportProvisioningProfile</code>：<code>profile</code>文件证书；</li><li><code>-derivedDataPath</code>：指定编译结果文件的存储路径；例如，指定<code>-derivedDataPath ${OUTPUT_FOLDER}</code>时，将在项目根目录下创建一个<code>${OUTPUT_FOLDER}</code>文件夹，生成的<code>.app</code>文件将位于<code>${OUTPUT_FOLDER}/Build/Products/${CONFIGURATION}-iphoneos</code>中。</li><li><code>-v</code>：指定<code>.app</code>文件的路径；</li><li><code>-o</code>：指定<code>.ipa</code>文件的路径</li></ul><h4 id="获取打包必要信息"><a href="#获取打包必要信息" class="headerlink" title="获取打包必要信息"></a>获取打包必要信息</h4><p>在填写<code>target</code>/<code>workspace</code>/<code>scheme</code>/<code>configuration</code>等参数时，如果不知道该怎么填写，可以在项目根目录下执行<code>xcodebuild -list</code>命令，它会列出当前项目的所有可选参数。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">╭─taoyi at TaoYi-Mac <span class="keyword">in</span> /opt/Jenkins/Home/workspace/Coding-iOS on 89d7084✘✘✘ using ‹› 17-08-18 - 1:08:10</span><br><span class="line">╰─⠠⠵ xcodebuild -list</span><br><span class="line">Information about project <span class="string">"Coding_iOS"</span>:</span><br><span class="line">    Targets:</span><br><span class="line">        Coding_iOS</span><br><span class="line"></span><br><span class="line">    Build Configurations:</span><br><span class="line">        Debug</span><br><span class="line">        Release</span><br><span class="line"></span><br><span class="line">    If no build configuration is specified and -scheme is not passed <span class="keyword">then</span> <span class="string">"Release"</span> is used.</span><br><span class="line"></span><br><span class="line">    Schemes:</span><br><span class="line">        Coding_iOS</span><br></pre></td></tr></table></figure><h4 id="处理Cocoapod依赖库"><a href="#处理Cocoapod依赖库" class="headerlink" title="处理Cocoapod依赖库"></a>处理<code>Cocoapod</code>依赖库</h4><p>另外一个需要注意的是，若项目是采用<code>Cocoapod</code>管理项目依赖，每次拉取最新代码后直接编译可能会报错。这往往是因为其他同事更新了依赖库（新增了第三方库或升级了某些库），而本地还采用之前的第三方库进行编译，从而会出现依赖库缺失或版本不匹配等问题。<br>应对的做法是，在每次<code>build</code>之前都更新一下<code>Cocoapod</code>。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Update pod repository</span></span><br><span class="line">pod repo update</span><br><span class="line"><span class="comment"># Install pod dependencies</span></span><br><span class="line">pod install</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>ios</tag>
        <tag>打包</tag>
      </tags>
  </entry>
  <entry>
    <title>Python小技巧</title>
    <url>/2018/03/06/2018-03-06-Python-tips/</url>
    <content><![CDATA[<h4 id="安装指定版本的第三方库"><a href="#安装指定版本的第三方库" class="headerlink" title="安装指定版本的第三方库"></a>安装指定版本的第三方库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install robotframework==2.8.7</span><br></pre></td></tr></table></figure><p>要用<code>pip</code>安装指定版本的<code>Python</code>包，只需通过<code>==</code>操作符指定即可。</p><a id="more"></a><h4 id="将当前虚拟环境中的依赖包以版本号生成至文件中【导出第三方库】："><a href="#将当前虚拟环境中的依赖包以版本号生成至文件中【导出第三方库】：" class="headerlink" title="将当前虚拟环境中的依赖包以版本号生成至文件中【导出第三方库】："></a>将当前虚拟环境中的依赖包以版本号生成至文件中【导出第三方库】：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><h4 id="在指定位置安装第三方"><a href="#在指定位置安装第三方" class="headerlink" title="在指定位置安装第三方"></a>在指定位置安装第三方</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install -t /Users/taoyi/.pyenv/versions/2.7.14/lib/python2.7/site-packages lxml</span><br></pre></td></tr></table></figure><p><code>pip</code>安装的包不一定是用户想要的位置，此时可以用<code>-t</code>选项来指定位置。</p><h4 id="通过requirement-txt文件来管理pip的第三方库"><a href="#通过requirement-txt文件来管理pip的第三方库" class="headerlink" title="通过requirement.txt文件来管理pip的第三方库"></a>通过requirement.txt文件来管理pip的第三方库</h4><p>文件内容如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">robotframework==3.0.2</span><br><span class="line">robotframework-ride==1.5.2</span><br><span class="line">robotframework-appiumlibrary==1.4.6</span><br><span class="line">robotframework-DatabaseLibrary==1.0.1</span><br><span class="line">robotframework-Selenium2Library==3.0.0</span><br><span class="line">robotframework-requests==0.4.7</span><br><span class="line">robotframework-sshlibrary==2.1.3</span><br><span class="line">robotframework-HttpLibrary==0.4.2</span><br><span class="line">requests==2.18.4</span><br><span class="line">PyMySQL==0.8.0</span><br><span class="line">MySQL-python==1.2.5</span><br></pre></td></tr></table></figure><p>然后通过以下命令来批量安装第三方库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install -r requirement.txt</span><br></pre></td></tr></table></figure><h4 id="查看有更新的pip第三方库"><a href="#查看有更新的pip第三方库" class="headerlink" title="查看有更新的pip第三方库"></a>查看有更新的<code>pip</code>第三方库</h4><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TaoYi-Mac in ~ [16:27:56]</span></span><br><span class="line">$ pip list --outdate --trusted-host pypi.douban.com</span><br><span class="line">Package                                     Version Latest    Type</span><br><span class="line">------------------------- ------- ------- -----</span><br><span class="line">robotframework-ride             1.5.2     1.5.2.1 sdist</span><br><span class="line">robotframework-sshlibrary 2.1.3     3.0.0     sdist</span><br><span class="line">setuptools                                28.8.0    39.1.0    wheel</span><br></pre></td></tr></table></figure><h4 id="更新指定的第三方库"><a href="#更新指定的第三方库" class="headerlink" title="更新指定的第三方库"></a>更新指定的第三方库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install --upgrade robotframework-sshlibrary</span><br></pre></td></tr></table></figure><h4 id="查看第三方库的详细信息"><a href="#查看第三方库的详细信息" class="headerlink" title="查看第三方库的详细信息"></a>查看第三方库的详细信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip show robotframework-sshlibrary</span><br></pre></td></tr></table></figure><h4 id="pip配置文件更新"><a href="#pip配置文件更新" class="headerlink" title="pip配置文件更新"></a>pip配置文件更新</h4><p><code>pip</code>配置文件是<code>~/.pip/pip.conf</code>文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line">[global]                                                                                            <span class="comment"># 设置pip的全局的源</span></span><br><span class="line">index-url = http://pypi.douban.com/simple</span><br><span class="line"></span><br><span class="line">[install]                                                                                         <span class="comment"># pip install指定的安装源</span></span><br><span class="line">trusted-host=pypi.douban.com</span><br><span class="line"></span><br><span class="line">[list]                                                                                                <span class="comment"># pip list命令接口的展示方式设置</span></span><br><span class="line">format=columns</span><br></pre></td></tr></table></figure><h4 id="print-39-39-end-39-39-中end问题"><a href="#print-39-39-end-39-39-中end问题" class="headerlink" title="print(&#39;*&#39;,end=&#39;&#39;)中end问题"></a><code>print(&#39;*&#39;,end=&#39;&#39;)</code>中<code>end</code>问题</h4><p>end是print（）函数的一个参数。end 是输出语句结束以后附加的字符串，它的默认值是换行（’\n’）。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">''</span>)<span class="comment">#end值为默认值（换行\n）</span></span><br><span class="line">print(<span class="string">'*'</span>,end = <span class="string">' '</span>)                <span class="comment"># end值为空格</span></span><br><span class="line">print(<span class="string">'*'</span>,end = <span class="string">''</span>)                 <span class="comment"># 默认为末尾换行/n，end=''末尾为空所以不换行</span></span><br><span class="line">print(<span class="string">'*'</span>,end = <span class="string">'1'</span>)                <span class="comment"># end值为字符串‘1’</span></span><br><span class="line">print(<span class="string">'*'</span>,end = <span class="string">'12'</span>)             <span class="comment"># end值为字符串‘12’</span></span><br></pre></td></tr></table></figure><h4 id="打印中的赋值语句"><a href="#打印中的赋值语句" class="headerlink" title="打印中的赋值语句"></a>打印中的赋值语句</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">print</span> (<span class="string">'%d * %d = %d'</span> %(i, j, i * j), end=<span class="string">'\t'</span>)</span><br><span class="line"><span class="comment"># 三个%d分别从后面跟着的3个参数取对应的值</span></span><br></pre></td></tr></table></figure><h4 id="VSCode的代码段设置"><a href="#VSCode的代码段设置" class="headerlink" title="VSCode的代码段设置"></a>VSCode的代码段设置</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"MarkDown insert Pyhton"</span>: &#123;</span><br><span class="line">        <span class="attr">"prefix"</span>: <span class="string">"MDP"</span>,</span><br><span class="line">        <span class="attr">"body"</span>: [</span><br><span class="line">            <span class="string">"```python\n\n\n```"</span>,</span><br><span class="line">            <span class="string">"$2"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">"MarkDown insert Pyhton"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="共享本地文件给局域网访问"><a href="#共享本地文件给局域网访问" class="headerlink" title="共享本地文件给局域网访问"></a>共享本地文件给局域网访问</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m http.server</span><br></pre></td></tr></table></figure><p>共享当前运行该命令的本地目录，给予在局域网内访问；默认共享端口为8000，即访问地址为：<a href="http://localhost:8000" target="_blank" rel="noopener">localhost:8000</a></p><h4 id="字典在for循环中数据覆盖的分析与解决"><a href="#字典在for循环中数据覆盖的分析与解决" class="headerlink" title="字典在for循环中数据覆盖的分析与解决"></a>字典在for循环中数据覆盖的分析与解决</h4><p>预期打印出来的list为：[{‘num’: 0}, {‘num’: 1}, {‘num’: 2}]，结果为[{‘num’: 2}, {‘num’: 2}, {‘num’: 2}]</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lists=[]</span><br><span class="line">dictionary=&#123;<span class="string">"num"</span>:<span class="string">""</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    dictionary[<span class="string">"num"</span>]=i</span><br><span class="line">    lists.append(dictionary)</span><br><span class="line">print(lists)                 <span class="comment">#[&#123;'num': 2&#125;, &#123;'num': 2&#125;, &#123;'num': 2&#125;]</span></span><br></pre></td></tr></table></figure><p>解决：将字典写在for循环中，得到预期的list[{‘num’: 0}, {‘num’: 1}, {‘num’: 2}]</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lists=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    dictionary = &#123;<span class="string">"num"</span>: <span class="string">""</span>&#125;</span><br><span class="line">    dictionary[<span class="string">"num"</span>]=i</span><br><span class="line">    lists.append(dictionary)</span><br><span class="line">print(lists)                 <span class="comment">#[&#123;'num': 0&#125;, &#123;'num': 1&#125;, &#123;'num': 2&#125;]</span></span><br></pre></td></tr></table></figure><p>原因分析：</p><pre><code>1. dictionary（字典）赋给list的是一个位置
2. dictionary定义在循环外，每次使用list.append(dictionary)赋给 list的都是相同的位置，即指向了同一块的地址；当在同一地址的dictionary的值已经改变了，所以list取到的之前位置的值改变了，表现出后面数据覆盖前面数据的表象
3. dictionary定义在循环内，相当于每一次循环生成一个dictionary，占用不同的位置存储值，所以可以赋给list不同元素不同的位置，获得不同的值。 </code></pre><p>总结：</p><pre><code>1. 对于不能理解地址，可以通过在循环中print(id(dictionary))，将地址打印出来对比分析
2. 在python中，对象赋值实际上是对象的引用。当创建一个对象，然后把它赋给另一个变量的时候，python并没有拷贝这个对象，而只是拷贝了这个对象的引用
3. 关于Python中复制、浅拷贝和深拷贝的区别
  - 直接赋值，传递对象的引用而已，原始列表改变，被赋值的b也会做相同的改变
  - copy浅拷贝，只拷贝父对象，不会拷贝对象的内部的子对象，所以原始数据改变，子对象会改变
  - copy深拷贝，包含对象里面的自对象的拷贝，所以原始对象的改变不会造成深拷贝里任何子元素的改变</code></pre><h4 id="全局变量和局部变量"><a href="#全局变量和局部变量" class="headerlink" title="全局变量和局部变量"></a>全局变量和局部变量</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> value == <span class="number">1</span>:</span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">value = a = <span class="number">1</span></span><br><span class="line">b = test()</span><br></pre></td></tr></table></figure><p>执行上述代码就会出现<code>UnboundLocalError: local variable &#39;a&#39; referenced before assignment</code>这个报错。<br>因为在函数内部对变量赋值进行修改后，该变量就会被Python解释器认为是局部变量而非全局变量，当程序执行到a+=1的时候，因为这条语句是给a赋值，所以a成为了局部变量，那么在执行return a(或是print a)的时候，因为a这个局部变量还没有定义，自然就会抛出这样的错误。</p><p>解决方案一：<br>当全局变量。就是使用global关键字，在函数内部先声明a这个变量是全局变量。代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    <span class="keyword">if</span> value == <span class="number">1</span>:</span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">value = a = <span class="number">1</span></span><br><span class="line">b = test()</span><br></pre></td></tr></table></figure><p>这时，a就成为了全局变量，在函数内部修改该变量，也就没有问题了。<br>这种情况外面的a执行完函数是2，而函数返回的也是2。</p><p>解决方案二：<br>当局部变量。就是这个变量只在函数内使用，那么只要在函数内把这个变量定义一下就行了。代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> value == <span class="number">1</span>:</span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">value = a = <span class="number">1</span></span><br><span class="line">b = test()</span><br></pre></td></tr></table></figure><p>这种情况外面的a执行完函数还是1，而函数返回的则是2。</p><h4 id="requests-post使用"><a href="#requests-post使用" class="headerlink" title="requests.post使用"></a><code>requests.post</code>使用</h4><ol><li><p>带数据『data』的post</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">host = <span class="string">"http://httpbin.org/"</span></span><br><span class="line">endpoint = <span class="string">"post"</span></span><br><span class="line">url = <span class="string">''</span>.join([host,endpoint])</span><br><span class="line">data = &#123;<span class="string">'key1'</span>:<span class="string">'value1'</span>,<span class="string">'key2'</span>:<span class="string">'value2'</span>&#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(url,data=data)</span><br><span class="line"><span class="comment">#response = r.json()</span></span><br><span class="line"><span class="keyword">print</span> (r.text)</span><br></pre></td></tr></table></figure></li><li><p>带header的post</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">host = <span class="string">"http://httpbin.org/"</span></span><br><span class="line">endpoint = <span class="string">"post"</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">''</span>.join([host,endpoint])</span><br><span class="line">headers = &#123;<span class="string">"User-Agent"</span>:<span class="string">"test request headers"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># r = requests.post(url)</span></span><br><span class="line">r = requests.post(url,headers=headers)</span><br><span class="line"><span class="comment">#response = r.json()</span></span><br></pre></td></tr></table></figure></li><li><p>带json的post</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">host = <span class="string">"http://httpbin.org/"</span></span><br><span class="line">endpoint = <span class="string">"post"</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">''</span>.join([host,endpoint])</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">"sites"</span>: [</span><br><span class="line">                &#123; <span class="string">"name"</span>:<span class="string">"test"</span> , <span class="string">"url"</span>:<span class="string">"www.test.com"</span> &#125;,</span><br><span class="line">                &#123; <span class="string">"name"</span>:<span class="string">"google"</span> , <span class="string">"url"</span>:<span class="string">"www.google.com"</span> &#125;,</span><br><span class="line">                &#123; <span class="string">"name"</span>:<span class="string">"weibo"</span> , <span class="string">"url"</span>:<span class="string">"www.weibo.com"</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(url,json=data)</span><br><span class="line"><span class="comment"># r = requests.post(url,data=json.dumps(data))</span></span><br><span class="line">response = r.json()</span><br></pre></td></tr></table></figure></li><li><p>带参数『params』的post</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">host = <span class="string">"http://httpbin.org/"</span></span><br><span class="line">endpoint = <span class="string">"post"</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">''</span>.join([host,endpoint])</span><br><span class="line">params = &#123;<span class="string">'key1'</span>:<span class="string">'params1'</span>,<span class="string">'key2'</span>:<span class="string">'params2'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># r = requests.post(url)</span></span><br><span class="line">r = requests.post(url,params=params)</span><br><span class="line"><span class="comment">#response = r.json()</span></span><br><span class="line"><span class="keyword">print</span> (r.text)</span><br></pre></td></tr></table></figure></li><li><p>普通文件上传</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">host = <span class="string">"http://httpbin.org/"</span></span><br><span class="line">endpoint = <span class="string">"post"</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">''</span>.join([host,endpoint])</span><br><span class="line"><span class="comment">#普通上传</span></span><br><span class="line">files = &#123;</span><br><span class="line">            <span class="string">'file'</span>:open(<span class="string">'test.txt'</span>,<span class="string">'rb'</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(url,files=files)</span><br><span class="line"><span class="keyword">print</span> (r.text)</span><br></pre></td></tr></table></figure></li><li><p>定制化文件上传</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">host = <span class="string">"http://httpbin.org/"</span></span><br><span class="line">endpoint = <span class="string">"post"</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">''</span>.join([host,endpoint])</span><br><span class="line"><span class="comment">#自定义文件名，文件类型、请求头</span></span><br><span class="line">files = &#123;</span><br><span class="line">        <span class="string">'file'</span>:(<span class="string">'test.png'</span>,open(<span class="string">'test.png'</span>,<span class="string">'rb'</span>),<span class="string">'image/png'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(url,files=files)</span><br><span class="line"><span class="keyword">print</span> (r.text)</span><br></pre></td></tr></table></figure></li><li><p>多文件上传</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">host = <span class="string">"http://httpbin.org/"</span></span><br><span class="line">endpoint = <span class="string">"post"</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">''</span>.join([host,endpoint])</span><br><span class="line"><span class="comment">#多文件上传</span></span><br><span class="line">files = [</span><br><span class="line">    (<span class="string">'file1'</span>,(<span class="string">'test.txt'</span>,open(<span class="string">'test.txt'</span>, <span class="string">'rb'</span>))),</span><br><span class="line">    (<span class="string">'file2'</span>, (<span class="string">'test.png'</span>, open(<span class="string">'test.png'</span>, <span class="string">'rb'</span>)))</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">r = requests.post(url,files=files)</span><br><span class="line"><span class="keyword">print</span> (r.text)</span><br></pre></td></tr></table></figure></li><li><p>流式上传</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">host = <span class="string">"http://httpbin.org/"</span></span><br><span class="line">endpoint = <span class="string">"post"</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">''</span>.join([host,endpoint])</span><br><span class="line"></span><br><span class="line"><span class="comment">#流式上传</span></span><br><span class="line"><span class="keyword">with</span> open( <span class="string">'test.txt'</span> ) <span class="keyword">as</span> f:</span><br><span class="line">    r = requests.post(url,data = f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (r.text)</span><br></pre></td></tr></table></figure></li></ol><h4 id="递归函数的使用"><a href="#递归函数的使用" class="headerlink" title="递归函数的使用"></a>递归函数的使用</h4><p><a href="https://www.cnblogs.com/xzxl/p/7364515.html" target="_blank" rel="noopener">递归从入门到精通</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sd_list = [&#123;"scenes_id": "1", "scenes_data_ids": [5, 6, [&#123;"scenes_id": "3", "scenes_data_ids": [56, 2, 24, 4]&#125;]]&#125;]</span></span><br><span class="line"><span class="comment"># 递归获取场景中的所有场景数据，并返回数据集合的list</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_scenesDataId_list</span><span class="params">(sd_list)</span>:</span></span><br><span class="line">    <span class="comment"># 初始变量定义在此，解决二次调用时，带入一次递归时的数据的问题</span></span><br><span class="line">    sd_new_list = []</span><br><span class="line">    <span class="keyword">if</span> sd_list[<span class="number">0</span>][<span class="string">'scenes_data_ids'</span>]:</span><br><span class="line">        num_list = sd_list[<span class="number">0</span>][<span class="string">'scenes_data_ids'</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> num_list:</span><br><span class="line">            <span class="keyword">if</span> isinstance(i, int):</span><br><span class="line">                sd_new_list.append(i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                sd_new_list += get_scenesDataId_list(i)</span><br><span class="line">    <span class="keyword">return</span> sd_new_list</span><br></pre></td></tr></table></figure><h4 id="远程连接服务器执行shell命令及脚本"><a href="#远程连接服务器执行shell命令及脚本" class="headerlink" title="远程连接服务器执行shell命令及脚本"></a>远程连接服务器执行shell命令及脚本</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line">ssh = paramiko.SSHClient()</span><br><span class="line">ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">ssh.connect(hostname=<span class="string">'172.18.71.199'</span>, port=<span class="number">22</span>, username=<span class="string">'dasouche'</span>, password=<span class="string">'V4HubdvgBePJ'</span>)</span><br><span class="line">stdin,stdout,stderr = ssh.exec_command(<span class="string">"ls -l"</span>)</span><br><span class="line">stdin,stdout,stderr = ssh.exec_command(<span class="string">"./test.sh"</span>)</span><br><span class="line">stdin,stdout,stderr = ssh.exec_command(<span class="string">"python ./test.py"</span>)</span><br><span class="line">print(stdout.read())</span><br></pre></td></tr></table></figure><h4 id="生成指定位数的小写字母和数字的随机数"><a href="#生成指定位数的小写字母和数字的随机数" class="headerlink" title="生成指定位数的小写字母和数字的随机数"></a>生成指定位数的小写字母和数字的随机数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getRandomSet</span><span class="params">(bits)</span>:</span></span><br><span class="line">    num_set = [chr(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">48</span>, <span class="number">58</span>)]</span><br><span class="line">    char_set = [chr(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">97</span>, <span class="number">123</span>)]</span><br><span class="line">    total_set = num_set + char_set</span><br><span class="line"></span><br><span class="line">    value_set = <span class="string">''</span>.join(random.sample(total_set, bits))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value_set</span><br></pre></td></tr></table></figure><h4 id="反转list的三种方法"><a href="#反转list的三种方法" class="headerlink" title="反转list的三种方法"></a>反转list的三种方法</h4><ol><li>使用<code>reversed()</code>函数<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]  </span><br><span class="line">b=list(reversed(a))  </span><br><span class="line"><span class="keyword">print</span> b</span><br></pre></td></tr></table></figure>注意：reversed()函数返回的是一个迭代器，而不是一个List，需要再使用List函数转换一下。</li><li>使用<code>sorted()</code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]  </span><br><span class="line">c=sorted(a,cmp=<span class="literal">None</span>, key=<span class="literal">None</span>, reverse=<span class="literal">True</span>)  </span><br><span class="line"><span class="keyword">print</span> c</span><br></pre></td></tr></table></figure>注意：其中reverse=True是按降序排列，reverse=False是按照升序排列。</li><li>使用分片<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]  </span><br><span class="line">d=a[::<span class="number">-1</span>]  </span><br><span class="line"><span class="keyword">print</span> d</span><br></pre></td></tr></table></figure>注意：其中[::-1]代表从后向前取值，每次步进值为1。</li></ol>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python版本管理工具pyenv使用小结</title>
    <url>/2018/04/10/2018-04-10-Python-version-management-tool-pyenv-use-summary/</url>
    <content><![CDATA[<h4 id="安装brew"><a href="#安装brew" class="headerlink" title="安装brew"></a>安装<code>brew</code></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="安装pyenv"><a href="#安装pyenv" class="headerlink" title="安装pyenv"></a>安装<code>pyenv</code></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install pyenv</span><br></pre></td></tr></table></figure><h4 id="把pyenv加入环境变量"><a href="#把pyenv加入环境变量" class="headerlink" title="把pyenv加入环境变量"></a>把<code>pyenv</code>加入环境变量</h4><p>如果使用的终端是<code>bash</code>，则编辑<code>~/.bashrc</code>，如果使用的终端是<code>zsh</code>，则编辑<code>~/.zshrc</code>，在该文件的最开头加入语句：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pyenv init -  pyenv初始化，把pyenv加入环境变量，使其生效，否则pyenv命令无法使用，pyenv命令是pyenv的核心命令，用于安装、卸载、查看、切换不同版本的python，pyenv的其他命令都是围绕这个命令展开的</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv init -)</span>"</span></span><br></pre></td></tr></table></figure><h4 id="pyenv常用基本命令"><a href="#pyenv常用基本命令" class="headerlink" title="pyenv常用基本命令"></a><code>pyenv</code>常用基本命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv install --list                            <span class="comment"># List all available versions</span></span><br><span class="line">pyenv install &lt;version&gt;                         <span class="comment"># install python</span></span><br><span class="line">pyenv global &lt;version&gt;                          <span class="comment"># 全局设置python版本为指定版本</span></span><br><span class="line">pyenv global 2.7.14 3.6.4                       <span class="comment"># 指定多个python版本为全局版本，有顺序</span></span><br><span class="line">pyenv <span class="built_in">local</span> &lt;version&gt;                           <span class="comment"># 设置当前路径下python版本为指定版本</span></span><br><span class="line">pyenv shell &lt;version&gt;                           <span class="comment"># 设置当前shell窗口使用的python版本为指定版本</span></span><br><span class="line">pyenv versions                                  <span class="comment"># 列举所有版本的python，打``*``的为当前指定的全局版本</span></span><br><span class="line">pyenv version                                   <span class="comment"># 列举已经安装的版本</span></span><br></pre></td></tr></table></figure><h4 id="使用virtualenv创建Python虚拟环境"><a href="#使用virtualenv创建Python虚拟环境" class="headerlink" title="使用virtualenv创建Python虚拟环境"></a>使用<code>virtualenv</code>创建<code>Python</code>虚拟环境</h4><p>这个命令只需要一个参数，即虚拟环境的名字。创建完虚拟环境后，当前文件夹会出现一个子文件夹，名字就是上述命令中指定的参数，与虚拟环境相关的文件都保存在这个子文件夹中。按照惯例，一般虚拟环境会被命名为<code>venv</code>：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ virtualenv venv</span><br><span class="line">New python executable <span class="keyword">in</span> /Users/taoyi/git_projects/Python_Training/flasky/venv/bin/python2.7</span><br><span class="line">Also creating executable <span class="keyword">in</span> /Users/taoyi/git_projects/Python_Training/flasky/venv/bin/python</span><br><span class="line">Installing setuptools, pip, wheel...done.</span><br></pre></td></tr></table></figure><p>（Linux或Mac OS X用户）激活当前虚拟环境：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> venv/bin/activate</span><br></pre></td></tr></table></figure><p>虚拟环境被激活后，其中<code>Python</code>解释器的路径就被添加进<code>PATH</code>中，但这种改变不是永久性的，它只会影响当前的命令行会话。为了提醒你已经激活了虚拟环境，激活虚拟环境的命令会修改命令行提示符，加入环境名：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python -V</span><br><span class="line">Python 2.7.14</span><br><span class="line">(venv)</span><br></pre></td></tr></table></figure><p>如果想回到全局<code>Python</code>解析器中，可以再命令行提示符下输入<code>deactivate</code>。</p><h4 id="使用virtualenv创建指定版本的Python的虚拟环境"><a href="#使用virtualenv创建指定版本的Python的虚拟环境" class="headerlink" title="使用virtualenv创建指定版本的Python的虚拟环境"></a>使用<code>virtualenv</code>创建指定版本的<code>Python</code>的虚拟环境</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virtualenv -p /Users/taoyi/.pyenv/versions/3.6.5/bin/python  py3env</span><br></pre></td></tr></table></figure><ul><li><code>-p</code>：指定指定版本的<code>python</code>的绝对路径</li><li><code>py3env</code>：创建的虚拟环境的名称</li></ul><h4 id="Ubuntu环境下，pyenv安装python失败，解决方法"><a href="#Ubuntu环境下，pyenv安装python失败，解决方法" class="headerlink" title="Ubuntu环境下，pyenv安装python失败，解决方法"></a>Ubuntu环境下，pyenv安装python失败，解决方法</h4><p>报错信息：<br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ubuntu @ VM-4-14-ubuntu in /usr/bin [16:24:51]</span></span><br><span class="line">$ pyenv install 3.11.3</span><br><span class="line">WARNING: Please make sure you remove any previous custom paths from your /home/ubuntu/.pydistutils.cfg file.</span><br><span class="line">Downloading Python-3.11.3.tar.xz...</span><br><span class="line">-&gt; https://www.python.org/ftp/python/3.11.3/Python-3.11.3.tar.xz</span><br><span class="line">Installing Python-3.11.3...</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;string&gt;"</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"/home/ubuntu/.pyenv/versions/3.11.3/lib/python3.11/curses/__init__.py"</span>, line 13, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from _curses import *</span><br><span class="line">ModuleNotFoundError: No module named <span class="string">'_curses'</span></span><br><span class="line">WARNING: The Python curses extension was not compiled. Missing the ncurses lib?</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;string&gt;"</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"/home/ubuntu/.pyenv/versions/3.11.3/lib/python3.11/ctypes/__init__.py"</span>, line 8, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from _ctypes import Union, Structure, Array</span><br><span class="line">ModuleNotFoundError: No module named <span class="string">'_ctypes'</span></span><br><span class="line">WARNING: The Python ctypes extension was not compiled. Missing the libffi lib?</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;string&gt;"</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ModuleNotFoundError: No module named <span class="string">'readline'</span></span><br><span class="line">WARNING: The Python readline extension was not compiled. Missing the GNU readline lib?</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;string&gt;"</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"/home/ubuntu/.pyenv/versions/3.11.3/lib/python3.11/ssl.py"</span>, line 100, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    import _ssl             <span class="comment"># if we can't import it, let the error propagate</span></span><br><span class="line">    ^^^^^^^^^^^</span><br><span class="line">ModuleNotFoundError: No module named <span class="string">'_ssl'</span></span><br><span class="line">ERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib?</span><br><span class="line"></span><br><span class="line">Please consult to the Wiki page to fix the problem.</span><br><span class="line">https://github.com/pyenv/pyenv/wiki/Common-build-problems</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BUILD FAILED (Ubuntu 22.04 using python-build 20180424)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p></p><h5 id="ModuleNotFoundError-No-module-named-39-curses-39-报错"><a href="#ModuleNotFoundError-No-module-named-39-curses-39-报错" class="headerlink" title="ModuleNotFoundError: No module named &#39;_curses&#39;报错"></a><code>ModuleNotFoundError: No module named &#39;_curses&#39;</code>报错</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ModuleNotFoundError: No module named '_curses'</span><br><span class="line">WARNING: The Python curses extension was not compiled. Missing the ncurses lib?</span><br></pre></td></tr></table></figure><p>解决<br></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libncurses-dev</span><br></pre></td></tr></table></figure><p></p><h5 id="ModuleNotFoundError-No-module-named-39-ctypes-39-报错"><a href="#ModuleNotFoundError-No-module-named-39-ctypes-39-报错" class="headerlink" title="ModuleNotFoundError: No module named &#39;_ctypes&#39;报错"></a><code>ModuleNotFoundError: No module named &#39;_ctypes&#39;</code>报错</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ModuleNotFoundError: No module named '_ctypes'</span><br><span class="line">WARNING: The Python ctypes extension was not compiled. Missing the libffi lib?</span><br></pre></td></tr></table></figure><p>解决<br></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libffi-dev</span><br></pre></td></tr></table></figure><p></p><h5 id="ModuleNotFoundError-No-module-named-39-readline-39-报错"><a href="#ModuleNotFoundError-No-module-named-39-readline-39-报错" class="headerlink" title="ModuleNotFoundError: No module named &#39;readline&#39;报错"></a><code>ModuleNotFoundError: No module named &#39;readline&#39;</code>报错</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ModuleNotFoundError: No module named 'readline'</span><br><span class="line">WARNING: The Python readline extension was not compiled. Missing the GNU readline lib?</span><br></pre></td></tr></table></figure><p>解决<br></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libreadline-dev</span><br></pre></td></tr></table></figure><p></p><h5 id="ModuleNotFoundError-No-module-named-39-ssl-39-报错"><a href="#ModuleNotFoundError-No-module-named-39-ssl-39-报错" class="headerlink" title="ModuleNotFoundError: No module named &#39;_ssl&#39;报错"></a><code>ModuleNotFoundError: No module named &#39;_ssl&#39;</code>报错</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ModuleNotFoundError: No module named '_ssl'</span><br><span class="line">ERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib?</span><br></pre></td></tr></table></figure><p>解决<br></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libssl-dev</span><br></pre></td></tr></table></figure><p></p>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>brew</tag>
        <tag>pyenv</tag>
      </tags>
  </entry>
  <entry>
    <title>应用重签名工具re-sign.jar使用</title>
    <url>/2017/03/05/2017-03-05-Apply-the-re-signature-tool-re-signjar/</url>
    <content><![CDATA[<h3 id="下载-re-sign-jar"><a href="#下载-re-sign-jar" class="headerlink" title="下载 re-sign.jar"></a>下载 re-sign.jar</h3><p><a href="http://download.csdn.net/download/christopher_lv/8569477" target="_blank" rel="noopener">下载地址</a></p><h3 id="应用-re-sign-jar"><a href="#应用-re-sign-jar" class="headerlink" title="应用 re-sign.jar"></a>应用 re-sign.jar</h3><h4 id="把-re-sign-jar-放到-android-文件夹下"><a href="#把-re-sign-jar-放到-android-文件夹下" class="headerlink" title="把 re-sign.jar 放到 .android 文件夹下"></a>把 re-sign.jar 放到 .android 文件夹下</h4><a id="more"></a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  .android ll</span><br><span class="line">total 216</span><br><span class="line">-rw-r--r--   1 taoyi  staff   2.1K  7  5  2016 debug.keystore</span><br><span class="line">-rw-r--r--@  1 taoyi  staff    47K  3  4 22:35 re-sign.jar</span><br></pre></td></tr></table></figure><h4 id="运行-re-sign-jar"><a href="#运行-re-sign-jar" class="headerlink" title="运行 re-sign.jar"></a>运行 re-sign.jar</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> .android</span><br><span class="line">java -jar re-sign.jar</span><br></pre></td></tr></table></figure><h4 id="把应用拖放到窗口进行重签名"><a href="#把应用拖放到窗口进行重签名" class="headerlink" title="把应用拖放到窗口进行重签名"></a>把应用拖放到窗口进行重签名</h4><img src="/2017/03/05/2017-03-05-Apply-the-re-signature-tool-re-signjar/%E9%87%8D%E7%AD%BE%E5%90%8D%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8.png" title="重签名工具使用"><p>重签名成功</p><img src="/2017/03/05/2017-03-05-Apply-the-re-signature-tool-re-signjar/%E9%87%8D%E7%AD%BE%E5%90%8D%E6%88%90%E5%8A%9F.png" title="重签名成功"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  .android java -jar re-sign.jar                   </span><br><span class="line">Running jarsigner</span><br><span class="line">Command line: /Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/bin/jarsigner -keystore /Users/taoyi/.android/debug.keystore -storepass android -keypass android /var/folders/6c/t0zm0zy90p12fjr77h9qtktr0000gp/T/resigner3271202971406261445.apk androiddebugkey</span><br><span class="line">jarsigner finished with following output:</span><br><span class="line">jar å·²ç­¾åã</span><br><span class="line"></span><br><span class="line">è­¦å:</span><br><span class="line">æªæä¾ -tsa æ -tsacert, æ­¤ jar æ²¡ææ¶é´æ³ãå¦ææ²¡ææ¶é´æ³, åå¨ç­¾åèè¯ä¹¦çå°ææ¥æ (2046-06-28) æä»¥åçä»»ä½æ¤éæ¥æä¹å, ç¨æ·å¯è½æ æ³éªè¯æ­¤ jarã</span><br><span class="line">Running zipalign</span><br><span class="line">Command line: /opt/android-sdk-macosx/tools/zipalign -f 4 /var/folders/6c/t0zm0zy90p12fjr77h9qtktr0000gp/T/resigner3271202971406261445.apk /Users/taoyi/git_projects/dfcAppium/res/app/android/fengche_debug.apk</span><br><span class="line">zipalign finished with following output:</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>重签名</tag>
        <tag>re-sign.jar</tag>
      </tags>
  </entry>
  <entry>
    <title>测试用例设计思路总结</title>
    <url>/2018/04/29/2018-04-29-Summary-of-test-case-design-ideas/</url>
    <content><![CDATA[<ol><li><p>模块的层级不能太多，有必要的话可通过“2级模块1-3级模块1”的形式，减少模块的层级</p></li><li><p>模块下，分“字段校验”和“功能校验”，划分依据呢？</p></li></ol><p>建议：把可执行一个完整功能、业务功能的用例放在“功能校验”下，否则放在“字段校验”下，比如上面，添加帐号是一个需要实现的功能，而添加帐号页面中的姓名则只是实现该功能的需要的一个元素，如果只给定这个元素是无法完成添加操作的。这个划分可能需要多写用例才能拿捏得比较准。</p><ol start="3"><li>这样划分的好处是，比较能突出重点，特别是时间来不及的情况下，可能只执行“功能校验”的用例，当然也视情况而定，有些字段校验也很重要，属于重点测试内容。</li></ol><p>对于增加或修改，还有几个检查点：<br>1.打开这个弹出框的默认值检查；<br>2.连续点击确定按钮，看是否会重复生成记录；<br>3.取消功能测试；<br>4.账号的唯一性检查。还要注意并发操作；<br>5.多增加一些记录，覆盖不同字段的有效等价类；<br>6.session超时后，增加或修改；<br>7.填写内容与存入数据库实际值比较（可能数据库支持字符集与前端输入字符集不同导致问题）。</p>]]></content>
      <categories>
        <category>TestTheory</category>
      </categories>
      <tags>
        <tag>测试用例</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell小脚本</title>
    <url>/2017/11/04/2017-11-04-Shell-script/</url>
    <content><![CDATA[<h4 id="删除目录下的除今天外的所有文件夹"><a href="#删除目录下的除今天外的所有文件夹" class="headerlink" title="删除目录下的除今天外的所有文件夹"></a>删除目录下的除今天外的所有文件夹</h4><ol><li><p>目录下的文件夹规律【年月日时分秒】</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TaoYi-Mac in ~/Desktop/test0001 [15:54:29] </span></span><br><span class="line">$ ll</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x  2 taoyi  staff    68B 11  3 18:29 20171027121219</span><br><span class="line">drwxr-xr-x  3 taoyi  staff   102B 11  3 18:30 20171101124273</span><br><span class="line">drwxr-xr-x  3 taoyi  staff   102B 11  3 18:29 20171102124212</span><br><span class="line">drwxr-xr-x  2 taoyi  staff    68B 11  3 18:29 20171103121216</span><br><span class="line">drwxr-xr-x  3 taoyi  staff   102B 11  3 18:29 20171103124211</span><br><span class="line">drwxr-xr-x  2 taoyi  staff    68B 11  3 18:29 20171103124216</span><br><span class="line">drwxr-xr-x  2 taoyi  staff    68B 11  3 18:29 20171104124212</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>shell脚本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目录下的所有文件夹名称写入文件``dir``</span></span><br><span class="line">ls -l /Users/taoyi/Desktop/test0001/ | awk <span class="string">'/^d/ &#123;print $NF&#125;'</span> &gt; /Users/taoyi/Desktop/test0001/dir</span><br><span class="line"></span><br><span class="line"><span class="comment"># `date +%Y%m%d`，获取当天的年月日</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(grep -v `date +%Y%m%d` /Users/taoyi/Desktop/test0001/dir)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="comment"># 删除目录下的文件夹</span></span><br><span class="line">    rm -rf /Users/taoyi/Desktop/test0001/<span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除零时写入的文件``dir``</span></span><br><span class="line">rm -rf /Users/taoyi/Desktop/test0001/dir</span><br></pre></td></tr></table></figure></li></ol><h4 id="kill指定name的pid"><a href="#kill指定name的pid" class="headerlink" title="kill指定name的pid"></a>kill指定name的pid</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kill指定name的pid</span></span><br><span class="line"><span class="comment"># 示例："./kill_pidname.sh jhost"</span></span><br><span class="line"></span><br><span class="line">pid_name=<span class="variable">$1</span></span><br><span class="line">ps -ef | grep -v grep | grep <span class="variable">$pid_name</span> | <span class="keyword">while</span> <span class="built_in">read</span> username pid other</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">kill</span> -9 <span class="variable">$pid</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="adb截图导出并展示"><a href="#adb截图导出并展示" class="headerlink" title="adb截图导出并展示"></a>adb截图导出并展示</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 调用安卓系统内部截图命令screencap截图保存</span></span><br><span class="line">adb shell /system/bin/screencap -p /sdcard/screenshot.jpg</span><br><span class="line"><span class="comment"># 导出图片到本地目录</span></span><br><span class="line">adb pull /sdcard/screenshot.jpg ~/shell-tools/ScreenShots/</span><br><span class="line"><span class="comment"># 打开图片</span></span><br><span class="line">open ~/shell-tools/ScreenShots/screenshot.jpg</span><br></pre></td></tr></table></figure><h4 id="android打包并安装"><a href="#android打包并安装" class="headerlink" title="android打包并安装"></a>android打包并安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /Users/taoyi/git_projects/Gitlab/androidclientnative/</span><br><span class="line">git checkout develop</span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line">rm -rf /Users/taoyi/git_projects/Gitlab/androidclientnative/app/build/</span><br><span class="line">rm -rf /Users/taoyi/shell-tools/APK/*.apk</span><br><span class="line"></span><br><span class="line">gradle clean assembleFengcheBeta</span><br><span class="line"><span class="comment"># gradle clean assembleFengchePreview</span></span><br><span class="line"><span class="comment"># gradle clean assembleFengcheRelease</span></span><br><span class="line"></span><br><span class="line">cp -rf /Users/taoyi/git_projects/Gitlab/androidclientnative/app/build/outputs/apk/beta/*.apk /Users/taoyi/shell-tools/APK/</span><br><span class="line">adb uninstall com.shadow.fengche</span><br><span class="line">adb install /Users/taoyi/shell-tools/APK/*.apk</span><br></pre></td></tr></table></figure><h4 id="Shell脚本解析xml文件字段"><a href="#Shell脚本解析xml文件字段" class="headerlink" title="Shell脚本解析xml文件字段"></a>Shell脚本解析xml文件字段</h4><p>示例文件内容<code>build.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parameters</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hudson.model.StringParameterValue</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>SCHEME<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>scheme configuration of this project StoreCI<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>Coding_iOS<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">hudson.model.StringParameterValue</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hudson.model.StringParameterValue</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>CONFIGURATION<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>configuration of packing, Release/Debug<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>Release<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">hudson.model.StringParameterValue</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hudson.model.StringParameterValue</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>OUTPUT_FOLDER<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>output folder for build artifacts, it is located in workspace/project root dir.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>build_outputs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">hudson.model.StringParameterValue</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hudson.model.StringParameterValue</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>BRANCH<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>git repository branch<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>master<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">hudson.model.StringParameterValue</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parameters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">causeBag</span> <span class="attr">class</span>=<span class="string">"linked-hash-map"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hudson.model.Cause_-UserIdCause</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">userId</span>&gt;</span>shadow<span class="tag">&lt;/<span class="name">userId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">hudson.model.Cause_-UserIdCause</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">int</span>&gt;</span>1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">causeBag</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取&lt;userId&gt;shadow&lt;/userId&gt;中的shadow</span></span><br><span class="line">sed -n <span class="string">'s/.*&gt;\(.*\)&lt;\/userId&gt;/\1/p'</span> <span class="variable">$JENKINS_HOME</span>/<span class="built_in">jobs</span>/<span class="variable">$JOB_NAME</span>/builds/<span class="variable">$BUILD_NUMBER</span>/build.xml</span><br><span class="line"><span class="comment"># 获取&lt;userId&gt;shadow&lt;/userId&gt;中的shadow，赋值给userId</span></span><br><span class="line"><span class="comment"># 使用位置：Jenkins获取构建人</span></span><br><span class="line">userId=(`sed -n <span class="string">'s/.*&gt;\(.*\)&lt;\/userId&gt;/\1/p'</span> <span class="variable">$JENKINS_HOME</span>/<span class="built_in">jobs</span>/<span class="variable">$JOB_NAME</span>/builds/<span class="variable">$BUILD_NUMBER</span>/build.xml`)</span><br></pre></td></tr></table></figure><h4 id="Shell脚本获取文本特定字段"><a href="#Shell脚本获取文本特定字段" class="headerlink" title="Shell脚本获取文本特定字段"></a>Shell脚本获取文本特定字段</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取log文件第一行中，``[0m``字符后面的所有字符</span></span><br><span class="line">head -1 <span class="variable">$JENKINS_HOME</span>/<span class="built_in">jobs</span>/<span class="variable">$JOB_NAME</span>/builds/<span class="variable">$BUILD_NUMBER</span>/<span class="built_in">log</span> | awk -F <span class="string">'\\[0m'</span> <span class="string">'&#123;print $NF&#125;'</span></span><br></pre></td></tr></table></figure><h4 id="Jenkins获取构建人，并赋值到变量并使用"><a href="#Jenkins获取构建人，并赋值到变量并使用" class="headerlink" title="Jenkins获取构建人，并赋值到变量并使用"></a>Jenkins获取构建人，并赋值到变量并使用</h4><p>取值<code>shell</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">head -1 <span class="variable">$JENKINS_HOME</span>/<span class="built_in">jobs</span>/<span class="variable">$JOB_NAME</span>/builds/<span class="variable">$BUILD_NUMBER</span>/<span class="built_in">log</span> | awk -F <span class="string">'\\[0m'</span> <span class="string">'&#123;print $NF&#125;'</span> &gt; userId</span><br><span class="line"><span class="built_in">read</span> userId &lt; userId</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"userId=<span class="variable">$&#123;userId&#125;</span>"</span> &gt; userId.txt</span><br></pre></td></tr></table></figure><p><code>set Build Name</code>中加入构建人</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;PROPFILE,file="userId.txt",property="userId"&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Jenkins获取安卓APP版本号并赋值给变量并使用"><a href="#Jenkins获取安卓APP版本号并赋值给变量并使用" class="headerlink" title="Jenkins获取安卓APP版本号并赋值给变量并使用"></a>Jenkins获取安卓APP版本号并赋值给变量并使用</h4><p>取值<code>shell</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">versionName=`cat app/gradle.properties | grep <span class="string">'VERSION_NAME'</span> | cut -d <span class="string">'='</span> -f 2 `</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"versionName=<span class="variable">$&#123;versionName&#125;</span>"</span> &gt; versionName.txt</span><br></pre></td></tr></table></figure><p><code>set Build Name</code>中加入安卓APP版本号</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;PROPFILE,file="versionName.txt",property="versionName"&#125;</span></span><br></pre></td></tr></table></figure><h4 id="获取目录的所有csv文件并合并为一个csv文件"><a href="#获取目录的所有csv文件并合并为一个csv文件" class="headerlink" title="获取目录的所有csv文件并合并为一个csv文件"></a>获取目录的所有csv文件并合并为一个csv文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">interface=<span class="variable">$1</span></span><br><span class="line"><span class="comment"># 进入脚本所在的位置</span></span><br><span class="line"><span class="built_in">cd</span> /Users/taoyi/git_projects/Gitlab/RF_InterfaceTest/Library/处理接口文档</span><br><span class="line"><span class="comment"># 获取./output/api-docs/shadow/*/*.csv文件并移动到./CSV目录下</span></span><br><span class="line">mv -f ./*/*/*/*/*.csv ./CSV/</span><br><span class="line"><span class="comment"># 把所有的csv文件合并为一个together.csv文件</span></span><br><span class="line">cat ./CSV/*.csv &gt; ./<span class="variable">$interface</span>.csv</span><br><span class="line"><span class="comment"># 删除中间的处理文件</span></span><br><span class="line">rm -rf ./output</span><br><span class="line">rm -rf ./CSV/*.csv</span><br><span class="line"><span class="comment"># 在第一行下加入表头行</span></span><br><span class="line"><span class="comment">#sed -ig "" '1i\属于哪个服务,属于哪个suite,对应RF接口名称\n' ./together.csv</span></span><br></pre></td></tr></table></figure><h4 id="Json中的字典转化成Robot-Framework的参数格式"><a href="#Json中的字典转化成Robot-Framework的参数格式" class="headerlink" title="Json中的字典转化成Robot-Framework的参数格式"></a><code>Json</code>中的字典转化成<code>Robot-Framework</code>的参数格式</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ``Json``中的字典转化成``Robot-Framework``的参数格式</span></span><br><span class="line"><span class="comment"># 先把需要修改的json文本写入文件，再对该文件进行操作</span></span><br><span class="line"><span class="comment"># 示例："./change_Dict.sh pice"</span></span><br><span class="line"></span><br><span class="line">file_name=<span class="variable">$1</span></span><br><span class="line">sed -ig <span class="string">'s/":/=/g'</span> <span class="variable">$file_name</span></span><br><span class="line">sed -ig <span class="string">'s/"//g'</span> <span class="variable">$file_name</span></span><br><span class="line">sed -ig <span class="string">'s/,/    /g'</span> <span class="variable">$file_name</span></span><br></pre></td></tr></table></figure><h4 id="简单的服务器部署脚本"><a href="#简单的服务器部署脚本" class="headerlink" title="简单的服务器部署脚本"></a>简单的服务器部署脚本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -o errexit</span><br><span class="line"><span class="built_in">set</span> -o xtrace</span><br><span class="line"></span><br><span class="line">dir_project_home=<span class="string">"/home/shadow/projects/topgear"</span></span><br><span class="line">dir_tomcat_home=<span class="string">"/home/shadow/tomcats/12001_topgear-test"</span></span><br><span class="line">file_war=<span class="string">"*.war"</span></span><br><span class="line">file_catalina_out=<span class="variable">$&#123;dir_tomcat_home&#125;</span><span class="string">"/logs/catalina.out"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----update code from git begin"</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;dir_project_home&#125;</span></span><br><span class="line">git reset --hard</span><br><span class="line">git pull</span><br><span class="line">branch=<span class="variable">$1</span></span><br><span class="line"><span class="keyword">if</span> [ ! -n <span class="string">"<span class="variable">$branch</span>"</span> ];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    git checkout master</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    git checkout <span class="variable">$branch</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----update code from git end"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----build project begin"</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;dir_project_home&#125;</span></span><br><span class="line"><span class="comment"># mvn config:load -Denv=DEV-STABLE -Dtoken=O6eq7WSKlC</span></span><br><span class="line">mvn clean install  -DskipTests=<span class="literal">true</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----build project end"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----shutdown tomcat"</span></span><br><span class="line">ps auxwww | grep java | grep <span class="variable">$&#123;dir_tomcat_home&#125;</span> | awk <span class="string">'&#123;print $2&#125;'</span> | xargs <span class="built_in">kill</span> -9 2&gt;/dev/null;</span><br><span class="line">sleep 1s</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----reset war file"</span></span><br><span class="line">rm -rf <span class="variable">$&#123;dir_tomcat_home&#125;</span>/webapps/ROOT;</span><br><span class="line">rm -rf <span class="variable">$&#123;dir_tomcat_home&#125;</span>/webapps/ROOT.war;</span><br><span class="line">cp -r <span class="variable">$&#123;dir_project_home&#125;</span>/topgear-web/target/<span class="variable">$file_war</span> <span class="variable">$&#123;dir_tomcat_home&#125;</span>/webapps/ROOT.war</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----start tomcat"</span></span><br><span class="line">sh <span class="variable">$&#123;dir_tomcat_home&#125;</span>/bin/startup.sh;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;dir_tomcat_home&#125;</span>/logs</span><br><span class="line">tail -f catalina.out</span><br></pre></td></tr></table></figure><h4 id="Jenkins上部署Tomcat的通用脚本"><a href="#Jenkins上部署Tomcat的通用脚本" class="headerlink" title="Jenkins上部署Tomcat的通用脚本"></a>Jenkins上部署Tomcat的通用脚本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -o errexit</span><br><span class="line"><span class="built_in">set</span> -o xtrace</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> BUILD_ID=pleaseDontKillMe</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/shadow/java</span><br><span class="line"></span><br><span class="line">dir_tomcat_home=<span class="string">"/home/shadow/tomcats/12001_topgear-test"</span></span><br><span class="line">file_war=<span class="string">"*.war"</span></span><br><span class="line">file_catalina_out=<span class="variable">$&#123;dir_tomcat_home&#125;</span><span class="string">"/logs/catalina.out"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----build project begin"</span></span><br><span class="line">mvn config:load -Denv=DEV-STABLE -Dtoken=O6eq7WSKlC</span><br><span class="line">mvn clean install  -DskipTests=<span class="literal">true</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----build project end"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----shutdown tomcat"</span></span><br><span class="line">ps auxwww | grep java | grep <span class="variable">$&#123;dir_tomcat_home&#125;</span> | awk <span class="string">'&#123;print $2&#125;'</span> | xargs <span class="built_in">kill</span> -9 2&gt;/dev/null;</span><br><span class="line">sleep 1s</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----reset war file"</span></span><br><span class="line">rm -rf <span class="variable">$&#123;dir_tomcat_home&#125;</span>/webapps/ROOT;</span><br><span class="line">rm -rf <span class="variable">$&#123;dir_tomcat_home&#125;</span>/webapps/ROOT.war;</span><br><span class="line">cp -r <span class="variable">$&#123;WORKSPACE&#125;</span>/topgear-web/target/<span class="variable">$file_war</span> <span class="variable">$&#123;dir_tomcat_home&#125;</span>/webapps/ROOT.war</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----start tomcat"</span></span><br><span class="line">sh <span class="variable">$&#123;dir_tomcat_home&#125;</span>/bin/startup.sh;</span><br></pre></td></tr></table></figure><h4 id="自动部署服务器应用"><a href="#自动部署服务器应用" class="headerlink" title="自动部署服务器应用"></a><strong>自动部署服务器应用</strong></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行脚本：</span></span><br><span class="line"><span class="comment"># ./new_server.sh server_tomcat git_repo nu</span></span><br><span class="line"></span><br><span class="line">server_tomcat=<span class="variable">$1</span>    <span class="comment"># server_tomcat 比如：12001_topgear-test</span></span><br><span class="line">git_repo=<span class="variable">$2</span>         <span class="comment"># git_repo 比如：topgear</span></span><br><span class="line">nu=<span class="variable">$3</span>               <span class="comment"># nu 比如：01</span></span><br><span class="line"></span><br><span class="line">tar -xvf apache-tomcat-9.0.4.tar.gz</span><br><span class="line">mv apache-tomcat-9.0.4 <span class="variable">$&#123;server_tomcat&#125;</span></span><br><span class="line">cp 12001_topgear-test/deploy.sh <span class="variable">$&#123;server_tomcat&#125;</span></span><br><span class="line">cp 12001_topgear-test/conf/server.xml <span class="variable">$&#123;server_tomcat&#125;</span>/conf/server.xml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用sed命令时，如果</span></span><br><span class="line">sed -ig <span class="string">"s/11001/110<span class="variable">$&#123;nu&#125;</span>/g"</span> ./<span class="variable">$&#123;server_tomcat&#125;</span>/conf/server.xml</span><br><span class="line">sed -ig <span class="string">"s/12001/120<span class="variable">$&#123;nu&#125;</span>/g"</span> ./<span class="variable">$&#123;server_tomcat&#125;</span>/conf/server.xml</span><br><span class="line">sed -ig <span class="string">"s/13001/130<span class="variable">$&#123;nu&#125;</span>/g"</span> ./<span class="variable">$&#123;server_tomcat&#125;</span>/conf/server.xml</span><br><span class="line">sed -ig <span class="string">"s/14001/140<span class="variable">$&#123;nu&#125;</span>/g"</span> ./<span class="variable">$&#123;server_tomcat&#125;</span>/conf/server.xml</span><br><span class="line">sed -ig <span class="string">"s/15001/150<span class="variable">$&#123;nu&#125;</span>/g"</span> ./<span class="variable">$&#123;server_tomcat&#125;</span>/conf/server.xml</span><br><span class="line"></span><br><span class="line">sed -ig <span class="string">"s/topgear\"/<span class="variable">$&#123;git_repo&#125;</span>\"/g"</span> ./<span class="variable">$&#123;server_tomcat&#125;</span>/deploy.sh</span><br><span class="line">sed -ig <span class="string">"s/12001_topgear-test/<span class="variable">$&#123;server_tomcat&#125;</span>/g"</span> ./<span class="variable">$&#123;server_tomcat&#125;</span>/deploy.sh</span><br><span class="line">sed -ig <span class="string">"s/topgear-web/<span class="variable">$&#123;git_repo&#125;</span>-web/g"</span> ./<span class="variable">$&#123;server_tomcat&#125;</span>/deploy.sh</span><br><span class="line">sed -ig <span class="string">'s/mvn config:load/# mvn config:load/g'</span> ./<span class="variable">$&#123;server_tomcat&#125;</span>/deploy.sh</span><br></pre></td></tr></table></figure><p>Sed后面的表达式一般用单引号引起来<code>&#39;</code>，当需要使用<strong>变量</strong>时就换用双引号<code>&quot;</code>。</p><h4 id="指定次数执行pybot脚本"><a href="#指定次数执行pybot脚本" class="headerlink" title="指定次数执行pybot脚本"></a>指定次数执行<code>pybot</code>脚本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行示例：./repeat_test.sh testCases testSuite num</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试用例名称</span></span><br><span class="line">tcName=<span class="variable">$1</span></span><br><span class="line"><span class="comment"># 测试套件绝对路径</span></span><br><span class="line">directPath=<span class="variable">$2</span></span><br><span class="line"><span class="comment"># 测试用例执行次数</span></span><br><span class="line">total=<span class="variable">$3</span></span><br><span class="line"></span><br><span class="line">count=1</span><br><span class="line"><span class="keyword">while</span> [ <span class="string">"<span class="variable">$count</span>"</span> -le <span class="string">"<span class="variable">$total</span>"</span> ]; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$count</span>"</span></span><br><span class="line">    pybot -d results --<span class="built_in">test</span> <span class="string">"<span class="variable">$tcName</span>"</span> <span class="string">"<span class="variable">$directPath</span>"</span></span><br><span class="line">    count=$((count + 1))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Finished."</span></span><br></pre></td></tr></table></figure><h4 id="顺序列出当前服务器上运营的-tomcat-应用"><a href="#顺序列出当前服务器上运营的-tomcat-应用" class="headerlink" title="顺序列出当前服务器上运营的 tomcat 应用"></a>顺序列出当前服务器上运营的 tomcat 应用</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ps 获取的结果，用"/"分隔，取第十段，并用数字正序排列</span></span><br><span class="line">ps -ef | grep tomcat | awk -F <span class="string">"/"</span> <span class="string">'&#123;print $10 | sort -n&#125;'</span></span><br></pre></td></tr></table></figure><h4 id="指定文件中的换行符替换为空格"><a href="#指定文件中的换行符替换为空格" class="headerlink" title="指定文件中的换行符替换为空格"></a>指定文件中的换行符替换为空格</h4><ol><li>使用正则<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat listTomcat | sed <span class="string">':label;N;s/\n/ /;b label'</span></span><br></pre></td></tr></table></figure></li><li>使用 shell<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat listTomcat | tr <span class="string">"\n"</span> <span class="string">" "</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="根据-tag-和-env-执行用例"><a href="#根据-tag-和-env-执行用例" class="headerlink" title="根据 tag 和 env 执行用例"></a>根据 tag 和 env 执行用例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择环境</span></span><br><span class="line">env=<span class="variable">$1</span></span><br><span class="line"><span class="comment"># 选择需要执行的 tag</span></span><br><span class="line">tag=<span class="variable">$2</span></span><br><span class="line"></span><br><span class="line">~/.pyenv/shims/pybot \</span><br><span class="line">    -d results \</span><br><span class="line">    -V ./envVars.py:<span class="variable">$env</span> \</span><br><span class="line">    --listener ./RobotListener.py \</span><br><span class="line">    --include=<span class="variable">$tag</span> \</span><br><span class="line">    .</span><br></pre></td></tr></table></figure><h4 id="把文件A的内容插入到文件B中的指定行后"><a href="#把文件A的内容插入到文件B中的指定行后" class="headerlink" title="把文件A的内容插入到文件B中的指定行后"></a>把文件A的内容插入到文件B中的指定行后</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="comment">#for test add content from src_file to dest_file at specified place.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># fileName: addLines.sh</span></span><br><span class="line"><span class="comment"># 执行方式：./addLines.sh tomcatDir</span></span><br><span class="line"></span><br><span class="line">tomcatDir=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello, begin..."</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">""</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"dealing <span class="variable">$&#123;tomcatDir&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">src_file=<span class="string">"/home/shadow/scripts/resource"</span></span><br><span class="line">dest_file=<span class="string">"/home/shadow/jenkins/Home/jobs/"</span><span class="variable">$&#123;tomcatDir&#125;</span><span class="string">"/config.xml"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> addLines ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"># delimit_line="==========================================="</span></span><br><span class="line"></span><br><span class="line">:&lt;&lt;BLOCK</span><br><span class="line">    sed -i <span class="string">"2i\\insert line"</span> file 该sed命令使用的是-i参数指定i\选项，在第2行后插入内容</span><br><span class="line">    2i\\ 拆解3部分：2为行号，i\为sed行下追加命令，\为转义字符(必须转义读取变量)</span><br><span class="line">    <span class="string">""</span> 双引号，保持引号内的字面值，可读\$转义后的变量内容，单引号不行。</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$delimit_line</span> | sed -i <span class="string">"2i\\<span class="variable">$delimit_line</span>"</span> <span class="variable">$dest_file</span></span><br><span class="line">BLOCK</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除倒数第二行</span></span><br><span class="line">    sed -i.backup $(($(cat <span class="variable">$&#123;dest_file&#125;</span> | wc -l)))<span class="string">'d'</span> <span class="variable">$&#123;dest_file&#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 读取源文件</span></span><br><span class="line">    cat <span class="variable">$src_file</span> | <span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line">    <span class="comment"># 使用循环，在倒数第二行开始，插入源文件的所有内容</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$line</span> | sed -i $(($(cat <span class="variable">$&#123;dest_file&#125;</span> | wc -l)+1))<span class="string">"i\\<span class="variable">$line</span>"</span> <span class="variable">$dest_file</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$line</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#cat $dest_file</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数执行</span></span><br><span class="line">addLines</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">""</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hey, end..."</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><p><em>shell脚本中调用shell脚本</em></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义jenkins项目目录文件</span></span><br><span class="line">jobsList=<span class="string">"/home/shadow/scripts/jobsList"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> repeatAddLines ()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment"># 获取所有的jenkins项目名称，并写入文件jobsList中</span></span><br><span class="line">	<span class="comment"># ll ~/jenkins/Home/jobs/ | awk '&#123;print $9&#125;' &gt; /home/shadow/scripts/jobsList</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># 由于写入的文件中的第一行为空行，需要删除</span></span><br><span class="line">	<span class="comment"># sed -i '1d' /home/shadow/scripts/jobsList</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># 读取jobsList中的每行</span></span><br><span class="line">	cat <span class="variable">$jobsList</span> | <span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 对每行名称的项目，调用以上代码进行删除和插入的操作</span></span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">		/home/shadow/scripts/addLines.sh <span class="variable">$&#123;line&#125;</span></span><br><span class="line">	<span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数执行</span></span><br><span class="line">repeatAddLines</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>提问的智慧</title>
    <url>/2018/05/21/2018-05-21-Questioning-wisdom/</url>
    <content><![CDATA[<p><strong>How To Ask Questions The Smart Way</strong></p><p>Copyright © 2001,2006,2014 Eric S. Raymond, Rick Moen</p><p>本指南英文版版权为 Eric S. Raymond, Rick Moen 所有。</p><p>原文网址：<a href="http://www.catb.org/~esr/faqs/smart-questions.html" target="_blank" rel="noopener">http://www.catb.org/~esr/faqs/smart-questions.html</a></p><p>Copyleft 2001 by D.H.Grand(nOBODY/Ginux), 2010 by Gasolin, 2015 by Ryan Wu</p><p>本中文指南是基于原文 3.10 版以及 2010 年由 <a href="https://github.com/gasolin" target="_blank" rel="noopener">Gasolin</a> 所翻译版本的最新翻译；</p><a id="more"></a><p>协助指出翻译问题，<strong><strong>请<a href="https://github.com/ryanhanwu/smartquestions/issues/new" target="_blank" rel="noopener">发 Issue</a>，或直接<a href="https://github.com/ryanhanwu/smartquestions/compare/" target="_blank" rel="noopener">发 Pull Request</a> 给我。</strong></strong></p><p>本文另有<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README.md" target="_blank" rel="noopener">繁體中文版</a>。</p><h2 id="原文版本历史"><a href="#原文版本历史" class="headerlink" title="原文版本历史"></a><a href="https://github.com/ryanhanwu/smartquestions/blob/master/history.md" target="_blank" rel="noopener">原文版本历史</a></h2><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#声明">声明</a></li><li><a href="#简介">简介</a></li><li><a href="#在提问之前">在提问之前</a></li><li><a href="#当你提问时">当你提问时</a><ul><li><a href="#慎选提问的论坛">慎选提问的论坛</a></li><li><a href="#stack-overflow">Stack Overflow</a></li><li><a href="#网站和-irc-论坛">网站和 IRC 论坛</a></li><li><a href="#第二步使用项目邮件列表">第二步，使用项目邮件列表</a></li><li><a href="#使用有意义且描述明确的标题">使用有意义且描述明确的标题</a></li><li><a href="#使问题容易回复">使问题容易回复</a></li><li><a href="#用清晰正确精准并合法语法的语句">用清晰、正确、精准并合法语法的语句</a></li><li><a href="#使用易于读取且标准的文件格式发送问题">使用易于读取且标准的文件格式发送问题</a></li><li><a href="#精确的描述问题并言之有物">精确的描述问题并言之有物</a></li><li><a href="#话不在多而在精">话不在多而在精</a></li><li><a href="#别动辄声称找到-bug">别动辄声称找到 Bug</a></li><li><a href="#可以低声下气但还是要先做功课">可以低声下气，但还是要先做功课</a></li><li><a href="#描述问题症状而非猜测">描述问题症状而非猜测</a></li><li><a href="#按发生时间先后列出问题症状">按发生时间先后列出问题症状</a></li><li><a href="#描述目标而不是过程">描述目标而不是过程</a></li><li><a href="#别要求使用私人电邮回复">别要求使用私人电邮回复</a></li><li><a href="#清楚明确的表达你的问题以及需求">清楚明确的表达你的问题以及需求</a></li><li><a href="#询问有关代码的问题时">询问有关代码的问题时</a></li><li><a href="#别把自己家庭作业的问题贴上来">别把自己家庭作业的问题贴上来</a></li><li><a href="#去掉无意义的提问句">去掉无意义的提问句</a></li><li><a href="#即使你很急也不要在标题写紧急">即使你很急也不要在标题写紧急</a></li><li><a href="#礼多人不怪而且有时还很有帮助">礼多人不怪，而且有时还很有帮助</a></li><li><a href="#问题解决后加个简短的补充说明">问题解决后，加个简短的补充说明</a></li></ul></li><li><a href="#如何解读答案">如何解读答案</a><ul><li><a href="#rtfm-和-stfw如何知道你已完全搞砸了">RTFM 和 STFW：如何知道你已完全搞砸了</a></li><li><a href="#如果还是搞不懂">如果还是搞不懂</a></li><li><a href="#处理无礼的回应">处理无礼的回应</a></li></ul></li><li><a href="#如何避免扮演失败者">如何避免扮演失败者</a></li><li><a href="#不该问的问题">不该问的问题</a></li><li><a href="#好问题与蠢问题">好问题与蠢问题</a></li><li><a href="#如果得不到回答">如果得不到回答</a></li><li><a href="#如何更好地回答问题">如何更好地回答问题</a></li><li><a href="#相关资源">相关资源</a></li><li><a href="#鸣谢">鸣谢</a></li></ul><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>许多项目在他们的使用协助/说明网页中链接了本指南，这么做很好，我们也鼓励大家都这么做。但如果你是负责管理这个项目网页的人，请在超链接附近的显著位置上注明：</p><p><strong><strong>本指南不提供此项目的实际支持服务！</strong></strong></p><p>我们已经深刻领教到少了上述声明所带来的痛苦。因为少了这点声明，我们不停地被一些白痴纠缠。这些白痴认为既然我们发布了这本指南，那么我们就有责任解决世上所有的技术问题。</p><p>如果你是因为需要某些协助而正在阅读这本指南，并且最后离开是因为发现从本指南作者们身上得不到直接的协助，那么你就是我们所说的那些白痴之一。别问我们问题，我们只会忽略你。我们在这本指南中是教你如何从那些真正懂得你所遇到软件或硬件问题的人取得协助，而 99% 的情况下那不会是我们。除非你确定本指南的作者之一刚好是你所遇到的问题领域的专家，否则请不要打扰我们，这样大家都会开心一点。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在<a href="http://www.catb.org/~esr/faqs/hacker-howto.html" target="_blank" rel="noopener">黑客</a>的世界里，当你拋出一个技术问题时，最终是否能得到有用的回答，往往取决于你所提问和追问的方式。本指南将教你如何正确的提问以获得你满意的答案。</p><p>不只是黑客，现在开放源代码（Open Source）软件已经相当盛行，你常常也可以由其他有经验的使用者身上得到好答案，这是件<strong>好事</strong>；使用者比起黑客来，往往对那些新手常遇到的问题更宽容一些。然而，将有经验的使用者视为黑客，并采用本指南所提的方法与他们沟通，同样也是能从他们身上得到满意回答的最有效方式。</p><p>首先你应该明白，黑客们喜爱有挑战性的问题，或者能激发他们思维的好问题。如果我们并非如此，那我们也不会成为你想询问的对象。如果你给了我们一个值得反复咀嚼玩味的好问题，我们自会对你感激不尽。好问题是激励，是厚礼。好问题可以提高我们的理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，”好问题！”是诚挚的大力称赞。</p><p>尽管如此，黑客们有着蔑视或傲慢面对简单问题的坏名声，这有时让我们看起来对新手、无知者似乎较有敌意，但其实不是那样的。</p><p>我们不讳言我们对那些不愿思考、或者在发问前不做他们该做的事的人的蔑视。那些人是时间杀手 -– 他们只想索取，从不付出，消耗我们可用在更有趣的问题或更值得回答的人身上的时间。我们称这样的人为 <code>失败者（撸瑟）</code> （由于历史原因，我们有时把它拼作 <code>lusers</code>）。</p><p>我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，电脑只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做。我们了解这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。尽管如此，我们回答问题的风格是指向那些真正对此有兴趣并愿意主动参与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就是在降低做自己最擅长的事情上的效率。</p><p>我们（在很大程度上）是自愿的，从繁忙的生活中抽出时间来解答疑惑，而且时常被提问淹没。所以我们无情的滤掉一些话题，特别是拋弃那些看起来像失败者的家伙，以便更高效的利用时间来回答<code>赢家（winner）</code>的问题。</p><p>如果你厌恶我们的态度，高高在上，或过于傲慢，不妨也设身处地想想。我们并没有要求你向我们屈服 – 事实上，我们大多数人非常乐意与你平等地交流，只要你付出小小努力来满足基本要求，我们就会欢迎你加入我们的文化。但让我们帮助那些不愿意帮助自己的人是没有效率的。无知没有关系，但装白痴就是不行。</p><p>所以，你不必在技术上很在行才能吸引我们的注意，但你必须表现出能引导你变得在行的特质 – 机敏、有想法、善于观察、乐于主动参与解决问题。如果你做不到这些使你与众不同的事情，我们建议你花点钱找家商业公司签个技术支持服务合同，而不是要求黑客个人无偿地帮助你。</p><p>如果你决定向我们求助，当然你也不希望被视为失败者，更不愿成为失败者中的一员。能立刻得到快速并有效答案的最好方法，就是像赢家那样提问 – 聪明、自信、有解决问题的思路，只是偶尔在特定的问题上需要获得一点帮助。</p><p>（欢迎对本指南提出改进意见。你可以 email 你的建议至 <a href="esr@thyrsus.com">esr@thyrsus.com</a> 或 <a href="respond-auto@linuxmafia.com">respond-auto@linuxmafia.com</a>。然而请注意，本文并非<a href="http://www.ietf.org/rfc/rfc1855.txt" target="_blank" rel="noopener">网络礼节</a>的通用指南，而我们通常会拒绝无助于在技术论坛得到有用答案的建议）。</p><h2 id="在提问之前"><a href="#在提问之前" class="headerlink" title="在提问之前"></a>在提问之前</h2><p>在你准备要通过电子邮件、新闻群组或者聊天室提出技术问题前，请先做到以下事情：</p><ol><li>尝试在你准备提问的论坛的旧文章中搜索答案。</li><li>尝试上网搜索以找到答案。</li><li>尝试阅读手册以找到答案。</li><li>尝试阅读常见问题文件（FAQ）以找到答案。</li><li>尝试自己检查或试验以找到答案。</li><li>向你身边的强者朋友打听以找到答案。</li><li>如果你是程序开发者，请尝试阅读源代码以找到答案。</li></ol><p>当你提出问题的时候，请先表明你已经做了上述的努力；这将有助于树立你并不是一个不劳而获且浪费别人的时间的提问者。如果你能一并表达在做了上述努力的过程中所<strong>学到</strong>的东西会更好，因为我们更乐于回答那些表现出能从答案中学习的人的问题。</p><p>运用某些策略，比如先用 Google 搜索你所遇到的各种错误信息（既搜索 <a href="http://groups.google.com/" target="_blank" rel="noopener">Google 论坛</a>，也搜索网页），这样很可能直接就找到了能解决问题的文件或邮件列表线索。即使没有结果，在邮件列表或新闻组寻求帮助时加上一句 <code>我在 Google 中搜过下列句子但没有找到什么有用的东西</code> 也是件好事，即使它只是表明了搜索引擎不能提供哪些帮助。这么做（加上搜索过的字串）也让遇到相似问题的其他人能被搜索引擎引导到你的提问来。</p><p>别着急，不要指望几秒钟的 Google 搜索就能解决一个复杂的问题。在向专家求助之前，再阅读一下常见问题文件（FAQ）、放轻松、坐舒服一些，再花点时间思考一下这个问题。相信我们，他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑拋出，只因你的第一次搜索没有找到答案（或者找到太多答案）。</p><p>准备好你的问题，再将问题仔细的思考过一遍，因为草率的发问只能得到草率的回答，或者根本得不到任何答案。越是能表现出在寻求帮助前你为解决问题所付出的努力，你越有可能得到实质性的帮助。</p><p>小心别问错了问题。如果你的问题基于错误的假设，某个普通黑客（J. Random Hacker）多半会一边在心里想着<code>蠢问题…</code>， 一边用无意义的字面解释来答复你，希望着你会从问题的回答（而非你想得到的答案）中汲取教训。</p><p>绝不要自以为<strong>够格</strong>得到答案，你没有；你并没有。毕竟你没有为这种服务支付任何报酬。你将会是自己去<strong>挣到</strong>一个答案，靠提出有内涵的、有趣的、有思维激励作用的问题 –一个有潜力能贡献社区经验的问题，而不仅仅是被动的从他人处索取知识。</p><p>另一方面，表明你愿意在找答案的过程中做点什么是一个非常好的开端。<code>谁能给点提示？</code>、<code>我的这个例子里缺了什么？</code>以及<code>我应该检查什么地方</code>比<code>请把我需要的确切的过程贴出来</code>更容易得到答复。因为你表现出只要有人能指个正确方向，你就有完成它的能力和决心。</p><h2 id="当你提问时"><a href="#当你提问时" class="headerlink" title="当你提问时"></a>当你提问时</h2><h3 id="慎选提问的论坛"><a href="#慎选提问的论坛" class="headerlink" title="慎选提问的论坛"></a>慎选提问的论坛</h3><p>小心选择你要提问的场合。如果你做了下述的事情，你很可能被忽略掉或者被看作失败者：</p><ul><li>在与主题不合的论坛上贴出你的问题。</li><li>在探讨进阶技术问题的论坛张贴非常初级的问题；反之亦然。</li><li>在太多的不同新闻群组上重复转贴同样的问题（cross-post）。</li><li>向既非熟人也没有义务解决你问题的人发送私人电邮。</li></ul><p>黑客会剔除掉那些搞错场合的问题，以保护他们沟通的渠道不被无关的东西淹没。你不会想让这种事发生在自己身上的。</p><p>因此，第一步是找到对的论坛。再说一次，Google 和其它搜索引擎还是你的朋友，用它们来找到与你遭遇到困难的软硬件问题最相关的网站。通常那儿都有常见问题（FAQ）、邮件列表及相关说明文件的链接。如果你的努力（包括<strong>阅读</strong> FAQ）都没有结果，网站上也许还有报告 Bug（Bug-reporting）的流程或链接，如果是这样，链过去看看。</p><p>向陌生的人或论坛发送邮件最可能是风险最大的事情。举例来说，别假设一个提供丰富内容的网页的作者会想充当你的免费顾问。不要对你的问题是否会受到欢迎做太乐观的估计 – 如果你不确定，那就向别处发送，或者压根别发。</p><p>在选择论坛、新闻群组或邮件列表时，别太相信名字，先看看 FAQ 或者许可书以弄清楚你的问题是否切题。发文前先翻翻已有的话题，这样可以让你感受一下那里的文化。事实上，事先在新闻组或邮件列表的历史记录中搜索与你问题相关的关键词是个极好的主意，也许这样就找到答案了。即使没有，也能帮助你归纳出更好的问题。</p><p>别像机关枪似的一次”扫射”所有的帮助渠道，这就像大喊大叫一样会使人不快。要一个一个地来。</p><p>搞清楚你的主题！最典型的错误之一是在某种致力于跨平台可移植的语言、套件或工具的论坛中提关于 Unix 或 Windows 操作系统程序界面的问题。如果你不明白为什么这是大错，最好在搞清楚这之间差异之前什么也别问。</p><p>一般来说，在仔细挑选的公共论坛中提问，会比在私有论坛中提同样的问题更容易得到有用的回答。有几个理由可以支持这点，一是看潜在的回复者有多少，二是看观众有多少。黑客较愿意回答那些能帮助到许多人的问题。</p><p>可以理解的是，老练的黑客和一些热门软件的作者正在接受过多的错发信息。就像那根最后压垮骆驼背的稻草一样，你的加入也有可能使情况走向极端 – 已经好几次了，一些热门软件的作者从自己软件的支持中抽身出来，因为伴随而来涌入其私人邮箱的无用邮件变得无法忍受。</p><h3 id="Stack-Overflow"><a href="#Stack-Overflow" class="headerlink" title="Stack Overflow"></a>Stack Overflow</h3><p>搜索，<strong>然后</strong> 在 Stack Exchange 问。</p><p>近年来，Stack Exchange community 社区已经成为回答技术及其他问题的主要渠道，尤其是那些开放源码的项目。</p><p>因为 Google 索引是即时的，在看 Stack Exchange 之前先在 Google 搜索。有很高的机率某人已经问了一个类似的问题，而且 Stack Exchange 网站们往往会是搜索结果中最前面几个。如果你在 Google 上没有找到任何答案，你再到特定相关主题的网站去找。用标签（Tag）搜索能让你更缩小你的搜索结果。</p><p>Stack Exchange 已经成长到<a href="http://stackexchange.com/sites" target="_blank" rel="noopener">超过一百个网站</a>，以下是最常用的几个站：</p><ul><li>Super User 是问一些通用的电脑问题，如果你的问题跟代码或是写程序无关，只是一些网络连线之类的，请到这里。</li><li>Stack Overflow 是问写程序有关的问题。</li><li>Server Fault 是问服务器和网管相关的问题。</li></ul><h3 id="网站和-IRC-论坛"><a href="#网站和-IRC-论坛" class="headerlink" title="网站和 IRC 论坛"></a>网站和 IRC 论坛</h3><p>本地的使用者群组（user group），或者你所用的 Linux 发行版本也许正在宣传他们的网页论坛或 IRC 频道，并提供新手帮助（在一些非英语国家，新手论坛很可能还是邮件列表）， 这些地方是开始提问的好首选，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。有广告赞助的 IRC 频道是公开欢迎提问的地方，通常可以即时得到回应。</p><p>事实上，如果程序出的问题只发生在特定 Linux 发行版提供的版本（这很常见），最好先去该发行版的论坛或邮件列表中提问，再到程序本身的论坛或邮件列表提问。（否则）该项目的黑客可能仅仅回复 “用<strong>我们的</strong>版本”。</p><p>在任何论坛发文以前，先确认一下有没有搜索功能。如果有，就试着搜索一下问题的几个关键词，也许这会有帮助。如果在此之前你已做过通用的网页搜索（你也该这样做），还是再搜索一下论坛，搜索引擎有可能没来得及索引此论坛的全部内容。</p><p>通过论坛或 IRC 频道来提供使用者支持服务有增长的趋势，电子邮件则大多为项目开发者间的交流而保留。所以最好先在论坛或 IRC 中寻求与该项目相关的协助。</p><p>在使用 IRC 的时候，首先最好不要发布很长的问题描述，有些人称之为频道洪水。最好通过一句话的问题描述来开始聊天。</p><h3 id="第二步，使用项目邮件列表"><a href="#第二步，使用项目邮件列表" class="headerlink" title="第二步，使用项目邮件列表"></a>第二步，使用项目邮件列表</h3><p>当某个项目提供开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答你的问题。查一查项目的文件和首页，找到项目的邮件列表并使用它。有几个很好的理由支持我们采用这种办法：</p><ul><li>任何好到需要向个别开发者提出的问题，也将对整个项目群组有益。反之，如果你认为自己的问题对整个项目群组来说太愚蠢，也不能成为骚扰个别开发者的理由。</li><li>向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导人）也许太忙以至于没法回答你的问题。</li><li>大多数邮件列表都会被存档，那些被存档的内容将被搜索引擎索引。如果你向列表提问并得到解答，将来其它人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。</li><li>如果某些问题经常被问到，开发者可以利用此信息来改进说明文件或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。</li></ul><p>如果一个项目既有”使用者” 也有”开发者”（或”黑客”）邮件列表或论坛，而你又不会动到那些源代码，那么就向”使用者”列表或论坛提问。不要假设自己会在开发者列表中受到欢迎，那些人多半会将你的提问视为干扰他们开发的噪音。</p><p>然而，如果你<strong>确信</strong>你的问题很特别，而且在”使用者” 列表或论坛中几天都没有回复，可以试试前往”开发者”列表或论坛发问。建议你在张贴前最好先暗地里观察几天以了解那里的行事方式（事实上这是参与任何私有或半私有列表的好主意）</p><p>如果你找不到一个项目的邮件列表，而只能查到项目维护者的电子邮件地址，尽管向他发信。即使是在这种情况下，也别假设（项目）邮件列表不存在。在你的电子邮件中，请陈述你已经试过但没有找到合适的邮件列表，也提及你不反对将自己的邮件转发给他人（许多人认为，即使没什么秘密，私人电子邮件也不应该被公开。通过允许将你的电子邮件转发他人，你给了相应人员处置你邮件的选择）。</p><h3 id="使用有意义且描述明确的标题"><a href="#使用有意义且描述明确的标题" class="headerlink" title="使用有意义且描述明确的标题"></a>使用有意义且描述明确的标题</h3><p>在邮件列表、新闻群组或论坛中，大约 50 字以内的标题是抓住资深专家注意力的好机会。别用喋喋不休的<code>帮帮忙</code>、<code>跪求</code>、<code>急</code>（更别说<code>救命啊！！！！</code>这样让人反感的话，用这种标题会被条件反射式地忽略）来浪费这个机会。不要妄想用你的痛苦程度来打动我们，而应该是在这点空间中使用极简单扼要的描述方式来提出问题。</p><p>一个好标题范例是<code>目标 -- 差异</code>式的描述，许多技术支持组织就是这样做的。在<code>目标</code>部分指出是哪一个或哪一组东西有问题，在<code>差异</code>部分则描述与期望的行为不一致的地方。</p><blockquote><p>蠢问题：救命啊！我的笔记本电脑不能正常显示了！</p></blockquote><blockquote><p>聪明问题：X.org 6.8.1 的鼠标光标会变形，某牌显卡 MV1005 芯片组。</p></blockquote><blockquote><p>更聪明问题：X.org 6.8.1 的鼠标光标，在某牌显卡 MV1005 芯片组环境下 - 会变形。</p></blockquote><p>编写<code>目标 -- 差异</code> 式描述的过程有助于你组织对问题的细致思考。是什么被影响了？ 仅仅是鼠标光标或者还有其它图形？只在 X.org 的 X 版中出现？或只是出现在 6.8.1 版中？ 是针对某牌显卡芯片组？或者只是其中的 MV1005 型号？ 一个黑客只需瞄一眼就能够立即明白你的环境<strong>和</strong>你遇到的问题。</p><p>总而言之，请想像一下你正在一个只显示标题的存档讨论串（Thread）索引中查寻。让你的标题更好地反映问题，可使下一个搜索类似问题的人能够关注这个讨论串，而不用再次提问相同的问题。</p><p>如果你想在回复中提出问题，记得要修改内容标题，以表明你是在问一个问题， 一个看起来像 <code>Re: 测试</code> 或者 <code>Re: 新 bug</code> 的标题很难引起足够重视。另外，在不影响连贯性之下，适当引用并删减前文的内容，能给新来的读者留下线索。</p><p>对于讨论串，不要直接点击回复来开始一个全新的讨论串，这将限制你的观众。因为有些邮件阅读程序，比如 mutt ，允许使用者按讨论串排序并通过折叠讨论串来隐藏消息，这样做的人永远看不到你发的消息。</p><p>仅仅改变标题还不够。mutt 和其它一些邮件阅读程序还会检查邮件标题以外的其它信息，以便为其指定讨论串。所以宁可发一个全新的邮件。</p><p>在网页论坛上，好的提问方式稍有不同，因为讨论串与特定的信息紧密结合，并且通常在讨论串外就看不到里面的内容，故通过回复提问，而非改变标题是可接受的。不是所有论坛都允许在回复中出现分离的标题，而且这样做了基本上没有人会去看。不过，通过回复提问，这本身就是暧昧的做法，因为它们只会被正在查看该标题的人读到。所以，除非你<strong>只想</strong>在该讨论串当前活跃的人群中提问，不然还是另起炉灶比较好。</p><h3 id="使问题容易回复"><a href="#使问题容易回复" class="headerlink" title="使问题容易回复"></a>使问题容易回复</h3><p>以<code>请将你的回复寄到……</code>来结束你的问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟思考你的问题更麻烦。如果你的邮件程序不支持这样做，<a href="http://linuxmafia.com/faq/Mail/muas.html" target="_blank" rel="noopener">换个好点的</a>；如果是操作系统不支持这种邮件程序，也换个好点的。</p><p>在论坛，要求通过电子邮件回复是非常无礼的，除非你相信回复的信息可能比较敏感（而且有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复讨论串时得到电子邮件提醒，可以要求网页论坛发送给你。几乎所有论坛都支持诸如<code>追踪此讨论串</code>、<code>有回复时发送邮件提醒</code>等功能。</p><h3 id="用清晰、正确、精准并语法正确的语句"><a href="#用清晰、正确、精准并语法正确的语句" class="headerlink" title="用清晰、正确、精准并语法正确的语句"></a>用清晰、正确、精准并语法正确的语句</h3><p>我们从经验中发现，粗心的提问者通常也会粗心的写程序与思考（我敢打包票）。回答粗心大意者的问题很不值得，我们宁愿把时间耗在别处。</p><p>正确的拼写、标点符号和大小写是很重要的。一般来说，如果你觉得这样做很麻烦，不想在乎这些，那我们也觉得麻烦，不想在乎你的提问。花点额外的精力斟酌一下字句，用不着太僵硬与正式 – 事实上，黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它<strong>必须很</strong>准确，而且有迹象表明你是在思考和关注问题。</p><p>正确地拼写、使用标点和大小写，不要将<code>its</code>混淆为<code>it&#39;s</code>，<code>loose</code>搞成<code>lose</code>或者将<code>discrete</code>弄成<code>discreet</code>。不要<strong>全部用大写</strong>，这会被视为无礼的大声嚷嚷（全部小写也好不到哪去，因为不易阅读。<a href="http://en.wikipedia.org/wiki/Alan_Cox" target="_blank" rel="noopener">Alan Cox</a> 也许可以这样做，但你不行）。</p><p>更白话的说，如果你写得像是个半文盲[译注：<a href="http://zh.wikipedia.org/wiki/小白" target="_blank" rel="noopener">小白</a>]，那多半得不到理睬。也不要使用即时通信中的简写或<a href="http://zh.wikipedia.org/wiki/火星文" target="_blank" rel="noopener">火星文</a>，如将<code>的</code>简化为<code>d</code>会使你看起来像一个为了少打几个键而省字的小白。更糟的是，如果像个小孩似地鬼画符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。</p><p>如果在使用非母语的论坛提问，你可以犯点拼写和语法上的小错，但决不能在思考上马虎（没错，我们通常能弄清两者的分别）。同时，除非你知道回复者使用的语言，否则请使用英语书写。繁忙的黑客一般会直接删除用他们看不懂语言写的消息。在网络上英语是通用语言，用英语书写可以将你的问题在尚未被阅读就被直接删除的可能性降到最低。</p><p>如果英文是你的外语（Second language），提示潜在回复者你有潜在的语言困难是很好的：<br>[译注：以下附上原文以供使用]</p><blockquote><p>English is not my native language; please excuse typing errors.</p></blockquote><ul><li>英文不是我的母语，请原谅我的错字或语法。</li></ul><blockquote><p>If you speak $LANGUAGE, please email/PM me;<br>I may need assistance translating my question.</p></blockquote><ul><li>如果你说<strong>某语言</strong>，请寄信/私讯给我；我需要有人协助我翻译我的问题。</li></ul><blockquote><p>I am familiar with the technical terms,<br>but some slang expressions and idioms are difficult for me.</p></blockquote><ul><li>我对技术名词很熟悉，但对于俗语或是特别用法比较不甚了解。</li></ul><blockquote><p>I’ve posted my question in $LANGUAGE and English.<br>I’ll be glad to translate responses, if you only use one or the other.</p></blockquote><ul><li>我把我的问题用<strong>某语言</strong>和英文写出来，如果你只用一种语言回答，我会乐意将其翻译成另一种。</li></ul><h3 id="使用易于读取且标准的文件格式发送问题"><a href="#使用易于读取且标准的文件格式发送问题" class="headerlink" title="使用易于读取且标准的文件格式发送问题"></a>使用易于读取且标准的文件格式发送问题</h3><p>如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以：</p><ul><li>使用纯文字而不是 HTML (<a href="http://archive.birdhouse.org/etc/evilmail.html" target="_blank" rel="noopener">关闭 HTML</a> 并不难）。</li><li>使用 MIME 附件通常是可以的，前提是真正有内容（譬如附带的源代码或 patch），而不仅仅是邮件程序生成的模板（譬如只是信件内容的拷贝）。</li><li>不要发送一段文字只是一行句子但自动换行后会变成多行的邮件（这使得回复部分内容非常困难）。设想你的读者是在 80 个字符宽的终端机上阅读邮件，最好设置你的换行分割点小于 80 字。</li><li>但是，对一些特殊的文件<strong>不要</strong>设置固定宽度（譬如日志档案拷贝或会话记录）。数据应该原样包含，让回复者有信心他们看到的是和你看到的一样的东西。</li><li>在英语论坛中，不要使用<code>Quoted-Printable</code> MIME 编码发送消息。这种编码对于张贴非 ASCII 语言可能是必须的，但很多邮件程序并不支持这种编码。当它们处理换行时，那些文本中四处散布的<code>=20</code>符号既难看也分散注意力，甚至有可能破坏内容的语意。</li><li>绝对，<strong>永远</strong>不要指望黑客们阅读使用封闭格式编写的文档，像微软公司的 Word 或 Excel 文件等。大多数黑客对此的反应就像有人将还在冒热气的猪粪倒在你家门口时你的反应一样。即便他们能够处理，他们也很厌恶这么做。</li><li>如果你从使用 Windows 的电脑发送电子邮件，关闭微软愚蠢的<code>智能引号</code>功能 （从[选项] &gt; [校订] &gt; [自动校正选项]，勾选掉<code>智能引号</code>单选框），以免在你的邮件中到处散布垃圾字符。</li><li>在论坛，勿滥用<code>表情符号</code>和<code>HTML</code>功能（当它们提供时）。一两个表情符号通常没有问题，但花哨的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来像个傻笑的小姑娘。这通常不是个好主意，除非你只是对性而不是对答案感兴趣。</li></ul><p>如果你使用图形用户界面的邮件程序（如微软公司的 Outlook 或者其它类似的），注意它们的默认设置不一定满足这些要求。大多数这类程序有基于选单的<code>查看源代码</code>命令，用它来检查发送文件夹中的邮件，以确保发送的是纯文本文件同时没有一些奇怪的字符。</p><h3 id="精确的描述问题并言之有物"><a href="#精确的描述问题并言之有物" class="headerlink" title="精确的描述问题并言之有物"></a>精确的描述问题并言之有物</h3><ul><li>仔细、清楚地描述你的问题或 Bug 的症状。</li><li>描述问题发生的环境（机器配置、操作系统、应用程序、以及相关的信息），提供经销商的发行版和版本号（如：<code>Fedora Core 4</code>、<code>Slackware 9.1</code>等）。</li><li>描述在提问前你是怎样去研究和理解这个问题的。</li><li>描述在提问前为确定问题而采取的诊断步骤。</li><li>描述最近做过什么可能相关的硬件或软件变更。</li><li>尽可能的提供一个可以<code>重现这个问题的可控环境</code>的方法。</li></ul><p>尽量去揣测一个黑客会怎样反问你，在你提问之前预先将黑客们可能遇到的问题回答一遍。</p><p>以上几点中，当你报告的是你认为可能在代码中的问题时，给黑客一个可以重现你的问题的环境尤其重要。当你这么做时，你得到有效的回答的机会和速度都会大大的提升。</p><p><a href="http://www.chiark.greenend.org.uk/~sgtatham/" target="_blank" rel="noopener">Simon Tatham</a> 写过一篇名为《<a href="http://www.chiark.greenend.org.uk/~sgtatham/bugs-tw.html" target="_blank" rel="noopener">如何有效的报告 Bug</a>》的出色文章。强力推荐你也读一读。</p><h3 id="话不在多而在精"><a href="#话不在多而在精" class="headerlink" title="话不在多而在精"></a>话不在多而在精</h3><p>你需要提供精确有内容的信息。这并不是要求你简单的把成堆的出错代码或者资料完全转录到你的提问中。如果你有庞大而复杂的测试样例能重现程序挂掉的情境，尽量将它剪裁得越小越好。</p><p>这样做的用处至少有三点。<br>第一，表现出你为简化问题付出了努力，这可以使你得到回答的机会增加；<br>第二，简化问题使你更有可能得到<strong>有用</strong>的答案；<br>第三，在精炼你的 bug 报告的过程中，你很可能就自己找到了解决方法或权宜之计。</p><h3 id="别动辄声称找到-Bug"><a href="#别动辄声称找到-Bug" class="headerlink" title="别动辄声称找到 Bug"></a>别动辄声称找到 Bug</h3><p>当你在使用软件中遇到问题，除非你非常、<strong>非常</strong>的有根据，不要动辄声称找到了 Bug。提示：除非你能提供解决问题的源代码补丁，或者提供回归测试来表明前一版本中行为不正确，否则你都多半不够完全确信。这同样适用在网页和文件，如果你（声称）发现了文件的<code>Bug</code>，你应该能提供相应位置的修正或替代文件。</p><p>请记得，还有许多其它使用者没遇到你发现的问题，否则你在阅读文件或搜索网页时就应该发现了（你在抱怨前<a href="#在提问之前">已经做了这些，是吧</a>？）。这也意味着很有可能是你弄错了而不是软件本身有问题。</p><p>编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了 Bug，也就是在质疑他们的能力，即使你是对的，也有可能会冒犯到其中某部分人。当你在标题中嚷嚷着有<code>Bug</code>时，这尤其严重。</p><p>提问时，即使你私下非常确信已经发现一个真正的 Bug，最好写得像是<strong>你</strong>做错了什么。如果真的有 Bug，你会在回复中看到这点。这样做的话，如果真有 Bug，维护者就会向你道歉，这总比你惹恼别人然后欠别人一个道歉要好一点。</p><h3 id="低声下气不能代替你的功课"><a href="#低声下气不能代替你的功课" class="headerlink" title="低声下气不能代替你的功课"></a>低声下气不能代替你的功课</h3><p>有些人明白他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另一个极端 – 低声下气：<code>我知道我只是个可悲的新手，一个撸瑟，但...</code>。这既使人困扰，也没有用，尤其是伴随着与实际问题含糊不清的描述时更令人反感。</p><p>别用原始灵长类动物的把戏来浪费你我的时间。取而代之的是，尽可能清楚地描述背景条件和你的问题情况。这比低声下气更好地定位了你的位置。</p><p>有时网页论坛会设有专为新手提问的版面，如果你真的认为遇到了初学者的问题，到那去就是了，但一样别那么低声下气。</p><h3 id="描述问题症状而非你的猜测"><a href="#描述问题症状而非你的猜测" class="headerlink" title="描述问题症状而非你的猜测"></a>描述问题症状而非你的猜测</h3><p>告诉黑客们你认为问题是怎样造成的并没什么帮助。（如果你的推断如此有效，还用向别人求助吗？），因此要确信你原原本本告诉了他们问题的症状，而不是你的解释和理论；让黑客们来推测和诊断。如果你认为陈述自己的猜测很重要，清楚地说明这只是你的猜测，并描述为什么它们不起作用。</p><p><strong><em>蠢问题</em></strong></p><blockquote><p>我在编译内核时接连遇到 SIG11 错误，<br>我怀疑某条飞线搭在主板的走线上了，这种情况应该怎样检查最好？</p></blockquote><p><strong><em>聪明问题</em></strong></p><blockquote><p>我的组装电脑是 FIC-PA2007 主机板搭载 AMD K6/233 CPU（威盛 Apollo VP2 芯片组），<br>256MB Corsair PC133 SDRAM 内存，在编译内核时，从开机 20 分钟以后就频频产生 SIG11 错误，<br>但是在头 20 分钟内从没发生过相同的问题。重新启动也没有用，但是关机一晚上就又能工作 20 分钟。<br>所有内存都换过了，没有效果。相关部分的标准编译记录如下…。</p></blockquote><p>由于以上这点似乎让许多人觉得难以配合，这里有句话可以提醒你：<code>所有的诊断专家都来自密苏里州。</code> 美国国务院的官方座右铭则是：<code>让我看看</code>（出自国会议员 Willard D. Vandiver 在 1899 年时的讲话：<code>我来自一个出产玉米，棉花，牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。</code>） 针对诊断者而言，这并不是一种怀疑，而只是一种真实而有用的需求，以便让他们看到的是与你看到的原始证据尽可能一致的东西，而不是你的猜测与归纳的结论。所以，大方的展示给我们看吧！</p><h3 id="按发生时间先后列出问题症状"><a href="#按发生时间先后列出问题症状" class="headerlink" title="按发生时间先后列出问题症状"></a>按发生时间先后列出问题症状</h3><p>问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行脚本工具所生成的），并引用相关的若干行（如 20 行）记录会非常有帮助。</p><p>如果挂掉的程序有诊断选项（如 -v 的详述开关），试着选择这些能在记录中增加调试信息的选项。记住，<code>多</code>不等于<code>好</code>。试着选取适当的调试级别以便提供有用的信息而不是让读者淹没在垃圾中。</p><p>如果你的说明很长（如超过四个段落），在开头简述问题，接下来再按时间顺序详述会有所帮助。这样黑客们在读你的记录时就知道该注意哪些内容了。</p><h3 id="描述目标而不是过程"><a href="#描述目标而不是过程" class="headerlink" title="描述目标而不是过程"></a>描述目标而不是过程</h3><p>如果你想弄清楚如何做某事（而不是报告一个 Bug），在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。</p><p>经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。</p><p><strong>蠢问题</strong></p><blockquote><p>我怎样才能从某绘图程序的颜色选择器中取得十六进制的的 RGB 值？</p></blockquote><p><strong>聪明问题</strong></p><blockquote><p>我正试着用替换一幅图片的色码（color table）成自己选定的色码，我现在知道的唯一方法是编辑每个色码区块（table slot），<br>但却无法从某绘图程序的颜色选择器取得十六进制的的 RGB 值。</p></blockquote><p>第二种提问法比较聪明，你可能得到像是<code>建议采用另一个更合适的工具</code>的回复。</p><h3 id="别要求使用私人电邮回复"><a href="#别要求使用私人电邮回复" class="headerlink" title="别要求使用私人电邮回复"></a>别要求使用私人电邮回复</h3><p>黑客们认为问题的解决过程应该公开、透明，此过程中如果更有经验的人注意到不完整或者不当之处，最初的回复才能够、也应该被纠正。同时，作为提供帮助者可以得到一些奖励，奖励就是他的能力和学识被其他同行看到。</p><p>当你要求私下回复时，这个过程和奖励都被中止。别这样做，让<strong>回复者</strong>来决定是否私下回答 – 如果他真这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于对其它人没有兴趣。</p><p>这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么这个神奇的提问句会是<code>向我发电邮，我将为论坛归纳这些回复</code>。试着将邮件列表或新闻群组从洪水般的雷同回复中解救出来是非常有礼貌的 – 但你必须信守诺言。</p><h3 id="清楚明确的表达你的问题以及需求"><a href="#清楚明确的表达你的问题以及需求" class="headerlink" title="清楚明确的表达你的问题以及需求"></a>清楚明确的表达你的问题以及需求</h3><p>漫无边际的提问是近乎无休无止的时间黑洞。最有可能给你有用答案的人通常也正是最忙的人（他们忙是因为要亲自完成大部分工作）。这样的人对无节制的时间黑洞相当厌恶，所以他们也倾向于厌恶那些漫无边际的提问。</p><p>如果你明确表述需要回答者做什么（如提供指点、发送一段代码、检查你的补丁、或是其他等等），就最有可能得到有用的答案。因为这会定出一个时间和精力的上限，便于回答者能集中精力来帮你。这么做很棒。</p><p>要理解专家们所处的世界，请把专业技能想像为充裕的资源，而回复的时间则是稀缺的资源。你要求他们奉献的时间越少，你越有可能从真正专业而且很忙的专家那里得到解答。</p><p>所以，界定一下你的问题，使专家花在辨识你的问题和回答所需要付出的时间减到最少，这技巧对你有用答案相当有帮助 – 但这技巧通常和简化问题有所区别。因此，问<code>我想更好的理解 X，可否指点一下哪有好一点说明？</code>通常比问<code>你能解释一下 X 吗？</code>更好。如果你的代码不能运作，通常请别人看看哪里有问题，比要求别人替你改正要明智得多。</p><h3 id="询问有关代码的问题时"><a href="#询问有关代码的问题时" class="headerlink" title="询问有关代码的问题时"></a>询问有关代码的问题时</h3><p>别要求他人帮你调试有问题的代码，不提示一下应该从何入手。张贴几百行的代码，然后说一声：<code>它不能工作</code>会让你完全被忽略。只贴几十行代码，然后说一句：<code>在第七行以后，我期待它显示 &lt;x&gt;，但实际出现的是 &lt;y&gt;</code>比较有可能让你得到回应。</p><p>最有效描述程序问题的方法是提供最精简的 Bug 展示测试用例（bug-demonstrating test case）。什么是最精简的测试用例？那是问题的缩影；一小个程序片段能<strong>刚好</strong>展示出程序的异常行为，而不包含其他令人分散注意力的内容。怎么制作最精简的测试用例？如果你知道哪一行或哪一段代码会造成异常的行为，复制下来并加入足够重现这个状况的代码（例如，足以让这段代码能被编译/直译/被应用程序处理）。如果你无法将问题缩减到一个特定区块，就复制一份代码并移除不影响产生问题行为的部分。总之，测试用例越小越好（查看<a href="#话不在多而在精">话不在多而在精</a>一节）。</p><p>一般而言，要得到一段相当精简的测试用例并不太容易，但永远先尝试这样做的是种好习惯。这种方式可以帮助你了解如何自行解决这个问题 —- 而且即使你的尝试不成功，黑客们也会看到你在尝试取得答案的过程中付出了努力，这可以让他们更愿意与你合作。</p><p>如果你只是想让别人帮忙审查（Review）一下代码，在信的开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。</p><h3 id="别把自己家庭作业的问题贴上来"><a href="#别把自己家庭作业的问题贴上来" class="headerlink" title="别把自己家庭作业的问题贴上来"></a>别把自己家庭作业的问题贴上来</h3><p>黑客们很擅长分辨哪些问题是家庭作业式的问题；因为我们中的大多数都曾自己解决这类问题。同样，这些问题得由<strong>你</strong>来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。</p><p>如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在使用者群组，论坛或（最后一招）在项目的<strong>使用者</strong>邮件列表或论坛中提问。尽管黑客们<strong>会</strong>看出来，但一些有经验的使用者也许仍会给你一些提示。</p><h3 id="去掉无意义的提问句"><a href="#去掉无意义的提问句" class="headerlink" title="去掉无意义的提问句"></a>去掉无意义的提问句</h3><p>避免用无意义的话结束提问，例如<code>有人能帮我吗？</code>或者<code>这有答案吗？</code>。</p><p>首先：如果你对问题的描述不是很好，这样问更是画蛇添足。</p><p>其次：由于这样问是画蛇添足，黑客们会很厌烦你 – 而且通常会用逻辑上正确，但毫无意义的回答来表示他们的蔑视， 例如：<code>没错，有人能帮你</code>或者<code>不，没答案</code>。</p><p>一般来说，避免用 <code>是或否</code>、<code>对或错</code>、<code>有或没有</code>类型的问句，除非你想得到<a href="http://homepage.ntlworld.com./jonathan.deboynepollard/FGA/questions-with-yes-or-no-answers.html" target="_blank" rel="noopener">是或否类型的回答</a>。</p><h3 id="即使你很急也不要在标题写紧急"><a href="#即使你很急也不要在标题写紧急" class="headerlink" title="即使你很急也不要在标题写紧急"></a>即使你很急也不要在标题写<code>紧急</code></h3><p>这是你的问题，不是我们的。宣称<code>紧急</code>极有可能事与愿违：大多数黑客会直接删除无礼和自私地企图即时引起关注的问题。更严重的是，<code>紧急</code>这个字（或是其他企图引起关注的标题）通常会被垃圾信过滤器过滤掉 – 你希望能看到你问题的人可能永远也看不到。</p><p>有半个例外的情况是，如果你是在一些很高调，会使黑客们兴奋的地方，也许值得这样去做。在这种情况下，如果你有时间压力，也很有礼貌地提到这点，人们也许会有兴趣回答快一点。</p><p>当然，这风险很大，因为黑客们兴奋的点多半与你的不同。譬如从 NASA 国际空间站（International Space Station）发这样的标题没有问题，但用自我感觉良好的慈善行为或政治原因发肯定不行。事实上，张贴诸如<code>紧急：帮我救救这个毛绒绒的小海豹！</code>肯定让你被黑客忽略或惹恼他们，即使他们认为毛绒绒的小海豹很重要。</p><p>如果你觉得这点很不可思议，最好再把这份指南剩下的内容多读几遍，直到你弄懂了再发文。</p><h3 id="礼多人不怪，而且有时还很有帮助"><a href="#礼多人不怪，而且有时还很有帮助" class="headerlink" title="礼多人不怪，而且有时还很有帮助"></a>礼多人不怪，而且有时还很有帮助</h3><p>彬彬有礼，多用<code>请</code>和<code>谢谢您的关注</code>，或<code>谢谢你的关照</code>。让大家都知道你对他们花时间免费提供帮助心存感激。</p><p>坦白说，这一点并没有比清晰、正确、精准并合法语法和避免使用专用格式重要（也不能取而代之）。黑客们一般宁可读有点唐突但技术上鲜明的 Bug 报告，而不是那种有礼但含糊的报告。（如果这点让你不解，记住我们是按问题能教给我们什么来评价问题的价值的）</p><p>然而，如果你有一串的问题待解决，客气一点肯定会增加你得到有用回应的机会。</p><p>（我们注意到，自从本指南发布后，从资深黑客那里得到的唯一严重缺陷反馈，就是对预先道谢这一条。一些黑客觉得<code>先谢了</code>意味着事后就不用再感谢任何人的暗示。我们的建议是要么先说<code>先谢了</code>，<strong>然后</strong>事后再对回复者表示感谢，或者换种方式表达感激，譬如用<code>谢谢你的关注</code>或<code>谢谢你的关照</code>。）</p><h3 id="问题解决后，加个简短的补充说明"><a href="#问题解决后，加个简短的补充说明" class="headerlink" title="问题解决后，加个简短的补充说明"></a>问题解决后，加个简短的补充说明</h3><p>问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个说明比较恰当。</p><p>最理想的方式是向最初提问的话题回复此消息，并在标题中包含<code>已修正</code>，<code>已解决</code>或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见讨论串<code>问题 X</code>和<code>问题 X - 已解决</code>的潜在回复者就明白不用再浪费时间了（除非他个人觉得<code>问题 X</code>的有趣），因此可以利用此时间去解决其它问题。</p><p>补充说明不必很长或是很深入；简单的一句<code>你好，原来是网线出了问题！谢谢大家 – Bill</code>比什么也不说要来的好。事实上，除非结论真的很有技术含量，否则简短可爱的小结比长篇大论更好。说明问题是怎样解决的，但大可不必将解决问题的过程复述一遍。</p><p>对于有深度的问题，张贴调试记录的摘要是有帮助的。描述问题的最终状态，说明是什么解决了问题，在此<strong>之后</strong>才指明可以避免的盲点。避免盲点的部分应放在正确的解决方案和其它总结材料之后，而不要将此信息搞成侦探推理小说。列出那些帮助过你的名字，会让你交到更多朋友。</p><p>除了有礼貌和有内涵以外，这种类型的补充也有助于他人在邮件列表/新闻群组/论坛中搜索到真正解决你问题的方案，让他们也从中受益。</p><p>至少，这种补充有助于让每位参与协助的人因问题的解决而从中得到满足感。如果你自己不是技术专家或者黑客，那就相信我们，这种感觉对于那些你向他们求助的大师或者专家而言，是非常重要的。问题悬而未决会让人灰心；黑客们渴望看到问题被解决。好人有好报，满足他们的渴望，你会在下次提问时尝到甜头。</p><p>思考一下怎样才能避免他人将来也遇到类似的问题，自问写一份文件或加个常见问题（FAQ）会不会有帮助。如果是的话就将它们发给维护者。</p><p>在黑客中，这种良好的后继行动实际上比传统的礼节更为重要，也是你如何透过善待他人而赢得声誉的方式，这是非常有价值的资产。</p><h2 id="如何解读答案"><a href="#如何解读答案" class="headerlink" title="如何解读答案"></a>如何解读答案</h2><p><a id="RTFM"></a></p><h3 id="RTFM-和-STFW：如何知道你已完全搞砸了"><a href="#RTFM-和-STFW：如何知道你已完全搞砸了" class="headerlink" title="RTFM 和 STFW：如何知道你已完全搞砸了"></a>RTFM 和 STFW：如何知道你已完全搞砸了</h3><p>有一个古老而神圣的传统：如果你收到<code>RTFM （Read The Fucking Manual）</code>的回应，回答者认为你<strong>应该去读他妈的手册</strong>。当然，基本上他是对的，你应该去读一读。</p><p>RTFM 有一个年轻的亲戚。如果你收到<code>STFW（Search The Fucking Web）</code>的回应，回答者认为你<strong>应该到他妈的网上搜索</strong>过了。那人多半也是对的，去搜索一下吧。（更温和一点的说法是 <strong><a href="http://lmgtfy.com/" target="_blank" rel="noopener">Google 是你的朋友</a></strong>！）</p><p>在论坛，你也可能被要求去爬爬论坛的旧文。事实上，有人甚至可能热心地为你提供以前解决此问题的讨论串。但不要依赖这种关照，提问前应该先搜索一下旧文。</p><p>通常，用这两句之一回答你的人会给你一份包含你需要内容的手册或者一个网址，而且他们打这些字的时候也正在读着。这些答复意味着回答者认为</p><ul><li><strong>你需要的信息非常容易获得</strong>；</li><li><strong>你自己去搜索这些信息比灌给你，能让你学到更多</strong>。</li></ul><p>你不应该因此不爽；<strong>依照黑客的标准，他已经表示了对你一定程度的关注，而没有对你的要求视而不见</strong>。你应该对他祖母般的慈祥表示感谢。</p><h3 id="如果还是搞不懂"><a href="#如果还是搞不懂" class="headerlink" title="如果还是搞不懂"></a>如果还是搞不懂</h3><p>如果你看不懂回应，别立刻要求对方解释。像你以前试着自己解决问题时那样（利用手册，FAQ，网络，身边的高手），先试着去搞懂他的回应。如果你真的需要对方解释，记得表现出你已经从中学到了点什么。</p><p>比方说，如果我回答你：<code>看来似乎是 zentry 卡住了；你应该先清除它。</code>，然后，这是一个<strong>很糟的</strong>后续问题回应：<code>zentry 是什么？</code> <strong>好</strong>的问法应该是这样：<code>哦~~~我看过说明了但是只有 -z 和 -p 两个参数中提到了 zentries，而且还都没有清楚的解释如何清除它。你是指这两个中的哪一个吗？还是我看漏了什么？</code></p><h3 id="处理无礼的回应"><a href="#处理无礼的回应" class="headerlink" title="处理无礼的回应"></a>处理无礼的回应</h3><p>很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直接了当，一针见血式的交流风格，这种风格更注重解决问题，而不是使人感觉舒服而却模模糊糊。</p><p>如果你觉得被冒犯了，试着平静地反应。如果有人真的做了出格的事，邮件列表、新闻群组或论坛中的前辈多半会招呼他。如果这<strong>没有</strong>发生而你却发火了，那么你发火对象的言语可能在黑客社区中看起来是正常的，而<strong>你</strong>将被视为有错的一方，这将伤害到你获取信息或帮助的机会。</p><p>另一方面，你偶尔真的会碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击，用犀利的语言将其驳得体无完肤都是可以接受的。然而，在行事之前一定要非常非常的有根据。纠正无礼的言论与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外人，避开这种莽撞的机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘上以免冒险。</p><p>（有些人断言很多黑客都有轻度的自闭症或亚斯伯格综合症，缺少用于润滑人类社会<strong>正常</strong>交往所需的神经。这既可能是真也可能是假的。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我们的古怪行为。只管这么干好了，我们不在乎。我们<strong>喜欢</strong>我们现在这个样子，并且通常对病患标记都有站得住脚的怀疑）。</p><p>Jeff Bigler 的观察总结和这个相关也值得一读 (<strong><a href="http://www.mit.edu/~jcb/tact.html" target="_blank" rel="noopener">tact filters</a></strong>)。</p><p>在下一节，我们会谈到另一个问题，当<strong>你</strong>行为不当时所会受到的<code>冒犯</code>。</p><h2 id="如何避免扮演失败者"><a href="#如何避免扮演失败者" class="headerlink" title="如何避免扮演失败者"></a>如何避免扮演失败者</h2><p>在黑客社区的论坛中有那么几次你可能会搞砸 – 以本指南所描述到的或类似的方式。而你会在公开场合中被告知你是如何搞砸的，也许攻击的言语中还会带点夹七夹八的颜色。</p><p>这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被口头攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、忘了关马桶盖等等。相反地，你该这么做：</p><p>熬过去，这很正常。事实上，它是有益健康且合理的。</p><p>社区的标准不会自行维持，它们是通过参与者积极而<strong>公开地</strong>执行来维持的。不要哭嚎所有的批评都应该通过私下的邮件传送，它不是这样运作的。当有人评论你的一个说法有误或者提出不同看法时，坚持声称受到个人攻击也毫无益处，这些都是失败者的态度。</p><p>也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称<code>如果你不想帮助用户就闭嘴。</code> 结果造成有想法的参与者纷纷离开，这么做只会使它们沦为毫无意义的唠叨与无用的技术论坛。</p><p>夸张的讲法是：你要的是<strong>友善</strong>（以上述方式）还是有用？两个里面挑一个。</p><p>记着：当黑客说你搞砸了，并且（无论多么刺耳）告诉你别再这样做时，他正在为关心<strong>你</strong>和<strong>他的社区</strong>而行动。对他而言，不理你并将你从他的生活中滤掉更简单。如果你无法做到感谢，至少要表现得有点尊严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人像对待脆弱的洋娃娃那样对你。</p><p>有时候，即使你没有搞砸（或者只是在他的想像中你搞砸了），有些人也会无缘无故地攻击你本人。在这种情况下，抱怨倒是<strong>真的</strong>会把问题搞砸。</p><p>这些来找麻烦的人要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理专家。其它读者要么不理睬，要么用自己的方式对付他们。这些来找麻烦的人在给他们自己找麻烦，这点你不用操心。</p><p>也别让自己卷入口水战，最好不要理睬大多数的口水战 – 当然，这是在你检验它们只是口水战，并且未指出你有搞砸的地方，同时也没有巧妙地将问题真正的答案藏于其后（这也是有可能的）。</p><h2 id="不该问的问题"><a href="#不该问的问题" class="headerlink" title="不该问的问题"></a>不该问的问题</h2><p>以下是几个经典蠢问题，以及黑客没回答时心中所想的：</p><p>问题：<a href="#q1">我能在哪找到 X 程序或 X 资源？</a></p><p>问题：<a href="#q2">我怎样用 X 做 Y？</a></p><p>问题：<a href="#q3">如何设定我的 shell 提示？</a></p><p>问题：<a href="#q4">我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？</a></p><p>问题：<a href="#q5">我的程序/设定/SQL 语句没有用</a></p><p>问题：<a href="#q6">我的 Windows 电脑有问题，你能帮我吗？</a></p><p>问题：<a href="#q7">我的程序不会动了，我认为系统工具 X 有问题</a></p><p>问题：<a href="#q8">我在安装 Linux（或者 X ）时有问题，你能帮我吗？</a></p><p>问题：<a href="#q9">我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？</a></p><hr><p><a id="q1"></a></p><blockquote><p>问题：我能在哪找到 X 程序或 X 资源？</p></blockquote><p>回答：就在我找到它的地方啊，白痴 – 搜索引擎的那一头。天哪！难道还有人不会用 <a href="http://www.google.com" target="_blank" rel="noopener">Google</a> 吗？</p><p><a id="q2"></a></p><blockquote><p>问题：我怎样用 X 做 Y？</p></blockquote><p>回答：如果你想解决的是 Y ，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对 Y 要解决的问题糊涂，还被特定形势禁锢了思维。最好忽略这种人，等他们把问题搞清楚了再说。</p><p><a id="q3"></a></p><blockquote><p>问题：如何设定我的 shell 提示？？</p></blockquote><p>回答：如果你有足够的智慧提这个问题，你也该有足够的智慧去 <a href="#RTFM">RTFM</a>，然后自己去找出来。</p><p><a id="q4"></a></p><blockquote><p>问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？</p></blockquote><p>回答：试试看就知道了。如果你试过，你既知道了答案，就不用浪费我的时间了。</p><p><a id="q5"></a></p><blockquote><p>问题：我的{程序/设定/SQL 语句}不工作</p></blockquote><p>回答：这不算是问题吧，我对要我问你二十个问题才找得出你真正问题的问题没兴趣 – 我有更有意思的事要做呢。在看到这类问题的时候，我的反应通常不外如下三种</p><ul><li>你还有什么要补充的吗？</li><li>真糟糕，希望你能搞定。</li><li>这关我有什么屁事？</li></ul><p><a id="q6"></a></p><blockquote><p>问题：我的 Windows 电脑有问题，你能帮我吗？</p></blockquote><p>回答：能啊，扔掉微软的垃圾，换个像 Linux 或 BSD 的开放源代码操作系统吧。</p><p>注意：如果程序有官方版 Windows 或者与 Windows 有互动（如 Samba），你<strong>可以</strong>问与 Windows 相关的问题， 只是别对问题是由 Windows 操作系统而不是程序本身造成的回复感到惊讶， 因为 Windows 一般来说实在太烂，这种说法通常都是对的。</p><p><a id="q7"></a></p><blockquote><p>问题：我的程序不会动了，我认为系统工具 X 有问题</p></blockquote><p>回答：你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与函数库档案有明显缺陷的人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有清楚而详尽的缺陷说明文件作后盾。</p><p><a id="q8"></a></p><blockquote><p>问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？</p></blockquote><p>回答：不能，我只有亲自在你的电脑上动手才能找到毛病。还是去找你当地的 Linux 使用群组者寻求实际的指导吧（你能在<a href="http://www.linux.org/groups/index.html" target="_blank" rel="noopener">这儿</a>找到使用者群组的清单）。</p><p>注意：如果安装问题与某 Linux 的发行版有关，在它的邮件列表、论坛或本地使用者群组中提问也许是恰当的。此时，应描述问题的准确细节。在此之前，先用 <code>Linux</code> 和<strong>所有</strong>被怀疑的硬件作关键词仔细搜索。</p><p><a id="q9"></a></p><blockquote><p>问题：我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？</p></blockquote><p>回答：想要这样做，说明了你是个卑鄙小人；想找个黑客帮你，说明你是个白痴！</p><h2 id="好问题与蠢问题"><a href="#好问题与蠢问题" class="headerlink" title="好问题与蠢问题"></a>好问题与蠢问题</h2><p>最后，我将透过举一些例子，来说明怎样聪明的提问；同一个问题的两种问法被放在一起，一种是愚蠢的，另一种才是明智的。</p><p><strong><strong>蠢问题</strong></strong>：</p><blockquote><p>我可以在哪儿找到关于 Foonly Flurbamatic 的资料？</p></blockquote><p>这种问法无非想得到 <a href="#RTFM">STFW</a> 这样的回答。</p><p><strong><strong>聪明问题</strong></strong>：</p><blockquote><p>我用 Google 搜索过 “Foonly Flurbamatic 2600”，但是没找到有用的结果。谁知道上哪儿去找对这种设备编程的资料？</p></blockquote><p>这个问题已经 STFW 过了，看起来他真的遇到了麻烦。</p><p><strong><strong>蠢问题</strong></strong></p><blockquote><p>我从 foo 项目找来的源码没法编译。它怎么这么烂？</p></blockquote><p>他觉得都是别人的错，这个傲慢自大的提问者。</p><p><strong><strong>聪明问题</strong></strong></p><blockquote><p>foo 项目代码在 Nulix 6.2 版下无法编译通过。我读过了 FAQ，但里面没有提到跟 Nulix 有关的问题。这是我编译过程的记录，我有什么做的不对的地方吗？</p></blockquote><p>提问者已经指明了环境，也读过了 FAQ，还列出了错误，并且他没有把问题的责任推到别人头上，他的问题值得被关注。</p><p><strong><strong>蠢问题</strong></strong></p><blockquote><p>我的主机板有问题了，谁来帮我？</p></blockquote><p>某黑客对这类问题的回答通常是：<code>好的，还要帮你拍拍背和换尿布吗？</code>，然后按下删除键。</p><p><strong><strong>聪明问题</strong></strong></p><blockquote><p>我在 S2464 主机板上试过了 X 、 Y 和 Z ，但没什么作用，我又试了 A 、 B 和 C 。请注意当我尝试 C 时的奇怪现象。显然 florbish 正在 grommicking，但结果出人意料。通常在 Athlon MP 主机板上引起 grommicking 的原因是什么？有谁知道接下来我该做些什么测试才能找出问题？</p></blockquote><p>这个家伙，从另一个角度来看，值得去回答他。他表现出了解决问题的能力，而不是坐等天上掉答案。</p><p>在最后一个问题中，注意<code>告诉我答案</code>和<code>给我启示，指出我还应该做什么诊断工作</code>之间微妙而又重要的区别。</p><p>事实上，后一个问题源自于 2001 年 8 月在 Linux 内核邮件列表（lkml）上的一个真实的提问。我（Eric）就是那个提出问题的人。我在 Tyan S2464 主板上观察到了这种无法解释的锁定现象，列表成员们提供了解决这一问题的重要信息。</p><p>通过我的提问方法，我给了别人可以咀嚼玩味的东西；我设法让人们很容易参与并且被吸引进来。我显示了自己具备和他们同等的能力，并邀请他们与我共同探讨。通过告诉他们我所走过的弯路，以避免他们再浪费时间，我也表明了对他们宝贵时间的尊重。</p><p>事后，当我向每个人表示感谢，并且赞赏这次良好的讨论经历的时候， 一个 Linux 内核邮件列表的成员表示，他觉得我的问题得到解决并非由于我是这个列表中的<strong>名</strong>人，而是因为我用了正确的方式来提问。</p><p>黑客从某种角度来说是拥有丰富知识但缺乏人情味的家伙；我相信他是对的，如果我<strong>像</strong>个乞讨者那样提问，不论我是谁，一定会惹恼某些人或者被他们忽视。他建议我记下这件事，这直接导致了本指南的出现。</p><h2 id="如果得不到回答"><a href="#如果得不到回答" class="headerlink" title="如果得不到回答"></a>如果得不到回答</h2><p>如果仍得不到回答，请不要以为我们觉得无法帮助你。有时只是看到你问题的人不知道答案罢了。没有回应不代表你被忽视，虽然不可否认这种差别很难区分。</p><p>总的来说，简单的重复张贴问题是个很糟的点子。这将被视为无意义的喧闹。有点耐心，知道你问题答案的人可能生活在不同的时区，可能正在睡觉，也有可能你的问题一开始就没有组织好。</p><p>你可以通过其他渠道获得帮助，这些渠道通常更适合初学者的需要。</p><p>有许多网上的以及本地的使用者群组，由热情的软件爱好者（即使他们可能从没亲自写过任何软件）组成。通常人们组建这样的团体来互相帮助并帮助新手。</p><p>另外，你可以向很多商业公司寻求帮助，不论公司大还是小。别为要付费才能获得帮助而感到沮丧！毕竟，假使你的汽车发动机汽缸密封圈爆掉了– 完全可能如此 –你还得把它送到修车铺，并且为维修付费。就算软件没花费你一分钱，你也不能强求技术支持总是免费的。</p><p>对像是 Linux 这种大众化的软件，每个开发者至少会对应到上万名使用者。根本不可能由一个人来处理来自上万名使用者的求助电话。要知道，即使你要为这些协助付费，和你所购买的同类软件相比，你所付出的也是微不足道的（通常封闭源代码软件的技术支持费用比开放源代码软件的要高得多，且内容也没那么丰富）。</p><h2 id="如何更好地回答问题"><a href="#如何更好地回答问题" class="headerlink" title="如何更好地回答问题"></a>如何更好地回答问题</h2><p><strong>态度和善一点</strong>。问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。</p><p><strong>对初犯者私下回复</strong>。对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找常见问题都不知道。</p><p><strong>如果你不确定，一定要说出来</strong>！一个听起来权威的错误回复比没有还要糟，别因为听起来像个专家很好玩，就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。</p><p><strong>如果帮不了忙，也别妨碍他</strong>。不要在实际步骤上开玩笑，那样也许会毁了使用者的设置 –有些可怜的呆瓜会把它当成真的指令。</p><p><strong>试探性的反问以引出更多的细节</strong>。如果你做得好，提问者可以学到点东西 –你也可以。试试将蠢问题转变成好问题，别忘了我们都曾是新手。</p><p>尽管对那些懒虫抱怨一声 RTFM 是正当的，能指出文件的位置（即使只是建议个 Google 搜索关键词）会更好。</p><p><strong>如果你决定回答，就请给出好的答案</strong>。当别人正在用错误的工具或方法时别建议笨拙的权宜之计（wordaround），应推荐更好的工具，重新界定问题。</p><p><strong>正面的回答问题</strong>！如果这个提问者已经很深入的研究而且也表明已经试过 X 、 Y 、 Z 、 A 、 B 、 C 但没得到结果，回答 <code>试试看 A 或是 B</code> 或者 <code>试试 X 、 Y 、 Z 、 A 、 B 、 C</code> 并附上一个链接一点用都没有。</p><p><strong>帮助你的社区从问题中学习</strong>。当回复一个好问题时，问问自己<code>如何修改相关文件或常见问题文件以免再次解答同样的问题？</code>，接着再向文件维护者发一份补丁。</p><p>如果你是在研究一番后才做出的回答，<strong>展现你的技巧而不是直接端出结果</strong>。毕竟<code>授人以鱼不如授人以渔</code>。</p><h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><p>如果你需要个人电脑、Unix 系统和网络如何运作的基础知识，参阅 <a href="http://en.tldp.org/HOWTO/Unix-and-Internet-Fundamentals-HOWTO/" target="_blank" rel="noopener">Unix 系统和网络基本原理</a>。</p><p>当你发布软件或补丁时，试着按<a href="http://en.tldp.org/HOWTO/Software-Release-Practice-HOWTO/index.html" target="_blank" rel="noopener">软件发布实践</a>操作。</p><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>Evelyn Mitchel 贡献了一些愚蠢问题例子并启发了编写<code>如何更好地回答问题</code>这一节， Mikhail Ramendik 贡献了一些特别有价值的建议和改进。</p>]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>提问的智慧</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Travis CI自动部署Hexo博客到Github上</title>
    <url>/2018/06/06/2018-06-06-Automatic-deployment-to-Github-using-Travis-CI/</url>
    <content><![CDATA[<h3 id="Travis-CI介绍"><a href="#Travis-CI介绍" class="headerlink" title="Travis CI介绍"></a><code>Travis CI</code>介绍</h3><p><code>Travis CI</code>是目前新兴的开源持续集成构建项目，它与<code>jenkins</code>，<code>GO</code>的很明显的特别在于采用<code>yaml</code>格式，同时他是在在线的服务，不像<code>jenkins</code>需要你本地打架服务器，简洁清新独树一帜。目前大多数的<code>github</code>项目都已经移入到<code>Travis CI</code>的构建队列中，据说<code>Travis CI</code>每天运行超过<em>4000</em>次完整构建。对于做开源项目或者<code>github</code>的使用者，如果你的项目还没有加入<code>Travis CI</code>构建队列，那么我真的想对你说out了。</p><a id="more"></a><h3 id="博客架构"><a href="#博客架构" class="headerlink" title="博客架构"></a>博客架构</h3><p>使用Hexo来搭建的，托管到Github提供的Gitpage服务上。<br><code>master</code>：博客的静态文件，也就是<code>hexo</code>生成后的<code>HTML</code>文件，因为要使用<code>Gitpage</code>服务，所以他规定的网页文件必须是在<code>master</code>分支</p><img src="/2018/06/06/2018-06-06-Automatic-deployment-to-Github-using-Travis-CI/master%E5%88%86%E6%94%AF%E5%AD%98%E6%94%BEHTML%E4%BB%A3%E7%A0%81.png" title="master分支存放HTML代码"> <img src="/2018/06/06/2018-06-06-Automatic-deployment-to-Github-using-Travis-CI/%E5%8D%9A%E5%AE%A2%E5%8E%9F%E6%96%87%E6%94%BE%E5%9C%A8blog_source%E5%88%86%E6%94%AF.png" title="博客原文放在blog_source分支"><h3 id="具体项目在Travis-CI的设置"><a href="#具体项目在Travis-CI的设置" class="headerlink" title="具体项目在Travis CI的设置"></a>具体项目在<code>Travis CI</code>的设置</h3><p>使用<code>GitHub</code>账号登录<a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis CI官网</a>，并同步<code>GitHub</code>的项目到<code>Travis CI</code>。</p><p>在<code>Travis CI</code>开启项目</p><img src="/2018/06/06/2018-06-06-Automatic-deployment-to-Github-using-Travis-CI/%E5%BC%80%E5%90%AF%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE.png" title="开启博客项目"><p>然后进入项目在<code>Travis CI</code>的设置页，配置好选项和参数。</p><p><code>Build only if .travis.yml is present</code>：只有在.travis.yml文件中配置的分支改变了才构建<br><code>Build pushed branches</code>：当推送完这个分支后开始构建</p><h3 id="Travis-CI访问GitHub的设置"><a href="#Travis-CI访问GitHub的设置" class="headerlink" title="Travis CI访问GitHub的设置"></a><code>Travis CI</code>访问<code>GitHub</code>的设置</h3><p>在github上生成Access Token：</p><p>生成完后，你需要拷贝下来，只有这时候他才显示，再次进来为了安全它就不会显示了；如果忘了只能重新生成一个了，拷贝完以后我们需要到<code>Travis CI</code>网站下配置。</p><p>配置在这里的主要原因是为了安全，写在代码里，就保证不了安全了，所以就以环境变量的形式配置在项目设置里，需要的时候，从配置里去引用它。</p><h3 id="配置Travis-CI执行脚本-travis-yml"><a href="#配置Travis-CI执行脚本-travis-yml" class="headerlink" title="配置Travis CI执行脚本.travis.yml"></a>配置<code>Travis CI</code>执行脚本<code>.travis.yml</code></h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">stable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># S: Build Lifecycle</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="comment"># 更新所有在package.json中设置的第三方库</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">  <span class="comment"># 修复更新的错误</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">audit</span> <span class="string">fix</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#before_script:</span></span><br><span class="line"> <span class="comment"># - npm install -g gulp</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="comment"># 设置git用户名</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">"shadow000902"</span></span><br><span class="line">  <span class="comment"># 设置git邮箱</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">"shadow000902@gmail.com"</span></span><br><span class="line">  <span class="comment"># 创建主题文件夹</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">themes</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cd</span> <span class="string">themes</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 因为主题是属于另一个git项目，无法发布到博客源码所在的项目，所以需要重新从git拉取</span></span><br><span class="line">  <span class="comment"># 下载自己的主题``next-6``</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/shadow000902/next-6.git</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 因为第三方插件都是一个独立的git项目，无法发布到另一个git项目中，所以需要在主题拉取后，再独立的拉取代码到对应的主题插件目录下</span></span><br><span class="line">  <span class="comment"># 在主题中加载第三方插件``algolia``</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/theme-next/theme-next-algolia-instant-search</span> <span class="string">next-6/source/lib/algolia-instant-search</span></span><br><span class="line">  <span class="comment"># 在主题中加载第三方插件``fancybox``</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/theme-next/theme-next-fancybox3</span> <span class="string">next-6/source/lib/fancybox</span></span><br><span class="line">  <span class="comment"># 在主题中加载第三方插件``pace``</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/theme-next/theme-next-pace</span> <span class="string">next-6/source/lib/pace</span></span><br><span class="line">  <span class="comment"># 以上的两个操作没有的话，博客部署后，就处于无主题的状态，是无法访问的</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cd</span> <span class="string">..</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">g</span></span><br><span class="line"></span><br><span class="line"><span class="attr">after_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cd</span> <span class="string">./public</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">init</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">"shadow000902"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">"shadow000902@gmail.com"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">"Update docs"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">"https://$&#123;blogSource_Token&#125;@$&#123;blogSource_Git&#125;"</span> <span class="string">master:master</span></span><br><span class="line"><span class="comment"># E: Build LifeCycle</span></span><br><span class="line"></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">blog_source</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"> <span class="attr">global:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">blogSource_Git:</span> <span class="string">github.com/shadow000902/shadow000902.github.io.git</span></span><br></pre></td></tr></table></figure><p>以上脚本需要提交到博客源代码的根目录下：</p><img src="/2018/06/06/2018-06-06-Automatic-deployment-to-Github-using-Travis-CI/%E5%8D%9A%E5%AE%A2%E5%8E%9F%E6%96%87%E6%94%BE%E5%9C%A8blog_source%E5%88%86%E6%94%AF.png" title="博客原文放在blog_source分支"><h3 id="完工"><a href="#完工" class="headerlink" title="完工"></a>完工</h3><p>以上操作都完毕后，只要在博客源代码<code>git</code>项目中，如果有更新，或者在<code>.travis.yml</code>文件有更新时，项目就会自动部署，并更新博客内容。</p>]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
        <tag>travis ci</tag>
      </tags>
  </entry>
  <entry>
    <title>Python常用函数总结</title>
    <url>/2018/07/01/2018-07-01-Summary-of-common-Python-functions/</url>
    <content><![CDATA[<h3 id="常用内置函数（不用import就可以直接使用）"><a href="#常用内置函数（不用import就可以直接使用）" class="headerlink" title="常用内置函数（不用import就可以直接使用）"></a>常用内置函数（不用<code>import</code>就可以直接使用）</h3><a id="more"></a><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>help(obj)</code></td><td>在线帮助, obj可是任何类型</td></tr><tr><td><code>callable(obj)</code></td><td>查看一个obj是不是可以像函数一样调用</td></tr><tr><td><code>repr(obj)</code></td><td>得到obj的表示字符串，可以利用这个字符串eval重建该对象的一个拷贝</td></tr><tr><td><code>eval_r(str)</code></td><td>表示合法的python表达式，返回这个表达式</td></tr><tr><td><code>dir(obj)</code></td><td>查看obj的name space中可见的name</td></tr><tr><td><code>hasattr(obj,name)</code></td><td>查看一个obj的name space中是否有name</td></tr><tr><td><code>getattr(obj,name)</code></td><td>得到一个obj的name space中的一个name</td></tr><tr><td><code>setattr(obj,name,value)</code></td><td>为一个obj的name space中的一个name指向vale这个object</td></tr><tr><td><code>delattr(obj,name)</code></td><td>从obj的name space中删除一个name</td></tr><tr><td><code>vars(obj)</code></td><td>返回一个object的name space。用dictionary表示</td></tr><tr><td><code>locals()</code></td><td>返回一个局部name space。用dictionary表示</td></tr><tr><td><code>globals()</code></td><td>返回一个全局name space。用dictionary表示</td></tr><tr><td><code>type(obj)</code></td><td>查看一个obj的类型</td></tr><tr><td><code>isinstance(obj,cls)</code></td><td>查看obj是不是cls的instance</td></tr><tr><td><code>issubclass(subcls,supcls)</code></td><td>查看subcls是不是supcls的子类</td></tr></tbody></table><h3 id="类型转换函数"><a href="#类型转换函数" class="headerlink" title="类型转换函数"></a>类型转换函数</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>chr(i)</code></td><td>把一个ASCII数值，变成字符</td></tr><tr><td><code>ord(i)</code></td><td>把一个字符或者Unicode字符，变成ASCII数值</td></tr><tr><td><code>oct(x)</code></td><td>把整数x变成八进制表示的字符串</td></tr><tr><td><code>hex(x)</code></td><td>把整数x变成十进制表示的字符串</td></tr><tr><td><code>str(obj)</code></td><td>得到obj的字符串描述</td></tr><tr><td><code>list(seq)</code></td><td>把一个sequence转换为一个list</td></tr><tr><td><code>tuple(seq)</code></td><td>把一个sequence转换为一个tuple</td></tr><tr><td><code>dict(),dict(list)</code></td><td>转换层一个dictionary</td></tr><tr><td><code>int(x)</code></td><td>转换成一个integer</td></tr><tr><td><code>long(x)</code></td><td>转换成一个long integer</td></tr><tr><td><code>float(x)</code></td><td>转换成一个浮点数</td></tr><tr><td><code>complex(x)</code></td><td>转换成复数</td></tr><tr><td><code>max(...)</code></td><td>求最大值</td></tr><tr><td><code>min(...)</code></td><td>求最小值</td></tr></tbody></table><h3 id="和操作系统相关的调用"><a href="#和操作系统相关的调用" class="headerlink" title="和操作系统相关的调用"></a>和操作系统相关的调用</h3><p>系统相关的信息模块：<code>import sys</code></p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>sys.argv</code></td><td>是一个list，包含所有的命令行参数</td></tr><tr><td><code>sys.stdout,sys.stdin,sys.stderr</code></td><td>分别表示标准输入输出，错误输出的对象</td></tr><tr><td><code>sys.stdin.readline()</code></td><td>从标准输入读一行，sys.stdin.readline(“a”)屏幕输出a</td></tr><tr><td><code>sys.exit(exit_code)</code></td><td>退出程序</td></tr><tr><td><code>sys.modules</code></td><td>是一个dictionary，表示系统中所有可用的module</td></tr><tr><td><code>sys.platform</code></td><td>得到运行的操作系统环境</td></tr><tr><td><code>sys.path</code></td><td>是一个list，知名所有查找的module，package的路径</td></tr></tbody></table><h3 id="操作系统相关的调用和操作"><a href="#操作系统相关的调用和操作" class="headerlink" title="操作系统相关的调用和操作"></a>操作系统相关的调用和操作</h3><p>相关的信息模块：<code>import os</code></p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>os.environ</code></td><td>一个dictionary包含环境变量的映射关系，os.environ[“HOME”]可以得到环境变量HOME的值</td></tr><tr><td><code>os.chdir(dir)</code></td><td>改变当前目录，os.chdir(‘~/Desktop’)</td></tr><tr><td><code>os.getcwd()</code></td><td>得到当前目录</td></tr><tr><td><code>os.getegid()</code></td><td>得到有效组id，os.getgid()得到组id</td></tr><tr><td><code>os.geteuid()</code></td><td>得到有效用户id，os.getuid()得到组id</td></tr><tr><td><code>os.getgroups()</code></td><td>得到用户组名称列表</td></tr><tr><td><code>os.getlogin()</code></td><td>得到用户登录名称</td></tr><tr><td><code>os.getenv</code></td><td>得到环境变量</td></tr><tr><td><code>os.putenv</code></td><td>设置环境变量</td></tr><tr><td><code>os.umask</code></td><td>设置umask</td></tr><tr><td><code>os.system(cmd)</code></td><td>利用系统调用，运行cmd命令</td></tr></tbody></table><h3 id="用os-path编写平台无关的程序"><a href="#用os-path编写平台无关的程序" class="headerlink" title="用os.path编写平台无关的程序"></a>用<code>os.path</code>编写平台无关的程序</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>os.path.abspath(&quot;1.txt&quot;)==os.path.join(os.getcwd(),&quot;1.txt&quot;)</code></td><td></td></tr><tr><td><code>os.path.split(os.getcwd())</code></td><td>用于分开一个目录名称中的目录部分和文件名称部分</td></tr><tr><td><code>os.path.join(os.getcwd(),os.pardir,&#39;a&#39;,&#39;a.doc&#39;)</code></td><td>全称路径名称，os.pardir表示当前平台下上一级目录的字符</td></tr><tr><td><code>os.path.getctime(&quot;/root/1.txt&quot;)</code></td><td>返回1.txt的ctime（创建时间）时间戳</td></tr><tr><td><code>os.path.exists(os.getcwd)</code></td><td>判断文件是否存在</td></tr><tr><td><code>os.path.expanduser(&#39;~/dir&#39;)</code></td><td>把~扩展成用户根目录</td></tr><tr><td><code>os.path.expandvars(&#39;$PATH&#39;)</code></td><td>扩展环境变量PATH</td></tr><tr><td><code>os.path.isfile(os.getcwd())</code></td><td>判断是否是目录，1是0否</td></tr><tr><td><code>os.path.isdir(&#39;~/Desktop&#39;)</code></td><td>判断是否是目录，1是0否</td></tr><tr><td><code>os.path.islink(&#39;/home/taoyi/test.sql&#39;)</code></td><td>是否是符号连接</td></tr><tr><td><code>os.path.ismout(os.getcwd)</code></td><td>是否是文件系统安装点</td></tr><tr><td><code>os.path.samefile(os.getcwd(),&#39;/home/taoyi&#39;)</code></td><td>看看两个文件名是不是指的是同一个文件</td></tr><tr><td><code>os.path.walk(&#39;/home/taoyi&#39;,test_fun,&quot;a.c&quot;)</code></td><td>遍历/home/taoyi下所有子目录包括目录，对于每个目录都会调用函数test_fun</td></tr></tbody></table><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>f=open(&quot;filename&quot;,&quot;r&quot;)</code></td><td>r只读；w写；rw读写；rb读二进制；wb写二进制；w+写追加</td></tr><tr><td><code>f.write(&quot;a&quot;)</code></td><td>写字符串</td></tr><tr><td><code>f.read()</code></td><td>全读出来，f.read(size)表示从文件中读取size个字符</td></tr><tr><td><code>f.readline()</code></td><td>读一行，到文件结尾，返回空串；f.readlines()</td></tr><tr><td><code>f.tell()</code></td><td>返回当前文件读取位置</td></tr><tr><td><code>f.seek(off,where)</code></td><td>定位文件读写位置，off表示偏移量，正数向文件尾移动，负数表示向开通移动，where为0表示从开始算起，1表示从当前位置算，2表示从结尾算</td></tr><tr><td><code>f.flush()</code></td><td>刷新缓存</td></tr><tr><td><code>f.close()</code></td><td>关闭文件</td></tr></tbody></table>]]></content>
      <categories>
        <category>学习笔记</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python入门导论</title>
    <url>/2018/06/09/2018-06-09-Introduction-to-Python/</url>
    <content><![CDATA[<h3 id="为什么学Pyhton"><a href="#为什么学Pyhton" class="headerlink" title="为什么学Pyhton"></a>为什么学<code>Pyhton</code></h3><h4 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h4><ul><li><p>诞生于1991年</p></li><li><p>为什么发明<code>Python</code>？<code>C</code>语言开发效率太低，而<code>shell</code>只是一种胶水语言。作者的目的：创建一种<code>C</code>和<code>shell</code>之间，功能能够全面，易学易用，可拓展的语言。</p></li><li><p>当前主流版本：<code>2.7</code>/<code>3.6</code></p><a id="more"></a></li></ul><h4 id="蓬勃发展"><a href="#蓬勃发展" class="headerlink" title="蓬勃发展"></a>蓬勃发展</h4><ul><li>伴随着人工智能的发展，<code>Python</code>成了标配语言</li></ul><h4 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h4><ul><li>数据处理，科学计算</li><li><code>map</code>/<code>reduce</code>，<code>PySpark</code></li><li><code>XGBoost</code>，<code>TensorFlow</code>，<code>Gluon</code>，<code>PyTouch</code>，<code>Caffe</code></li></ul><h4 id="工业界应用"><a href="#工业界应用" class="headerlink" title="工业界应用"></a>工业界应用</h4><ul><li><code>Dropbox</code>：美国最大的在线云存储网站，每天处理10亿文件上传下载</li><li><code>Instagram</code>：美国最大的图片分享网站，每天超过3千万张照片被分享</li><li><code>Redhat</code>：世界上最流行的<code>Linux</code>发行版本中的<code>yum</code>包管理工具就是用<code>Python</code>开发的</li><li>豆瓣：公司几乎所有的业务均是通过Python开发的</li><li>知乎：</li><li>除上述之外，还有盛大、网易、阿里、土豆、新浪、果壳等公司，都在使用Python完成各种各样的任务</li></ul><h4 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h4><ul><li>最新的<code>TIOBE</code>排行榜，<code>Python</code>赶超<code>PHP</code>占据第五，<code>Python</code>崇尚优美、清晰、简单，是一个优秀并广泛使用的语言。</li><li>2017 <code>GitHub</code>的<code>repo</code>中，Python排名第二</li></ul><h4 id="工作岗位"><a href="#工作岗位" class="headerlink" title="工作岗位"></a>工作岗位</h4><ul><li>数据分析</li><li>人工智能</li><li>Python开发工程师</li><li>Python高级工程师</li><li>Python自动化测试、Python游戏开发工程师、SEO工程师、Linux运维工程师等…</li></ul><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>简单，容易学习</li><li>免费开源</li><li>高级语言，细节隐藏</li><li>解释性，可移植。一次编写，导出运行。</li><li>面向对象</li><li>可扩展。可嵌入<code>C</code>/<code>C++</code>，或者使用<code>C</code>/<code>C++</code>提供性能</li><li>扩展库</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>慢了一点，多吃了一点内存</li></ul><h3 id="如何学好编程"><a href="#如何学好编程" class="headerlink" title="如何学好编程"></a>如何学好编程</h3><h4 id="基础部分"><a href="#基础部分" class="headerlink" title="基础部分"></a>基础部分</h4><ul><li>常用关键字<ul><li>常量<ul><li>True</li><li>False</li><li>None</li></ul></li><li>对象和容器<ul><li>class</li><li>import</li><li>from</li><li>del</li></ul></li><li>判断<ul><li>if</li><li>elif</li><li>else</li><li>is</li><li>in</li><li>assert</li></ul></li><li>循环<ul><li>for</li><li>while</li><li>continue</li><li>break</li><li>pass</li></ul></li><li>异常<ul><li>raise</li><li>try</li><li>except</li><li>finally</li><li>as</li></ul></li></ul></li><li>常用运算符<ul><li>算术运算符<ul><li>+-*/</li><li>%</li><li>**</li><li>//</li></ul></li><li>比较运算<ul><li>&gt;, &gt;=</li><li>&lt;, &lt;=</li><li>==</li><li>!=</li></ul></li><li>逻辑运算<ul><li>and</li><li>or</li><li>not</li></ul></li><li>位运算<ul><li>&gt;&gt;</li><li>&lt;&lt;</li><li>&amp;</li><li>|</li><li>^</li></ul></li></ul></li><li>基本语法<ul><li>基本数据类型</li><li>对象的定义和声明</li><li>循环和判断：for，foreach，if，while，do…</li><li>逻辑运算</li><li>位运算</li></ul></li><li>数据结构<ul><li>数组</li><li>字符串</li><li>系统标准库自带的数据结构，如链表，哈希表（字典）</li><li>如何实现常用数据结构：链表，堆栈，二叉树…</li></ul></li><li>输入输出<ul><li>标准输入输出：print，echo，input…</li><li>文件读写：文本/二进制</li><li>格式化字符串</li></ul></li><li>异常处理<ul><li>抛出和捕获异常：try/catch，try/except…</li><li>异常和错误的区别和应用场合</li></ul></li><li>缩进</li><li>注释</li><li>多行代码表示</li><li>中文支持</li></ul><h4 id="进阶提高"><a href="#进阶提高" class="headerlink" title="进阶提高"></a>进阶提高</h4><ul><li>数据库访问【业务系统，90%都是做的代码去执行SQL，对数据库的增删改查】<ul><li>建立连接</li><li>执行SQL查询</li><li>读取查询记录</li><li>修改/插入/删除数据</li></ul></li><li>面向对象<ul><li>继承</li><li>多态</li><li>静态变量和方法</li></ul></li><li>工程化<ul><li>常用框架：Flask，Django，gRPC，Thrift等等</li><li>单元测试</li><li>日志，监控</li></ul></li><li>其它<ul><li>多线程/进程</li><li>匿名函数</li><li>语言相关特定知识</li></ul></li><li>常用算法<ul><li>分治</li><li>贪心</li><li>动态规划</li></ul></li></ul><h4 id="突破舒适区"><a href="#突破舒适区" class="headerlink" title="突破舒适区"></a>突破舒适区</h4><img src="/2018/06/09/2018-06-09-Introduction-to-Python/%E7%AA%81%E7%A0%B4%E8%88%92%E9%80%82%E5%8C%BA.png" title="突破舒适区"><h4 id="不要自我设限"><a href="#不要自我设限" class="headerlink" title="不要自我设限"></a>不要自我设限</h4><ul><li>我肯定不行</li><li>我可能不行</li><li>我可能行</li><li>我肯定行<img src="/2018/06/09/2018-06-09-Introduction-to-Python/%E4%B8%8D%E8%A6%81%E8%87%AA%E6%88%91%E8%AE%BE%E9%99%90.png" title="不要自我设限"></li></ul><h4 id="Prictice-makes-perfect"><a href="#Prictice-makes-perfect" class="headerlink" title="Prictice makes perfect"></a>Prictice makes perfect</h4><ul><li>WATCH</li><li>DO</li><li>READ</li></ul>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础知识整理</title>
    <url>/2018/02/14/2018-02-14-Python-basics/</url>
    <content><![CDATA[<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br><span class="line">print(sorted(cars))                             <span class="comment"># 临时性字母正序排列</span></span><br><span class="line">print(sorted(cars, reverse=<span class="literal">True</span>)                <span class="comment"># 临时性字母倒叙排列</span></span><br><span class="line">cars.sort()                                     <span class="comment"># 永久性字母正序排列</span></span><br><span class="line">cars.sort(reverse=<span class="literal">True</span>)                         <span class="comment"># 永久性字母倒叙排列</span></span><br><span class="line">print(cars)                                     <span class="comment"># 默认排序</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="访问list元素"><a href="#访问list元素" class="headerlink" title="访问list元素"></a>访问list元素</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br><span class="line">print(cars[<span class="number">0</span>])                                  <span class="comment"># 访问第一个元素</span></span><br><span class="line"><span class="comment"># 当访问的list长度总是会变的情况下，可以使用这种方式访问list最后一个元素</span></span><br><span class="line">print(cars[<span class="number">-1</span>])                                 <span class="comment"># 访问倒数第一个元素，即list最后一个元素</span></span><br></pre></td></tr></table></figure><h4 id="增删元素『重要』"><a href="#增删元素『重要』" class="headerlink" title="增删元素『重要』"></a><strong>增删元素</strong>『重要』</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles = [<span class="string">'honda'</span>, <span class="string">'yamaha'</span>, <span class="string">'suzuki'</span>, <span class="string">'ducati'</span>]</span><br><span class="line">too_expensive = <span class="string">'ducati'</span></span><br><span class="line">motorcycles.remove(too_expensive)               <span class="comment"># 根据值删除元素</span></span><br><span class="line">motorcycles.append(too_expensive)               <span class="comment"># 增加元素，元素增加到末尾</span></span><br><span class="line">motorcycles.insert(<span class="number">0</span>, too_expensive)            <span class="comment"># 指定位置插入元素</span></span><br><span class="line"><span class="keyword">del</span> motorcycles[<span class="number">1</span>]                              <span class="comment"># 删除指定位置元素</span></span><br><span class="line">motorcycles.pop()                               <span class="comment"># 取出list中的最后一个元素</span></span><br><span class="line">print(motorcycles)</span><br></pre></td></tr></table></figure><h4 id="获取list长度"><a href="#获取list长度" class="headerlink" title="获取list长度"></a>获取list长度</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">len(cars)</span><br></pre></td></tr></table></figure><h4 id="复制list"><a href="#复制list" class="headerlink" title="复制list"></a>复制list</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_foods = [<span class="string">'pizza'</span>, <span class="string">'falafel'</span>, <span class="string">'carrot cake'</span>] </span><br><span class="line">friend_foods = my_foods[:]                      <span class="comment"># 复制整个列表以 [:] 来表示</span></span><br></pre></td></tr></table></figure><h4 id="检查特定值是否在list中"><a href="#检查特定值是否在list中" class="headerlink" title="检查特定值是否在list中"></a>检查特定值是否在list中</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">banned_users = [<span class="string">'andrew'</span>, <span class="string">'carolina'</span>, <span class="string">'david'</span>]</span><br><span class="line">user1 = <span class="string">'andrew'</span></span><br><span class="line">user2 = <span class="string">'and'</span></span><br><span class="line">print(user1 <span class="keyword">in</span> banned_users)                    <span class="comment"># 返回true</span></span><br><span class="line">print(user2 <span class="keyword">not</span> <span class="keyword">in</span> banned_users)                <span class="comment"># 返回true</span></span><br><span class="line">print(user1 <span class="keyword">not</span> <span class="keyword">in</span> banned_users)                <span class="comment"># 返回false</span></span><br><span class="line">print(user2 <span class="keyword">in</span> banned_users)                    <span class="comment"># 返回false</span></span><br></pre></td></tr></table></figure><h4 id="在list中检索值"><a href="#在list中检索值" class="headerlink" title="在list中检索值"></a>在list中检索值</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'new'</span>, <span class="string">'mpilgrim'</span>, <span class="string">'new'</span>]</span><br><span class="line">&gt;&gt;&gt; a_list.count(<span class="string">'new'</span>)       ①</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; <span class="string">'new'</span> <span class="keyword">in</span> a_list           ②</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; a_list.index(<span class="string">'mpilgrim'</span>)  ③</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h4 id="if判断条件为list注意点"><a href="#if判断条件为list注意点" class="headerlink" title="if判断条件为list注意点"></a><code>if</code>判断条件为<code>list</code>注意点</h4><p>在判断条件为<code>list</code>时，如果<code>list</code>为空，即记过为<code>false</code>，只有在<code>list</code>有一个元素时，才为<code>true</code>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">requested_toppings = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> requested_toppings:</span><br><span class="line">    print(<span class="string">'requested_toppings not empty'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'requested_toppings is empty'</span>)</span><br></pre></td></tr></table></figure><p>这里实际执行的就是<code>else</code>中的语句，因为<code>requested_toppings</code>是空的，返回的<code>false</code>。</p><h4 id="多个list判断"><a href="#多个list判断" class="headerlink" title="多个list判断"></a>多个<code>list</code>判断</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">available_toppings = [<span class="string">'mushrooms'</span>, <span class="string">'olives'</span>, <span class="string">'green peppers'</span>, <span class="string">'pepperoni'</span>, <span class="string">'pineapple'</span>, <span class="string">'extra cheese'</span>]</span><br><span class="line">requested_toppings = [<span class="string">'mushrooms'</span>, <span class="string">'french fries'</span>, <span class="string">'extra cheese'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> requested_topping <span class="keyword">in</span> requested_toppings:</span><br><span class="line">    <span class="keyword">if</span> requested_topping <span class="keyword">in</span> available_toppings:</span><br><span class="line">        print(<span class="string">"Adding "</span> + requested_topping + <span class="string">"."</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"Sorry, we don't have "</span> + requested_topping + <span class="string">"."</span>)</span><br><span class="line">    print(<span class="string">"\nFinished making your pizza!"</span>)</span><br></pre></td></tr></table></figure><h4 id="使用函数range"><a href="#使用函数range" class="headerlink" title="使用函数range()"></a>使用函数<code>range()</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">5</span>):                       <span class="comment"># 生成有序数值</span></span><br><span class="line">    print(value)                                <span class="comment"># 它只会打印4个数值，最后一个数值不会打印</span></span><br><span class="line">num = list(range(<span class="number">1</span>, <span class="number">6</span>))                         <span class="comment"># 创建数值列表</span></span><br><span class="line">print(num)                                      <span class="comment"># 结果：[1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line">even_num = list(range(<span class="number">2</span>, <span class="number">11</span>, <span class="number">2</span>))                <span class="comment"># 使用range()还可以指定步长</span></span><br><span class="line">print(even_num)                                 <span class="comment"># 结果：[2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure><h4 id="对数值列表执行简单的统计计算"><a href="#对数值列表执行简单的统计计算" class="headerlink" title="对数值列表执行简单的统计计算"></a>对数值列表执行简单的统计计算</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">digits = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>]</span><br><span class="line">min(digits)                                     <span class="comment"># 取最小值</span></span><br><span class="line">max(digits)                                     <span class="comment"># 取最大值</span></span><br><span class="line">sum(digits)                                     <span class="comment"># 求总和</span></span><br></pre></td></tr></table></figure><h4 id="列表解析"><a href="#列表解析" class="headerlink" title="列表解析"></a><strong>列表解析</strong></h4><ul><li>复杂模式1<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">squares = []</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    square = value**<span class="number">2</span></span><br><span class="line">    squares.append(square)</span><br><span class="line">print(squares)</span><br></pre></td></tr></table></figure></li><li>较复杂模式2<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">squares = []</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    squares.append(value**<span class="number">2</span>)</span><br><span class="line">print(squares)</span><br></pre></td></tr></table></figure></li><li>列表解析<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">squares = [value**<span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line">print(squares)</span><br></pre></td></tr></table></figure>要使用这种语法，首先指定一个描述性的列表名，如<code>squares</code>；然后，指定一个左方括号，并定义一个表达式，用于生成你要存储到列表中的值。<br>表达式为<code>value**2</code>，它计算平方值。接下来，编写一个<code>for</code>循环，用于给表达式提供值，再加上右方括号。<br><code>for</code>循环为<code>for value in range(1,11)</code>，它将值1~10提供给表达式<code>value**2</code>。请注意，这里的<code>for</code>语句末尾没有冒号。</li></ul><h4 id="使用列表的一部分：列表切片『重要』"><a href="#使用列表的一部分：列表切片『重要』" class="headerlink" title="使用列表的一部分：列表切片『重要』"></a>使用列表的一部分：列表切片『重要』</h4><p>定义列表后，可从其中获取任何部分作为新列表。该技术称为对列表进行<code>切片</code>。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'mpilgrim'</span>, <span class="string">'z'</span>, <span class="string">'example'</span>]</span><br><span class="line">&gt;&gt;&gt; a_list[1:3]            ①</span><br><span class="line"><span class="comment"># ① 通过指定两个索引值，可以从列表中获取称作“切片”的某个部分。返回值是一个新列表，它包含列表(??切片)中所有元素，按顺序从第一个切片索引开始（本例中为 a_list[1]），截止但不包含第二个切片索引（本例中的 a_list[3]）。</span></span><br><span class="line">[<span class="string">'b'</span>, <span class="string">'mpilgrim'</span>]</span><br><span class="line">&gt;&gt;&gt; a_list[1:-1]           ②</span><br><span class="line"><span class="comment"># ② 如果切片索引之一或两者均为负数，切片操作仍可进行。如果有帮助的话，您可以这么思考：自左向右读取列表，第一个切片索引指明了想要的第一个元素，第二个切片索引指明了第一个不想要的元素。返回值是两者之间的任何值。 between.</span></span><br><span class="line">[<span class="string">'b'</span>, <span class="string">'mpilgrim'</span>, <span class="string">'z'</span>]</span><br><span class="line">&gt;&gt;&gt; a_list[0:3]            ③</span><br><span class="line"><span class="comment"># ③ 列表是以零为起点的，因此 a_list[0:3] 返回列表的头三个元素，从 a_list[0] 开始，截止到但不包括 a_list[3] 。</span></span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'mpilgrim'</span>]</span><br><span class="line">&gt;&gt;&gt; a_list[:3]             ④</span><br><span class="line"><span class="comment"># ④ 如果左切片索引为零，可以将其留空而将零隐去。因此 a_list[:3] 与 a_list[0:3] 是完全相同的，因为起点 0 被隐去了。</span></span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'mpilgrim'</span>]</span><br><span class="line">&gt;&gt;&gt; a_list[3:]             ⑤</span><br><span class="line"><span class="comment"># ⑤ 同样，如果右切片索引为列表的长度，也可以将其留空。因此 a_list[3:] 与 a_list[3:5] 是完全相同的，因为该列表有五个元素。此处有个好玩的对称现象。在这个五元素列表中， a_list[:3] 返回头三个元素，而 a_list[3:] 返回最后两个元素。事实上，无论列表的长度是多少, a_list[:n] 将返回头 n 个元素，而 a_list[n:] 返回其余部分。</span></span><br><span class="line">[<span class="string">'z'</span>, <span class="string">'example'</span>]</span><br><span class="line">&gt;&gt;&gt; a_list[:]              ⑥</span><br><span class="line"><span class="comment"># ⑥ 如果两个切片索引都留空，那么将包括列表所有的元素。但该返回值与最初的 a_list 变量并不一样。它是一个新列表，只不过恰好拥有完全相同的元素而已。a_list[:] 是对列表进行复制的一条捷径。</span></span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'mpilgrim'</span>, <span class="string">'z'</span>, <span class="string">'example'</span>]</span><br></pre></td></tr></table></figure><h4 id="分片赋值"><a href="#分片赋值" class="headerlink" title="分片赋值"></a>分片赋值</h4><ul><li>一次为多个元素赋值<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; name = list(<span class="string">'Perl'</span>)</span><br><span class="line">&gt;&gt;&gt; name</span><br><span class="line">[<span class="string">'P'</span>, <span class="string">'e'</span>, <span class="string">'r'</span>, <span class="string">'l'</span>]</span><br><span class="line">&gt;&gt;&gt; name[1:] = list(<span class="string">'ython'</span>)</span><br><span class="line">&gt;&gt;&gt; name</span><br><span class="line">[<span class="string">'P'</span>, <span class="string">'y'</span>, <span class="string">'t'</span>, <span class="string">'h'</span>, <span class="string">'o'</span>, <span class="string">'n'</span>]</span><br></pre></td></tr></table></figure></li><li>插入新的元素「替换一个空的切片」<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; numbers = [1, 5]</span><br><span class="line">&gt;&gt;&gt; numbers[1:1] = [2, 3, 4]</span><br><span class="line">&gt;&gt;&gt; numbers</span><br><span class="line">[1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure></li><li>删除元素<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; numbers</span><br><span class="line">[1, 2, 3, 4, 5]</span><br><span class="line">&gt;&gt;&gt; numbers[1:4] = []</span><br><span class="line">&gt;&gt;&gt; numbers</span><br><span class="line">[1, 5]</span><br></pre></td></tr></table></figure></li></ul><h4 id="列表方法"><a href="#列表方法" class="headerlink" title="列表方法"></a>列表方法</h4><ul><li>append「列表末尾增加元素」</li><li>count 「统计某个元素在列表中出现的次数」<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; [<span class="string">'to'</span>, <span class="string">'be'</span>, <span class="string">'or'</span>, <span class="string">'not'</span>, <span class="string">'to'</span>, <span class="string">'be'</span>].count(<span class="string">'to'</span>) </span><br><span class="line">2 </span><br><span class="line">&gt;&gt;&gt; x = [[1, 2], 1, 1, [2, 1, [1, 2]]] </span><br><span class="line">&gt;&gt;&gt; x.count(1) </span><br><span class="line">2 </span><br><span class="line">&gt;&gt;&gt; x.count([1, 2]) </span><br><span class="line">1</span><br></pre></td></tr></table></figure></li><li>extend 「在列表末尾增加另一个列表中的多个值」「原列表被修改」<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a = [1, 2, 3] </span><br><span class="line">&gt;&gt;&gt; b = [4, 5, 6] </span><br><span class="line">&gt;&gt;&gt; a.extend(b) </span><br><span class="line">&gt;&gt;&gt; a </span><br><span class="line">[1, 2, 3, 4, 5, 6]</span><br></pre></td></tr></table></figure></li><li>index 「索引位置」<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; knights = [<span class="string">'We'</span>, <span class="string">'are'</span>, <span class="string">'the'</span>, <span class="string">'knights'</span>, <span class="string">'who'</span>, <span class="string">'say'</span>, <span class="string">'ni'</span>] </span><br><span class="line">&gt;&gt;&gt; knights.index(<span class="string">'who'</span>) </span><br><span class="line">4 </span><br><span class="line">&gt;&gt;&gt; knights.index(<span class="string">'herring'</span>) </span><br><span class="line">Traceback (innermost last): </span><br><span class="line"> File <span class="string">"&lt;pyshell&gt;"</span>, line 1, <span class="keyword">in</span> ? </span><br><span class="line"> knights.index(<span class="string">'herring'</span>) </span><br><span class="line">ValueError: list.index(x): x not <span class="keyword">in</span> list</span><br><span class="line">&gt;&gt;&gt; knights[4] </span><br><span class="line"><span class="string">'who'</span></span><br></pre></td></tr></table></figure></li><li>insert 「列表插入元素」「第一个参数是索引号，第二个参数是待添加的新元素」<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; numbers = [1, 2, 3, 5, 6, 7] </span><br><span class="line">&gt;&gt;&gt; numbers.insert(3, <span class="string">'four'</span>) </span><br><span class="line">&gt;&gt;&gt; numbers </span><br><span class="line">[1, 2, 3, <span class="string">'four'</span>, 5, 6, 7]</span><br></pre></td></tr></table></figure></li><li>pop 「移除列表元素」「默认最后一个」「可实现一种常见的数据结构—栈”后进先出”」<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; x = [1, 2, 3] </span><br><span class="line">&gt;&gt;&gt; x.pop() </span><br><span class="line">3 </span><br><span class="line">&gt;&gt;&gt; x </span><br><span class="line">[1, 2] </span><br><span class="line">&gt;&gt;&gt; x.pop(0) </span><br><span class="line">1 </span><br><span class="line">&gt;&gt;&gt; x </span><br><span class="line">[2]</span><br></pre></td></tr></table></figure></li><li>remove 「删除第一个指定值的元素」<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; x = [<span class="string">'to'</span>, <span class="string">'be'</span>, <span class="string">'or'</span>, <span class="string">'not'</span>, <span class="string">'to'</span>, <span class="string">'be'</span>] </span><br><span class="line">&gt;&gt;&gt; x.remove(<span class="string">'be'</span>) </span><br><span class="line">&gt;&gt;&gt; x </span><br><span class="line">[<span class="string">'to'</span>, <span class="string">'or'</span>, <span class="string">'not'</span>, <span class="string">'to'</span>, <span class="string">'be'</span>] </span><br><span class="line">&gt;&gt;&gt; x.remove(<span class="string">'bee'</span>) </span><br><span class="line">Traceback (innermost last): </span><br><span class="line"> File <span class="string">"&lt;pyshell&gt;"</span>, line 1, <span class="keyword">in</span> ? </span><br><span class="line"> x.remove(<span class="string">'bee'</span>) </span><br><span class="line">ValueError: list.remove(x): x not <span class="keyword">in</span> list</span><br></pre></td></tr></table></figure></li><li>reverse 「按相反的顺序排列列表中的元素」「reversed」<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; x = [1, 2, 3] </span><br><span class="line">&gt;&gt;&gt; x.reverse() </span><br><span class="line">&gt;&gt;&gt; x </span><br><span class="line">[3, 2, 1]</span><br></pre></td></tr></table></figure></li><li>sort 「对列表就地排序」「sorted」<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; x = [4, 6, 2, 1, 7, 9] </span><br><span class="line">&gt;&gt;&gt; x.sort() </span><br><span class="line">&gt;&gt;&gt; x </span><br><span class="line">[1, 2, 4, 6, 7, 9]</span><br></pre></td></tr></table></figure></li><li>高级排序「方法sort接受两个可选参数：key和reverse」<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; x = [<span class="string">'aardvark'</span>, <span class="string">'abalone'</span>, <span class="string">'acme'</span>, <span class="string">'add'</span>, <span class="string">'aerate'</span>] </span><br><span class="line">&gt;&gt;&gt; x.sort(key=len) </span><br><span class="line">&gt;&gt;&gt; x </span><br><span class="line">[<span class="string">'add'</span>, <span class="string">'acme'</span>, <span class="string">'aerate'</span>, <span class="string">'abalone'</span>, <span class="string">'aardvark'</span>]</span><br><span class="line">&gt;&gt;&gt; x = [4, 6, 2, 1, 7, 9] </span><br><span class="line">&gt;&gt;&gt; x.sort(reverse=True) </span><br><span class="line">&gt;&gt;&gt; x </span><br><span class="line">[9, 7, 6, 4, 2, 1]</span><br></pre></td></tr></table></figure></li></ul><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="设置字符串格式『Python基础教程3-2、3-3节』"><a href="#设置字符串格式『Python基础教程3-2、3-3节』" class="headerlink" title="设置字符串格式『Python基础教程3.2、3.3节』"></a>设置字符串格式『Python基础教程3.2、3.3节』</h4><ol><li><code>%</code>-转换说明符<br><code>%s</code>-s将值的格式设置为字符串<br><code>%.3f</code>-将值的格式设置为包含3位小数的浮点数<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; format = <span class="string">"Hello, %s. %s enough for ya?"</span></span><br><span class="line">&gt;&gt;&gt; values = (<span class="string">'world'</span>, <span class="string">'Hot'</span>) </span><br><span class="line">&gt;&gt;&gt; format % values</span><br><span class="line"><span class="string">'Hello, world. Hot enough for ya?'</span></span><br></pre></td></tr></table></figure></li><li><code>{}.format</code>-字符串方法<br>每个替换字段都用花括号括起，其中可能包含名称，还可能包含有关如何对相应的值进行转换和格式设置的信息<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在最简单的情况下，替换字段没有名称或将索引用作名称。</span></span><br><span class="line">&gt;&gt;&gt; <span class="string">"&#123;&#125;, &#123;&#125; and &#123;&#125;"</span>.format(<span class="string">"first"</span>, <span class="string">"second"</span>, <span class="string">"third"</span>) </span><br><span class="line"><span class="string">'first, second and third'</span> </span><br><span class="line">&gt;&gt;&gt; <span class="string">"&#123;0&#125;, &#123;1&#125; and &#123;2&#125;"</span>.format(<span class="string">"first"</span>, <span class="string">"second"</span>, <span class="string">"third"</span>) </span><br><span class="line"><span class="string">'first, second and third'</span> </span><br><span class="line"><span class="comment"># 然而，索引无需像上面这样按顺序排列。</span></span><br><span class="line">&gt;&gt;&gt; <span class="string">"&#123;3&#125; &#123;0&#125; &#123;2&#125; &#123;1&#125; &#123;3&#125; &#123;0&#125;"</span>.format(<span class="string">"be"</span>, <span class="string">"not"</span>, <span class="string">"or"</span>, <span class="string">"to"</span>) </span><br><span class="line"><span class="string">'to be or not to be'</span> </span><br><span class="line"><span class="comment"># 命名字段的工作原理与你预期的完全相同。</span></span><br><span class="line">&gt;&gt;&gt; from math import pi </span><br><span class="line">&gt;&gt;&gt; <span class="string">"&#123;name&#125; is approximately &#123;value:.2f&#125;."</span>.format(value=pi, name=<span class="string">"π"</span>) </span><br><span class="line"><span class="string">'π is approximately 3.14.'</span></span><br></pre></td></tr></table></figure></li><li>格式化字符串核心-<code>替换字段</code><br>替换字段由如下部分组成：<ul><li><code>字段名</code>：索引或标识符，指出要设置哪个值的格式并使用结果来替换该字段。除指定值外，还可指定值的特定部分，如列表的元素。</li><li><code>转换标志</code>：跟在叹号后面的单个字符。当前支持的字符包括<code>r（表示repr）</code>、<code>s（表示str）</code>和<code>a（表示ascii）</code>。如果你指定了转换标志，将不使用对象本身的格式设置机制，而是使用指定的函数将对象转换为字符串，再做进一步的格式设置。</li><li><code>格式说明符</code>：跟在冒号后面的表达式（这种表达式是使用微型格式指定语言表示的）。格式说明符让我们能够详细地指定最终的格式，包括格式类型（如字符串、浮点数或十六进制数），字段宽度和数的精度，如何显示符号和千位分隔符，以及各种对齐和填充方式。</li></ul>3.1 替换字段名：<pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="string">"&#123;foo&#125; &#123;&#125; &#123;bar&#125; &#123;&#125;"</span>.format(1, 2, bar=4, foo=3) </span><br><span class="line"><span class="string">'3 1 4 2'</span> </span><br><span class="line">&gt;&gt;&gt; <span class="string">"&#123;foo&#125; &#123;1&#125; &#123;bar&#125; &#123;0&#125;"</span>.format(1, 2, bar=4, foo=3) </span><br><span class="line"><span class="string">'3 2 4 1'</span></span><br></pre></td></tr></table></figure></code></pre>3.2 基本转换<br>3.3 宽度、精度、千位分隔符<br>3.4 符号、对齐、用0填充</li></ol><h4 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h4><ol><li>center<br>通过在两边添加填充字符（默认为空格）让字符串居中。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="string">"The Middle by Jimmy Eat World"</span>.center(39) </span><br><span class="line"><span class="string">' The Middle by Jimmy Eat World '</span> </span><br><span class="line">&gt;&gt;&gt; <span class="string">"The Middle by Jimmy Eat World"</span>.center(39, <span class="string">"*"</span>) </span><br><span class="line"><span class="string">'*****The Middle by Jimmy Eat World*****'</span></span><br></pre></td></tr></table></figure></li><li>find<br>在字符串中查找子串。如果找到，就返回子串的第一个字符的索引，否则返回-1。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="string">'With a moo-moo here, and a moo-moo there'</span>.find(<span class="string">'moo'</span>) </span><br><span class="line">7 </span><br><span class="line">&gt;&gt;&gt; title = <span class="string">"Monty Python's Flying Circus"</span> </span><br><span class="line">&gt;&gt;&gt; title.find(<span class="string">'Monty'</span>) </span><br><span class="line">0 </span><br><span class="line">&gt;&gt;&gt; title.find(<span class="string">'Python'</span>) </span><br><span class="line">6 </span><br><span class="line">&gt;&gt;&gt; title.find(<span class="string">'Flying'</span>) </span><br><span class="line">15 </span><br><span class="line">&gt;&gt;&gt; title.find(<span class="string">'Zirquss'</span>) </span><br><span class="line">-1</span><br><span class="line"><span class="comment"># 指定搜索的起点和终点（它们都是可选的）。</span></span><br><span class="line">&gt;&gt;&gt; subject = <span class="string">'$$$ Get rich now!!! $$$'</span> </span><br><span class="line">&gt;&gt;&gt; subject.find(<span class="string">'$$$'</span>) </span><br><span class="line">0 </span><br><span class="line">&gt;&gt;&gt; subject.find(<span class="string">'$$$'</span>, 1) <span class="comment"># 只指定了起点</span></span><br><span class="line">20 </span><br><span class="line">&gt;&gt;&gt; subject.find(<span class="string">'!!!'</span>) </span><br><span class="line">16 </span><br><span class="line">&gt;&gt;&gt; subject.find(<span class="string">'!!!'</span>, 0, 16) <span class="comment"># 同时指定了起点和终点</span></span><br><span class="line">-1</span><br></pre></td></tr></table></figure></li><li>join<br>其作用与split相反，用于合并序列的元素。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; seq = [1, 2, 3, 4, 5] </span><br><span class="line">&gt;&gt;&gt; sep = <span class="string">'+'</span> </span><br><span class="line">&gt;&gt;&gt; sep.join(seq) <span class="comment"># 尝试合并一个数字列表</span></span><br><span class="line">Traceback (most recent call last): </span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line 1, <span class="keyword">in</span> ? </span><br><span class="line">TypeError: sequence item 0: expected string, int found </span><br><span class="line">&gt;&gt;&gt; seq = [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>] </span><br><span class="line">&gt;&gt;&gt; sep.join(seq) <span class="comment"># 合并一个字符串列表</span></span><br><span class="line"><span class="string">'1+2+3+4+5'</span> </span><br><span class="line">&gt;&gt;&gt; <span class="built_in">dirs</span> = <span class="string">''</span>, <span class="string">'usr'</span>, <span class="string">'bin'</span>, <span class="string">'env'</span> </span><br><span class="line">&gt;&gt;&gt; <span class="string">'/'</span>.join(<span class="built_in">dirs</span>) </span><br><span class="line"><span class="string">'/usr/bin/env'</span> </span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(<span class="string">'C:'</span> + <span class="string">'\\'</span>.join(<span class="built_in">dirs</span>)) </span><br><span class="line">C:\usr\bin\env</span><br></pre></td></tr></table></figure></li><li>lower<br>返回字符串的小写版本。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="string">'Trondheim Hammer Dance'</span>.lower() </span><br><span class="line"><span class="string">'trondheim hammer dance'</span></span><br></pre></td></tr></table></figure></li><li>replace<br>将指定子串都替换为另一个字符串，并返回替换后的结果。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="string">'This is a test'</span>.replace(<span class="string">'is'</span>, <span class="string">'eez'</span>) </span><br><span class="line"><span class="string">'Theez eez a test'</span></span><br></pre></td></tr></table></figure></li><li>split<br>作用与join相反，用于将字符串拆分为序列。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="string">'1+2+3+4+5'</span>.split(<span class="string">'+'</span>) </span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>] </span><br><span class="line">&gt;&gt;&gt; <span class="string">'/usr/bin/env'</span>.split(<span class="string">'/'</span>) </span><br><span class="line">[<span class="string">''</span>, <span class="string">'usr'</span>, <span class="string">'bin'</span>, <span class="string">'env'</span>] </span><br><span class="line">&gt;&gt;&gt; <span class="string">'Using the default'</span>.split() </span><br><span class="line">[<span class="string">'Using'</span>, <span class="string">'the'</span>, <span class="string">'default'</span>]</span><br></pre></td></tr></table></figure>如果没有指定分隔符，将默认在单个或多个连续的空白字符（空格、制表符、换行符等）处进行拆分。</li><li>strip<br>将字符串开头和末尾的空白（但不包括中间的空白）删除，并返回删除后的结果。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="string">' internal whitespace is kept '</span>.strip() </span><br><span class="line"><span class="string">'internal whitespace is kept'</span></span><br></pre></td></tr></table></figure>与lower一样，需要将输入与存储的值进行比较时，strip很有用。回到前面介绍lower时使用的用户名示例，并假定用户输入用户名时不小心在末尾加上了一个空格。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; names = [<span class="string">'gumby'</span>, <span class="string">'smith'</span>, <span class="string">'jones'</span>] </span><br><span class="line">&gt;&gt;&gt; name = <span class="string">'gumby '</span> </span><br><span class="line">&gt;&gt;&gt; <span class="keyword">if</span> name <span class="keyword">in</span> names: <span class="built_in">print</span>(<span class="string">'Found it!'</span>) </span><br><span class="line">... </span><br><span class="line">&gt;&gt;&gt; <span class="keyword">if</span> name.strip() <span class="keyword">in</span> names: <span class="built_in">print</span>(<span class="string">'Found it!'</span>) </span><br><span class="line">... </span><br><span class="line">Found it! </span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>还可在一个字符串参数中指定要删除哪些字符。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="string">'*** SPAM * for * everyone!!! ***'</span>.strip(<span class="string">' *!'</span>) </span><br><span class="line"><span class="string">'SPAM * for * everyone'</span></span><br></pre></td></tr></table></figure></li><li>translate<br>方法translate与replace一样替换字符串的特定部分，但不同的是它只能进行单字符替换。这个方法的优势在于能够同时替换多个字符，因此效率比replace高。</li></ol><h3 id="元组tuple"><a href="#元组tuple" class="headerlink" title="元组tuple"></a>元组<code>tuple</code></h3><p>元组：是不可变的列表。一旦创建之后，用任何方法都不可以修改元素。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a_tuple = (<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"mpilgrim"</span>, <span class="string">"z"</span>, <span class="string">"example"</span>)</span><br><span class="line"><span class="comment"># 负的索引从元组的尾部开始计数，这和列表也是一样的。</span></span><br><span class="line">&gt;&gt;&gt; a_tuple[-1]</span><br><span class="line"><span class="string">'example'</span></span><br><span class="line">&gt;&gt;&gt; a_tuple[1:3]</span><br><span class="line"><span class="comment"># 和列表一样，元组也可以进行切片操作。对列表切片可以得到新的列表；对元组切片可以得到新的元组。</span></span><br><span class="line">(<span class="string">'b'</span>, <span class="string">'mpilgrim'</span>)</span><br></pre></td></tr></table></figure><p>元组和列表的主要区别是元组不能进行修改。用技术术语来说，元组是<code>不可变更</code>的。从实践的角度来说，没有可用于修改元组的方法。列表有像<code>append()</code>、<code>extend()</code>、<code>insert()</code>、<code>remove()</code>和<code>pop()</code>这样的方法。这些方法，元组都没有。可以对元组进行切片操作（因为该方法创建一个新的元组），可以检查元组是否包含了特定的值（因为该操作不修改元组），还可以……就那么多了。<br>元组有什么好处:</p><ul><li>元组的速度比列表更快。如果定义了一系列常量值，而所需做的仅是对它进行遍历，那么请使用元组替代列表。</li><li>对不需要改变的数据进行“写保护”将使得代码更加安全。使用元组替代列表就像是有一条隐含的 assert 语句显示该数据是常量，特别的想法（及特别的功能）必须重写。（？？）</li><li>一些元组可用作字典键（特别是包含字符串、数值和其它元组这样的不可变数据的元组）。列表永远不能当做字典键使用，因为列表不是不可变的。</li></ul><p>元组可转换成列表，反之亦然。内建的<code>tuple()</code>函数接受一个列表参数，并返回一个包含同样元素的元组，而<code>list()</code>函数接受一个元组参数并返回一个列表。从效果上看，<code>tuple()</code>冻结列表，而<code>list()</code>融化元组。</p><h3 id="集合"><a href="#集合" class="headerlink" title="集合{ }"></a>集合<code>{ }</code></h3><p>一个简单的集合可以包含任何数据类型的值。如果有两个集合，则可以执行像联合、交集以及集合求差等标准集合运算。</p><h4 id="从list创建集合"><a href="#从list创建集合" class="headerlink" title="从list创建集合"></a>从list创建集合</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'mpilgrim'</span>, True, False, 42]</span><br><span class="line">&gt;&gt;&gt; a_set = <span class="built_in">set</span>(a_list)                           ①</span><br><span class="line">&gt;&gt;&gt; a_set                                         ②</span><br><span class="line"><span class="comment"># 集合是 无序的。该集合并不记得用于创建它的列表中元素的最初顺序。</span></span><br><span class="line">&#123;<span class="string">'a'</span>, False, <span class="string">'b'</span>, True, <span class="string">'mpilgrim'</span>, 42&#125;</span><br></pre></td></tr></table></figure><h4 id="创建空集合"><a href="#创建空集合" class="headerlink" title="创建空集合"></a>创建空集合</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 要创建空集合，可不带参数调用 set() 。</span></span><br><span class="line">&gt;&gt;&gt; a_set = <span class="built_in">set</span>()    ①</span><br><span class="line">&gt;&gt;&gt; a_set            ②</span><br><span class="line"><span class="comment"># 打印出来的空集合表现形式看起来有点儿怪。也许，您期望看到一个 &#123;&#125; 吧 ？该符号表示一个空的字典，而不是一个空的集合。</span></span><br><span class="line"><span class="built_in">set</span>()</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">type</span>(a_set)      ③</span><br><span class="line">&lt;class <span class="string">'set'</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="修改集合"><a href="#修改集合" class="headerlink" title="修改集合"></a>修改集合</h4><p>有两种方法可向现有集合中添加值： add() 方法和 update() 方法。<br>集合是装 唯一值 的袋子。如果试图添加一个集合中已有的值，将不会发生任何事情。将不会引发一个错误；只是一条空操作。</p><h4 id="从集合中删除元素"><a href="#从集合中删除元素" class="headerlink" title="从集合中删除元素"></a>从集合中删除元素</h4><p>有三种方法可以用来从集合中删除某个值。前两种，discard() 和 remove() 有细微的差异。集合也有个 pop() 方法。<br><code>pop()</code>方法从集合中删除某个值，并返回该值。然而，由于集合是无序的，并没有“最后一个”值的概念，因此无法控制删除的是哪一个值。它基本上是随机的。</p><h4 id="常见集合操作"><a href="#常见集合操作" class="headerlink" title="常见集合操作"></a>常见集合操作</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a_set = &#123;2, 4, 5, 9, 12, 21, 30, 51, 76, 127, 195&#125;</span><br><span class="line"><span class="comment"># ① 要检测某值是否是集合的成员，可使用 in 运算符。其工作原理和列表的一样。</span></span><br><span class="line">&gt;&gt;&gt; 30 <span class="keyword">in</span> a_set                                                     ①</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; 31 <span class="keyword">in</span> a_set</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; b_set = &#123;1, 2, 3, 5, 6, 8, 9, 12, 15, 17, 18, 21&#125;</span><br><span class="line">&gt;&gt;&gt; a_set.union(b_set)                                              ②</span><br><span class="line"><span class="comment"># ② union() 方法返回一个新集合，其中装着 在两个 集合中出现的元素。</span></span><br><span class="line">&#123;1, 2, 195, 4, 5, 6, 8, 12, 76, 15, 17, 18, 3, 21, 30, 51, 9, 127&#125;</span><br><span class="line">&gt;&gt;&gt; a_set.intersection(b_set)                                       ③</span><br><span class="line"><span class="comment"># ③ intersection() 方法返回一个新集合，其中装着 同时 在两个集合中出现的所有元素。</span></span><br><span class="line">&#123;9, 2, 12, 5, 21&#125;</span><br><span class="line">&gt;&gt;&gt; a_set.difference(b_set)                                         ④</span><br><span class="line"><span class="comment"># ④ difference() 方法返回的新集合中，装着所有在 a_set 出现但未在 b_set 中的元素。</span></span><br><span class="line">&#123;195, 4, 76, 51, 30, 127&#125;</span><br><span class="line">&gt;&gt;&gt; a_set.symmetric_difference(b_set)                               ⑤</span><br><span class="line"><span class="comment"># ⑤ symmetric_difference() 方法返回一个新集合，其中装着所有 只在其中一个 集合中出现的元素。</span></span><br><span class="line">&#123;1, 3, 4, 6, 8, 76, 15, 17, 18, 195, 127, 30, 51&#125;</span><br></pre></td></tr></table></figure><h3 id="字典dict"><a href="#字典dict" class="headerlink" title="字典dict"></a>字典<code>dict</code></h3><p>字典 是键值对的无序集合。向字典添加一个键的同时，必须为该键增添一个值。（之后可随时修改该值。） Python 的字典为通过键获取值进行了优化，而不是反过来。</p><h4 id="修改字典"><a href="#修改字典" class="headerlink" title="修改字典"></a>修改字典</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a_dict = &#123;<span class="string">'server'</span>: <span class="string">'db.diveintopython3.org'</span>, <span class="string">'database'</span>: <span class="string">'mysql'</span>&#125;</span><br><span class="line">&gt;&gt;&gt; a_dict[<span class="string">'database'</span>] = <span class="string">'blog'</span>  ①</span><br><span class="line"><span class="comment"># ① 在字典中不允许有重复的键。对现有的键赋值将会覆盖旧值。</span></span><br><span class="line">&gt;&gt;&gt; a_dict</span><br><span class="line">&#123;<span class="string">'server'</span>: <span class="string">'db.diveintopython3.org'</span>, <span class="string">'database'</span>: <span class="string">'blog'</span>&#125;</span><br><span class="line">&gt;&gt;&gt; a_dict[<span class="string">'user'</span>] = <span class="string">'mark'</span>      ②</span><br><span class="line"><span class="comment"># ② 可随时添加新的键值对。该语法与修改现有值相同。</span></span><br><span class="line">&gt;&gt;&gt; a_dict                       ③</span><br><span class="line"><span class="comment"># ③ 新字典项（键为 'user'，值为 'mark'）出现在中间。事实上，在第一个例子中字典项按顺序出现是个巧合；现在它们不按顺序出现同样也是个巧合。</span></span><br><span class="line">&#123;<span class="string">'server'</span>: <span class="string">'db.diveintopython3.org'</span>, <span class="string">'user'</span>: <span class="string">'mark'</span>, <span class="string">'database'</span>: <span class="string">'blog'</span>&#125;</span><br><span class="line">&gt;&gt;&gt; a_dict[<span class="string">'user'</span>] = <span class="string">'dora'</span>      ④</span><br><span class="line"><span class="comment"># ④ 对既有字典键进行赋值只会用新值替代旧值。</span></span><br><span class="line">&gt;&gt;&gt; a_dict</span><br><span class="line">&#123;<span class="string">'server'</span>: <span class="string">'db.diveintopython3.org'</span>, <span class="string">'user'</span>: <span class="string">'dora'</span>, <span class="string">'database'</span>: <span class="string">'blog'</span>&#125;</span><br><span class="line">&gt;&gt;&gt; a_dict[<span class="string">'User'</span>] = <span class="string">'mark'</span>      ⑤</span><br><span class="line"><span class="comment"># ⑤ 该操作会将 user 键的值改回 "mark" 吗？不会！仔细看看该键——有个大写的 U 出现在 "User" 中。字典键是区分大小写的，因此该语句创建了一组新的键值对，而不是覆盖既有的字典项。对你来说它们可能是一样的，但对于 Python 而言它们是完全不同的。</span></span><br><span class="line">&gt;&gt;&gt; a_dict</span><br><span class="line">&#123;<span class="string">'User'</span>: <span class="string">'mark'</span>, <span class="string">'server'</span>: <span class="string">'db.diveintopython3.org'</span>, <span class="string">'user'</span>: <span class="string">'dora'</span>, <span class="string">'database'</span>: <span class="string">'blog'</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="混合值字典，value不为单个值"><a href="#混合值字典，value不为单个值" class="headerlink" title="混合值字典，value不为单个值"></a>混合值字典，value不为单个值</h4><p>字典并非只能用于字符串。字典的值可以是任何数据类型，包括整数、布尔值、任何对象，甚至是其它的字典。而且就算在同一字典中，所有的值也无须是同一类型，您可根据需要混合匹配。字典的键要严格得多，可以是字符串、整数和其它一些类型。在同一字典中也可混合、匹配使用不同数据类型的键。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; SUFFIXES = &#123;1000: [<span class="string">'KB'</span>, <span class="string">'MB'</span>, <span class="string">'GB'</span>, <span class="string">'TB'</span>, <span class="string">'PB'</span>, <span class="string">'EB'</span>, <span class="string">'ZB'</span>, <span class="string">'YB'</span>],</span><br><span class="line">...             1024: [<span class="string">'KiB'</span>, <span class="string">'MiB'</span>, <span class="string">'GiB'</span>, <span class="string">'TiB'</span>, <span class="string">'PiB'</span>, <span class="string">'EiB'</span>, <span class="string">'ZiB'</span>, <span class="string">'YiB'</span>]&#125;</span><br><span class="line">&gt;&gt;&gt; len(SUFFIXES)      ①</span><br><span class="line"><span class="comment"># ① 类似 列表 和 集合 ，len() 函数将返回字典中键的数量。</span></span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; 1000 <span class="keyword">in</span> SUFFIXES   ②</span><br><span class="line"><span class="comment"># ② 而且像列表和集合一样，可使用 in 运算符以测试某个特定的键是否在字典中。</span></span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; SUFFIXES[1000]     ③</span><br><span class="line"><span class="comment"># ③ 1000 是 字典 SUFFIXES 的一个键；其值为一个 8 元素列表（确切地说，是 8 个字符串）。</span></span><br><span class="line">[<span class="string">'KB'</span>, <span class="string">'MB'</span>, <span class="string">'GB'</span>, <span class="string">'TB'</span>, <span class="string">'PB'</span>, <span class="string">'EB'</span>, <span class="string">'ZB'</span>, <span class="string">'YB'</span>]</span><br><span class="line">&gt;&gt;&gt; SUFFIXES[1024]     ④</span><br><span class="line"><span class="comment"># ④ 同样， 1024 是字典 SUFFIXES 的键；其值也是一个 8 元素列表。</span></span><br><span class="line">[<span class="string">'KiB'</span>, <span class="string">'MiB'</span>, <span class="string">'GiB'</span>, <span class="string">'TiB'</span>, <span class="string">'PiB'</span>, <span class="string">'EiB'</span>, <span class="string">'ZiB'</span>, <span class="string">'YiB'</span>]</span><br><span class="line">&gt;&gt;&gt; SUFFIXES[1000][3]  ⑤</span><br><span class="line"><span class="comment"># ⑤ 由于 SUFFIXES[1000] 是列表，可以通过它们的 0 基点索引来获取列表中的单个元素。</span></span><br><span class="line"><span class="string">'TB'</span></span><br></pre></td></tr></table></figure><h4 id="grades-‘’"><a href="#grades-‘’" class="headerlink" title="grades[‘’]"></a>grades[‘’]</h4><ul><li><p>是否可迭代<code>Iterable</code></p></li><li><p>类似一个概念，实例才是可被CPU操作的，真实存在的东西。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">have_some_food</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Delicious!'</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hava_a_drink</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Thanks!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    me = People()</span><br><span class="line">    you = People()</span><br><span class="line">    me.have_some_food()</span><br><span class="line">    me.hava_a_drink()</span><br></pre></td></tr></table></figure></li></ul><h4 id="字典方法『Python基础教程4-2-4节』"><a href="#字典方法『Python基础教程4-2-4节』" class="headerlink" title="字典方法『Python基础教程4.2.4节』"></a>字典方法『Python基础教程4.2.4节』</h4><ol><li>clear<br>场景一：通过将一个空字典赋给x来“清空”它。这对y没有任何影响，它依然指向原来的字典。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; x = &#123;&#125; </span><br><span class="line">&gt;&gt;&gt; y = x </span><br><span class="line">&gt;&gt;&gt; x[<span class="string">'key'</span>] = <span class="string">'value'</span> </span><br><span class="line">&gt;&gt;&gt; y </span><br><span class="line">&#123;<span class="string">'key'</span>: <span class="string">'value'</span>&#125; </span><br><span class="line">&gt;&gt;&gt; x = &#123;&#125; </span><br><span class="line">&gt;&gt;&gt; x = &#123;&#125; </span><br><span class="line">&#123;<span class="string">'key'</span>: <span class="string">'value'</span>&#125;</span><br></pre></td></tr></table></figure>场景二：但要删除原来字典的所有元素，必须使用clear。如果这样做，y也将是空的。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; x = &#123;&#125; </span><br><span class="line">&gt;&gt;&gt; y = x </span><br><span class="line">&gt;&gt;&gt; x[<span class="string">'key'</span>] = <span class="string">'value'</span> </span><br><span class="line">&gt;&gt;&gt; y </span><br><span class="line">&#123;<span class="string">'key'</span>: <span class="string">'value'</span>&#125; </span><br><span class="line">&gt;&gt;&gt; x.clear() </span><br><span class="line">&gt;&gt;&gt; y </span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure></li><li>copy<br>返回一个新字典，其包含的键值对与原来的字典相同（这个方法执行的是浅复制，因为值本身是原件，而非副本）。<br>为避免修改副本时也同时修改了原件，一种办法是执行深复制，即同时复制值及其包含的所有值，等等。为此，可使用模块copy中的函数deepcopy。</li><li>fromkeys<br>创建一个新字典，其中包含指定的键，且每个键对应的值都是None。</li><li>get<br>使用get来访问不存在的键时，没有引发异常，而是返回None。你可指定“默认”值，这样将返回你指定的值而不是None。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d.get(<span class="string">'name'</span>, <span class="string">'N/A'</span>) </span><br><span class="line"><span class="string">'N/A'</span></span><br></pre></td></tr></table></figure></li><li>items<br>方法items返回一个包含所有字典项的列表，其中每个元素都为(key, value)的形式。字典项在列表中的排列顺序不确定。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d = &#123;<span class="string">'title'</span>: <span class="string">'Python Web Site'</span>, <span class="string">'url'</span>: <span class="string">'http://www.python.org'</span>, <span class="string">'spam'</span>: 0&#125; </span><br><span class="line">&gt;&gt;&gt; d.items() </span><br><span class="line">dict_items([(<span class="string">'url'</span>, <span class="string">'http://www.python.org'</span>), (<span class="string">'spam'</span>, 0), (<span class="string">'title'</span>, <span class="string">'Python Web Site'</span>)])</span><br></pre></td></tr></table></figure>返回值属于一种名为<code>字典视图</code>的特殊类型。</li><li>keys<br>返回一个<code>字典视图</code>，其中包含指定字典中的键。</li><li>pop<br>用于获取与指定键相关联的值，并将该键值对从字典中删除。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d = &#123;<span class="string">'x'</span>: 1, <span class="string">'y'</span>: 2&#125; </span><br><span class="line">&gt;&gt;&gt; d.pop(<span class="string">'x'</span>) </span><br><span class="line">1 </span><br><span class="line">&gt;&gt;&gt; d </span><br><span class="line">&#123;<span class="string">'y'</span>: 2&#125;</span><br></pre></td></tr></table></figure></li><li>popitem<br>类似于list.pop，但list.pop弹出列表中的最后一个元素，而popitem随机地弹出一个字典项<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d = &#123;<span class="string">'url'</span>: <span class="string">'http://www.python.org'</span>, <span class="string">'spam'</span>: 0, <span class="string">'title'</span>: <span class="string">'Python Web Site'</span>&#125; </span><br><span class="line">&gt;&gt;&gt; d.popitem() </span><br><span class="line">(<span class="string">'url'</span>, <span class="string">'http://www.python.org'</span>) </span><br><span class="line">&gt;&gt;&gt; d </span><br><span class="line">&#123;<span class="string">'spam'</span>: 0, <span class="string">'title'</span>: <span class="string">'Python Web Site'</span>&#125;</span><br></pre></td></tr></table></figure></li><li>setdefault<br>有点像get，因为它也获取与指定键相关联的值，但除此之外，setdefault还在字典不包含指定的键时，在字典中添加指定的键值对。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d = &#123;&#125; </span><br><span class="line">&gt;&gt;&gt; d.setdefault(<span class="string">'name'</span>, <span class="string">'N/A'</span>) </span><br><span class="line"><span class="string">'N/A'</span> </span><br><span class="line">&gt;&gt;&gt; d </span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'N/A'</span>&#125; </span><br><span class="line">&gt;&gt;&gt; d[<span class="string">'name'</span>] = <span class="string">'Gumby'</span> </span><br><span class="line">&gt;&gt;&gt; d.setdefault(<span class="string">'name'</span>, <span class="string">'N/A'</span>) </span><br><span class="line"><span class="string">'Gumby'</span> </span><br><span class="line">&gt;&gt;&gt; d </span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'Gumby'</span>&#125;</span><br></pre></td></tr></table></figure></li><li>update<br>使用一个字典中的项来更新另一个字典。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d = &#123; </span><br><span class="line">... <span class="string">'title'</span>: <span class="string">'Python Web Site'</span>, </span><br><span class="line">... <span class="string">'url'</span>: <span class="string">'http://www.python.org'</span>, </span><br><span class="line">... <span class="string">'changed'</span>: <span class="string">'Mar 14 22:09:15 MET 2016'</span> </span><br><span class="line">... &#125; </span><br><span class="line">&gt;&gt;&gt; x = &#123;<span class="string">'title'</span>: <span class="string">'Python Language Website'</span>&#125; </span><br><span class="line">&gt;&gt;&gt; d.update(x) </span><br><span class="line">&gt;&gt;&gt; d </span><br><span class="line">&#123;<span class="string">'url'</span>: <span class="string">'http://www.python.org'</span>, <span class="string">'changed'</span>: </span><br><span class="line"><span class="string">'Mar 14 22:09:15 MET 2016'</span>, <span class="string">'title'</span>: <span class="string">'Python Language Website'</span>&#125;</span><br></pre></td></tr></table></figure></li><li>values<br>返回一个由字典中的值组成的字典视图。不同于方法keys，方法values返回的视图可能包含重复的值。</li></ol><h3 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h3><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ol><li>位置参数<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">storage = &#123;&#125; </span><br><span class="line">storage[<span class="string">'first'</span>] = &#123;&#125; </span><br><span class="line">storage[<span class="string">'middle'</span>] = &#123;&#125; </span><br><span class="line">storage[<span class="string">'last'</span>] = &#123;&#125; </span><br><span class="line">&gt;&gt;&gt; me = <span class="string">'Magnus Lie Hetland'</span> </span><br><span class="line">&gt;&gt;&gt; storage[<span class="string">'first'</span>][<span class="string">'Magnus'</span>] = [me] </span><br><span class="line">&gt;&gt;&gt; storage[<span class="string">'middle'</span>][<span class="string">'Lie'</span>] = [me] </span><br><span class="line">&gt;&gt;&gt; storage[<span class="string">'last'</span>][<span class="string">'Hetland'</span>] = [me] </span><br><span class="line">&gt;&gt;&gt; storage[<span class="string">'middle'</span>][<span class="string">'Lie'</span>] </span><br><span class="line">[<span class="string">'Magnus Lie Hetland'</span>]</span><br></pre></td></tr></table></figure></li><li>关键字参数和默认值<br>使用名称指定的参数称为关键字参数，主要优点是有助于澄清各个参数的作用。通过给参数指定默认值，可使其变成可选的。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; store(<span class="string">'Mr. Brainsample'</span>, 10, 20, 13, 5) </span><br><span class="line">&gt;&gt;&gt; store(patient=<span class="string">'Mr. Brainsample'</span>, hour=10, minute=20, day=13, month=5)</span><br></pre></td></tr></table></figure>具体使用示例如下：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">def hello_3(greeting=<span class="string">'Hello'</span>, name=<span class="string">'world'</span>): </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'&#123;&#125;, &#123;&#125;!'</span>.format(greeting, name)) </span><br><span class="line">&gt;&gt;&gt; hello_3() </span><br><span class="line">Hello, world! </span><br><span class="line">&gt;&gt;&gt; hello_3(<span class="string">'Greetings'</span>) </span><br><span class="line">Greetings, world! </span><br><span class="line">&gt;&gt;&gt; hello_3(<span class="string">'Greetings'</span>, <span class="string">'universe'</span>) </span><br><span class="line">Greetings, universe! </span><br><span class="line">&gt;&gt;&gt; hello_3(name=<span class="string">'Gumby'</span>) </span><br><span class="line">Hello, Gumby!</span><br></pre></td></tr></table></figure></li><li>收集参数<ul><li>参数前面带<code>一个星号</code>将提供的所有值都放在一个元组中，也就是将这些值收集起来。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">def print_params_2(title, *params): </span><br><span class="line">    <span class="built_in">print</span>(title) </span><br><span class="line">    <span class="built_in">print</span>(params)</span><br><span class="line">&gt;&gt;&gt; print_params_2(<span class="string">'Params:'</span>, 1, 2, 3) </span><br><span class="line">Params: </span><br><span class="line">(1, 2, 3)</span><br></pre></td></tr></table></figure></li><li><code>一个星号</code>不会收集关键字参数<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; def in_the_middle(x, *y, z): </span><br><span class="line">... <span class="built_in">print</span>(x, y, z) </span><br><span class="line">... </span><br><span class="line">&gt;&gt;&gt; in_the_middle(1, 2, 3, 4, 5, z=7) </span><br><span class="line">1 (2, 3, 4, 5) 7 </span><br><span class="line">&gt;&gt;&gt; in_the_middle(1, 2, 3, 4, 5, 7) </span><br><span class="line">Traceback (most recent call last): </span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line 1, <span class="keyword">in</span> &lt;module&gt; </span><br><span class="line">TypeError: in_the_middle() missing 1 required keyword-only argument: <span class="string">'z'</span></span><br></pre></td></tr></table></figure></li><li>要收集关键字参数，可使用两个星号。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">def print_params_4(x, y, z=3, *pospar, **keypar): </span><br><span class="line">    <span class="built_in">print</span>(x, y, z) </span><br><span class="line">    <span class="built_in">print</span>(pospar) </span><br><span class="line">    <span class="built_in">print</span>(keypar) </span><br><span class="line">&gt;&gt;&gt; print_params_4(1, 2, 3, 5, 6, 7, foo=1, bar=2) </span><br><span class="line">1 2 3 </span><br><span class="line">(5, 6, 7) </span><br><span class="line">&#123;<span class="string">'foo'</span>: 1, <span class="string">'bar'</span>: 2&#125; </span><br><span class="line">&gt;&gt;&gt; print_params_4(1, 2) </span><br><span class="line">1 2 3 </span><br><span class="line">() </span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><p>在函数内使用的变量称为局部变量（与之相对的是全局变量）。参数类似于局部变量，因此参数与全局变量同名不会有任何问题。</p><ol><li>作用域嵌套<br>Python函数可以嵌套，即可将一个函数放在另一个函数内<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">def multiplier(factor): </span><br><span class="line">    def multiplyByFactor(number): </span><br><span class="line">    <span class="built_in">return</span> number * factor </span><br><span class="line">    <span class="built_in">return</span> multiplyByFactor</span><br><span class="line">&gt;&gt;&gt; double = multiplier(2) </span><br><span class="line">&gt;&gt;&gt; double(5) </span><br><span class="line">10 </span><br><span class="line">&gt;&gt;&gt; triple = multiplier(3) </span><br><span class="line">&gt;&gt;&gt; triple(3) </span><br><span class="line">9 </span><br><span class="line">&gt;&gt;&gt; multiplier(5)(4) </span><br><span class="line">20</span><br></pre></td></tr></table></figure>像<code>multiplyByFactor</code>这样存储其所在作用域的函数称为<code>闭包</code>。</li></ol><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><ul><li><code>基线条件</code>（针对最小的问题）：满足这种条件时函数将直接返回一个值。</li><li><code>递归条件</code>：包含一个或多个调用，这些调用旨在解决问题的一部分。<br>这里的关键是，通过将问题分解为较小的部分，可避免递归没完没了，因为问题终将被分解成基线条件可以解决的最小问题。</li><li>示例：阶乘和幂</li><li>lambda表达式<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; seq = [<span class="string">"foo"</span>, <span class="string">"x41"</span>, <span class="string">"?!"</span>, <span class="string">"***"</span>]</span><br><span class="line">&gt;&gt;&gt; [x <span class="keyword">for</span> x <span class="keyword">in</span> seq <span class="keyword">if</span> x.isalnum()] </span><br><span class="line">[<span class="string">'foo'</span>, <span class="string">'x41'</span>] </span><br><span class="line">&gt;&gt;&gt; filter(lambda x: x.isalnum(), seq) </span><br><span class="line">[<span class="string">'foo'</span>, <span class="string">'x41'</span>]</span><br></pre></td></tr></table></figure></li></ul><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><ol><li><code>封装</code>是面向对象编程的一大特点</li><li>面向对象编程的<code>第一步</code>——将<code>属性</code>和<code>方法``封装</code>到一个抽象的<code>类</code>中</li><li><code>外界</code>使用<code>类</code>创建<code>对象</code>，然后<code>让对象调用方法</code></li><li><code>对象方法的细节</code>都被<code>封装</code>在<code>类的内部</code></li><li><code>同一个类</code>创建的<code>多个对象</code>之间，<code>属性</code>互不干扰。</li><li>一个对象的<code>属性</code>，可以是<code>另一个类创建的对象</code></li></ol><p>定义没有初始值的属性,如果不知道设置什么初始值，可以设置为<code>None</code></p><ul><li><code>None</code>关键字，表示什么都没有</li><li>表示一个<code>空对象</code>，没有方法和属性，是一个特殊的常量</li><li>可以将<code>None</code>赋值给任何一个变量</li></ul><p>在<code>封装的</code>方法内部，还可以让<code>自己的``使用其他类创建的对象的属性</code>调用已经<code>封装好的方法</code></p><h4 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h4><p>身份运算符，用于比较两个对象的<code>内存地址</code>是否一致–<code>是否是对同一个对象的引用</code><br>在 Python 中针对<code>None</code>比较时，建议使用<code>is</code>判断</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>is</td><td>is 是判断两个标识符是不是引用同一个对象</td><td>x is y，类似 id(x) == id(y)</td></tr><tr><td>is not</td><td>is not 是判断两个标识符是不是引用不同对象</td><td>x is not y，类似 id(a) != id(b)</td></tr></tbody></table><p><code>is</code>与<code>==</code>的区别：<br><code>is</code>用于判断<code>两个变量``引用对象是否为同一个</code><br><code>==</code>用于判断<code>引用变量的值</code>是否相等</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><h4 id="处理文件和目录"><a href="#处理文件和目录" class="headerlink" title="处理文件和目录"></a>处理文件和目录</h4><p><code>Python3</code>带有一个模块叫做<code>os</code>，代表<code>操作系统(operating system)</code>。<code>os</code>模块 包含非常多的函数用于获取(和修改)本地目录、文件进程、环境变量等的信息。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> humansize</span><br><span class="line"></span><br><span class="line">pathname = <span class="string">'/Users/pilgrim/diveintopython3/examples/humansize.py'</span></span><br><span class="line"><span class="comment">### 当前工作目录</span></span><br><span class="line"><span class="comment"># 获取当前工作目录</span></span><br><span class="line">print(os.getcwd())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改变当前工作目录</span></span><br><span class="line">os.chdir(<span class="string">'/Users/pilgrim/diveintopython3/examples'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 处理文件名和目录名</span></span><br><span class="line"><span class="comment"># os.path.join() 函数从一个或多个路径片段中构造一个路径名</span></span><br><span class="line">print(os.path.join(<span class="string">'/Users/pilgrim/diveintopython3/examples/'</span>, <span class="string">'humansize.py'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在和文件名拼接前，join函数给路径名添加一个额外的斜杠；无论你使用哪种形式的斜杠，Python 都可以访问到文件。</span></span><br><span class="line">print(os.path.join(<span class="string">'/Users/pilgrim/diveintopython3/examples'</span>, <span class="string">'humansize.py'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前用户的Home目录</span></span><br><span class="line">print(os.path.expanduser(<span class="string">'~'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割完整路径名，目录名和文件名</span></span><br><span class="line">os.path.split(pathname)</span><br><span class="line"><span class="comment"># 输出：('/Users/pilgrim/diveintopython3/examples', 'humansize.py')</span></span><br><span class="line"></span><br><span class="line">(dirname, filename) = os.path.split(pathname)</span><br><span class="line"><span class="comment"># 将split函数的返回值赋值给一个二元组。每个变量获得了返回元组中的对应元素的值</span></span><br><span class="line"></span><br><span class="line">(shortname, extension) = os.path.splitext(filename)</span><br><span class="line"><span class="comment"># 输出：('humansize', '.py')</span></span><br><span class="line"><span class="comment"># os.path.splitext() 函数，它分割一个文件名并返回短文件名和扩展名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 罗列目录内容</span></span><br><span class="line"><span class="comment"># glob 模块是Python标准库中的另一个工具，它可以通过编程的方法获得一个目录的内容，并且它使用熟悉的命令行下的通配符。</span></span><br><span class="line">glob.glob(<span class="string">'examples/*.xml'</span>)</span><br><span class="line"><span class="comment"># 通配符是一个目录名加上 “*.xml”， 它匹配examples子目录下的所有.xml 文件</span></span><br><span class="line"></span><br><span class="line">glob.glob(<span class="string">'*test*.py'</span>)</span><br><span class="line"><span class="comment"># 在当前工作目录中找出所有扩展名为.py并且在文件名中包含单词test 的文件</span></span><br><span class="line"></span><br><span class="line">metadata = os.stat(<span class="string">'feed.xml'</span>)</span><br><span class="line"><span class="comment"># os.stat() 函数返回一个包含多种文件元信息的对象</span></span><br><span class="line">metadata.st_mtime</span><br><span class="line"><span class="comment"># 返回最后修改时间，时间戳</span></span><br><span class="line">metadata.st_size</span><br><span class="line"><span class="comment"># 返回文件的字节大小</span></span><br><span class="line"></span><br><span class="line">humansize.approximate_size(metadata.st_size)</span><br><span class="line"><span class="comment"># 将st_size 属性作为参数传给approximate_size() 函数。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 构建绝对路径</span></span><br><span class="line">print(os.path.realpath(<span class="string">'feed.xml'</span>))</span><br><span class="line"><span class="comment"># 输出：/Users/pilgrim/diveintopython3/examples/feed.xml</span></span><br><span class="line"><span class="comment"># os.path.realpath()函数，返回当前文件或者目录的绝对路径</span></span><br></pre></td></tr></table></figure><h4 id="列表解析-1"><a href="#列表解析-1" class="headerlink" title="列表解析"></a>列表解析</h4><p>列表解析提供了一种紧凑的方式，实现了通过对列表中每一个元素应用一个函数的方法来将一个列表映射到另一个列表。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os, glob</span><br><span class="line"><span class="keyword">import</span> humansize</span><br><span class="line"></span><br><span class="line">a_list = [<span class="number">1</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">4</span>]</span><br><span class="line">a_list = [elem * <span class="number">2</span> <span class="keyword">for</span> elem <span class="keyword">in</span> a_list]</span><br><span class="line"><span class="comment"># Python会在内存中构造新的列表，在列表解析完成后将结果赋值给原来的变量</span></span><br><span class="line"></span><br><span class="line">glob.glob(<span class="string">'*.xml'</span>)</span><br><span class="line"><span class="comment"># 输出：['feed-broken.xml', 'feed-ns0.xml', 'feed.xml']</span></span><br><span class="line">[os.path.realpath(f) <span class="keyword">for</span> f <span class="keyword">in</span> glob.glob(<span class="string">'*.xml'</span>)]</span><br><span class="line"><span class="comment"># 输出：['c:\\Users\\pilgrim\\diveintopython3\\examples\\feed-broken.xml','c:\\Users\\pilgrim\\diveintopython3\\examples\\feed-ns0.xml','c:\\Users\\pilgrim\\diveintopython3\\examples\\feed.xml']</span></span><br><span class="line">[f <span class="keyword">for</span> f <span class="keyword">in</span> glob.glob(<span class="string">'*.py'</span>) <span class="keyword">if</span> os.stat(f).st_size &gt; <span class="number">6000</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表解析并不限制表达式的复杂程度</span></span><br><span class="line">[(os.stat(f).st_size, os.path.realpath(f)) <span class="keyword">for</span> f <span class="keyword">in</span> glob.glob(<span class="string">'*.xml'</span>)]</span><br><span class="line"><span class="comment"># 这个列表解析找到当前工作目录下的所有.xml文件， 对于每一个文件构造一个包含文件大小(通过调用os.stat()获得)和绝对路径(通过调用os.path.realpath())的元组。</span></span><br><span class="line"></span><br><span class="line">[(humansize.approximate_size(os.stat(f).st_size), f) <span class="keyword">for</span> f <span class="keyword">in</span> glob.glob(<span class="string">'*.xml'</span>)]</span><br><span class="line"><span class="comment"># 这个列表解析在前一个的基础上对每一个.xml文件的大小应用approximate_size()函数。</span></span><br></pre></td></tr></table></figure><h4 id="字典解析"><a href="#字典解析" class="headerlink" title="字典解析"></a>字典解析</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表解析</span></span><br><span class="line">metadata = [(f, os.stat(f)) <span class="keyword">for</span> f <span class="keyword">in</span> glob.glob(<span class="string">'*test*.py'</span>)]</span><br><span class="line"><span class="comment"># 字典解析</span></span><br><span class="line">metadata_dict = &#123;f:os.stat(f) <span class="keyword">for</span> f <span class="keyword">in</span> glob.glob(<span class="string">'*test*.py'</span>)&#125;</span><br><span class="line"><span class="comment"># 首先，它被花括号而不是方括号包围; 第二，对于每一个元素它包含由冒号分隔的两个表达式，而不是列表解析的一个。冒号前的表达式(在这个例子中是f)是字典的键;冒号后面的表达式(在这个例子中是os.stat(f))是值。</span></span><br><span class="line"></span><br><span class="line">type(metadata_dict)</span><br><span class="line"><span class="comment"># 输出：&lt;class 'dict'&gt;</span></span><br><span class="line"></span><br><span class="line">humansize_dict = &#123;os.path.splitext(f)[<span class="number">0</span>]:humansize.approximate_size(meta.st_size) <span class="keyword">for</span> f, meta <span class="keyword">in</span> metadata_dict.items() <span class="keyword">if</span> meta.st_size &gt; <span class="number">6000</span>&#125;</span><br><span class="line"></span><br><span class="line">list(humansize_dict.keys())</span><br><span class="line"><span class="comment"># 获取key值，并生成list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 交换字典的键和值</span></span><br><span class="line">a_dict = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</span><br><span class="line">&#123;value:key <span class="keyword">for</span> key, value <span class="keyword">in</span> a_dict.items()&#125;</span><br><span class="line"><span class="comment"># 输出：&#123;1: 'a', 2: 'b', 3: 'c'&#125;</span></span><br></pre></td></tr></table></figure><h4 id="集合解析"><a href="#集合解析" class="headerlink" title="集合解析"></a>集合解析</h4><p>集合也有自己的集合解析的语法。它和字典解析的非常相似，唯一的不同是集合只有值而没有键:值对。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a_set = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line">&#123;x <span class="keyword">for</span> x <span class="keyword">in</span> a_set <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>&#125;</span><br><span class="line"><span class="comment"># 输出：&#123;0, 8, 2, 4, 6&#125;</span></span><br><span class="line"><span class="comment"># 同列表解析和字典解析一样， 集合解析也可以包含if 字句来在将元素放入结果集合前进行过滤。</span></span><br></pre></td></tr></table></figure><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h4 id="替换操作"><a href="#替换操作" class="headerlink" title="替换操作"></a>替换操作</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">'100 NORTH BROAD ROAD'</span></span><br><span class="line"></span><br><span class="line">s[:<span class="number">-4</span>] + s[<span class="number">-4</span>:].replace(<span class="string">'ROAD'</span>, <span class="string">'RD.'</span>)</span><br><span class="line"><span class="comment"># 输出：'100 NORTH BROAD RD.'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正则表达式模块的re.sub()函数可以做字符串替换</span></span><br><span class="line">re.sub(<span class="string">'ROAD$'</span>, <span class="string">'RD.'</span>, s)</span><br><span class="line"><span class="comment"># 输出：'100 NORTH BROAD RD.'</span></span><br></pre></td></tr></table></figure><h4 id="电话号码解析实例"><a href="#电话号码解析实例" class="headerlink" title="电话号码解析实例"></a>电话号码解析实例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 电话号码样式：</span></span><br><span class="line">    <span class="comment"># 800-555-1212</span></span><br><span class="line">    <span class="comment"># 800 555 1212</span></span><br><span class="line">    <span class="comment"># 800.555.1212</span></span><br><span class="line">    <span class="comment"># (800) 555-1212</span></span><br><span class="line">    <span class="comment"># 1-800-555-1212</span></span><br><span class="line">    <span class="comment"># 800-555-1212-1234</span></span><br><span class="line">    <span class="comment"># 800-555-1212x1234</span></span><br><span class="line">    <span class="comment"># 800-555-1212 ext. 1234</span></span><br><span class="line">    <span class="comment"># work 1-(800) 555.1212 #1234</span></span><br><span class="line"></span><br><span class="line">phonePattern = re.compile(<span class="string">r'^(\d&#123;3&#125;)-(\d&#123;3&#125;)-(\d&#123;4&#125;)$'</span>)</span><br><span class="line"><span class="comment"># 我们通常从左到右的阅读正则表达式。首先是匹配字符串开始位置，然后是(\d&#123;3&#125;)。\d&#123;3&#125;表示什么意思？\d表示任意的数字（0到9），&#123;3&#125;表示一定要匹配3个数字。这个是你前面看到的&#123;n,m&#125;表示方法。把他们放在圆括号中，表示必须匹配3个数字，并且把他们记做一个组。分组的概念我们后面会说到。然后匹配一个连字符，接着匹配另外的3个数字，他们也同样作为一个组。然后又是一个连字符，后面还要准确匹配4个数字，他们也作为一位分组。最后匹配字符串结尾。</span></span><br><span class="line"></span><br><span class="line">phonePattern = re.compile(<span class="string">r'^(\d&#123;3&#125;)-(\d&#123;3&#125;)-(\d&#123;4&#125;)-(\d+)$'</span>)</span><br><span class="line"><span class="comment"># 这个正则表达式和前面的一样。匹配了字符串开始位置，然后是一个三个数字的分组，接着一个连字符，又是一个三个数字的分组，又是一个连字符，然后一个四个数字的分组。这三个分组匹配的内容都会被记忆下来。和上面不同的是，这里多匹配了一个连字符以及一个分组，这个分组里的内容是匹配一个或更多个数字。最后是字符串结尾。</span></span><br><span class="line"></span><br><span class="line">phonePattern = re.compile(<span class="string">r'^(\d&#123;3&#125;)\D+(\d&#123;3&#125;)\D+(\d&#123;4&#125;)\D+(\d+)$'</span>)</span><br><span class="line"><span class="comment"># 注意了！你匹配了字符串开始，然后是3个数字的分组，接着是\D+，这是什么？好吧，\D匹配除了数字以外的任意字符，+的意思是一个或多个。因此\D+匹配一个或一个以上的非数字字符。这就是你用来替换连字符的东西，它用来匹配不同的分隔符。</span></span><br><span class="line"></span><br><span class="line">phonePattern = re.compile(<span class="string">r'^(\d&#123;3&#125;)\D*(\d&#123;3&#125;)\D*(\d&#123;4&#125;)\D*(\d*)$'</span>)</span><br><span class="line"><span class="comment"># 这里和上面唯一不同的地方是，把所有的+换成了*。号码之间的分隔符不再用\D+来匹配，而是使用\D*。还记得+表示一个或更多吧？好，现在可以解析号码之间没有分隔符的情况了。</span></span><br><span class="line"></span><br><span class="line">phonePattern = re.compile(<span class="string">r'^\D*(\d&#123;3&#125;)\D*(\d&#123;3&#125;)\D*(\d&#123;4&#125;)\D*(\d*)$'</span>)</span><br><span class="line"><span class="comment"># 现在除了在第一个分组之前要用\d*匹配0个或更多非数字字符外，这和前面的例子是相同的。注意你不会对这些非数字字符分组，因为他们不在圆括号内，也就是说不是一个组。如果发现有这些字符，这里只是跳过他们，然后开始对后面的区域码匹配、分组。</span></span><br><span class="line"></span><br><span class="line">phonePattern = re.compile(<span class="string">r'(\d&#123;3&#125;)\D*(\d&#123;3&#125;)\D*(\d&#123;4&#125;)\D*(\d*)$'</span>)</span><br><span class="line"><span class="comment"># 注意正则表达式没有^。不会再匹配字符串开始位置了。正则表达式不会匹配整个字符串，而是试图找到一个字符串开始匹配的位置，然后从这个位置开始匹配。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最终匹配的正则表达式：</span></span><br><span class="line">phonePattern = re.compile(<span class="string">r'''</span></span><br><span class="line"><span class="string">                # don't match beginning of string, number can start anywhere</span></span><br><span class="line"><span class="string">    (\d&#123;3&#125;)     # area code is 3 digits (e.g. '800')</span></span><br><span class="line"><span class="string">    \D*         # optional separator is any number of non-digits</span></span><br><span class="line"><span class="string">    (\d&#123;3&#125;)     # trunk is 3 digits (e.g. '555')</span></span><br><span class="line"><span class="string">    \D*         # optional separator</span></span><br><span class="line"><span class="string">    (\d&#123;4&#125;)     # rest of number is 4 digits (e.g. '1212')</span></span><br><span class="line"><span class="string">    \D*         # optional separator</span></span><br><span class="line"><span class="string">    (\d*)       # extension is optional and can be any number of digits</span></span><br><span class="line"><span class="string">    $           # end of string</span></span><br><span class="line"><span class="string">    '''</span>, re.VERBOSE)</span><br></pre></td></tr></table></figure><p>到此应该熟悉了下面的技巧：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">^         <span class="comment"># 匹配字符串开始位置。</span></span><br><span class="line">$         <span class="comment"># 匹配字符串结束位置。</span></span><br><span class="line">\b        <span class="comment"># 匹配一个单词边界。</span></span><br><span class="line">\d        <span class="comment"># 匹配一个数字。</span></span><br><span class="line">\D        <span class="comment"># 匹配一个任意的非数字字符。</span></span><br><span class="line">x?        <span class="comment"># 匹配可选的x字符。换句话说，就是0个或者1个x字符。</span></span><br><span class="line">x*        <span class="comment"># 匹配0个或更多的x。</span></span><br><span class="line">x+        <span class="comment"># 匹配1个或者更多x。</span></span><br><span class="line">x&#123;n,m&#125;    <span class="comment"># 匹配n到m个x，至少n个，不能超过m个。</span></span><br><span class="line">(a|b|c)   <span class="comment"># 匹配单独的任意一个a或者b或者c。</span></span><br><span class="line">(x)       <span class="comment"># 这是一个组，它会记忆它匹配到的字符串。你可以用re.search返回的匹配对象的groups()函数来获取到匹配的值。</span></span><br></pre></td></tr></table></figure><h3 id="闭合和生成器"><a href="#闭合和生成器" class="headerlink" title="闭合和生成器"></a>闭合和生成器</h3><h4 id="正则表达式使用"><a href="#正则表达式使用" class="headerlink" title="正则表达式使用"></a>正则表达式使用</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">re.sub(<span class="string">'([^aeiou])y$'</span>, <span class="string">r'\1ies'</span>, <span class="string">'vacancy'</span>)</span><br><span class="line"><span class="comment"># 该分组用于保存字母 y 之前的字符。然后在替换字符串中，用到了新的语法： \1，它表示“嘿，记住的第一个分组呢？把它放到这里。”在此例中， 记住了 y 之前的 c ，在进行替换时，将用 c 替代 c，用 ies 替代 y 。（如果有超过一个的记忆分组，可以使用 \2 和 \3 等等。）</span></span><br></pre></td></tr></table></figure><p><a href="https://woodpecker.org.cn/diveintopython3/index.html" target="_blank" rel="noopener">深入python3</a></p>]]></content>
      <categories>
        <category>学习笔记</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL基础知识整理</title>
    <url>/2018/08/12/2018-08-12-SQL-basics-finishing/</url>
    <content><![CDATA[<h3 id="数据库表操作"><a href="#数据库表操作" class="headerlink" title="数据库表操作"></a>数据库表操作</h3><ol><li><p>登录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@host]<span class="comment"># mysql -u root -p</span></span><br><span class="line">Enter password:******</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>创建数据库</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> W3CSCHOOL;</span><br></pre></td></tr></table></figure></li><li><p>删除数据库</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> W3CSCHOOL;</span><br></pre></td></tr></table></figure></li><li><p>选择数据库</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> W3CSCHOOL;</span><br></pre></td></tr></table></figure></li><li><p>创建数据表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> w3cschool_tbl(</span><br><span class="line">    w3cschool_id <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    w3cschool_title <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    w3cschool_author <span class="built_in">VARCHAR</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    submission_date <span class="built_in">DATE</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> ( w3cschool_id )</span><br><span class="line">    );</span><br></pre></td></tr></table></figure></li><li><p>删除数据表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> table_name ;</span><br></pre></td></tr></table></figure></li><li><p>用户管理<br>7.1 新建用户</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'username'</span>@<span class="string">'host'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'password'</span>;</span><br></pre></td></tr></table></figure><p>7.2 授权</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">privileges</span> <span class="keyword">ON</span> databasename.tablename <span class="keyword">TO</span> <span class="string">'username'</span>@<span class="string">'host'</span></span><br></pre></td></tr></table></figure><ul><li>privileges：用户的操作权限，如SELECT，INSERT，UPDATE等，如果要授予所的权限则使用ALL</li><li>databasename：数据库名</li><li>tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用<code>*</code>表示，如<code>*.*</code></li></ul><p>7.3 设置与更改用户密码</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> <span class="string">'username'</span>@<span class="string">'host'</span> = <span class="keyword">PASSWORD</span>(<span class="string">'newpassword'</span>);</span><br></pre></td></tr></table></figure><p>如果是当前用户：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> = <span class="keyword">PASSWORD</span>(<span class="string">"newpassword"</span>);</span><br></pre></td></tr></table></figure><p>7.4 撤销用户权限</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> privilege <span class="keyword">ON</span> databasename.tablename <span class="keyword">FROM</span> <span class="string">'username'</span>@<span class="string">'host'</span>;</span><br></pre></td></tr></table></figure><p>7.5 删除用户</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">'username'</span>@<span class="string">'host'</span>;</span><br></pre></td></tr></table></figure></li></ol><h3 id="增删改"><a href="#增删改" class="headerlink" title="增删改"></a>增删改</h3><ol><li><p>插入数据</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name ( field1, field2,...fieldN )</span><br><span class="line">                       <span class="keyword">VALUES</span></span><br><span class="line">                       ( value1, value2,...valueN );</span><br></pre></td></tr></table></figure></li><li><p>UPDATE查询</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_name <span class="keyword">SET</span> field1=<span class="keyword">new</span>-value1, field2=<span class="keyword">new</span>-value2</span><br><span class="line">[<span class="keyword">WHERE</span> Clause]</span><br></pre></td></tr></table></figure></li><li><p>DELETE子句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name [<span class="keyword">WHERE</span> Clause]</span><br></pre></td></tr></table></figure></li></ol><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><ol><li><p>查询数据<br>1.1 基础查询语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name,column_name</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line">[<span class="keyword">WHERE</span> Clause]</span><br><span class="line">[<span class="keyword">OFFSET</span> M ][<span class="keyword">LIMIT</span> N]</span><br></pre></td></tr></table></figure><p>通过<code>OFFSET</code>指定<code>SELECT</code>语句开始查询的数据偏移量。默认情况下偏移量为0。<br><code>LIMIT</code>属性来设定返回的记录数。</p><p>1.2 where子句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> field1, field2,...fieldN <span class="keyword">FROM</span> table_name1, table_name2...</span><br><span class="line">[<span class="keyword">WHERE</span> condition1 [<span class="keyword">AND</span> [<span class="keyword">OR</span>]] condition2.....</span><br></pre></td></tr></table></figure><p>WHERE子句也可以运用于SQL的 DELETE 或者 UPDATE 命令。<br>WHERE 子句类似于程序语言中的if条件，根据 MySQL 表中的字段值来读取指定的数据。</p></li><li><p>LIKE子句<br>从技术上说，<code>LIKE</code>是谓词（predicate），而不是操作符。<br>使用<code>LIKE</code>子句，就必然会用到通配符。<br>通配符搜索只能用于文本字段（字符串），非文本数据类型字段不能使用通配符搜索。<br>2.1 百分号<code>%</code>通配符<br><code>%</code>表示任意字符出现任意多次。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">WHERE prod_name LIKE 'Fish%'</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">WHERE prod_name LIKE '%bean bag%'</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">WHERE prod_name LIKE 'F%y'</span><br></pre></td></tr></table></figure><p><code>%</code>还能匹配0个字符。<code>%</code>代表搜索模式中给定位置的0个、1个或多个字符。<br><code>%</code>不匹配<code>NULL</code><br>2.2 下划线<code>_</code>通配符<br><code>_</code>匹配单个字符<br>2.3 方括号<code>[]</code>通配符<br><code>[]</code>用来指定一个字符集。它必须匹配指定位置（通配符的位置）的一个字符，且该字符必须是指定字符集中存在的字符。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">WHERE cust_contact LIKE '[JM]%'</span><br></pre></td></tr></table></figure><p><code>[JM]</code>匹配方括号中任意一个字符，它也只能匹配单个字符。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">WHERE cust_contact LIKE '[^JM]%'</span><br></pre></td></tr></table></figure><p><code>[^JM]</code>匹配除方括号内的任意一个字符。它的另一种表达方式：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">WHERE NOT cust_contact LIKE '[JM]%'</span><br></pre></td></tr></table></figure><p>使用通配符搜索，一般会耗费更多的处理时间；把通配符置于开始处，搜索起来是最慢的。</p></li><li><p>创建计算字段<br>创建计算字段，并定义列名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">Concat</span>(vend_name, <span class="string">' ('</span>, vend_country, <span class="string">')'</span>) <span class="keyword">AS</span> vend_title</span><br></pre></td></tr></table></figure><p>计算字段也可用于算数计算</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> quantity, quantity*item_price <span class="keyword">AS</span> expended_price</span><br></pre></td></tr></table></figure></li><li><p>自身连接查询<code>join</code><br>数据源如下，表明 <code>students</code> 查找<code>class=&#39;B&#39;</code>的 <code>score</code> 大于 <code>class=&#39;A&#39;</code> 的<code>score</code> 的<code>name</code></p><table><thead><tr><th align="left">id</th><th align="left">name</th><th align="left">class</th><th align="left">score</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">张三</td><td align="left">A</td><td align="left">35</td></tr><tr><td align="left">2</td><td align="left">张三</td><td align="left">B</td><td align="left">16</td></tr><tr><td align="left">3</td><td align="left">李四</td><td align="left">A</td><td align="left">15</td></tr><tr><td align="left">4</td><td align="left">李四</td><td align="left">B</td><td align="left">17</td></tr><tr><td align="left">5</td><td align="left">王五</td><td align="left">A</td><td align="left">38</td></tr><tr><td align="left">6</td><td align="left">王五</td><td align="left">B</td><td align="left">18</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.name, a.score, b.score <span class="keyword">from</span> students <span class="keyword">as</span> a <span class="keyword">join</span> students <span class="keyword">as</span> b <span class="keyword">where</span> a.name = b.name <span class="keyword">and</span> a.score &gt; b.class <span class="keyword">and</span> a.class = <span class="string">"B"</span>;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.name, a.score, b.score <span class="keyword">from</span> students a, students b <span class="keyword">where</span> a.name = b.name <span class="keyword">and</span> a.score &gt; b.class <span class="keyword">and</span> a.class = <span class="string">"B"</span>;</span><br></pre></td></tr></table></figure></li></ol><h3 id="使用函数处理数据"><a href="#使用函数处理数据" class="headerlink" title="使用函数处理数据"></a>使用函数处理数据</h3><pre><code>函数的类型：
    - 用于处理文本字符串
    - 用于在数值数据上进行算术操作
    - 用于处理日期和时间值并从这些值中提取特定成分
    - 返回 DBMS 正使用的特殊信息</code></pre><ol><li><p>文本处理函数</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>LEFT()</code>(或使用子字符串函数)</td><td>返回字符串左边的字符</td></tr><tr><td><code>LENGTH()</code>(也使用<code>DATALENGTH()</code>或<code>LEN()</code>)</td><td>返回字符串的长度</td></tr><tr><td><code>LOWER()</code></td><td>将字符串转化为小写</td></tr><tr><td><code>LTRIM()</code></td><td>去掉字符串左边的空格</td></tr><tr><td><code>RIGHT()</code>或使用子字符串函数</td><td>返回字符串右边的字符</td></tr><tr><td><code>RTRIM()</code></td><td>去掉字符串右边的空格</td></tr><tr><td><code>SOUNDEX()</code></td><td>返回字符串的<code>SOUNDEX</code>值，对字符串进行发音比较，而不是字母比较</td></tr><tr><td><code>UPPER()</code></td><td>将字符串转化为大写</td></tr></tbody></table></li><li><p>聚集函数</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>AVG()</code></td><td>返回某列的平均值</td></tr><tr><td><code>COUNT()</code></td><td>返回某列的行数，<code>COUNT(*)</code>计数值包含空值(<code>NULL</code>)，<code>COUNT(column)</code>对特定列计数，忽略空值(<code>NULL</code>)</td></tr><tr><td><code>MAX()</code></td><td>返回某列的最大值</td></tr><tr><td><code>MIN()</code></td><td>返回某列的最小值</td></tr><tr><td><code>SUM()</code></td><td>返回某列值之和</td></tr></tbody></table></li><li><p>分组数据<br>涉及到两个新的 <code>SELECT</code> 语句子句：<code>GROUP BY</code> 子句和 <code>HAVING</code> 子句。</p></li></ol>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>接口测试用例设计总结</title>
    <url>/2018/04/23/2018-04-23-Interface-testcase-design-summary/</url>
    <content><![CDATA[<h3 id="接口测试定义"><a href="#接口测试定义" class="headerlink" title="接口测试定义"></a>接口测试定义</h3><h3 id="接口测试主要验证点"><a href="#接口测试主要验证点" class="headerlink" title="接口测试主要验证点"></a>接口测试主要验证点</h3><ul><li><p>针对输入，可按照参数类型进行设计；</p></li><li><p>针对接口处理，可按照逻辑进行设计；</p></li><li><p>针对输出，可根据结果进行分析设计。</p><a id="more"></a></li></ul><h3 id="接口测试用例设计"><a href="#接口测试用例设计" class="headerlink" title="接口测试用例设计"></a>接口测试用例设计</h3><h4 id="针对输入设计"><a href="#针对输入设计" class="headerlink" title="针对输入设计"></a>针对输入设计</h4><ol><li><p>数值型（int, long, float, double等）</p><ul><li>如果参数规定了值的范围，则需要考虑等价类取值范围内、取值范围外，取值的边界，如有需要，可能会遍历取值范围内的各个值。</li><li>参数数据类型限制；<ul><li>逆向用例：针对每个参数都设计1条参数值类型不符的逆向用例</li></ul></li><li>参数数据类型自身的数据范围值限制<ul><li>正向用例：针对所有参数，设计1条每个参数的参数值在数据范围内为最大值的正向用例</li><li>逆向用例：针对每个参数(假设n个)，设计n条每个参数的参数值都超出数据范围最大值的逆向用例</li><li>逆向用例：针对每个参数(假设n个)，设计n条每个参数的参数值都小于数据范围最小值的逆向用例<br>常见问题和风险：</li></ul></li><li>特殊值处理不当导致程序异常退出；</li><li>类型边界溢出；</li><li>取值范围外值未返回正确的错误信息等</li></ul></li><li><p>字符串类型</p><ul><li>边界值：string的最大长度；</li><li>特殊值：空字符；</li><li>字符串内容可考虑类型：数字，非数字；</li><li>特殊字符</li><li>如果是用户输入且其他用户不可见的内容，则还需要考虑敏感字是否被正常过滤<br>可能出现的问题和风险：</li><li>传入非特定类型程序异常退出；</li><li>超长字符未进行处理，导致存储、显示等异常；</li><li>其他用户可见设置的敏感字</li></ul></li><li><p>数组或链表</p><ul><li>正常取值、范围外；</li><li>边界值；</li><li>特殊值：0个；</li><li>合法ID和不合法的；</li><li>重复的ID等<br>可能存在的问题和风险：</li><li>0个item时程序异常退出；</li><li>重复的item处理时未去重导致结果异常等</li></ul></li><li><p>结构体</p><ul><li>结构体(struct)是一些元素的结合，元素实际也是数值型，字符串型，数组或链表。</li></ul></li><li><p>是否满足前提条件</p><ul><li>有些接口需要满足前置条件，才可成功获取数据。常见的，需要登陆Token。<br>逆向用例：</li><li>针对是否满足前置条件(假设为n个条件)，设计0~n条用例</li></ul></li><li><p>是否携带默认值参数</p><ul><li>带默认值的参数都不填写、不传参，必填参数都填写正确且存在的“常规”值，其它不填写，设计1条用例；</li></ul></li><li><p>业务规则、功能需求</p><ul><li>这里根据实际情况，结合接口参数说明，可能需要设计n条正向用例和逆向用例</li></ul></li><li><p>参数是否必填<br>逆向用例：</p><ul><li>针对每个必填参数，都设计1条参数值为空的逆向用例</li></ul></li><li><p>参数之间是否存在关联</p><ul><li>有些参数彼此之间存在相互制约的关系<br>逆向用例：</li><li>根据实际情况，可能需要设计0~n条用例</li></ul></li></ol><p>以上几个方面考虑全的话，基本可以做到如下几个方面的覆盖：</p><ul><li>主流程测试用例：正常的主流程功能校验；</li><li>分支流测试用例：正常的分支流功能校验；</li><li>异常流测试用例：异常容错校验</li></ul><h4 id="针对逻辑设计"><a href="#针对逻辑设计" class="headerlink" title="针对逻辑设计"></a>针对逻辑设计</h4><ol><li>约束条件分析<ul><li>数值限制：</li><li>状态限制：登录状态等</li><li>关系限制：绑定的关系，好友关系等。<ul><li>例如，应该只能查询有关联关系的账号的信息。</li></ul></li><li>权限限制：需要对应权限才能操作对应的功能<br>用户进行操作时，在该操作的前端可以已经进行了约束条件的限制，故用户无法直接触发请求该接口。但是实际上，如果有其他手段：例如UI有bug或者通过技术手段直接调用接口，那么接口是否针对这些条件进行了限制就尤为重要。<br>常见的问题和风险：</li><li>约束条件判断不足，导致用户可通过特殊手段获取利益</li></ul></li><li>操作对象分析<ul><li>对象之间存在隔离，不能串<br>常见的问题和风险：</li><li>用户可访问非权限内的其他用户信息、敏感信息，从而利用这些信息谋取利益。</li></ul></li><li>状态转换分析<ul><li>状态之间转换存在严格定义，不能随意变换<br>常见的问题和风险：</li><li>可通过特殊手段达到原本不能的状态，从而谋取利益。</li></ul></li><li>时序分析<ul><li>客户端与服务端的交互用户可见的只有一次，期间存在着用户不可见的内部多次按顺序执行的调用逻辑，实际就是发起了一个有序的动作流，只有按照正确的顺序，才能得到正确的结果。<br>常见的问题和风险：</li><li>非顺序执行后，数据出现异常，可能还会出现程序其他异常</li><li>通过打乱顺序获取利益</li></ul></li></ol><h4 id="针对输出设计"><a href="#针对输出设计" class="headerlink" title="针对输出设计"></a>针对输出设计</h4><ol><li>针对输出结果<br>接口处理正确的结果可能只有一个，但是错误异常返回结果有很多情况很多值。如果知道返回结果有很多种，就可以针对不同结果设计用例。例如提交积分任务的时候我们通常能想到的是返回正确和错误，错误可能想到：无效任务，无效登录态，但是不一定能否完全覆盖所有错误码，而接口返回定义的返回码可以设计更多用例。<br>覆盖返回码也是用例设计的一种思路。<br>常见问题和风险：<ul><li>错误前端处理不足，导致前端异常；</li><li>错误提示处理不当，导致用户看到晦涩的错误码；</li><li>错误提示不当，导致用户不知道哪里出了问题，如何解决。</li></ul></li><li>接口超时<br>接口正常情况下是有返回的，那么如果接口不返回呢？也就是说接口超时后的处理也是测试需要考虑的部分。<br>常见的问题及风险：<ul><li>未进行超时处理，导致整个流程阻塞</li><li>超时后又收到接口返回，导致逻辑出现错乱</li></ul></li></ol><h3 id="其他测试设计"><a href="#其他测试设计" class="headerlink" title="其他测试设计"></a>其他测试设计</h3><h4 id="已废弃接口处理"><a href="#已废弃接口处理" class="headerlink" title="已废弃接口处理"></a>已废弃接口处理</h4><p>已废弃协议，是指之前有定义，但是因为需求变更或其他原因，目前版本不用。这些接口虽然不再使用，但有可能代码并没有及时删除。如果利用技术手段调用这些接口，可能获取额外利益。<br>新版本在考虑兼容旧版本的同时，还应做好相关废弃接口的检查，避免用户获得额外利益。</p><h4 id="接口设计合理性分析"><a href="#接口设计合理性分析" class="headerlink" title="接口设计合理性分析"></a>接口设计合理性分析</h4><ul><li>接口字段是否冗余；</li><li>接口是否冗余；</li><li>接口是否返回了调用方期望得到的信息；</li><li>接口定义是否可满足所有调用需求；</li><li>接口定义调用是否方便。</li></ul><h3 id="接口用例设计精简和优化"><a href="#接口用例设计精简和优化" class="headerlink" title="接口用例设计精简和优化"></a>接口用例设计精简和优化</h3><p>在接口参数较多的情况下，如果每个参数都进行完整校验，将会是非常大的工作量，所以需要对接口用例进行精简和优化：</p><pre><code>① 根据接口的使用对象(外部，系统内部)，有选择的去、留部分用例
  - 如果开发于系统内部调用的，开发过程中，开发者肯定需要调用这些接口，如果类型错了，他们也就获取不到预期的数据，这些错误，他们肯定可以发现，所以，他们传递的参数值一般能保证类型正确。
  - 内部调用，参数值不是外部手动输入的，输入数据长度、值大小可控，当然如果数据一直增长，那再大的类型可能都无法保证不超出，比如自动增长的商铺id
② 根据接口的是否核心接口，有选择的去、留部分用例
  - 核心接口，每个字段都需要验证
  - 非核心接口，接口核心字段验证完成就可以
③ 根据参数说明，及实际情况，有选择的去、留部分用例
  - 部分参数的参数值是自定义的，比如 订单时间类型，就那几种，除非传错了，不然不可能超出范围
④ 尽量在一个用例中验证尽量多的参数形式，但又得想办法尽量让验证范围最大化</code></pre><p>转载与：<a href="https://cloud.tencent.com/developer/article/1022322" target="_blank" rel="noopener">接口测试用例设计</a></p>]]></content>
      <categories>
        <category>TestTheory</category>
      </categories>
      <tags>
        <tag>接口</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML基础学习笔记</title>
    <url>/2018/08/02/2018-08-02-HTML-basic-study-notes/</url>
    <content><![CDATA[<h3 id="基础标签功能"><a href="#基础标签功能" class="headerlink" title="基础标签功能"></a>基础标签功能</h3><p><code>p</code>标签</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># 元素解释：网站上正常段落文本的首选元素。P是“paragraph”的缩写。</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个p标签！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p><code>&lt;!-- --&gt;</code>注释</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># 元素解释：多行注释</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;h1&gt;Hello World&lt;/h1&gt;</span></span><br><span class="line"><span class="comment">    &lt;p&gt;Hello Paragraph&lt;/p&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><p>颜色属性</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># 方式一：直接在标签内加样式</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">"color: blue"</span>&gt;</span>CatPhotoApp<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"># 方式二：增加CSS样式</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    # 对标签加样式，直接引用</span><br><span class="line">    h2 &#123;</span><br><span class="line">        color: blue;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>CatPhotoApp<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>应用类于HTML元素，对元素增加CSS样式</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    # 对元素的类加样式，需要在引用类的时候，加上``.``为前缀</span><br><span class="line"><span class="css">    <span class="selector-class">.sty-text</span> &#123;</span></span><br><span class="line">        color: blue;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"sty-text"</span>&gt;</span>CatPhotoApp<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设置字体大小，字体类型</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># 方式一：直接在标签内加样式</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">"font-size: 16px"</span>&gt;</span>CatPhotoApp<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"># 方式二：增加CSS样式</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    # 对标签加样式，直接引用</span><br><span class="line">    h2 &#123;</span><br><span class="line">        font-size: 16px;</span><br><span class="line">        font-family: Monospace;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>CatPhotoApp<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加图片</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># img 元素是自关闭元素，不需要结束标签。</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://www.your-image-source.com/your-image.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/statics/codecamp/images/relaxing-cat.jpg"</span> <span class="attr">alt</span> = <span class="string">"your-image"</span>&gt;</span></span><br><span class="line"># alt 属性中的文本用于屏幕阅读器以提高可访问性，并且如果图像无法加载，则会显示。</span><br></pre></td></tr></table></figure><p>给图片添加格式</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">stype</span>&gt;</span></span><br><span class="line">    .smaller-image &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">    &#125;</span><br><span class="line">    .thick-green-border &#123;</span><br><span class="line">        <span class="comment">&lt;!-- 设置边框的宽度 --&gt;</span></span><br><span class="line">        border-width: 10px;</span><br><span class="line">        <span class="comment">&lt;!-- 设置边框的类型 --&gt;</span></span><br><span class="line">        border-style: solid;</span><br><span class="line">        <span class="comment">&lt;!-- 设置边框的颜色 --&gt;</span></span><br><span class="line">        border-color: green;</span><br><span class="line">        <span class="comment">&lt;!-- 设置边框的圆角度数 --&gt;</span></span><br><span class="line">        border-radius: 10px;</span><br><span class="line">        <span class="comment">&lt;!-- 设置一个圆形边框 --&gt;</span></span><br><span class="line">        border-radius: 50%;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"smaller-image thick-green-border"</span> <span class="attr">src</span>=<span class="string">"/statics/codecamp/images/relaxing-cat.jpg"</span> <span class="attr">alt</span> = <span class="string">"your-image"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>锚点元素<code>a</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 可以放在段落中间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个a标签 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.w3cschool.cn"</span>&gt;</span>W3Cschool.cn<span class="tag">&lt;/<span class="name">a</span>&gt;</span>跳转到W3Cschool.cn<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 也可以独立使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.w3cschool.cn"</span>&gt;</span>W3Cschool.cn<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>固定链接使用<code>#</code><br>有时你想要在你的网站上添加一个 a 元素，但你还不知道将它链接到哪里，这时你可以使用固定连接。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>cat photos<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为图片设置超链接</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过将某元素嵌套在a元素中使其变为一个链接。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"smaller-image thick-green-border"</span> <span class="attr">src</span>=<span class="string">"/statics/codecamp/images/relaxing-cat.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为图片添加<code>alt</code>描述<br><code>alt</code>属性，是当图片无法显示时的替代文本。<code>alt</code>属性对于盲人或视觉障碍的用户理解图片中的内容非常重要，搜索引擎也会搜索<code>alt</code>属性来了解图片的内容。<code>alt</code>属性是一个必需的属性，为页面上的图片都加上<code>alt</code>属性是好习惯。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"www.your-image-source.com/your-image.jpg"</span> <span class="attr">alt</span>=<span class="string">"your alt text"</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-100-Days 知识小结</title>
    <url>/2018/08/23/2018-08-23-Python-100-Days-knowledge-summary/</url>
    <content><![CDATA[<ol><li><p><code>range</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">range(<span class="number">101</span>)                  <span class="comment"># 产生一个0到100的整数序列</span></span><br><span class="line">range(<span class="number">1</span>, <span class="number">100</span>)               <span class="comment"># 产生一个1到99的整数序列</span></span><br><span class="line">range(<span class="number">1</span>, <span class="number">100</span>, <span class="number">2</span>)            <span class="comment"># 产生一个1到99的奇数序列，其中2是步长，即数值序列的增量</span></span><br><span class="line">range(<span class="number">100</span>, <span class="number">1</span>, <span class="number">-2</span>)           <span class="comment"># 产生一个100到2的偶数序列，其中-2是步长，最后一个序列值是2</span></span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p><code>input</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">raw = input(<span class="string">'请输入：'</span>)     <span class="comment"># 用于读取控制台输入的值</span></span><br></pre></td></tr></table></figure></li><li><p>Python内置函数</p><ul><li>数学相关: abs / divmod / pow / round / min / max / sum</li><li>序列相关: len / range / next / filter / map / sorted / slice / reversed</li><li>类型转换: chr / ord / str / bool / int / float / complex / bin / oct / hex</li><li>数据结构: dict / list / set / tuple</li><li>其他函数: all / any / id / input / open / print / type</li></ul></li><li><p>Python常用模块</p><ul><li>运行时服务相关模块: copy / pickle / sys / …</li><li>数学相关模块: decimal / math / random / …</li><li>字符串处理模块: codecs / re / …</li><li>文件处理相关模块: shutil / gzip / …</li><li>操作系统服务相关模块: datetime / os / time / logging / io / …</li><li>进程和线程相关模块: multiprocessing / threading / queue</li><li>网络应用相关模块: ftplib / http / smtplib / urllib / …</li><li>Web编程相关模块: cgi / webbrowser</li><li>数据处理和编码模块: base64 / csv / html.parser / json / xml / …</li></ul></li><li><p>函数的参数</p><ul><li><p>默认参数</p></li><li><p>可变参数</p></li><li><p>关键字参数</p></li><li><p>命名关键字参数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可变参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(*args)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> args:</span><br><span class="line">        sum += num</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line">print(f2(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关键字参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">(**kw)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'name'</span> <span class="keyword">in</span> kw:</span><br><span class="line">        print(<span class="string">'欢迎你%s!'</span> % kw[<span class="string">'name'</span>])</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">'tel'</span> <span class="keyword">in</span> kw:</span><br><span class="line">        print(<span class="string">'你的联系电话是: %s!'</span> % kw[<span class="string">'tel'</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'没找到你的个人信息!'</span>)</span><br><span class="line"></span><br><span class="line">param = &#123;<span class="string">'name'</span>: <span class="string">'骆昊'</span>, <span class="string">'age'</span>: <span class="number">38</span>&#125;</span><br><span class="line">f3(**param)</span><br><span class="line">f3(name=<span class="string">'骆昊'</span>, age=<span class="number">38</span>, tel=<span class="string">'13866778899'</span>)</span><br></pre></td></tr></table></figure><p><code>*args</code>是非关键字参数，用于元组，<code>**kw</code>是关键字参数，用于字典</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># *args 是非关键字参数，用于元组</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tupleArgs</span><span class="params">(arg1, arg2= <span class="string">'B'</span>, *arg3)</span>:</span></span><br><span class="line">    print(<span class="string">'arg 1:%s '</span> % arg1)</span><br><span class="line">    print(<span class="string">'arg 2:%s '</span> % arg2)</span><br><span class="line">    <span class="keyword">for</span> eachArgNum <span class="keyword">in</span> range(len(arg3)):</span><br><span class="line">        print(<span class="string">'the %d in arg 3 :%s '</span> % (eachArgNum,arg3[eachArgNum]))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    tupleArgs(<span class="string">'A'</span>)</span><br><span class="line">    <span class="comment">#   arg 1:A</span></span><br><span class="line">    <span class="comment">#   arg 2:B</span></span><br><span class="line">    tupleArgs(<span class="string">'23'</span>,<span class="string">'C'</span>)</span><br><span class="line">    <span class="comment">#   arg 1:23</span></span><br><span class="line">    <span class="comment">#   arg 2:C</span></span><br><span class="line">    tupleArgs(<span class="string">'12'</span>,<span class="string">'A'</span>,<span class="string">'GF'</span>,<span class="string">'L'</span>)</span><br><span class="line">    <span class="comment">#   arg 1:12</span></span><br><span class="line">    <span class="comment">#   arg 2:A</span></span><br><span class="line">    <span class="comment">#   the 0 in arg 3 :GF</span></span><br><span class="line">    <span class="comment">#   the 1 in arg 3 :L</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># **kw 是关键字参数，用于字典</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dictArgs</span><span class="params">(kw1, kw2= <span class="string">'B'</span>, **kw3)</span>:</span></span><br><span class="line">    print(<span class="string">'kw 1:%s '</span> % kw1)</span><br><span class="line">    print(<span class="string">'kw 2:%s '</span> % kw2)</span><br><span class="line">    <span class="keyword">for</span> eachKw <span class="keyword">in</span> kw3:</span><br><span class="line">        print(<span class="string">'the %s ----&gt;:%s '</span> % (eachKw,kw3[eachKw]))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    dictArgs(<span class="string">'A'</span>)</span><br><span class="line">    <span class="comment">#   kw 1:A </span></span><br><span class="line">    <span class="comment">#   kw 2:B </span></span><br><span class="line">    dictArgs(<span class="string">'23'</span>,<span class="string">'C'</span>)</span><br><span class="line">    <span class="comment">#   kw 1:23</span></span><br><span class="line">    <span class="comment">#   kw 2:C </span></span><br><span class="line">    dictArgs(<span class="string">'12'</span>,<span class="string">'A'</span>, c = <span class="string">'C'</span>,d = <span class="string">'12121212'</span>)</span><br><span class="line">    <span class="comment">#   kw 1:12  </span></span><br><span class="line">    <span class="comment">#   kw 2:A </span></span><br><span class="line">    <span class="comment">#   the d ----&gt;:12121212 </span></span><br><span class="line">    <span class="comment">#   the c ----&gt;:C </span></span><br><span class="line">    dictArgs(<span class="string">'kw'</span>,c = <span class="string">'C'</span>,d = <span class="string">'12121212'</span>,kw = <span class="string">'KW'</span>)</span><br><span class="line">    <span class="comment">#   kw 1:kw </span></span><br><span class="line">    <span class="comment">#   kw 2:B </span></span><br><span class="line">    <span class="comment">#   the kw ----&gt;:KW </span></span><br><span class="line">    <span class="comment">#   the d ----&gt;:12121212 </span></span><br><span class="line">    <span class="comment">#   the c ----&gt;:C</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>集合的常用操作</p><ul><li>交集</li><li>并集</li><li>差集</li><li>子集</li><li>超集</li></ul></li><li><p>面向对象</p><img src="/2018/08/23/2018-08-23-Python-100-Days-knowledge-summary/oop-zhihu.png" title="面向对象的另类解释"><p>表示属性时，大多数Python程序员会遵循一种命名惯例就是让属性名以单下划线开头来表示属性是受保护的，本类之外的代码在访问这样的属性时应该要保持慎重。这种做法并不是语法上的规则，单下划线开头的属性和方法外界仍然是可以访问的，所以更多的时候它是一种暗示或隐喻。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, foo)</span>:</span></span><br><span class="line">    <span class="string">"""构造器"""</span></span><br><span class="line">    <span class="string">"""定义函数的参数"""</span></span><br><span class="line">        self.__foo = foo</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__bar</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.__foo)</span><br><span class="line">        print(<span class="string">'__bar'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""入口函数"""</span></span><br><span class="line">    test = Test(<span class="string">'hello'</span>)</span><br><span class="line">    test._Test__bar()</span><br><span class="line">    print(test._Test__foo)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br><span class="line">    <span class="comment"># test = Test('hello')</span></span><br><span class="line">    <span class="comment"># test._Test__bar()</span></span><br><span class="line">    <span class="comment"># print(test._Test__foo)</span></span><br></pre></td></tr></table></figure></li><li><p>类与对象<br>简单的说，类是对象的蓝图和模板，而对象是类的实例。这个解释虽然有点像用概念在解释概念，但是从这句话我们至少可以看出，类是抽象的概念，而对象是具体的东西。在面向对象编程的世界中，一切皆为对象，对象都有属性和行为，每个对象都是独一无二的，而且对象一定属于某个类（型）。当我们把一大堆拥有共同特征的对象的静态特征（属性）和动态特征（行为）都抽取出来后，就可以定义出一个叫做“类”的东西。</p></li><li><p>类之间的关系<br>简单的说，类和类之间的关系有三种：is-a、has-a和use-a关系。</p><pre><code>- is-a关系也叫继承或泛化，比如学生和人的关系、手机和电子产品的关系都属于继承关系。
- has-a关系通常称之为关联，比如部门和员工的关系，汽车和引擎的关系都属于关联关系；关联关系如果是整体和部分的关联，那么我们称之为聚合关系；如果整体进一步负责了部分的生命周期（整体和部分是不可分割的，同时同在也同时消亡），那么这种就是最强的关联关系，我们称之为合成关系。
- use-a关系通常称之为依赖，比如司机有一个驾驶的行为（方法），其中（的参数）使用到了汽车，那么司机和汽车的关系就是依赖关系。</code></pre><img src="/2018/08/23/2018-08-23-Python-100-Days-knowledge-summary/uml-components.png" title="uml-components"> <img src="/2018/08/23/2018-08-23-Python-100-Days-knowledge-summary/uml-example.png" title="uml-example"></li><li><p>时间元组</p><table><thead><tr><th>序号</th><th>属性</th><th>字段</th><th>值</th></tr></thead><tbody><tr><td>0</td><td>tm_year</td><td>4位数年</td><td>2008</td></tr><tr><td>1</td><td>tm_mon</td><td>月</td><td>1 到 12</td></tr><tr><td>2</td><td>tm_mday</td><td>日</td><td>1到31</td></tr><tr><td>3</td><td>tm_hour</td><td>小时</td><td>0到23</td></tr><tr><td>4</td><td>tm_min</td><td>分钟</td><td>0到59</td></tr><tr><td>5</td><td>tm_sec</td><td>秒</td><td>0到61 (60或61 是闰秒)</td></tr><tr><td>6</td><td>tm_wday</td><td>一周的第几日</td><td>0到6 (0是周一)</td></tr><tr><td>7</td><td>tm_yday</td><td>一年的第几日</td><td>1到366 (儒略历)</td></tr><tr><td>8</td><td>tm_isdt</td><td>夏令时</td><td>-1, 0, 1, -1是决定是否为夏令时的旗帜</td></tr></tbody></table></li><li><p>使用<code>@property</code><br>Python内置的@property装饰器就是负责把一个方法变成属性调用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self._name = name</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 访问器 - getter方法</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 访问器 - getter方法</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._age</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改器 - setter方法</span></span><br><span class="line"><span class="meta">    @age.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self, age)</span>:</span></span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self._age &lt;= <span class="number">16</span>:</span><br><span class="line">            print(<span class="string">'%s正在玩飞行棋.'</span> % self._name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'%s正在玩斗地主.'</span> % self._name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    person = Person(<span class="string">'王大锤'</span>, <span class="number">12</span>)</span><br><span class="line">    person.play()</span><br><span class="line">    person.age = <span class="number">22</span></span><br><span class="line">    person.play()</span><br><span class="line">    <span class="comment"># person.name = '白元芳'  # AttributeError: can't set attribute</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>Python中属性和方法访问权限的问题，虽然我们不建议将属性设置为私有的，但是如果直接将属性暴露给外界也是有问题的，比如我们没有办法检查赋给属性的值是否有效。我们之前的建议是将属性命名以单下划线开头，通过这种方式来暗示属性是受保护的，不建议外界直接访问，那么如果想访问属性可以通过属性的<code>getter</code>（访问器）和<code>setter</code>（修改器）方法进行对应的操作。如果要做到这点，就可以考虑使用@property包装器来包装getter和setter方法，使得对属性的访问既安全又方便。</p></li><li><p>文件读写<br>json模块主要有四个比较重要的函数，分别是：</p><pre><code>dump - 将Python对象按照JSON格式序列化到文件中
dumps - 将Python对象处理成JSON格式的字符串
load - 将文件中的JSON数据反序列化成对象
loads - 将字符串的内容反序列化成Python对象</code></pre></li><li><p>文件读写模式</p><table><thead><tr><th>操作模式</th><th>具体含义</th></tr></thead><tbody><tr><td><code>&#39;r&#39;</code></td><td>读取 （默认）</td></tr><tr><td><code>&#39;w&#39;</code></td><td>写入（会先截断之前的内容）</td></tr><tr><td><code>&#39;x&#39;</code></td><td>写入，如果文件已经存在会产生异常</td></tr><tr><td><code>&#39;a&#39;</code></td><td>追加，将内容写入到已有文件的末尾</td></tr><tr><td><code>&#39;b&#39;</code></td><td>二进制模式</td></tr><tr><td><code>&#39;t&#39;</code></td><td>文本模式（默认）</td></tr><tr><td><code>&#39;+&#39;</code></td><td>更新（既可以读又可以写）</td></tr></tbody></table></li></ol><p><a href="https://github.com/jackfrued/Python-100-Days.git" target="_blank" rel="noopener">Python-100-Days</a></p>]]></content>
      <categories>
        <category>学习笔记</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>MAC下微信备份文件管理</title>
    <url>/2018/02/21/2018-02-21-WeChat-backup-file-management-under-MAC/</url>
    <content><![CDATA[<h3 id="备份文件位置"><a href="#备份文件位置" class="headerlink" title="备份文件位置"></a>备份文件位置</h3><img src="/2018/02/21/2018-02-21-WeChat-backup-file-management-under-MAC/%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D.png" title="备份与恢复"><a id="more"></a><p>默认情况下，手机端聊天记录在备份后，备份记录会被储存在如下目录：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/Users/taoyi/Library/Containers/com.tencent.xinWeChat/Data/Library/Application\ Support/com.tencent.xinWeChat/2.0b4.0.9/Backup/</span><br></pre></td></tr></table></figure><p>后面首先会是一个随机目录，比如：<code>98042dacf91c160514728c899d359b0c</code>，这个算是备份文件的主目录。<br>然后是第二级的一个随机目录，比如：<code>1F28B05B-D186-483D-AC39-23F54CC80811</code>，这里面就存放着备份文件，目录如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-rw-r--r--@ 1 taoyi  staff   177M  2 21 12:42 BAK_0_MEDIA</span><br><span class="line">-rw-r--r--@ 1 taoyi  staff   5.0M  2 21 12:41 BAK_0_TEXT</span><br><span class="line">-rw-r--r--@ 1 taoyi  staff   804K  2 21 12:42 Backup.db</span><br></pre></td></tr></table></figure><p>微信备份只有这一份数据，还原也只能从这一份数据还原。</p><h3 id="同一微信账号，多个备份管理"><a href="#同一微信账号，多个备份管理" class="headerlink" title="同一微信账号，多个备份管理"></a>同一微信账号，多个备份管理</h3><p>比如首先我们备份了一个比较重要的人的聊天记录出来，这时就可以把这一份备份记录剪切出来，放起来，然后这样直接在恢复里就看不到。<br>如果需要恢复，可以通过把这一份备份文件重新放回<code>Backup</code>目录中对应的位置，然后就又可以在备份文件管理里找到了，这样就可以单独恢复一个人的聊天记录。</p><h3 id="不同微信账号"><a href="#不同微信账号" class="headerlink" title="不同微信账号"></a>不同微信账号</h3><p>猜想不同微信账号，会在<code>Backup</code>目录下多一个随机目录，用来区分不同微信账号的备份记录。</p>]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>微信</tag>
      </tags>
  </entry>
  <entry>
    <title>《SQL必知必会》学习笔记</title>
    <url>/2018/02/26/2018-02-26-SQL-must-know--study-notes/</url>
    <content><![CDATA[<h3 id="数据库基础"><a href="#数据库基础" class="headerlink" title="数据库基础"></a>数据库基础</h3><p>DBMS：数据库管理系统。是一个数据库软件。<br>database：数据库。通过DBMS创建和操作的保存有组织的数据的容器（通常是一个文件或一组文件）。<br>table：表。某种特定类型数据的结构化清单。</p>]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 下环境变量规则及管理</title>
    <url>/2018/10/18/2018-10-18-Environment-variable-rules-and-management-under-Mac/</url>
    <content><![CDATA[<h4 id="Mac系统的环境变量，加载顺序"><a href="#Mac系统的环境变量，加载顺序" class="headerlink" title="Mac系统的环境变量，加载顺序"></a>Mac系统的环境变量，加载顺序</h4><ul><li><p>a. /etc/profile</p></li><li><p>b. /etc/paths</p></li><li><p>c. ~/.bash_profile</p></li><li><p>d. ~/.bash_login</p></li><li><p>e. ~/.profile</p></li><li><p>f. ~/.bashrc</p></li><li><p>g. ~/.zshrc</p><a id="more"></a></li></ul><p>其中<code>a</code>和<code>b</code>是系统级别的，系统启动就会加载，其余是用户级别的。<code>c</code>,<code>d</code>,<code>e</code>按照从前往后的顺序读取，如果<code>c</code>文件存在，则后面的几个文件就会被忽略不读了，以此类推。<br><code>~/.bashrc</code>没有上述规则，它是<code>bash shell</code>打开的时候载入的。<br><code>~/.zshrc</code>没有上述规则，它是<code>zsh shell</code>打开的时候载入的。<br>这里建议在<code>c</code>中添加环境变量，以下也是以在<code>c</code>中添加环境变量来演示的。</p><h4 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h4><p>比如添加 <code>maven</code> 环境变量<br>编辑 <code>~/.bash_profile</code>文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><p>添加环境变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> M2_HOME=/opt/apache-jmeter-5.0</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$M2_HOME</span>/bin</span><br></pre></td></tr></table></figure><p>生效环境变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><h4 id="使用zsh-shell"><a href="#使用zsh-shell" class="headerlink" title="使用zsh shell"></a>使用zsh shell</h4><p>在<code>~/.zshrc</code>中加入如下内容</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这样的话，在每次打开 <code>zsh shell</code> 的时候，都会对 <code>~/.bash_profile</code> 中的环境变量进行初始化生效</p><h4 id="Mac下JAVA-HOME设置，适用于通过pkg包直接安装的java"><a href="#Mac下JAVA-HOME设置，适用于通过pkg包直接安装的java" class="headerlink" title="Mac下JAVA_HOME设置，适用于通过pkg包直接安装的java"></a><code>Mac</code>下<code>JAVA_HOME</code>设置，适用于通过<code>pkg</code>包直接安装的<code>java</code></h4><ol><li><p>检查Java是否已经安装成功</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ taoyiDSC000331 in ~ [15:30:28] </span></span><br><span class="line">$ java -version</span><br><span class="line">java version <span class="string">"1.8.0_251"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_251-b08)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.251-b08, mixed mode)</span><br></pre></td></tr></table></figure><p>以上输出即说明Java已经安装成功了</p></li><li><p>查看java指令文件的位置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ taoyiDSC000331 in ~ [15:35:22] </span></span><br><span class="line">$ <span class="built_in">which</span> java     </span><br><span class="line">/usr/bin/java</span><br><span class="line"><span class="comment"># taoyi @ taoyiDSC000331 in ~ [15:36:13] </span></span><br><span class="line">$ ll /usr/bin/java             </span><br><span class="line">lrwxr-xr-x  1 root  wheel    74B  7  7 01:46 /usr/bin/java -&gt; /System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/java</span><br></pre></td></tr></table></figure><p>从以上输出可以知道，<code>/usr/bin/java</code>是一个链接文件，实际指向<code>/System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/java</code>这个文件。</p></li><li><p>获取java实际安装位置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ taoyiDSC000331 in ~ [15:36:21] </span></span><br><span class="line">$ <span class="built_in">cd</span> /System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands                                  </span><br><span class="line"><span class="comment"># taoyi @ taoyiDSC000331 in /System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands [15:44:24] </span></span><br><span class="line">$ ./java_home</span><br><span class="line">/Library/Java/JavaVirtualMachines/jdk1.8.0_251.jdk/Contents/Home</span><br></pre></td></tr></table></figure><p>从以上可以看到，java的实际安装位置为<code>/Library/Java/JavaVirtualMachines/jdk1.8.0_251.jdk</code>，实际的HOME位置为<code>/Library/Java/JavaVirtualMachines/jdk1.8.0_251.jdk/Contents/Home</code></p></li><li><p>设置<code>JAVA_HOME</code>环境变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=<span class="string">"/Library/Java/JavaVirtualMachines/jdk1.8.0_251.jdk/Contents/Home"</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span>"</span></span><br></pre></td></tr></table></figure><p>根据使用的终端命令的不一样，把以上内容添加到对应的环境变量文件中，如果使用的是原生的<code>bash</code>终端，就把内容添加到<code>~/.bash_profile</code>中，如果使用的是<code>zsh</code>终端，就把内容添加到<code>~/.zshrc</code>中<br>最后执行<code>source ~/.zshrc</code>命令，使刚才的设置生效。</p></li></ol>]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>初探测试 OKR</title>
    <url>/2019/02/19/2019-02-19-test-OKR/</url>
    <content><![CDATA[<h2 id="TC-相关目标"><a href="#TC-相关目标" class="headerlink" title="TC 相关目标"></a>TC 相关目标</h2><h4 id="TC-编写完整度"><a href="#TC-编写完整度" class="headerlink" title="TC 编写完整度"></a>TC 编写完整度</h4><ul><li><p>是否所有的需求点都已覆盖</p></li><li><p>TC 描述是否简明扼要抓住重点</p></li><li><p>异常情况，是否考虑全面</p></li><li><p>系统间交互，是否考虑全面</p></li><li><p>需求模糊时，是否主动了解清楚具体需求，并完善 TC</p></li><li><p>自测用例编写，是否包含所有重要功能，是否提高提测质量</p></li><li><p>测试执行过程中，非 TC 覆盖问题，占所有问题的比例</p><a id="more"></a></li></ul><h4 id="TC-执行完整度"><a href="#TC-执行完整度" class="headerlink" title="TC 执行完整度"></a>TC 执行完整度</h4><ul><li>是否执行完所有的 TC</li><li>执行中遇到需求调整等情况，是否主动更新 TC</li><li>TC 执行效率</li></ul><h4 id="TC-归档情况"><a href="#TC-归档情况" class="headerlink" title="TC 归档情况"></a>TC 归档情况</h4><ul><li>TC 模块名称定义是否清晰</li><li>TC 功能目录结构是否清晰</li><li>是否所有的 TC，都更新到最新，并提交到 git</li></ul><h2 id="BUG-相关目标"><a href="#BUG-相关目标" class="headerlink" title="BUG 相关目标"></a>BUG 相关目标</h2><h4 id="BUG-提交准确率"><a href="#BUG-提交准确率" class="headerlink" title="BUG 提交准确率"></a>BUG 提交准确率</h4><ul><li>测试阶段，BUG 提交时，优先级的定义准确率</li><li>BUG 提交规范情况</li><li>提交的 BUG，出现“Rejected”的比率</li><li>提交的 BUG，出现开发看不懂无法处理的比率</li></ul><h4 id="BUG-线上遗漏率"><a href="#BUG-线上遗漏率" class="headerlink" title="BUG 线上遗漏率"></a>BUG 线上遗漏率</h4><ul><li>测试阶段提交的 BUG，和线上同项目模块中出现的 BUG，的比率</li><li>线上各优先级 BUG 数量</li></ul><h2 id="项目任务完成目标"><a href="#项目任务完成目标" class="headerlink" title="项目任务完成目标"></a>项目任务完成目标</h2><h4 id="项目正常发布比率"><a href="#项目正常发布比率" class="headerlink" title="项目正常发布比率"></a>项目正常发布比率</h4><ul><li>季度周期内，按排期正常发布的项目数量</li><li>非测试因素，未按排期发布的项目数量</li><li>因测试原因，未按排期发布的项目数量</li></ul><h4 id="项目-BUG-处理完整度"><a href="#项目-BUG-处理完整度" class="headerlink" title="项目 BUG 处理完整度"></a>项目 BUG 处理完整度</h4><ul><li>是否项目所有的 BUG 都提交到 JIRA 上</li><li>测试环境测试完成时，JIRA 上的 BUG 是否全部处理完成</li><li>预发阶段，是否主动警示开发积极解决 BUG</li><li>发布前，是否所有的 BUG 都已经处理完成</li></ul><h4 id="项目完成顺畅度"><a href="#项目完成顺畅度" class="headerlink" title="项目完成顺畅度"></a>项目完成顺畅度</h4><ul><li>测试阶段，P0级问题遇到后，跟进时效</li><li>测试阶段，是否出现可绕过但长时间等待的情况</li><li>上预发过程中，是否出现预发第一两天无法进行测试的情况</li></ul><h4 id="项目测试进度把控情况"><a href="#项目测试进度把控情况" class="headerlink" title="项目测试进度把控情况"></a>项目测试进度把控情况</h4><ul><li>多轮测试项目，是否按照每轮测试时间完成该轮测试阶段</li><li>测试环境测试阶段，是否完成所有测试环境测试任务</li><li>是否依排期上到预发环境</li><li>发布前，是否拿到完整的发布计划，并考虑完善</li><li>是否出现错发漏发的情况</li></ul><h4 id="项目测试计划完整度"><a href="#项目测试计划完整度" class="headerlink" title="项目测试计划完整度"></a>项目测试计划完整度</h4><ul><li>预估的风险，是否指导测试过程中主动规避</li><li>多轮测试项目，是否明确划分阶段周期和目标</li><li>数据准备计划中，是否预估所有所需的数据</li></ul><h4 id="项目日报情况"><a href="#项目日报情况" class="headerlink" title="项目日报情况"></a>项目日报情况</h4><ul><li>是否对重要问题总结到位，并指派对应的开发</li><li>对项目进度情况说明，是否客观明确，并说明项目阶段的风险</li></ul><h2 id="线上-BUG-处理目标"><a href="#线上-BUG-处理目标" class="headerlink" title="线上 BUG 处理目标"></a>线上 BUG 处理目标</h2><h4 id="线上-BUG-接收及时率"><a href="#线上-BUG-接收及时率" class="headerlink" title="线上 BUG 接收及时率"></a>线上 BUG 接收及时率</h4><ul><li>值班期间，线上 BUG 是否及时接收转发</li><li>接收 BUG，是否都给予了反馈</li></ul><h4 id="线上-BUG-跟进处理完整度"><a href="#线上-BUG-跟进处理完整度" class="headerlink" title="线上 BUG 跟进处理完整度"></a>线上 BUG 跟进处理完整度</h4><ul><li>BUG 处理中，是否都给予了阶段反馈</li><li>紧急 BUG，处理时效</li><li>是否积极跟进开发解决问题</li></ul><h4 id="线上-BUG-总结情况"><a href="#线上-BUG-总结情况" class="headerlink" title="线上 BUG 总结情况"></a>线上 BUG 总结情况</h4><ul><li>业务线 BUG 整理统计完成度</li><li>偶发性 BUG 原因分析总结完成度</li><li>常见的未修复 BUG 专有处理流程整理程序化</li></ul><h2 id="接口测试目标"><a href="#接口测试目标" class="headerlink" title="接口测试目标"></a>接口测试目标</h2><h4 id="接收开发-API-新增修改完整度"><a href="#接收开发-API-新增修改完整度" class="headerlink" title="接收开发 API 新增修改完整度"></a>接收开发 API 新增修改完整度</h4><ul><li>督促开发完成 API 增改文档</li><li>对于每个接口修改所影响的业务整理完成度</li></ul><h4 id="接口测试完整度"><a href="#接口测试完整度" class="headerlink" title="接口测试完整度"></a>接口测试完整度</h4><ul><li>是否所有 API 都经过测试</li><li>API 测试到哪一步，是否只测到接口能够正常请求？</li></ul><h4 id="接口-TC-完成度"><a href="#接口-TC-完成度" class="headerlink" title="接口 TC 完成度"></a>接口 TC 完成度</h4><ul><li>相对开发修改的 API 数量，测试在 git 上 RF 接口 TC 提交数量</li><li>流程相关接口是否串联完成</li><li>接口 TC 是否部署到 jenkins 上进行自动化执行</li></ul><h2 id="扩展任务目标"><a href="#扩展任务目标" class="headerlink" title="扩展任务目标"></a>扩展任务目标</h2><ul><li>任务完成度</li><li>任务完成质量</li><li>是否帮助提高日常测试效率</li><li>是否提高自己的专业能力</li><li>对于任务中的难点是否有做总结分享</li></ul>]]></content>
      <categories>
        <category>TestTheory</category>
      </categories>
      <tags>
        <tag>kpi</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux环境下安装Brew</title>
    <url>/2018/04/10/2018-04-10-Linux-Install-Brew/</url>
    <content><![CDATA[<h3 id="Linux环境下，自定义安装brew"><a href="#Linux环境下，自定义安装brew" class="headerlink" title="Linux环境下，自定义安装brew"></a>Linux环境下，自定义安装<code>brew</code></h3><p>需要切换git源码地址中的<code>Linuxbrew</code>为<code>Homebrew</code>，后续，<code>Linuxbrew</code>不在更新</p><ol><li><p>clone源码到用户目录下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/homebrew/brew.git ~/.homebrew</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>把homebrew-core克隆下来</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Homebrew/homebrew-core.git ~/.homebrew/Library/Taps/homebrew</span><br></pre></td></tr></table></figure></li><li><p>设置环境变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$HOME</span>/.homebrew/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="built_in">export</span> MANPATH=<span class="string">"<span class="variable">$HOME</span>/.homebrew/share/man:<span class="variable">$MANPATH</span>"</span></span><br><span class="line"><span class="built_in">export</span> INFOPATH=<span class="string">"<span class="variable">$HOME</span>/.homebrew/share/info:<span class="variable">$INFOPATH</span>"</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="brew官方安装方案"><a href="#brew官方安装方案" class="headerlink" title="brew官方安装方案"></a>brew官方安装方案</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ubuntu @ VM-4-14-ubuntu in ~ [17:00:38] C:1</span></span><br><span class="line">$ /bin/bash -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>"</span></span><br><span class="line">==&gt; Checking <span class="keyword">for</span> `sudo` access (<span class="built_in">which</span> may request your password)...</span><br><span class="line">==&gt; This script will install:</span><br><span class="line">/home/linuxbrew/.linuxbrew/bin/brew</span><br><span class="line">/home/linuxbrew/.linuxbrew/share/doc/homebrew</span><br><span class="line">/home/linuxbrew/.linuxbrew/share/man/man1/brew.1</span><br><span class="line">/home/linuxbrew/.linuxbrew/share/zsh/site-functions/_brew</span><br><span class="line">/home/linuxbrew/.linuxbrew/etc/bash_completion.d/brew</span><br><span class="line">/home/linuxbrew/.linuxbrew/Homebrew</span><br><span class="line"></span><br><span class="line">Press RETURN/ENTER to <span class="built_in">continue</span> or any other key to abort:</span><br><span class="line">[sudo] password <span class="keyword">for</span> ubuntu:</span><br><span class="line">==&gt; /usr/bin/sudo /bin/chown -R ubuntu:ubuntu /home/linuxbrew/.linuxbrew/Homebrew</span><br><span class="line">==&gt; Downloading and installing Homebrew...</span><br><span class="line">remote: Enumerating objects: 242456, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (103/103), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (89/89), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 242456 (delta 12), reused 96 (delta 10), pack-reused 242353</span><br><span class="line">Receiving objects: 100% (242456/242456), 70.81 MiB | 581.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (177525/177525), <span class="keyword">done</span>.</span><br><span class="line">From https://github.com/Homebrew/brew</span><br><span class="line"> * [new branch]          dependabot/bundler/Library/Homebrew/json_schemer-0.2.25 -&gt; origin/dependabot/bundler/Library/Homebrew/json_schemer-0.2.25</span><br><span class="line"> * [new branch]          master                                                  -&gt; origin/master</span><br><span class="line"> * [new tag]             0.1                                                     -&gt; 0.1</span><br><span class="line"> * [new tag]             0.2                                                     -&gt; 0.2</span><br><span class="line"> * [new tag]             0.3                                                     -&gt; 0.3</span><br><span class="line"> * [new tag]             0.4                                                     -&gt; 0.4</span><br><span class="line"> * [new tag]             0.5                                                     -&gt; 0.5</span><br><span class="line">......</span><br><span class="line"> * [new tag]             4.0.5                                                   -&gt; 4.0.5</span><br><span class="line"> * [new tag]             4.0.6                                                   -&gt; 4.0.6</span><br><span class="line"> * [new tag]             4.0.7                                                   -&gt; 4.0.7</span><br><span class="line"> * [new tag]             4.0.8                                                   -&gt; 4.0.8</span><br><span class="line"> * [new tag]             4.0.9                                                   -&gt; 4.0.9</span><br><span class="line">HEAD is now at 322a0189c Merge pull request <span class="comment">#15529 from carlocab/deps-fix</span></span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/portable-ruby/portable-ruby/blobs/sha256:68923daf3e139482b977c3deba63a3b54ea37bb5f716482948878819ef911bad</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/portable-ruby-2.6.10_1.x86_64_linux.bottle.tar.gz</span><br><span class="line">==&gt; Pouring portable-ruby-2.6.10_1.x86_64_linux.bottle.tar.gz</span><br><span class="line">Warning: /home/linuxbrew/.linuxbrew/bin is not <span class="keyword">in</span> your PATH.</span><br><span class="line">  Instructions on how to configure your shell <span class="keyword">for</span> Homebrew</span><br><span class="line">  can be found <span class="keyword">in</span> the <span class="string">'Next steps'</span> section below.</span><br><span class="line">==&gt; Installation successful!</span><br><span class="line"></span><br><span class="line">==&gt; Homebrew has enabled anonymous aggregate formulae and cask analytics.</span><br><span class="line">Read the analytics documentation (and how to opt-out) here:</span><br><span class="line">  https://docs.brew.sh/Analytics</span><br><span class="line">No analytics data has been sent yet (nor will any be during this install run).</span><br><span class="line"></span><br><span class="line">==&gt; Homebrew is run entirely by unpaid volunteers. Please consider donating:</span><br><span class="line">  https://github.com/Homebrew/brew<span class="comment">#donations</span></span><br><span class="line"></span><br><span class="line">==&gt; Next steps:</span><br><span class="line">- Run these two commands <span class="keyword">in</span> your terminal to add Homebrew to your PATH:</span><br><span class="line">    (<span class="built_in">echo</span>; <span class="built_in">echo</span> <span class="string">'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"'</span>) &gt;&gt; /home/ubuntu/.zprofile</span><br><span class="line">    <span class="built_in">eval</span> <span class="string">"<span class="variable">$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)</span>"</span></span><br><span class="line">- Install Homebrew<span class="string">'s dependencies if you have sudo access:</span></span><br><span class="line"><span class="string">    sudo apt-get install build-essential</span></span><br><span class="line"><span class="string">  For more information, see:</span></span><br><span class="line"><span class="string">    https://docs.brew.sh/Homebrew-on-Linux</span></span><br><span class="line"><span class="string">- We recommend that you install GCC:</span></span><br><span class="line"><span class="string">    brew install gcc</span></span><br><span class="line"><span class="string">- Run brew help to get started</span></span><br><span class="line"><span class="string">- Further documentation:</span></span><br><span class="line"><span class="string">    https://docs.brew.sh</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>brew</tag>
      </tags>
  </entry>
  <entry>
    <title>Python相关问题解决总结</title>
    <url>/2019/05/12/2019-05-12-python-common-tips/</url>
    <content><![CDATA[<h4 id="pytest每次运行都会报ValueError-option-names-39-alluredir-39-already-added"><a href="#pytest每次运行都会报ValueError-option-names-39-alluredir-39-already-added" class="headerlink" title="pytest每次运行都会报ValueError: option names {&#39;--alluredir&#39;} already added"></a><code>pytest</code>每次运行都会报<code>ValueError: option names {&#39;--alluredir&#39;} already added</code></h4><p>原因是同时安装了<code>pytest-allure-adaptor</code>和<code>allure-pytest</code>，而它俩又都被引用了，造成了冲突。<br>解决方案：</p><pre><code>卸载掉其中一个
全局搜索哪些地方引用了，处理掉别的引用</code></pre><h4 id="httprunner框架中https请求报错解决"><a href="#httprunner框架中https请求报错解决" class="headerlink" title="httprunner框架中https请求报错解决"></a><code>httprunner</code>框架中<code>https</code>请求报错解决</h4><ol><li>接口请求的参数中，增加参数<code>&#39;verify&#39;: False</code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_data = &#123;<span class="string">'name'</span>: api_data.name,</span><br><span class="line">         <span class="string">'verify'</span>: <span class="literal">False</span>,</span><br><span class="line">         <span class="string">'request'</span>: &#123;<span class="string">'method'</span>: api_data.method,</span><br><span class="line">                     <span class="string">'files'</span>: &#123;&#125;,</span><br><span class="line">                     <span class="string">'data'</span>: &#123;&#125;,</span><br><span class="line">                     <span class="string">'headers'</span>: &#123;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure></li><li>框架修改<br>修改<code>venv/lib/python3.7/site-packages/httprunner/parser.py</code>文件<br>修改参数<code>config.pop(&quot;verify&quot;, False)</code>中原来的<code>True</code>为<code>False</code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">config_variables = config.get(<span class="string">"variables"</span>, &#123;&#125;)</span><br><span class="line">config_base_url = config.pop(<span class="string">"base_url"</span>, <span class="string">""</span>)</span><br><span class="line">config_verify = config.pop(<span class="string">"verify"</span>, <span class="literal">False</span>)</span><br><span class="line">functions = project_mapping.get(<span class="string">"functions"</span>, &#123;&#125;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="运行需要网络请求的python脚本，提示libssl找不到"><a href="#运行需要网络请求的python脚本，提示libssl找不到" class="headerlink" title="运行需要网络请求的python脚本，提示libssl找不到"></a>运行需要网络请求的<code>python</code>脚本，提示<code>libssl</code>找不到</h4><p>报错提示如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># shadow @ shadow in /usr/local/lib [17:55:16] </span></span><br><span class="line">$ python</span><br><span class="line">Python 3.7.0 (default, Oct  1 2018, 10:38:36) </span><br><span class="line">[Clang 10.0.0 (clang-1000.11.45.2)] on darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; import ssl</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"/Users/shadow/.pyenv/versions/3.7.0/lib/python3.7/ssl.py"</span>, line 98, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    import _ssl             <span class="comment"># if we can't import it, let the error propagate</span></span><br><span class="line">ImportError: dlopen(/Users/shadow/.pyenv/versions/3.7.0/lib/python3.7/lib-dynload/_ssl.cpython-37m-darwin.so, 2): Library not loaded: /usr/<span class="built_in">local</span>/opt/openssl/lib/libssl.1.0.0.dylib</span><br><span class="line">  Referenced from: /Users/shadow/.pyenv/versions/3.7.0/lib/python3.7/lib-dynload/_ssl.cpython-37m-darwin.so</span><br><span class="line">  Reason: image not found</span><br></pre></td></tr></table></figure><p><strong>原因</strong>：<br><code>brew</code>升级了<code>OpenSSL</code>版本到<code>OpenSSL@1.1</code>，所以<code>libssl.1.0.0.dylib</code>这个旧版本的库文件被卸载了，新的是<code>libssl.1.1.1.dylib</code>，旧版本的<code>python</code>没有更新链接，所以就会报找不到<code>/usr/local/opt/openssl/lib/libssl.1.0.0.dylib</code></p><p><strong>解决方法</strong>：<br>卸载之前引用了低版本的<code>python</code>，然后重新安装<code>python</code>就可以了</p>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>android无线adb连接和投屏</title>
    <url>/2019/05/26/2019-05-26-android-adb-WIFI-connect-and-scrcpy/</url>
    <content><![CDATA[<h3 id="adb无线连接"><a href="#adb无线连接" class="headerlink" title="adb无线连接"></a><code>adb</code>无线连接</h3><ol><li><p>手机有线模式下连接电脑，且手机开启了USB调试模式，效果如下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TyMac in ~ [1:18:55] </span></span><br><span class="line">$ adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">63faca2b	device</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>执行命令打开<code>tcpip</code>端口</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TyMac in ~ [1:18:59] </span></span><br><span class="line">$ adb tcpip 5555</span><br><span class="line">restarting <span class="keyword">in</span> TCP mode port: 5555</span><br></pre></td></tr></table></figure></li><li><p>执行无线连接安卓手机命令<br>先要拔除USB连接</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TyMac in ~ [1:24:58] </span></span><br><span class="line">$ adb connect 192.168.31.233:5555</span><br><span class="line">connected to 192.168.31.233:5555</span><br></pre></td></tr></table></figure><p>出现这个提示，说明无线连接成功了。</p></li><li><p>验证连接是否成功</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TyMac in ~ [1:25:21] C:1</span></span><br><span class="line">$ adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">192.168.31.233:5555	device</span><br></pre></td></tr></table></figure><p>出现如上提示，说明无线模式的调试模式也可以有效进行了。</p></li><li><p>关闭前面打开的无线连接端口的设备</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TyMac in ~ [1:25:21] C:1</span></span><br><span class="line">$ adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">192.168.31.233:5555	device</span><br><span class="line">192.168.31.233:5556	offline</span><br></pre></td></tr></table></figure><p>如上之前打开过一个<code>5556</code>的端口，因为也没有用到，且是掉线状态，如果留着，那连接的设备就不是唯一了，需要进行指定了，造成了一定的麻烦，所以需要手动删除该连接的设备，实际也就是关闭该设备的在线状态</p></li><li><p>断开远程连接</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb disconnect 192.168.31.233:5556</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">7. 查看端口占用的PID信息等</span><br><span class="line">    ```bash</span><br><span class="line">    <span class="comment"># taoyi @ TyMac in ~ [1:54:51] C:130</span></span><br><span class="line">    $ lsof -i tcp:5555</span><br><span class="line">    COMMAND   PID  USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME</span><br><span class="line">    adb     94280 taoyi   14u  IPv4 0x38c46a3265bac391      0t0  TCP 192.168.31.71:49360-&gt;192.168.31.233:personal-agent (ESTABLISHED)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TyMac in ~ [1:53:59] </span></span><br><span class="line">$ ps -ef | grep fork-server</span><br><span class="line">  UID   PID  PPID   C STIME   TTY         TIME CMD</span><br><span class="line">  501 94280     1   0  3:44下午 ??         2:00.63 adb -L tcp:5037 fork-server server --reply-fd 5</span><br><span class="line">  501 21281 16612   0  1:56上午 ttys000    0:00.00 grep --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn fork-server</span><br></pre></td></tr></table></figure></li><li><p><code>kill</code>掉刚才已经<code>offline</code>的设备的链接的<code>PID</code>，就可以删除该设备了</p></li></ol><h3 id="无线投屏"><a href="#无线投屏" class="headerlink" title="无线投屏"></a>无线投屏</h3><ol><li><p>安卓投屏软件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install scrcpy</span><br></pre></td></tr></table></figure></li><li><p>在完成上一节中的无线连接调试后，完成无线投屏</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TyMac in ~ [1:27:04] </span></span><br><span class="line">$ scrcpy                </span><br><span class="line">/usr/<span class="built_in">local</span>/Cellar/scrcpy/1.8/share/scrcpy/scrcpy-server.jar: 1 file pushed. 0.4 MB/s (19850 bytes <span class="keyword">in</span> 0.048s)</span><br><span class="line">2019-05-26 01:27:32.921 scrcpy[17790:9101920] INFO: Initial texture: 1080x2248</span><br></pre></td></tr></table></figure><p>在完成<code>scrcpy</code>的安装后，直接执行<code>scrcpy</code>的命令就可以完成无线投屏了。</p></li><li><p><code>scrcpy</code>常用命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置端口</span></span><br><span class="line">scrcpy -p 27184</span><br><span class="line"><span class="comment"># 查看帮助</span></span><br><span class="line">scrcpy --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># 设置码率（默认8M）</span></span><br><span class="line">scrcpy -b 8M</span><br><span class="line"><span class="comment"># 连接多个设备时，指定设备</span></span><br><span class="line">scrcpy -s 63faca2b</span><br><span class="line">scrcpy -s 172.18.98.221:9000</span><br><span class="line"><span class="comment"># 限制投屏尺寸</span></span><br><span class="line">scrcpy -m 1024</span><br><span class="line"><span class="comment"># 裁剪投屏屏幕(长:宽:偏移x:偏移y)</span></span><br><span class="line">scrcpy -c 800:800:0:0</span><br><span class="line"><span class="comment"># 投屏并录屏</span></span><br><span class="line">scrcpy -r file.mp4</span><br><span class="line"><span class="comment"># 不投屏只录屏</span></span><br><span class="line">scrcpy -Nr file.mp4</span><br><span class="line"><span class="comment"># 手指触摸的时候显示轨迹球</span></span><br><span class="line">scrcpy -t</span><br><span class="line"><span class="comment"># 显示版本信息</span></span><br><span class="line">scrcpy -v</span><br></pre></td></tr></table></figure></li><li><p>快捷方式</p><table><thead><tr><th>Action</th><th>Shortcut</th></tr></thead><tbody><tr><td>切换全屏模式</td><td>Ctrl+f</td></tr><tr><td>将窗口调整为1：1（完美像素）</td><td>Ctrl+g</td></tr><tr><td>调整窗口大小以删除黑色边框</td><td>Ctrl+x / 双击黑色背景</td></tr><tr><td>设备HOME键</td><td>Ctrl+h / 鼠标中键</td></tr><tr><td>设备BACK键</td><td>Ctrl+b / 鼠标右键</td></tr><tr><td>设备任务管理键</td><td>Ctrl+s</td></tr><tr><td>设备 菜单 键</td><td>Ctrl+m</td></tr><tr><td>设备音量+键</td><td>Ctrl+↑</td></tr><tr><td>设备音量-键</td><td>Ctrl+↓</td></tr><tr><td>设备电源键</td><td>Ctrl+p</td></tr><tr><td>点亮手机屏幕</td><td>鼠标右键</td></tr><tr><td>复制内容到设备</td><td>Ctrl+v</td></tr><tr><td>启用/禁用FPS计数器（stdout）</td><td>Ctrl+i</td></tr><tr><td>安装APK</td><td>将apk文件拖入投屏</td></tr><tr><td>传输文件到设备</td><td>将文件拖入投屏（非apk）</td></tr></tbody></table></li></ol>]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>adb</tag>
      </tags>
  </entry>
  <entry>
    <title>项目周期</title>
    <url>/2019/08/13/2019-08-13-project-cycle/</url>
    <content><![CDATA[<h3 id="需求可行性评审"><a href="#需求可行性评审" class="headerlink" title="需求可行性评审"></a>需求可行性评审</h3><ol><li>评估需求的可行性，由测试leader、前端&amp;后端leader、产品参与；</li><li>产品描述项目背景及大致需求，对于需求涉及的模块及交互的实现情况，考虑是否可行，对不合理点提出意见</li></ol><a id="more"></a><h3 id="需求评审"><a href="#需求评审" class="headerlink" title="需求评审"></a>需求评审</h3><ol><li>具体参与项目的测试、前端&amp;后端开发、设计师、产品；</li><li>产品详细描述PRD，对应方提出疑问点，产品记录各方提出的问题及疑问，完善PRD</li></ol><h3 id="交互-amp-视觉评审"><a href="#交互-amp-视觉评审" class="headerlink" title="交互&amp;视觉评审"></a>交互&amp;视觉评审</h3><ol><li>具体参与项目的测试、前端&amp;后端开发、设计师、产品；</li><li>设计师描述产品的页面展示及交互形式，各方对于视觉稿中不明白的点和疑问的点，及存在的不连贯的交互点，提出疑问，设计师完善视觉稿</li></ol><h3 id="技术评审"><a href="#技术评审" class="headerlink" title="技术评审"></a>技术评审</h3><ol><li>具体参与项目的测试、前端&amp;后端开发、产品；</li><li>开发评审技术文档，时序图，接口文档，讲述整个项目中的后端实现逻辑，提供给前端的http接口，需要外部提供的接口</li></ol><h3 id="排期"><a href="#排期" class="headerlink" title="排期"></a>排期</h3><ol><li>前端&amp;后端开发、测试，根据需求文档，后端技术文档，评估开发及测试时间，给出完整排期包括：<ol><li>TC评审时间点</li><li>联调时间点</li><li>提测时间点</li><li>预发时间点</li><li>后端发布时间点</li><li>客户端发布时间点</li></ol></li><li>复杂项目需要给出分模块的阶段性提测时间点</li></ol><h3 id="TC编写"><a href="#TC编写" class="headerlink" title="TC编写"></a>TC编写</h3><ol><li>功能TC编写，自测用例提取</li><li>接口TC编写，<a href="">测试数据导出测试用例</a></li></ol><h3 id="测试计划-amp-数据准备"><a href="#测试计划-amp-数据准备" class="headerlink" title="测试计划&amp;数据准备"></a>测试计划&amp;数据准备</h3><ol><li>提测前：完成测试环境的数据准备</li><li>预发前：完成预发环境的数据准备</li><li>完成数据准备文档：<a href="">测试准备文档编写</a></li></ol><h3 id="TC评审"><a href="#TC评审" class="headerlink" title="TC评审"></a>TC评审</h3><ol><li>具体参与项目的测试、前端&amp;后端开发、设计师、产品；</li><li>测试人员讲解本次项目的测试点，强调重点测试模块、易出问题的点及容易被忽略的点，对于评审中开发及产品提出的问题及不够完善的点，进行补充和完善</li></ol><h3 id="预提测"><a href="#预提测" class="headerlink" title="预提测"></a>预提测</h3><ol><li>小需求，测试周期＜5天的项目，发通用提测单</li><li>测试周期≥5天的项目，在TC评审完成后，测试完善TC，发送<a href="https://docs.google.com/document/d/1Lyyeiy5Ne-gu5INPIH5hvApH-OyeL_cS8XBgpjYGYZs/edit?usp=sharing" target="_blank" rel="noopener">预提测单</a>，并附上用例图片。</li></ol><h3 id="提测"><a href="#提测" class="headerlink" title="提测"></a>提测</h3><ol><li>开发通知测试准备提测，开发自行完成预提测单中的自测用例「或者测试要求和开发一起完成自测用例的测试后」并标记结果，开发回复预提测单邮件，完成预提测，测试回归冒烟通过后，完成提测。</li></ol><h3 id="测试环境测试"><a href="#测试环境测试" class="headerlink" title="测试环境测试"></a>测试环境测试</h3><ol><li>第一轮完成所有功能的遍历测试，基本找出所有的BUG及卡流程的点，把握整体实际的提测质量，并完成主流程的测试及回归工作，保证流程没有卡点。</li><li>第二轮完成所有功能细节的测试，完成测试环境阶段的测试。</li></ol><h3 id="预发环境测试"><a href="#预发环境测试" class="headerlink" title="预发环境测试"></a>预发环境测试</h3><ol><li>预发优先回归主流程，确保主流程没有问题，预防流程性问题的项目风险。</li></ol><h3 id="产品-amp-设计验收"><a href="#产品-amp-设计验收" class="headerlink" title="产品&amp;设计验收"></a>产品&amp;设计验收</h3><ol><li>邮件通知产品&amp;设计验收，验收后，回复邮件，可以先回复出现的问题，验收通过后，再回复验收通过的邮件</li><li>理论上，产品&amp;设计在预发主流程走通后，介入验收</li><li>如果预发在1天内主流程无法走通，在测试环境验收</li></ol><h3 id="发送测试报告"><a href="#发送测试报告" class="headerlink" title="发送测试报告"></a>发送测试报告</h3><ol><li>P2、P3需求【测试周期≤3天】，发布<a href="">日常测试报告</a></li><li>P0、P1需求【测试周期＞3天】，发布<a href="">集团统一的测试报告</a>，截图放入正文可见，附件添加报告原件</li></ol><h3 id="后台发布"><a href="#后台发布" class="headerlink" title="后台发布"></a>后台发布</h3><ol><li>确认发布节奏，确认后端对前端的影响，是兼容发布，还是需要客户端强更</li><li>确认后端项目之间的依赖关系，以及与外部合作方之间的依赖关系</li><li>明确发布后的功能验证节奏</li></ol><h3 id="客户端发布"><a href="#客户端发布" class="headerlink" title="客户端发布"></a>客户端发布</h3><ol><li>确认客户端版本</li><li>确认涉及到变更的模块的RN版本</li><li>验证客户端升级功能</li></ol><h3 id="测试验收结果通知"><a href="#测试验收结果通知" class="headerlink" title="测试验收结果通知"></a>测试验收结果通知</h3><ol><li>如果发布失败，邮件回复测试报告，说明失败原因，及后续的处理方案</li><li>发布成功，说明发布成功。如果有问题遗留，说明情况，及遗留问题的后续处理方案。</li></ol>]]></content>
      <categories>
        <category>TestTheory</category>
      </categories>
      <tags>
        <tag>周期</tag>
      </tags>
  </entry>
  <entry>
    <title>InfluxDB&amp;Grafana&amp;Shell性能自动化测试平台搭建</title>
    <url>/2019/08/18/2019-08-18-build-a-performance-test-platform/</url>
    <content><![CDATA[<h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装<code>Docker</code></h3><p><a href="https://download.docker.com/mac/stable/Docker.dmg" target="_blank" rel="noopener">MAC平台</a><br><a href="https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe" target="_blank" rel="noopener">Windows平台</a><br><a href="https://www.runoob.com/docker/ubuntu-docker-install.html" target="_blank" rel="noopener">Ubuntu平台</a><br><a href="https://blog.csdn.net/xinzhifu1/article/details/83579256" target="_blank" rel="noopener">Centos7平台</a></p><a id="more"></a><h3 id="安装并启用influxDB"><a href="#安装并启用influxDB" class="headerlink" title="安装并启用influxDB"></a>安装并启用<code>influxDB</code></h3><h4 id="安装influxDB"><a href="#安装influxDB" class="headerlink" title="安装influxDB"></a>安装<code>influxDB</code></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">docker pull influxdb</span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker run -d -p 8086:8086 -p 8083:8083 --name=jmeterdb influxdb</span><br><span class="line"><span class="comment"># 进入容器内部</span></span><br><span class="line">docker <span class="built_in">exec</span> -it jmeterdb bash</span><br><span class="line"><span class="comment"># 进入influxdb命令行</span></span><br><span class="line">flux</span><br><span class="line"><span class="comment"># 创建jmeter数据库</span></span><br><span class="line">create database jmeter;</span><br></pre></td></tr></table></figure><h4 id="Jmeter设置"><a href="#Jmeter设置" class="headerlink" title="Jmeter设置"></a><code>Jmeter</code>设置</h4><p>添加<code>Backend Listener</code>【后端监听器】</p><img src="/2019/08/18/2019-08-18-build-a-performance-test-platform/Backend-Listener.png" title="Backend-Listener"> <img src="/2019/08/18/2019-08-18-build-a-performance-test-platform/%E5%90%8E%E7%AB%AF%E7%9B%91%E5%90%AC%E5%99%A8.png" title="后端监听器"><p>只需修改三个字段：</p><ul><li>influxdbUrl：修改为实际的<code>influxdb</code>地址</li><li>application：应用名称</li><li>testTitle：测试标题</li></ul><h4 id="检查jmeter和数据库是否正常连接"><a href="#检查jmeter和数据库是否正常连接" class="headerlink" title="检查jmeter和数据库是否正常连接"></a>检查<code>jmeter</code>和数据库是否正常连接</h4><p>在<code>jmeter</code>中添加Http请求，并执行测试<br>在<code>influxdb</code>后台中查询是否有产生数据：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入容器内部</span></span><br><span class="line">docker <span class="built_in">exec</span> -it jmeterdb bash</span><br><span class="line"><span class="comment"># 进入influxdb命令行</span></span><br><span class="line">flux</span><br><span class="line"><span class="comment"># 使用jmeter数据库</span></span><br><span class="line">use jmeter</span><br><span class="line"><span class="comment"># 查询数据</span></span><br><span class="line">select * from jmeter</span><br></pre></td></tr></table></figure><img src="/2019/08/18/2019-08-18-build-a-performance-test-platform/%E6%9F%A5%E8%AF%A2influxdb%E6%95%B0%E6%8D%AE.png" title="查询influxdb数据"><h3 id="性能监控平台Grafana部署及初始化"><a href="#性能监控平台Grafana部署及初始化" class="headerlink" title="性能监控平台Grafana部署及初始化"></a>性能监控平台<code>Grafana</code>部署及初始化</h3><h4 id="grafana部署"><a href="#grafana部署" class="headerlink" title="grafana部署"></a><code>grafana</code>部署</h4><p><a href="https://grafana.com/docs/" target="_blank" rel="noopener">Grafana官网</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">docker pull grafana/grafana</span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker run -d -p 3000:3000 --name=jmeterGraf grafana/grafana</span><br></pre></td></tr></table></figure><h4 id="平台初始化设置"><a href="#平台初始化设置" class="headerlink" title="平台初始化设置"></a>平台初始化设置</h4><ol><li>本地登录地址：<a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a></li><li>默认用户名/密码：admin/admin</li><li>在Web平台中添加influxdb数据库<img src="/2019/08/18/2019-08-18-build-a-performance-test-platform/WEB%E5%B9%B3%E5%8F%B0influxDB%E8%AE%BE%E7%BD%AE.png" title="WEB平台influxDB设置"></li><li><code>JMeter Dashboard</code>设置<img src="/2019/08/18/2019-08-18-build-a-performance-test-platform/%E5%AF%BC%E5%85%A5%E5%B7%A5%E4%BD%9C%E5%8F%B0%E9%85%8D%E7%BD%AE.png" title="导入工作台配置"> 填入其中的<a href="https://github.com/shadow000902/iJmeter/blob/master/shell/jmeter_dashboard.json" target="_blank" rel="noopener">JSON内容</a></li></ol><h3 id="使用Grafana平台进行自动化压测实践"><a href="#使用Grafana平台进行自动化压测实践" class="headerlink" title="使用Grafana平台进行自动化压测实践"></a>使用<code>Grafana</code>平台进行自动化压测实践</h3><ol><li>对被测的<code>jmeter</code>脚本的<code>线程数</code>进行参数化设置<br>该设置主要用于在后面脚本中进行线程数的修改，从而达到执行不同并发下的测试<img src="/2019/08/18/2019-08-18-build-a-performance-test-platform/%E7%BA%BF%E7%A8%8B%E5%8F%82%E6%95%B0%E5%8C%96%E8%AE%BE%E7%BD%AE.png" title="线程参数化设置"></li><li>测试脚本<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="built_in">export</span> jmx_template=<span class="string">"jmeterScript"</span></span><br><span class="line"><span class="built_in">export</span> suffix=<span class="string">".jmx"</span></span><br><span class="line"><span class="built_in">export</span> jmx_template_filename=<span class="string">"<span class="variable">$&#123;jmx_template&#125;</span><span class="variable">$&#123;suffix&#125;</span>"</span></span><br><span class="line"><span class="built_in">export</span> os_type=`uname`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要在系统变量中定义jmeter根目录的位置，如下</span></span><br><span class="line"> <span class="built_in">export</span> jmeter_path=<span class="string">"/opt/apache-jmeter/"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空nohup.out</span></span><br><span class="line">cat /dev/null &gt; nohup.out</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制杀掉JMeter进程</span></span><br><span class="line">killJMeter()</span><br><span class="line">&#123;</span><br><span class="line">    pid=`ps -ef|grep jmeter|grep java|awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"jmeter Id list :<span class="variable">$pid</span>"</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="string">"<span class="variable">$pid</span>"</span> = <span class="string">""</span> ]]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"no jmeter pid alive"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">kill</span> -9 <span class="variable">$pid</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置执行5次测试，每次的线程数分别是【10、20、30、40、50】</span></span><br><span class="line"><span class="comment"># 每次测试的持续时间，由jmeter脚本中的调度器【Scheduler】的持续时间（秒）【Duration(seconds)】来定</span></span><br><span class="line">thread_number_array=(10 20 30 40 50)</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> <span class="string">"<span class="variable">$&#123;thread_number_array[@]&#125;</span>"</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="comment"># 生成对应压测线程的jmx文件</span></span><br><span class="line">    <span class="built_in">export</span> jmx_filename=<span class="string">"<span class="variable">$&#123;jmx_template&#125;</span>_<span class="variable">$&#123;num&#125;</span><span class="variable">$&#123;suffix&#125;</span>"</span></span><br><span class="line">    <span class="built_in">export</span> jtl_filename=<span class="string">"test_<span class="variable">$&#123;num&#125;</span>.jtl"</span></span><br><span class="line"></span><br><span class="line">    rm -f <span class="variable">$&#123;jmx_filename&#125;</span> <span class="variable">$&#123;jtl_filename&#125;</span></span><br><span class="line">    cp <span class="variable">$&#123;jmx_template_filename&#125;</span> <span class="variable">$&#123;jmx_filename&#125;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"生成jmx压测脚本 <span class="variable">$&#123;jmx_filename&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="string">"<span class="variable">$&#123;os_type&#125;</span>"</span> == <span class="string">"Darwin"</span> ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="comment"># Mac下执行该语句</span></span><br><span class="line">        sed -i <span class="string">""</span> <span class="string">"s/thread_num/<span class="variable">$&#123;num&#125;</span>/g"</span> <span class="variable">$&#123;jmx_filename&#125;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment"># Linux下执行该语句</span></span><br><span class="line">        sed -i <span class="string">"s/thread_num/<span class="variable">$&#123;num&#125;</span>/g"</span> <span class="variable">$&#123;jmx_filename&#125;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># JMeter 静默压测</span></span><br><span class="line">    nohup <span class="variable">$&#123;jmeter_path&#125;</span>/bin/jmeter -n -t <span class="variable">$&#123;jmx_filename&#125;</span> -l <span class="variable">$&#123;jtl_filename&#125;</span> &amp;</span><br><span class="line">    sleep 65</span><br><span class="line">    killJMeter</span><br><span class="line">    rm -f <span class="variable">$&#123;jmx_filename&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"自动化压测全部结束"</span></span><br></pre></td></tr></table></figure></li><li>测试结果的展现<img src="/2019/08/18/2019-08-18-build-a-performance-test-platform/5%E6%AC%A1%E4%B8%8D%E5%90%8C%E5%B9%B6%E5%8F%91%E6%95%B0%E7%9A%84%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png" title="5次不同并发数的测试结果"></li></ol><h3 id="服务器的使用情况监控"><a href="#服务器的使用情况监控" class="headerlink" title="服务器的使用情况监控"></a>服务器的使用情况监控</h3><ol><li><p>获取服务器监控数据</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 每秒采集一次，采集300次，生成文件名："主机名_年月日_时分.nmon",如："su-stable-007_191031_1814.nmon"</span></span><br><span class="line">nmon -ft -s 1 -c 300</span><br></pre></td></tr></table></figure></li><li><p>安装<code>nmon2influxdb</code></p></li><li><p>导入采集的数据到<code>influxdb</code>中</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@su-stable-007:~<span class="comment"># ./nmon2influxdb  import su-stable-007_191031_1814.nmon </span></span><br><span class="line">2019/10/31 18:20:26 Using configuration file /root/.nmon2influxdb.cfg</span><br><span class="line">2019/10/31 18:20:26 Creating InfluxDB database nmon_reports</span><br><span class="line">2019/10/31 18:20:26 NMON file separator: ,</span><br><span class="line"><span class="comment">####</span></span><br><span class="line">File su-stable-007_191031_1814.nmon imported : 28800 points !</span><br></pre></td></tr></table></figure></li><li><p>在<code>influxdb</code>查询已导入的<code>nmon</code>数据</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@su-stable-007:~<span class="comment"># influx</span></span><br><span class="line">Connected to http://localhost:8086 version 1.7.8</span><br><span class="line">InfluxDB shell version: 1.7.8</span><br><span class="line">&gt; show databases</span><br><span class="line">name: databases</span><br><span class="line">name</span><br><span class="line">----</span><br><span class="line">telegraf</span><br><span class="line">_internal</span><br><span class="line">jmeter</span><br><span class="line">nmon_reports</span><br><span class="line">nmon2influxdb_log</span><br><span class="line">&gt; use nmon_reports</span><br><span class="line">Using database nmon_reports</span><br><span class="line">&gt; show measurements</span><br><span class="line">name: measurements</span><br><span class="line">name</span><br><span class="line">----</span><br><span class="line">CPU_ALL</span><br><span class="line">DISKBSIZE</span><br><span class="line">DISKBUSY</span><br><span class="line">DISKREAD</span><br><span class="line">DISKWRITE</span><br><span class="line">DISKXFER</span><br><span class="line">JFSFILE</span><br><span class="line">MEM</span><br><span class="line">NET</span><br><span class="line">NETPACKET</span><br><span class="line">PROC</span><br><span class="line">VM</span><br><span class="line">&gt; select * from MEM</span><br><span class="line">name: MEM</span><br><span class="line">time                host          name       value</span><br><span class="line">----                ----          ----       -----</span><br><span class="line">1572538454000000000 su-stable-007 active     2740.8</span><br><span class="line">1572538454000000000 su-stable-007 bigfree    -1</span><br><span class="line">1572538454000000000 su-stable-007 buffers    226.3</span><br><span class="line">1572538454000000000 su-stable-007 cached     3511.5</span><br><span class="line">1572538454000000000 su-stable-007 highfree   -0</span><br><span class="line">1572538454000000000 su-stable-007 hightotal  -0</span><br><span class="line">1572538454000000000 su-stable-007 inactive   1470.1</span><br><span class="line">1572538454000000000 su-stable-007 lowfree    -0</span><br><span class="line">1572538454000000000 su-stable-007 lowtotal   -0</span><br><span class="line">1572538454000000000 su-stable-007 memfree    3509.7</span><br><span class="line">1572538454000000000 su-stable-007 memshared  -0</span><br><span class="line">1572538454000000000 su-stable-007 memtotal   7983.1</span><br></pre></td></tr></table></figure></li><li><p>导入面板</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@su-stable-007:~<span class="comment"># ./nmon2influxdb dashboard su-stable-007_191031_1814.nmon </span></span><br><span class="line">2019/10/31 19:35:02 Using configuration file /root/.nmon2influxdb.cfg</span><br><span class="line">2019/10/31 19:35:02 json: cannot unmarshal number into Go value of <span class="built_in">type</span> grafanaclient.DataSourcePlugin</span><br><span class="line">root@su-stable-007:~<span class="comment"># ./nmon2influxdb dashboard su-stable-007_191031_1814.nmon </span></span><br><span class="line">2019/10/31 19:41:46 Using configuration file /root/.nmon2influxdb.cfg</span><br><span class="line">2019/10/31 19:41:47 Dashboard uploaded to grafana</span><br></pre></td></tr></table></figure><p>导入时，可能会出现上面第一次失败的情况，可以多试几次；也可能需要自己手动创建<code>DataSource</code>，因为从上面看出来并没有自动创建<code>DataSource</code>。<br>理论上的情况如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@su-stable-007:~<span class="comment"># ./nmon2influxdb dashboard su-stable-007_191031_1814.nmon </span></span><br><span class="line">2019/10/31 19:41:46 Using configuration file /root/.nmon2influxdb.cfg</span><br><span class="line">2019/10/31 19:41:47 Grafana nmon2influxdb DataSource created.</span><br><span class="line">2019/10/31 19:41:48 Dashboard uploaded to grafana</span><br></pre></td></tr></table></figure><p>此步操作会创建一个<code>grafana</code>的面板，并新建一个<code>DataSource</code>，需要自己手动修改一下<code>DataSource</code>的<code>HTTP-URL</code></p></li></ol>]]></content>
      <categories>
        <category>环境搭建</category>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>performance</tag>
        <tag>influxDB</tag>
        <tag>grafana</tag>
      </tags>
  </entry>
  <entry>
    <title>python小程序</title>
    <url>/2018/05/19/2018-05-19-Python-applet/</url>
    <content><![CDATA[<h4 id="修改文件内容，并存入原文件"><a href="#修改文件内容，并存入原文件" class="headerlink" title="修改文件内容，并存入原文件"></a>修改文件内容，并存入原文件</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> fileinput</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fileinput.input(<span class="string">"test0"</span>, inplace=<span class="number">1</span>):</span><br><span class="line">    line = line.replace(<span class="string">".."</span>, <span class="string">"C:"</span>)</span><br><span class="line">    <span class="keyword">print</span> (line)</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="比较两个文件的差异，并输出HTML对比结果"><a href="#比较两个文件的差异，并输出HTML对比结果" class="headerlink" title="比较两个文件的差异，并输出HTML对比结果"></a>比较两个文件的差异，并输出HTML对比结果</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1.difflib的HtmlDiff类创建html表格用来展示文件差异，通过make_file方法</span></span><br><span class="line"><span class="string">2.make_file方法使用</span></span><br><span class="line"><span class="string">make_file(fromlines, tolines [, fromdesc][, todesc][, context][, numlines])</span></span><br><span class="line"><span class="string">用来生成一个包含表格的html文件，其内容是用来展示差异。</span></span><br><span class="line"><span class="string">fromlines和tolines,用于比较的内容，格式为字符串组成的列表</span></span><br><span class="line"><span class="string">fromdesc和todesc，可选参数，对应的fromlines,tolines的差异化文件的标题，默认为空字符串</span></span><br><span class="line"><span class="string">context 和 numlines，可选参数，context 为True时，只显示差异的上下文，为false，显示全文，numlines默认为5，</span></span><br><span class="line"><span class="string">当context为True时，控制展示上下文的行数，当context为false时,控制不同差异的高亮之间移动时“next”的开始位置</span></span><br><span class="line"><span class="string">3.使用argparse传入两个需要对比的文件</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> difflib</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建打开文件函数，并按换行符分割内容</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readfile</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename, <span class="string">'r'</span>) <span class="keyword">as</span> fileHandle:</span><br><span class="line">            text = fileHandle.read().splitlines()</span><br><span class="line">        <span class="keyword">return</span> text</span><br><span class="line">    <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"Read file Error:"</span>, e)</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较两个文件并输出到html文件中</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">diff_file</span><span class="params">(filename1, filename2)</span>:</span></span><br><span class="line">    text1_lines = readfile(filename1)</span><br><span class="line">    text2_lines = readfile(filename2)</span><br><span class="line">    d = difflib.HtmlDiff()</span><br><span class="line">    <span class="comment"># context=True时只显示差异的上下文，默认显示5行，由numlines参数控制，context=False显示全文，差异部分颜色高亮，默认为显示全文</span></span><br><span class="line">    result = d.make_file(text1_lines, text2_lines, filename1, filename2, context=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 内容保存到result.html文件中</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'result.html'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> resultfile:</span><br><span class="line">        resultfile.write(result)</span><br><span class="line">    <span class="comment"># print(result)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 定义必须传入两个参数，使用格式-f1 filename1 -f2 filename</span></span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">"传入两个文件参数"</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'-f1'</span>, action=<span class="string">'store'</span>, dest=<span class="string">'filename1'</span>, required=<span class="literal">True</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'-f2'</span>, action=<span class="string">'store'</span>, dest=<span class="string">'filename2'</span>, required=<span class="literal">True</span>)</span><br><span class="line">    given_args = parser.parse_args()</span><br><span class="line">    filename1 = given_args.filename1</span><br><span class="line">    filename2 = given_args.filename2</span><br><span class="line">    diff_file(filename1, filename2)</span><br></pre></td></tr></table></figure><h4 id="金额数值转大写"><a href="#金额数值转大写" class="headerlink" title="金额数值转大写"></a>金额数值转大写</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convertNumToChinese</span><span class="params">(totalPrice)</span>:</span></span><br><span class="line">    dictChinese = [<span class="string">u'零'</span>, <span class="string">u'壹'</span>, <span class="string">u'贰'</span>, <span class="string">u'叁'</span>, <span class="string">u'肆'</span>, <span class="string">u'伍'</span>, <span class="string">u'陆'</span>, <span class="string">u'柒'</span>, <span class="string">u'捌'</span>, <span class="string">u'玖'</span>]</span><br><span class="line">    unitChinese = [<span class="string">u''</span>, <span class="string">u'拾'</span>, <span class="string">u'佰'</span>, <span class="string">u'仟'</span>, <span class="string">''</span>, <span class="string">u'拾'</span>, <span class="string">u'佰'</span>, <span class="string">u'仟'</span>]</span><br><span class="line">    <span class="comment"># 将整数部分和小数部分区分开</span></span><br><span class="line">    partA = int(math.floor(totalPrice))</span><br><span class="line">    partB = round(totalPrice - partA, <span class="number">2</span>)</span><br><span class="line">    strPartA = str(partA)</span><br><span class="line">    strPartB = <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span> partB != <span class="number">0</span>:</span><br><span class="line">        strPartB = str(partB)[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">    singleNum = []</span><br><span class="line">    <span class="keyword">if</span> len(strPartA) != <span class="number">0</span>:</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; len(strPartA):</span><br><span class="line">            singleNum.append(strPartA[i])</span><br><span class="line">            i = i + <span class="number">1</span></span><br><span class="line">    <span class="comment"># 将整数部分先压再出，因为可以从后向前处理，好判断位数</span></span><br><span class="line">    tnumChinesePartA = []</span><br><span class="line">    numChinesePartA = []</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    bef = <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">if</span> len(strPartA) != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">while</span> j &lt; len(strPartA):</span><br><span class="line">            curr = singleNum.pop()</span><br><span class="line">            <span class="keyword">if</span> curr == <span class="string">'0'</span> <span class="keyword">and</span> bef != <span class="string">'0'</span>:</span><br><span class="line">                tnumChinesePartA.append(dictChinese[<span class="number">0</span>])</span><br><span class="line">                bef = curr</span><br><span class="line">            <span class="keyword">if</span> curr != <span class="string">'0'</span>:</span><br><span class="line">                tnumChinesePartA.append(unitChinese[j])</span><br><span class="line">                tnumChinesePartA.append(dictChinese[int(curr)])</span><br><span class="line">                bef = curr</span><br><span class="line">            <span class="keyword">if</span> j == <span class="number">3</span>:</span><br><span class="line">                tnumChinesePartA.append(<span class="string">u'萬'</span>)</span><br><span class="line">                bef = <span class="string">'0'</span></span><br><span class="line">            j = j + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(tnumChinesePartA)):</span><br><span class="line">            numChinesePartA.append(tnumChinesePartA.pop())</span><br><span class="line">    A = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> numChinesePartA:</span><br><span class="line">        A = A + i</span><br><span class="line">    <span class="comment"># 小数部分很简单，只要判断下角是否为零</span></span><br><span class="line">    B = <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span> len(strPartB) == <span class="number">1</span>:</span><br><span class="line">        B = dictChinese[int(strPartB[<span class="number">0</span>])] + <span class="string">u'角'</span></span><br><span class="line">    <span class="keyword">if</span> len(strPartB) == <span class="number">2</span> <span class="keyword">and</span> strPartB[<span class="number">0</span>] != <span class="string">'0'</span>:</span><br><span class="line">        B = dictChinese[int(strPartB[<span class="number">0</span>])] + <span class="string">u'角'</span> + dictChinese[int(strPartB[<span class="number">1</span>])] + <span class="string">u'分'</span></span><br><span class="line">    <span class="keyword">if</span> len(strPartB) == <span class="number">2</span> <span class="keyword">and</span> strPartB[<span class="number">0</span>] == <span class="string">'0'</span>:</span><br><span class="line">        B = dictChinese[int(strPartB[<span class="number">0</span>])] + dictChinese[int(strPartB[<span class="number">1</span>])] + <span class="string">u'分'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(strPartB) == <span class="number">0</span>:</span><br><span class="line">        S = A + <span class="string">u'圆整'</span></span><br><span class="line">    <span class="keyword">if</span> len(strPartB) != <span class="number">0</span>:</span><br><span class="line">        S = A + <span class="string">u'圆'</span> + B</span><br><span class="line">    <span class="keyword">return</span> S</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (convertNumToChinese(<span class="number">23001231.041</span>))</span><br></pre></td></tr></table></figure><h4 id="RobotFramework-监听器"><a href="#RobotFramework-监听器" class="headerlink" title="RobotFramework 监听器"></a>RobotFramework 监听器</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RobotListener</span><span class="params">(object)</span>:</span></span><br><span class="line">    urllib3.disable_warnings()</span><br><span class="line">    ROBOT_LISTENER_API_VERSION = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_suite</span><span class="params">(self, name, args)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"\033[1;34mStarting Suite:\033[0m \033[1;32m%s\033[0m"</span> % args[<span class="string">'source'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_test</span><span class="params">(self, name, args)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"\033[1;34mStarting  test:\033[0m \033[1;32m%s\033[0m"</span> % name)</span><br><span class="line">        <span class="keyword">if</span> args[<span class="string">'template'</span>]:</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">'\033[1;34mTemplate    is:\033[0m \033[1;32m%s\033[0m'</span> % args[<span class="string">'template'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">end_test</span><span class="params">(self, name, args)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"\033[1;34mEnding    test:\033[0m \033[1;32m%s\033[0m"</span> % name)</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"\033[1;34mTest Result is:\033[0m \033[1;32m%s\033[0m"</span> % args[<span class="string">'status'</span>])</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"\033[1;34mTest   Time is:\033[0m \033[1;32m%s\033[0m"</span> % str(args[<span class="string">'elapsedtime'</span>]))</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">end_suite</span><span class="params">(self, name, args)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"\033[1;34mEnding   Suite:\033[0m \033[1;32m%s\033[0m"</span> % args[<span class="string">'source'</span>])</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"\033[1;34mSuiteResult is:\033[0m \033[1;32m%s\033[0m"</span> % args[<span class="string">'status'</span>])</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"\033[1;34mSuite  Time is:\033[0m \033[1;32m%s\033[0m"</span> % str(args[<span class="string">'elapsedtime'</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log_message</span><span class="params">(self, message)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> (message[<span class="string">'timestamp'</span>] + <span class="string">" : "</span> + message[<span class="string">'level'</span>] + <span class="string">" : "</span> + message[<span class="string">'message'</span>])</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Robot-Framework内置变量总结</title>
    <url>/2018/10/10/2018-10-10-Robot-Framework-built-in-variable-summary/</url>
    <content><![CDATA[<h3 id="操作系统相关变量"><a href="#操作系统相关变量" class="headerlink" title="操作系统相关变量"></a>操作系统相关变量</h3><p>内置的操作系统相关的变量，减少了测试数据对操作系统之间的差异性的关注</p><a id="more"></a><table><thead><tr><th>变量</th><th>用途</th></tr></thead><tbody><tr><td>${CURDIR}</td><td>测试数据文件所在目录的绝对路径，该参数是大小写敏感的</td></tr><tr><td>${TEMPDIR}</td><td>操作系统临时目录的绝对路径，在类 Unix 系统中，该路径通常是 /tmp；在 Windows 系统中，通常是 c:\Documents and Settings&lt;user&gt;\Local Settings\Temp</td></tr><tr><td>${EXECDIR}</td><td>到测试开始执行的目录的绝对路径</td></tr><tr><td>${/}</td><td>操作系统文件路径分隔符，在类 Unix 系统中为： ‘/’， 在 Windows 中则为： ‘\’</td></tr><tr><td>${:}</td><td>操作系统路径元素分隔符，在类 Unix 系统中为： ‘：’，在 Windows 中则为： ‘；’</td></tr><tr><td>${\n}</td><td>操作系统行分隔符，在类 Unix 系统中为： ‘\n’，在 Windows 中则为： ‘\r\n’</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*** Test Cases ***</span><br><span class="line">Example</span><br><span class="line">    Create Binary File    $&#123;CURDIR&#125;$&#123;&#x2F;&#125;input.data    Some text here$&#123;\n&#125;on two lines</span><br><span class="line">    Set Environment Variable    CLASSPATH    $&#123;TEMPDIR&#125;$&#123;:&#125;$&#123;CURDIR&#125;$&#123;&#x2F;&#125;foo.jar</span><br></pre></td></tr></table></figure><h3 id="数字变量"><a href="#数字变量" class="headerlink" title="数字变量"></a>数字变量</h3><p>变量语法能用来创建 整型 和 浮点型 数据。当一个关键字需要 真实的数字而非对应的数字字符串作为参数时，这种创建数字变量的方法是很有用的。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*** Test Cases ***</span><br><span class="line">Example 1A</span><br><span class="line">    Connect    example.com    80    # Connect 获得两个字符串作为参数</span><br><span class="line">Example 1B</span><br><span class="line">    Connect    example.com    $&#123;80&#125;    # Connect 获得一个字符串和一个整数作为参数</span><br><span class="line">Example 2</span><br><span class="line">    Do X    $&#123;3.14&#125;    $&#123;‐1e‐4&#125;    # Do X 获得浮点数 3.14 和 ‐0.0001 作为参数</span><br></pre></td></tr></table></figure><p>从二进制，八进制和十六进制值来创建整数也是可以的，创建时分别用： 0b, 0o 和 0x 作为相应的前缀，并且这种语法是大小写不敏感的。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*** Test Cases ***</span><br><span class="line">Example</span><br><span class="line">    Should Be Equal    $&#123;0b1011&#125;    $&#123;11&#125;</span><br><span class="line">    Should Be Equal    $&#123;0o10&#125;    $&#123;8&#125;</span><br><span class="line">    Should Be Equal    $&#123;0xff&#125;    $&#123;255&#125;</span><br><span class="line">    Should Be Equal    $&#123;0B1010&#125;   $&#123;0XA&#125;</span><br></pre></td></tr></table></figure><h3 id="布尔值和-None-null变量"><a href="#布尔值和-None-null变量" class="headerlink" title="布尔值和 None/ null变量"></a>布尔值和 None/ null变量</h3><p>布尔值和 Python 的 None，Java 的 null 变量也可以用创建数字变量类似的语法创建：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*** Test Cases ***</span><br><span class="line">Boolean</span><br><span class="line">    Set Status    $&#123;true&#125;    # Set Status 获得布尔值 true 作为参数</span><br><span class="line">    Create Y    something    $&#123;false&#125;    # Create Y 获得字符串和布尔值 false 作为参数</span><br><span class="line"></span><br><span class="line">None</span><br><span class="line">Do XYZ    $&#123;None&#125;    # Do XYZ 获得 Python None 作为参数</span><br><span class="line"></span><br><span class="line">Null</span><br><span class="line">    $&#123;ret&#125; &#x3D; Get Value    arg    # Checking that Get Value returns Java null</span><br><span class="line">    Should Be Equal    $&#123;ret&#125;    $&#123;null&#125;</span><br></pre></td></tr></table></figure><p>这些变量也是大小写不敏感的，所以 ${True} 和 ${true} 是一样的。此外 ${None} 和 ${null} 是同义词，因为用 Jython 解释器执行用例时， Jython 会自动将 None 和 null 转换成正确格式。</p><h3 id="空格和空（empty）变量"><a href="#空格和空（empty）变量" class="headerlink" title="空格和空（empty）变量"></a>空格和空（empty）变量</h3><p>可以分别使用 ${SPACE} 和 ${EMPTY} 来创建空格和空字符串变量。这些变量很有用，如果不使用这些变量的话，就需要对空格或空单元格进行转义。如果需要一个以上的空格，也可以使用扩展变量语法来轻易获得，形如： ${SPACE * 5}。下面的例子中，Should Be Equal 关键字得到的参数值是相等的，但很明显使用变量的方式比使用 ‘&#39; 转义的方式更易理解。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*** Test Cases ***</span><br><span class="line">One Space</span><br><span class="line">    Should Be Equal     $&#123;SPACE&#125;     \ \</span><br><span class="line"> </span><br><span class="line">Four Spaces</span><br><span class="line">    Should Be Equal     $&#123;SPACE * 4&#125;     \ \ \ \ \</span><br><span class="line"> </span><br><span class="line">Ten Spaces</span><br><span class="line">    Should Be Equal     $&#123;SPACE * 10&#125;     \ \ \ \ \ \ \ \ \ \ \</span><br><span class="line"> </span><br><span class="line">Quoted Space</span><br><span class="line">    Should Be Equal     &quot;$&#123;SPACE&#125;&quot;     &quot; &quot;</span><br><span class="line"> </span><br><span class="line">Quoted Spaces</span><br><span class="line">    Should Be Equal     &quot;$&#123;SPACE * 2&#125;&quot;     &quot; \ &quot;</span><br><span class="line"> </span><br><span class="line">Empty</span><br><span class="line">    Should Be Equal     $&#123;EMPTY&#125;     \</span><br></pre></td></tr></table></figure><p>还有两个变量 @{EMPTY} 和 &amp;{EMPTY}，他们分别表示 ‘空列表’ 和 ‘空字典’ 变量。 这两个变量也是有用的，例如在写测试模板的时候，模板关键字不带参数使用时。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*** Test Cases ***</span><br><span class="line">Template</span><br><span class="line">    [Template]     Some keyword</span><br><span class="line">    @&#123;EMPTY&#125;</span><br><span class="line"> </span><br><span class="line">Override</span><br><span class="line">    Set Global Variable     @&#123;LIST&#125;     @&#123;EMPTY&#125;</span><br><span class="line">    Set Suite Variable     &amp;&#123;DICT&#125;     &amp;&#123;EMPTY&#125;</span><br></pre></td></tr></table></figure><h3 id="自动变量"><a href="#自动变量" class="headerlink" title="自动变量"></a>自动变量</h3><p>还有一些自动变量可以在测试数据中使用。这些变量在测试过程中可能有不同的取值，其中有一些甚至不是一直可用的。</p><table><thead><tr><th>变量</th><th>解释</th><th>使用地点</th></tr></thead><tbody><tr><td>${TEST NAME}</td><td>当前测试用例的名称</td><td>测试用例中</td></tr><tr><td>@{TEST TAGS}</td><td>当前测试用例被打上的所有标记，按字母顺序排列。可以使用 Set Tags 和 Remove Tags 关键字动态的修改</td><td>测试用例中</td></tr><tr><td>${TEST DOCUMENTATION}</td><td>当前测试用例的说明文档，可以使用 Set Test Documentation 关键字动态的修改</td><td>测试用例中</td></tr><tr><td>${TEST STATUS}</td><td>当前测试用例的执行状态，PASS 或 FAIL</td><td>测试用例 teardown时</td></tr><tr><td>${TEST MESSAGE}</td><td>当前测试用例的信息</td><td>测试用例 teardown时</td></tr><tr><td>${PREV TEST NAME}</td><td>前一个测试用例的名字，如果还没有测试用例被执行，则该值为空</td><td>所有地方</td></tr><tr><td>${PREV TEST STATUS}</td><td>前一个测试用例的执行状态，PASS/FAIL，如果还没有测试用例被执行，则该值为空</td><td>所有地方</td></tr><tr><td>${PREV TEST MESSAGE}</td><td>前一个测试用例执行所产生的可能的错误信息</td><td>所有地方</td></tr><tr><td>${SUITE NAME}</td><td>当前测试套件的全称</td><td>所有地方</td></tr><tr><td>${SUITE SOURCE}</td><td>当前测试套件文件或目录的绝对路径</td><td>所有地方</td></tr><tr><td>${SUITE DOCUMENTATION}</td><td>当前测试套件的说明文档，可以使用 Set Suite Documentation 关键字动态的改变</td><td>所有地方</td></tr><tr><td>&amp;{SUITE METADATA}</td><td>当前测试套件的元数据</td><td>所有地方</td></tr><tr><td>${SUITE STATUS}</td><td>当前测试套件的执行状态， PASS 或 FAIL</td><td>测试套件 teardown</td></tr><tr><td>${SUITE MESSAGE}</td><td>当前测试套件的全部信息，包括统计</td><td>测试套件 teardown</td></tr><tr><td>${KEYWORD STATUS}</td><td>当前关键的执行状态，PASS 或 FAIL</td><td>用户关键字 teardown</td></tr><tr><td>${KEYWORD MESSAGE}</td><td>当前关键字执行时可能产生的错误信息</td><td>用户关键字 teardown</td></tr><tr><td>${LOG LEVEL}</td><td>当前日志级别</td><td>所有地方</td></tr><tr><td>${OUTPUT FILE}</td><td>到输出文件的绝对路径</td><td>所有地方</td></tr><tr><td>${LOG FILE}</td><td>到日志文件的绝对路径，或者为NONE 当没有创建日志文件时</td><td>所有地方</td></tr><tr><td>${REPORT FILE}</td><td>到测试报告文件的绝对路径，或者为NONE 当没有创建测试报告文件时</td><td>所有地方</td></tr><tr><td>${DEBUG FILE}</td><td>到debug文件的绝对路径，或者为NONE 当没有创建debug文件时</td><td>所有地方</td></tr><tr><td>${OUTPUT DIR}</td><td>到输出目录的绝对路径</td><td>所有地方</td></tr></tbody></table>]]></content>
      <categories>
        <category>RobotFramework</category>
      </categories>
      <tags>
        <tag>robot-framework</tag>
      </tags>
  </entry>
  <entry>
    <title>JIRA使用小结</title>
    <url>/2018/11/27/2018-11-27-JIRA-use-summary/</url>
    <content><![CDATA[<h3 id="问题类型"><a href="#问题类型" class="headerlink" title="问题类型"></a>问题类型</h3><h4 id="问题类型-1"><a href="#问题类型-1" class="headerlink" title="问题类型"></a>问题类型</h4><p>列表包含系统中所有的问题<code>类型</code>，也可以新增问题<code>类型</code></p><h4 id="问题类型方案"><a href="#问题类型方案" class="headerlink" title="问题类型方案"></a>问题类型方案</h4><p><code>问题类型方案</code>用于确定哪些<code>问题类型</code>将提供给<code>一组项目</code>。它还允许指定的顺序介绍用户界面的问题类型。</p><a id="more"></a><h4 id="子任务"><a href="#子任务" class="headerlink" title="子任务"></a>子任务</h4><h3 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h3><h4 id="工作流-1"><a href="#工作流-1" class="headerlink" title="工作流"></a>工作流</h4><p>作用于单个流程，比如缺陷流程、需求流程</p><h4 id="工作流方案"><a href="#工作流方案" class="headerlink" title="工作流方案"></a>工作流方案</h4><p>作用于整个项目，一个<code>工作流方案</code>，是包含项目中所有的包括缺陷工作流、需求工作流等多个工作流的一个集合。</p><h3 id="界面配置"><a href="#界面配置" class="headerlink" title="界面配置"></a>界面配置</h3><h4 id="创建一个界面"><a href="#创建一个界面" class="headerlink" title="创建一个界面"></a>创建一个<code>界面</code></h4><p><code>界面</code>是对字段的排列布局，是<code>创建问题</code>、<code>编辑问题</code>或<code>执行工作流</code>过程时显示的页面。</p><ul><li>要选择 <code>创建</code> or <code>编辑</code>问题时显示的界面，请利用<code>界面方案</code>将其挂接到问题操作功能中 。</li><li>为特定工作流过渡选择显示屏幕，请选择所属<code>工作流</code>过渡并编辑它。<br>注意: 只能删除没有应用到<code>界面方案</code>以及没有关联到<code>工作流</code>的<code>界面</code>。</li></ul><h4 id="界面添加字段值"><a href="#界面添加字段值" class="headerlink" title="界面添加字段值"></a><code>界面</code>添加字段值</h4><p><code>界面</code>添加完成后，点击<code>配置</code>，进入字段值<code>添加/编辑</code>页面<br>通用配置字段如下：</p><table><thead><tr><th>Field</th><th>Type</th></tr></thead><tbody><tr><td>问题类型</td><td>系统域</td></tr><tr><td>主题</td><td>系统域</td></tr><tr><td>模块</td><td>系统域</td></tr><tr><td>描述</td><td>系统域</td></tr><tr><td>优先级</td><td>系统域</td></tr><tr><td>处理优先级</td><td>选择列表（单选）</td></tr><tr><td>报告人</td><td>系统域</td></tr><tr><td>经办人</td><td>系统域</td></tr><tr><td>解决版本</td><td>系统域</td></tr><tr><td>标签</td><td>系统域</td></tr><tr><td>关注人</td><td>选择用户（多选）</td></tr><tr><td>附件</td><td>系统域</td></tr></tbody></table><h4 id="创建一个界面方案"><a href="#创建一个界面方案" class="headerlink" title="创建一个界面方案"></a>创建一个<code>界面方案</code></h4><p>创建<code>界面方案</code>时，需要选择一个<code>默认界面</code>，选择前面创建的<code>界面</code>。<br><code>页面方案</code>允许您为每个问题操作选择相应的页面。 <code>界面方案</code>被<code>问题类型界面方案</code>映射到问题类型上 , 再关联到项目上。<br>注意: 只能删除在<code>问题类型界面方案</code>中没有使用的<code>界面方案</code>。</p><h4 id="创建一个问题类型界面方案"><a href="#创建一个问题类型界面方案" class="headerlink" title="创建一个问题类型界面方案"></a>创建一个<code>问题类型界面方案</code></h4><p>创建<code>问题类型界面方案</code>时，需要选择一个<code>界面方案</code>，选择前面创建的<code>界面方案</code>。<br><code>问题类型页面方案</code>允许您选择哪个 <code>页面方案</code> 应用于指定的问题类型。然后, 问题类型的屏幕计划可以关联到某个或多个项目, 可以指定屏幕上的是什么计划, 因此什么为的屏幕应用于某一具体问题的操作的项目” 的问题。<br>注意: 你无法删除已经关联项目的<code>问题类型界面方案</code>。</p><h3 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h3><h4 id="自定义字段生效步骤"><a href="#自定义字段生效步骤" class="headerlink" title="自定义字段生效步骤"></a>自定义字段生效步骤</h4><ol><li>添加字段，字段类型可以根据需要自己选择</li><li>如果是枚举类型字段，进入字段配置页面，设置对应的枚举值</li><li>如果字段只希望在个别项目中使用的，进入字段配置界面，配置字段适用的问题类型和项目</li><li>在创建BUG、查看BUG的界面中，增加该字段</li></ol><h4 id="字段配置"><a href="#字段配置" class="headerlink" title="字段配置"></a>字段配置</h4><p>这里的<code>字段配置</code>指的是一套字段的所有配置的合集<br><code>字段配置</code>用于设置每个字段的系统处理方式，用于规划字段的状态，告诉<code>JIRA</code>如何控制字段。例如，可以在<code>字段配置</code>中设置所有输入或查看页面隐藏一个字段, 或决定一个字段在编辑时是<code>必选项</code>。<code>字段配置</code>只有应用于 <code>字段配置方案</code>, 并且将方案关联到项目中时才会生效。</p><h4 id="设置字段配置配置项的值"><a href="#设置字段配置配置项的值" class="headerlink" title="设置字段配置配置项的值"></a>设置<code>字段配置</code>配置项的值</h4><p><code>字段配置</code>列表中的某一个配置，点击<code>配置</code>，进入具体字段列表，每个字段的配置项都一致，主要包括<code>隐藏/显示</code>、<code>必选项/可选择的</code></p><h4 id="字段配置方案"><a href="#字段配置方案" class="headerlink" title="字段配置方案"></a>字段配置方案</h4><p><code>字段配置方案</code>将 <code>字段配置</code>映射到<code>问题类型</code>上。 <code>字段配置方案</code>可以关联到多个项目，项目中的问题通过<code>字段配置</code>与<code>问题类型</code>的映射关系，而显示不同的字段。<br>编辑<code>字段配置方案</code>，选择前面创建的<code>字段配置</code>。</p><h3 id="修改项目各项配置"><a href="#修改项目各项配置" class="headerlink" title="修改项目各项配置"></a>修改项目各项配置</h3><p>如果需要修改项目的配置，需要进入到<code>该项目</code>的<code>项目设置</code>中</p><h4 id="修改项目的问题类型"><a href="#修改项目的问题类型" class="headerlink" title="修改项目的问题类型"></a>修改项目的<code>问题类型</code></h4><p><code>行为</code>-<code>使用不同的方案</code>，选择在<code>问题类型方案</code>中创建的类型</p><h4 id="修改项目的工作流"><a href="#修改项目的工作流" class="headerlink" title="修改项目的工作流"></a>修改项目的<code>工作流</code></h4><h3 id="基础插件使用"><a href="#基础插件使用" class="headerlink" title="基础插件使用"></a>基础插件使用</h3><h4 id="修改状态的时候，同步修改解决结果"><a href="#修改状态的时候，同步修改解决结果" class="headerlink" title="修改状态的时候，同步修改解决结果"></a>修改<code>状态</code>的时候，同步修改<code>解决结果</code></h4><p>在从状态A转换到状态B的操作上，添加<code>后处理功能</code>，选择<code>更新问题字段</code>，然后选择需要更新的问题字段</p><img src="/2018/11/27/2018-11-27-JIRA-use-summary/%E6%9B%B4%E6%96%B0%E9%97%AE%E9%A2%98%E5%AD%97%E6%AE%B5.png" title="更新问题字段"><h3 id="插件及其应用"><a href="#插件及其应用" class="headerlink" title="插件及其应用"></a>插件及其应用</h3><h4 id="scriptrunner"><a href="#scriptrunner" class="headerlink" title="scriptrunner"></a><code>scriptrunner</code></h4><p>该插件可用作jira工作流的一个验证器，用于在工作流转换时，增加额外的操作，比如如下功能：</p><ol><li><p>在状态转换时，设置必填<code>备注</code><br>1.1 编辑工作流，选中需要修改的转换标线，点击<code>验证器</code>，进入验证器的添加页面<br>1.2 点击<code>添加验证器</code>，进入验证器添加页面</p><img src="/2018/11/27/2018-11-27-JIRA-use-summary/%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E5%8A%A0ScriptValidator%E3%80%90ScriptRunner%E3%80%91.png" title="状态转换加ScriptValidator【ScriptRunner】"><p>1.3 为Validator添加状态转换参数</p><img src="/2018/11/27/2018-11-27-JIRA-use-summary/%E4%B8%BAValidator%E6%B7%BB%E5%8A%A0%E5%8F%82%E6%95%B0.png" title="为Validator添加参数"><p>1.4 最后在添加一个转换说明</p><img src="/2018/11/27/2018-11-27-JIRA-use-summary/%E5%AF%B9%E8%BD%AC%E6%8D%A2%E6%93%8D%E4%BD%9C%E6%B7%BB%E5%8A%A0%E8%AF%B4%E6%98%8E.png" title="对转换操作添加说明"><p>1.5 添加成功后如图所示</p><img src="/2018/11/27/2018-11-27-JIRA-use-summary/%E9%AA%8C%E8%AF%81%E5%99%A8%E6%B7%BB%E5%8A%A0%E6%88%90%E5%8A%9F%E5%90%8E.png" title="验证器添加成功后"><p>到这里算是完成了80%，在对<code>BUG</code>进行<code>FIXED</code>操作是，还是可能会出现<code>没有弹窗</code>的情况，这种情况主要是对转换操作没有设置界面，导致没有界面可以弹出来<br>所以需要最后一步操作，就是对转换动作添加<code>界面</code>：</p><img src="/2018/11/27/2018-11-27-JIRA-use-summary/%E5%AF%B9%E8%BD%AC%E6%8D%A2%E6%93%8D%E4%BD%9C%E6%B7%BB%E5%8A%A0%E7%95%8C%E9%9D%A2.png" title="对转换操作添加界面"></li><li><p>在转换状态时，可以添加脚本方式去设置执行自己想要做的事情<br>添加方式如图：</p><img src="/2018/11/27/2018-11-27-JIRA-use-summary/%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E8%84%9A%E6%9C%AC%E5%8F%82%E6%95%B0.png" title="添加自定义脚本参数"> <img src="/2018/11/27/2018-11-27-JIRA-use-summary/%E7%BC%96%E5%86%99%E8%84%9A%E6%9C%AC%E9%A1%B9.png" title="编写脚本项"></li><li><p><code>Script-Fields</code>使用<br>依次进入：<code>设置</code>-<code>管理应用</code>-<code>Script Fields</code>，点击<code>Create Script Field</code>按钮，再点击<code>Custom Script Field</code><br><a href="https://scriptrunner.adaptavist.com/latest/jira/scripted-fields.html" target="_blank" rel="noopener">documentation for Script Fields</a></p><img src="/2018/11/27/2018-11-27-JIRA-use-summary/Create-Script-Field.png" title="Create-Script-Field"> <img src="/2018/11/27/2018-11-27-JIRA-use-summary/Custom-Script-Field.png" title="Custom-Script-Field"><p>示例1：获取最后变更到某个状态的时间</p><p>代码如下：</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.onresolve.jira.groovy.test.scriptfields.scripts</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atlassian.jira.component.ComponentAccessor</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> changeHistoryManager = ComponentAccessor.getChangeHistoryManager()</span><br><span class="line"><span class="keyword">def</span> created = changeHistoryManager.getChangeItemsForField(issue, <span class="string">"status"</span>).sort &#123; a, b -&gt; a.created == b.created ? 0 : a.created &gt; b.created ? -1 : <span class="number">1</span> &#125;.find &#123;</span><br><span class="line">    it.to == <span class="string">"12300"</span> </span><br><span class="line">&#125;?.getCreated()</span><br><span class="line"></span><br><span class="line">def createdTime = created?.getTime()</span><br><span class="line"></span><br><span class="line">createdTime ? new Date(createdTime) : <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>其中设置的<code>12300</code>即为目标状态的<code>statusId</code>，执行结果会返回一个最后变更到这个状态的时间，返回的格式由上面设置的<code>Template</code>字段格式来确定</p><img src="/2018/11/27/2018-11-27-JIRA-use-summary/Template%E4%BD%BF%E7%94%A8%E9%BB%98%E8%AE%A4%E7%9A%84Text-Field%E8%BF%94%E5%9B%9E%E7%9A%84%E7%BB%93%E6%9E%9C.png" title="Template使用默认的Text-Field返回的结果"><p>或者在<code>Template</code>字段依旧选择<code>Text Field(multi-line)</code>，然后再脚本中格式化日期为一下格式</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.onresolve.jira.groovy.test.scriptfields.scripts</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atlassian.jira.component.ComponentAccessor</span><br><span class="line"><span class="keyword">import</span> com.atlassian.jira.datetime.DateTimeFormatter</span><br><span class="line"><span class="keyword">def</span> changeHistoryManager = ComponentAccessor.getChangeHistoryManager()</span><br><span class="line"><span class="keyword">def</span> created = changeHistoryManager.getChangeItemsForField(issue, <span class="string">"status"</span>).sort &#123; a, b -&gt; a.created == b.created ? 0 : a.created &gt; b.created ? -1 : <span class="number">1</span> &#125;.find &#123;</span><br><span class="line">    it.to == <span class="string">"12300"</span> </span><br><span class="line">&#125;?.getCreated()</span><br><span class="line"></span><br><span class="line">def createdTime = created?.getTime()</span><br><span class="line">DateTimeFormatter dateTimeFormatter = ComponentAccessor.getComponent(DateTimeFormatter.class);</span><br><span class="line">createdTime?dateTimeFormatter.withStyle(com.atlassian.jira.datetime.DateTimeStyle.DATE_TIME_PICKER).format(new Date(createdTime)):<span class="literal">null</span></span><br></pre></td></tr></table></figure><img src="/2018/11/27/2018-11-27-JIRA-use-summary/Template%E4%BD%BF%E7%94%A8%E9%BB%98%E8%AE%A4%E7%9A%84Date-Time%E8%BF%94%E5%9B%9E%E7%9A%84%E7%BB%93%E6%9E%9C.png" title="Template使用默认的Date-Time返回的结果"><p>示例2：获取在某个状态停留的时长</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.atlassian.jira.component.ComponentAccessor</span><br><span class="line"><span class="keyword">import</span> com.atlassian.jira.issue.history.ChangeItemBean</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> changeHistoryManager = ComponentAccessor.getChangeHistoryManager()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> inProgressName = <span class="string">"实施中"</span></span><br><span class="line"></span><br><span class="line">List&lt;Long&gt; rt = [<span class="number">0</span>L]</span><br><span class="line"><span class="keyword">def</span> changeItems = changeHistoryManager.getChangeItemsForField(issue, <span class="string">"status"</span>)</span><br><span class="line">changeItems.reverse().each &#123; ChangeItemBean item -&gt;</span><br><span class="line">    <span class="keyword">def</span> timeDiff = System.currentTimeMillis() - item.created.getTime()</span><br><span class="line">    <span class="keyword">if</span> (item.fromString == inProgressName) &#123;</span><br><span class="line">        rt &lt;&lt; -timeDiff</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (item.toString == inProgressName) &#123;</span><br><span class="line">        rt &lt;&lt; timeDiff</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> total = rt.sum() <span class="keyword">as</span> Long</span><br><span class="line"><span class="keyword">return</span> (total<span class="regexp">/1000/</span><span class="number">60</span><span class="regexp">/60/</span><span class="number">24</span>) <span class="keyword">as</span> <span class="keyword">long</span> ?: <span class="number">0</span>L</span><br></pre></td></tr></table></figure><p>其中设置的<code>实施中</code>即为停留状态的名称，最后返回的<code>total</code>是一个单位为<code>毫秒</code>的时间，<code>return</code>结果可以根据需要进行调整</p><p>示例2扩展：获取多个状态下停留时长的总和</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.atlassian.jira.component.ComponentAccessor</span><br><span class="line"><span class="keyword">import</span> com.atlassian.jira.issue.history.ChangeItemBean</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> changeHistoryManager = ComponentAccessor.getChangeHistoryManager()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> inProgressName1 = <span class="string">"开发开始"</span></span><br><span class="line"><span class="keyword">def</span> inProgressName2 = <span class="string">"开发结束"</span></span><br><span class="line"></span><br><span class="line">List&lt;Long&gt; rt1 = [<span class="number">0</span>L]</span><br><span class="line">List&lt;Long&gt; rt2 = [<span class="number">0</span>L]</span><br><span class="line"><span class="keyword">def</span> changeItems = changeHistoryManager.getChangeItemsForField(issue, <span class="string">"status"</span>)</span><br><span class="line">changeItems.reverse().each &#123; ChangeItemBean item -&gt;</span><br><span class="line">    <span class="keyword">def</span> timeDiff = System.currentTimeMillis() - item.created.getTime()</span><br><span class="line">    <span class="keyword">if</span> (item.fromString == inProgressName1) &#123;</span><br><span class="line">        rt1 &lt;&lt; -timeDiff</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (item.toString == inProgressName1) &#123;</span><br><span class="line">        rt1 &lt;&lt; timeDiff</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (item.fromString == inProgressName2) &#123;</span><br><span class="line">        rt2 &lt;&lt; -timeDiff</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (item.toString == inProgressName2) &#123;</span><br><span class="line">        rt2 &lt;&lt; timeDiff</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> total1 = rt1.sum() <span class="keyword">as</span> Long</span><br><span class="line"><span class="keyword">def</span> total2 = rt2.sum() <span class="keyword">as</span> Long</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ((total1+total2)<span class="regexp">/1000/</span><span class="number">60</span><span class="regexp">/60/</span><span class="number">24</span>) <span class="keyword">as</span> <span class="keyword">long</span> ?: <span class="number">0</span>L</span><br></pre></td></tr></table></figure><p>结果取绝对值，并保留两位小数</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> total1 = rt1.sum() <span class="keyword">as</span> <span class="keyword">float</span></span><br><span class="line"><span class="keyword">def</span> total2 = rt2.sum() <span class="keyword">as</span> <span class="keyword">float</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> total = Math.round(Math.abs((total1+total2)<span class="regexp">/1000/</span><span class="number">60</span><span class="regexp">/60/</span><span class="number">24</span>)*<span class="number">100</span>)/<span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> total ?: <span class="number">0</span>L</span><br></pre></td></tr></table></figure><p>以上获取时间段的方式，如果是取单个状态的时间段，可能会存在不准确的情况，建议使用时间点相减的方式来进行获取，代码如下：</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.onresolve.jira.groovy.test.scriptfields.scripts</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atlassian.jira.component.ComponentAccessor</span><br><span class="line"><span class="keyword">import</span> com.atlassian.jira.datetime.DateTimeFormatter</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> changeHistoryManager = ComponentAccessor.getChangeHistoryManager()</span><br><span class="line"><span class="keyword">def</span> start = changeHistoryManager.getChangeItemsForField(issue, <span class="string">"status"</span>).sort &#123; a, b -&gt;</span><br><span class="line">    a.created == b.created ? 0</span><br><span class="line">            : a.created &gt; b.created ? -1 : <span class="number">1</span></span><br><span class="line">&#125;.find &#123;</span><br><span class="line">    it.to == <span class="string">"13302"</span></span><br><span class="line">&#125;?.getCreated()</span><br><span class="line"></span><br><span class="line">def finish = changeHistoryManager.getChangeItemsForField(issue, "status").sort &#123; a, b -&gt;</span><br><span class="line">    a.created == b.created ? 0</span><br><span class="line">            : a.created &gt; b.created ? -1 : <span class="number">1</span></span><br><span class="line">&#125;.find &#123;</span><br><span class="line">    it.to == <span class="string">"13027"</span></span><br><span class="line">&#125;?.getCreated()</span><br><span class="line"></span><br><span class="line">def closed = changeHistoryManager.getChangeItemsForField(issue, "status").sort &#123; a, b -&gt;</span><br><span class="line">    a.created == b.created ? 0</span><br><span class="line">            : a.created &gt; b.created ? -1 : <span class="number">1</span></span><br><span class="line">&#125;.find &#123;</span><br><span class="line">    it.to == <span class="string">"11202"</span></span><br><span class="line">&#125;?.getCreated()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def startTime</span><br><span class="line">def finishTime</span><br><span class="line">def diffTime</span><br><span class="line"></span><br><span class="line">if(start)&#123;</span><br><span class="line">    startTime = start?.getTime()</span><br><span class="line">    if(finish)&#123;</span><br><span class="line">        finishTime = finish?.getTime()</span><br><span class="line">    &#125;else if (finish == null &amp;&amp; closed != null)&#123;</span><br><span class="line">        finishTime = closed?.getTime()</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        finishTime = System.currentTimeMillis()</span><br><span class="line">    &#125;</span><br><span class="line">    diffTime = finishTime - startTime as float</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    diffTime = 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DateTimeFormatter dateTimeFormatter = ComponentAccessor.getComponent(DateTimeFormatter.class);</span><br><span class="line">//startTime ? dateTimeFormatter.withStyle(com.atlassian.jira.datetime.DateTimeStyle.DATE_TIME_PICKER).format(new Date(startTime)) : <span class="literal">null</span></span><br><span class="line"><span class="comment">//finishTime ? dateTimeFormatter.withStyle(com.atlassian.jira.datetime.DateTimeStyle.DATE_TIME_PICKER).format(new Date(finishTime)) : null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//return (diffTime / 1000 / 60 / 60 / 24) as float ?: 0L</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> total = Math.round((diffTime<span class="regexp">/1000/</span><span class="number">60</span><span class="regexp">/60/</span><span class="number">24</span>)*<span class="number">100</span>)/<span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> total ?: <span class="number">0</span>L</span><br></pre></td></tr></table></figure></li><li><p>获取项目中的<code>BUG</code>被<code>Reopened</code>的次数<br>依旧是使用<code>scriptrunner</code>这个插件中的功能。<br>4.1 在<code>Fields</code>中选择<code>Create Script Field</code></p><img src="/2018/11/27/2018-11-27-JIRA-use-summary/%E9%80%89%E6%8B%A9%E3%80%8CCreateScriptField%E3%80%8D.png" title="选择「CreateScriptField」"><p>4.2 在列表中选择<code>No. of Times In Status</code></p><img src="/2018/11/27/2018-11-27-JIRA-use-summary/%E9%80%89%E6%8B%A9%E3%80%8CNo.ofTimesInStatus%E3%80%8D.png" title="选择「No.ofTimesInStatus」"><p>4.3 选择需要进行统计的状态，如<code>Reopen</code></p><img src="/2018/11/27/2018-11-27-JIRA-use-summary/%E9%80%89%E6%8B%A9%E3%80%8CissureStatuses%E3%80%8D%E4%B8%AD%E7%9A%84%E7%8A%B6%E6%80%81.png" title="选择「issureStatuses」中的状态"><p>可以在<code>Preview Issue Key</code>中填入一个进行过<code>Reopen</code>操作的关键字，进行调试<br>这里需要注意一点，状态列表里，可能会有比较名称比较接近的状态，你需要确认，在你的项目的工作流里，这个<code>Reopen</code>对应的是哪个确切的名称，如果选择里，结果不对，可以自己调试，找到对的<br>4.4 到这里获取状态次数的字段创建好了，后面需要应用到项目中</p><img src="/2018/11/27/2018-11-27-JIRA-use-summary/%E5%9C%A8%E5%88%97%E8%A1%A8%E9%80%89%E6%8B%A9%E5%AD%97%E6%AE%B5%E7%BC%96%E8%BE%91%E7%9A%84%E3%80%8CConfigureContext%E3%80%8D.png" title="在列表选择字段编辑的「ConfigureContext」"><p>从上面这张图可以看到，因为有两个作为<code>Reopen</code>的状态，比较粗暴的方法就是都统计上<br>4.5 在该字段的<code>Configure Context</code>，就可以设置需要应用到的项目了，建议按照需要选择自己的项目，以免影响他人使用</p><img src="/2018/11/27/2018-11-27-JIRA-use-summary/%E9%80%89%E6%8B%A9%E9%9C%80%E8%A6%81%E5%BA%94%E7%94%A8%E7%9A%84%E9%A1%B9%E7%9B%AE.png" title="选择需要应用的项目"></li><li><p>对一些字段做一些特殊操作<br>使用 <code>scriptrunner</code> 插件的 <code>Behaviours</code> 功能</p><img src="/2018/11/27/2018-11-27-JIRA-use-summary/Behaviours.png" title="Behaviours"><p>对应的脚本编辑的官方文档<a href="https://scriptrunner.adaptavist.com/5.6.7.1-jira8/jira/behaviours-api-quickref.html" target="_blank" rel="noopener">API quick reference.</a></p><p>5.1 对一些输入框字段增加默认内容</p><img src="/2018/11/27/2018-11-27-JIRA-use-summary/%E8%BE%93%E5%85%A5%E6%A1%86%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E5%80%BC.png" title="输入框设置默认值"><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> desc = getFieldById(<span class="string">"description"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> defaultValue = <span class="string">"""操作系统：Web</span></span><br><span class="line"><span class="string">操作步骤：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">【实际值】</span></span><br><span class="line"><span class="string">【期望值】"""</span>.replaceAll(<span class="regexp">/    /</span>, <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!underlyingIssue?.description) &#123;</span><br><span class="line">desc.setFormValue(defaultValue)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.2 下拉筛选支持搜索</p><img src="/2018/11/27/2018-11-27-JIRA-use-summary/%E4%B8%8B%E6%8B%89%E7%AD%9B%E9%80%89%E6%94%AF%E6%8C%81%E6%90%9C%E7%B4%A2.png" title="下拉筛选支持搜索"><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">getFieldByName(<span class="string">"需求分类"</span>).convertToSingleSelect()</span><br><span class="line">getFieldByName(<span class="string">"超级4S项目"</span>).convertToSingleSelect()</span><br></pre></td></tr></table></figure></li><li><p>监听器 <code>Listeners</code><br>比如把操作问题状态变更的人加入到关注人列表 <code>Adds the current user as a watcher</code><br><a href="https://scriptrunner.adaptavist.com/5.6.7.1-jira8/jira/listeners.html#_add_watcher" target="_blank" rel="noopener">官方介绍</a></p><img src="/2018/11/27/2018-11-27-JIRA-use-summary/Adds-the-current-user-as-a-watcher.png" title="Adds-the-current-user-as-a-watcher"><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">issue.getLabels().contains(<span class="string">"数据订正"</span>) || issue.getLabels().contains(<span class="string">"线上问题"</span>)</span><br></pre></td></tr></table></figure></li></ol><h4 id="JSU"><a href="#JSU" class="headerlink" title="JSU"></a><code>JSU</code></h4><ol><li><p><code>Copy Value From Other Field (JSU)</code>从其它字段复制值到另一个字段<br>实例1：在需求排期时，定义好测试人员字段值为A，然后在流程流转到测试阶段时，自动把经办人修改为测试人员，即自动把经办人修改为A</p><img src="/2018/11/27/2018-11-27-JIRA-use-summary/%E6%B7%BB%E5%8A%A0%E5%90%8E%E5%A4%84%E7%90%86%E5%8A%9F%E8%83%BD.png" title="添加后处理功能"> <img src="/2018/11/27/2018-11-27-JIRA-use-summary/%E9%85%8D%E7%BD%AE%E5%90%8E%E5%A4%84%E7%90%86%E5%99%A8.png" title="配置后处理器"><p>该后处理器的<code>Copy Field</code>有3中方式：</p><table><thead><tr><th>function</th><th>含义</th><th>解释</th></tr></thead><tbody><tr><td>overwrite</td><td>清空并写入</td><td>把A字段overwrite到B字段，如果A字段未设置，会把B字段值也置空</td></tr><tr><td>append</td><td>追加在尾部</td><td>把A字段append到B字段：<br>如果A字段未设置，B字段保持不变；<br>如果A字段有值，且和B字段值不一样，设置B字段属性为多用户，则会把A字段的用户添加到B字段值后，即可完成<code>统计所有经办人</code>的目的；<br>如果A字段有值，且和B字段值不一样，设置B字段属性为单用户，则会用A字段的用户替换B字段的用户，即完成<code>修改经办人</code>；</td></tr><tr><td>prepend</td><td>追加在开头</td><td>和append用法一致，只是往多用户追加的时候，是追加到头部</td></tr></tbody></table></li><li><p><code>Fields Required (JSU)</code>在进行某个操作时，确保某些字段是有值的<br>从验证器添加，选择<code>Fields Required (JSU)</code></p><img src="/2018/11/27/2018-11-27-JIRA-use-summary/FieldsRequired.png" title="FieldsRequired"><p>从<code>Available fields</code>中选择字段，添加到右侧的<code>Required fields</code>中，作为该次操作的必填参数<br>比如希望产品在PRD完成、在和开发测试确认好排期后，在jira流程中填入预计上线时间，这个时候，就可以在产品进行把流转转给开发的这个操作下，新增该验证器，让产品同学必须填入<code>预计上线时间</code>，才能让流程往下流转</p></li></ol>]]></content>
      <categories>
        <category>Jira</category>
      </categories>
      <tags>
        <tag>jira</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux&amp;Mac控制台操作</title>
    <url>/2019/10/16/2019-10-16-Linux-Cursor-Control/</url>
    <content><![CDATA[<ol><li><p>VIM编辑下，控制光标</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令模式下，移动光标到段位</span></span><br><span class="line"><span class="built_in">shift</span>+a</span><br><span class="line"><span class="comment"># 命令模式下，移动光标到文尾</span></span><br><span class="line"><span class="built_in">shift</span>+g</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>MAC下，命令行控制</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ctrl + a            移动到命令行首</span><br><span class="line">ctrl + e            移动到行尾</span><br><span class="line">ctrl + b            光标后退</span><br><span class="line">ctrl + f            光标前进</span><br><span class="line">alt + f             光标前进一个单词</span><br><span class="line">alt + b             光标后退一格单词</span><br><span class="line">ctrl + ]            从当前光标往后搜索字符串，用于快速移动到该字符串</span><br><span class="line">ctrl + alt + ]      从当前光标往前搜索字符串，用于快速移动到该字符串</span><br><span class="line">ctrl + H            删除光标的前一个字符</span><br><span class="line">ctrl + D            删除当前光标所在字符</span><br><span class="line">ctrl + K            删除光标之后所有单词</span><br><span class="line">ctrl + U            删除当前输入的命令</span><br><span class="line">ctrl + w            删除光标钱的单词</span><br><span class="line">ctrl + y            黏贴删除的内容</span><br><span class="line">alt + .             粘贴上一条命令的最后一个参数</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue入门实践学习总结</title>
    <url>/2020/03/03/2020-03-03-Simple-Summary-of-Vue-Practice/</url>
    <content><![CDATA[<h3 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h3><p><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">官网</a><br><a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">官方入门教程</a><br>VuePC端UI组件库：<a href="https://element.eleme.cn/" target="_blank" rel="noopener">Element</a>、<a href="https://www.iviewui.com/" target="_blank" rel="noopener">iView</a>、[vue-element-admin](<a href="https://panjiachen.github.io/vue-element" target="_blank" rel="noopener">https://panjiachen.github.io/vue-element</a><br>-admin-site/#/)、<a href="https://www.jianshu.com/p/669d3e41dca6" target="_blank" rel="noopener">更多</a></p><a id="more"></a><h3 id="列表增加筛选项"><a href="#列表增加筛选项" class="headerlink" title="列表增加筛选项"></a>列表增加筛选项</h3><ol><li><p>列表头增加筛选项『下拉选择、输入框』<br>在<template>……</template>中增加如下代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;el-form-item label&#x3D;&quot;角色&quot;&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    增加角色筛选</span><br><span class="line">    筛选下拉项来源为：roleData，从接口获取赋值</span><br><span class="line">    示例[&#123;role_id: 1, role_name: &quot;测试人员&quot;&#125;, &#123;role_id: 2, role_name: &quot;管理员&quot;&#125;]</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;el-select v-model&#x3D;&quot;form.role_id&quot;</span><br><span class="line">               placeholder&#x3D;&quot;请选择角色&quot;</span><br><span class="line">               clearable</span><br><span class="line">               filterable</span><br><span class="line">               @change&#x3D;&quot;initUserChoice&quot;</span><br><span class="line">               value-key&#x3D;&quot;role_id&quot;</span><br><span class="line">               style&#x3D;&quot;padding-right:3px&quot;&gt;</span><br><span class="line">        &lt;el-option</span><br><span class="line">                v-for&#x3D;&quot;(item) in roleData&quot;</span><br><span class="line">                :key&#x3D;&quot;item.role_id&quot;</span><br><span class="line">                :label&#x3D;&quot;item.role_name&quot;</span><br><span class="line">                :value&#x3D;&quot;item.role_id&quot;&gt;</span><br><span class="line">        &lt;&#x2F;el-option&gt;</span><br><span class="line">    &lt;&#x2F;el-select&gt;</span><br><span class="line">&lt;&#x2F;el-form-item&gt;</span><br><span class="line">&lt;el-form-item label&#x3D;&quot;状态&quot;&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    增加状态筛选</span><br><span class="line">    筛选下拉项来源为：userStatusList，筛选值为自己自定义的list</span><br><span class="line">    示例：</span><br><span class="line">        [</span><br><span class="line">            &#123;</span><br><span class="line">                &#39;id&#39;: &#39;0&#39;,</span><br><span class="line">                &#39;name&#39;: &#39;冻结&#39;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &#39;id&#39;: &#39;1&#39;,</span><br><span class="line">                &#39;name&#39;: &#39;正常&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;el-select</span><br><span class="line">            v-model&#x3D;&quot;form.status&quot;</span><br><span class="line">            placeholder&#x3D;&quot;请选择状态&quot;</span><br><span class="line">            clearable</span><br><span class="line">            filterable</span><br><span class="line">            @change&#x3D;&quot;initUserChoice&quot;</span><br><span class="line">            value-key&#x3D;&quot;status&quot;</span><br><span class="line">            style&#x3D;&quot;padding-right: 3px&quot;</span><br><span class="line">    &gt;&lt;el-option</span><br><span class="line">            v-for&#x3D;&quot;item in userStatusList&quot;</span><br><span class="line">            :key&#x3D;&quot;item.id&quot;</span><br><span class="line">            :label&#x3D;&quot;item.name&quot;</span><br><span class="line">            :value&#x3D;&quot;item.id&quot;&gt;</span><br><span class="line">    &lt;&#x2F;el-option&gt;</span><br><span class="line">    &lt;&#x2F;el-select&gt;</span><br><span class="line">&lt;&#x2F;el-form-item&gt;</span><br></pre></td></tr></table></figure></li><li><p>筛选字段定义<br>①定义筛选字段所需的自定义下来列表项<br>②增加两个筛选的值的字段定义</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                userStatusList: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        &#39;id&#39;: &#39;0&#39;,</span><br><span class="line">                        &#39;name&#39;: &#39;冻结&#39;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        &#39;id&#39;: &#39;1&#39;,</span><br><span class="line">                        &#39;name&#39;: &#39;正常&#39;</span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                form: &#123;</span><br><span class="line">                    role_id: &#39;&#39;,</span><br><span class="line">                    status: &#39;&#39;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li><li><p>筛选接口增加筛选字段的传参<br>在请求接口中新增两个字段：role_id、status</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        methods: &#123;</span><br><span class="line">            findUser() &#123;</span><br><span class="line">                var roleItem &#x3D; &#39;&#39;;</span><br><span class="line">                this.$axios.post(this.$api.findUserApi, &#123;</span><br><span class="line">                    &#39;role_id&#39;: this.form.role_id,</span><br><span class="line">                    &#39;status&#39;: this.form.status,</span><br><span class="line">                &#125;).then((response) &#x3D;&gt; &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="文本换行"><a href="#文本换行" class="headerlink" title="文本换行"></a>文本换行</h3><ol><li><p>通过 <code>css属性</code>实现</p><p>示例1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p style&#x3D;&quot;white-space: pre-wrap;&quot; v-text&#x3D;&#39;item.des&#39;&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;el-row&gt;</span><br><span class="line">   &lt;el-col&gt;职位描述：&lt;&#x2F;el-col&gt;</span><br><span class="line">   &lt;el-col style&#x3D;&quot;white-space: pre-wrap;&quot;&gt;&#123;&#123;resumeDetails.postDescribe&#125;&#125;&lt;&#x2F;el-col&gt;</span><br><span class="line">&lt;&#x2F;el-row&gt;</span><br></pre></td></tr></table></figure><p><code>white-space</code>的各属性详情可以阅读<a href="https://www.w3school.com.cn/cssref/pr_text_white-space.asp" target="_blank" rel="noopener">这里</a></p></li><li><p>通过<code>v-html</code>实现</p><p>需要先把字符串里的<code>\n</code>替换为<code>&lt;br&gt;</code>，然后用<code>v-html</code>指令渲染字符串为<code>innerHTML</code>。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; JS部分</span><br><span class="line">this.text &#x3D; res.data.replace(&#x2F;\n&#x2F;g, &#39;&lt;br&gt;&#39;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; HTML部分</span><br><span class="line">&lt;div v-html&#x3D;&quot;text&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat使用小技巧</title>
    <url>/2019/03/22/2019-03-22-tomcat-useing-tips/</url>
    <content><![CDATA[<ol><li><p>设置 tomcat 启动后的占用内存大小</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /tomcats/bin/catalina.sh</span></span><br><span class="line"><span class="comment"># 修改配置参数，大约是第251行：原始：JAVA_OPTS="$JAVA_OPTS $JSSE_OPTS"</span></span><br><span class="line"><span class="comment"># 修改为：</span></span><br><span class="line"><span class="comment"># 其中的数值可以根据需要修改</span></span><br><span class="line">JAVA_OPTS=<span class="string">"<span class="variable">$JAVA_OPTS</span> <span class="variable">$JSSE_OPTS</span> -Xms200m -Xmx200m"</span></span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>脚本新建新的 tomcat 目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行脚本：</span></span><br><span class="line"><span class="comment"># ./new_server.sh server_tomcat git_repo nu</span></span><br><span class="line"></span><br><span class="line">server_tomcat=<span class="variable">$1</span>    <span class="comment"># server_tomcat 比如：12001_topgear-test</span></span><br><span class="line">git_repo=<span class="variable">$2</span>         <span class="comment"># git_repo 比如：topgear</span></span><br><span class="line">nu=<span class="variable">$3</span>               <span class="comment"># nu 比如：01</span></span><br><span class="line"></span><br><span class="line">tar -xvf apache-tomcat-9.0.4.tar.gz</span><br><span class="line">mv apache-tomcat-9.0.4 <span class="variable">$&#123;server_tomcat&#125;</span></span><br><span class="line">cp 12001_topgear-test/deploy.sh <span class="variable">$&#123;server_tomcat&#125;</span></span><br><span class="line">cp 12001_topgear-test/conf/server.xml <span class="variable">$&#123;server_tomcat&#125;</span>/conf/server.xml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用sed命令时，如果</span></span><br><span class="line">sed -ig <span class="string">"s/11001/110<span class="variable">$&#123;nu&#125;</span>/g"</span> ./<span class="variable">$&#123;server_tomcat&#125;</span>/conf/server.xml</span><br><span class="line">sed -ig <span class="string">"s/12001/120<span class="variable">$&#123;nu&#125;</span>/g"</span> ./<span class="variable">$&#123;server_tomcat&#125;</span>/conf/server.xml</span><br><span class="line">sed -ig <span class="string">"s/13001/130<span class="variable">$&#123;nu&#125;</span>/g"</span> ./<span class="variable">$&#123;server_tomcat&#125;</span>/conf/server.xml</span><br><span class="line">sed -ig <span class="string">"s/14001/140<span class="variable">$&#123;nu&#125;</span>/g"</span> ./<span class="variable">$&#123;server_tomcat&#125;</span>/conf/server.xml</span><br><span class="line">sed -ig <span class="string">"s/15001/150<span class="variable">$&#123;nu&#125;</span>/g"</span> ./<span class="variable">$&#123;server_tomcat&#125;</span>/conf/server.xml</span><br><span class="line"></span><br><span class="line">sed -ig <span class="string">"s/topgear\"/<span class="variable">$&#123;git_repo&#125;</span>\"/g"</span> ./<span class="variable">$&#123;server_tomcat&#125;</span>/deploy.sh</span><br><span class="line">sed -ig <span class="string">"s/12001_topgear-test/<span class="variable">$&#123;server_tomcat&#125;</span>/g"</span> ./<span class="variable">$&#123;server_tomcat&#125;</span>/deploy.sh</span><br><span class="line">sed -ig <span class="string">"s/topgear-web/<span class="variable">$&#123;git_repo&#125;</span>-web/g"</span> ./<span class="variable">$&#123;server_tomcat&#125;</span>/deploy.sh</span><br><span class="line">sed -ig <span class="string">'s/mvn config:load/# mvn config:load/g'</span> ./<span class="variable">$&#123;server_tomcat&#125;</span>/deploy.sh</span><br></pre></td></tr></table></figure><p>Sed后面的表达式一般用单引号引起来<code>&#39;</code>，当需要使用<strong>变量</strong>时就换用双引号<code>&quot;</code>。</p></li><li></li></ol>]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>web.py数据库操作介绍</title>
    <url>/2017/01/11/2017-01-11-Webpy-database-operation-introduction/</url>
    <content><![CDATA[<h3 id="安装包安装MySQL数据库"><a href="#安装包安装MySQL数据库" class="headerlink" title="安装包安装MySQL数据库"></a>安装包安装MySQL数据库</h3><h4 id="本地数据库的安装MySQL"><a href="#本地数据库的安装MySQL" class="headerlink" title="本地数据库的安装MySQL"></a>本地数据库的安装<a href="http://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">MySQL</a></h4><p>安装完后，会给出一个默认密码：</p><a id="more"></a> <img src="/2017/01/11/2017-01-11-Webpy-database-operation-introduction/%E5%88%9D%E5%A7%8B%E5%8C%96%E5%AF%86%E7%A0%81.png" title="初始化密码"><h4 id="启动本机上的MySQL"><a href="#启动本机上的MySQL" class="headerlink" title="启动本机上的MySQL"></a>启动本机上的MySQL</h4><img src="/2017/01/11/2017-01-11-Webpy-database-operation-introduction/%E5%90%AF%E5%8A%A8MySQL-1.png" title="启动MySQL-1"> <img src="/2017/01/11/2017-01-11-Webpy-database-operation-introduction/%E5%90%AF%E5%8A%A8MySQL-2.png" title="启动MySQL-2"> <img src="/2017/01/11/2017-01-11-Webpy-database-operation-introduction/%E5%90%AF%E5%8A%A8MySQL-3.png" title="启动MySQL-3"><h4 id="修改MySQL默认密码"><a href="#修改MySQL默认密码" class="headerlink" title="修改MySQL默认密码"></a>修改MySQL默认密码</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ mysql -u root -p       </span><br><span class="line">Enter password:         <span class="comment"># 输入刚才安装后生成的密码</span></span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 18</span><br><span class="line">Server version: 5.7.17 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">'\c'</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; SET PASSWORD = PASSWORD(<span class="string">'123456'</span>);           <span class="comment"># 重置密码</span></span><br></pre></td></tr></table></figure><p>这样就把MySQL的登录密码设置成了<code>123456</code></p><h3 id="Brew安装MySQL数据库"><a href="#Brew安装MySQL数据库" class="headerlink" title="Brew安装MySQL数据库"></a>Brew安装MySQL数据库</h3><h4 id="Brew执行安装命令"><a href="#Brew执行安装命令" class="headerlink" title="Brew执行安装命令"></a>Brew执行安装命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ taoyiDSC000331 in /usr/local [17:01:58] C:1</span></span><br><span class="line">$ brew install mysql</span><br><span class="line">...</span><br><span class="line">==&gt; mysql</span><br><span class="line">We<span class="string">'ve installed your MySQL database without a root password. To secure it run:</span></span><br><span class="line"><span class="string">    mysql_secure_installation</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">MySQL is configured to only allow connections from localhost by default</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">To connect run:</span></span><br><span class="line"><span class="string">    mysql -uroot</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">To have launchd start mysql now and restart at login:</span></span><br><span class="line"><span class="string">  brew services start mysql</span></span><br><span class="line"><span class="string">Or, if you don'</span>t want/need a background service you can just run:</span><br><span class="line">  mysql.server start</span><br></pre></td></tr></table></figure><h4 id="设置MySQL的root账户密码"><a href="#设置MySQL的root账户密码" class="headerlink" title="设置MySQL的root账户密码"></a>设置MySQL的root账户密码</h4><p>默认情况下，brew安装的MySQL是没有root密码的，基于安全考虑，需要设置一个密码<br>执行<code>mysql_secure_installation</code>命令后，跟着提示步骤走就可以了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ taoyiDSC000331 in /usr/local [18:02:32] </span></span><br><span class="line">$ mysql_secure_installation</span><br><span class="line"></span><br><span class="line">Securing the MySQL server deployment.</span><br><span class="line"></span><br><span class="line">Connecting to MySQL using a blank password.</span><br><span class="line"></span><br><span class="line">VALIDATE PASSWORD COMPONENT can be used to <span class="built_in">test</span> passwords</span><br><span class="line">and improve security. It checks the strength of password</span><br><span class="line">and allows the users to <span class="built_in">set</span> only those passwords <span class="built_in">which</span> are</span><br><span class="line">secure enough. Would you like to setup VALIDATE PASSWORD component?</span><br><span class="line"></span><br><span class="line">Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No: Y</span><br><span class="line"></span><br><span class="line">There are three levels of password validation policy:</span><br><span class="line"></span><br><span class="line">LOW    Length &gt;= 8</span><br><span class="line">MEDIUM Length &gt;= 8, numeric, mixed <span class="keyword">case</span>, and special characters</span><br><span class="line">STRONG Length &gt;= 8, numeric, mixed <span class="keyword">case</span>, special characters and dictionary                  file</span><br><span class="line"></span><br><span class="line">Please enter 0 = LOW, 1 = MEDIUM and 2 = STRONG: 0</span><br><span class="line">Please <span class="built_in">set</span> the password <span class="keyword">for</span> root here.</span><br><span class="line"></span><br><span class="line">New password: </span><br><span class="line"></span><br><span class="line">Re-enter new password: </span><br><span class="line"></span><br><span class="line">Estimated strength of the password: 50 </span><br><span class="line">Do you wish to <span class="built_in">continue</span> with the password provided?(Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) : a</span><br><span class="line"></span><br><span class="line">New password: </span><br><span class="line"></span><br><span class="line">Re-enter new password: </span><br><span class="line"></span><br><span class="line">Estimated strength of the password: 50 </span><br><span class="line">Do you wish to <span class="built_in">continue</span> with the password provided?(Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) : Y</span><br><span class="line">By default, a MySQL installation has an anonymous user,</span><br><span class="line">allowing anyone to <span class="built_in">log</span> into MySQL without having to have</span><br><span class="line">a user account created <span class="keyword">for</span> them. This is intended only <span class="keyword">for</span></span><br><span class="line">testing, and to make the installation go a bit smoother.</span><br><span class="line">You should remove them before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line">Remove anonymous users? (Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) : Y</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Normally, root should only be allowed to connect from</span><br><span class="line"><span class="string">'localhost'</span>. This ensures that someone cannot guess at</span><br><span class="line">the root password from the network.</span><br><span class="line"></span><br><span class="line">Disallow root login remotely? (Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) : N</span><br><span class="line"></span><br><span class="line"> ... skipping.</span><br><span class="line">By default, MySQL comes with a database named <span class="string">'test'</span> that</span><br><span class="line">anyone can access. This is also intended only <span class="keyword">for</span> testing,</span><br><span class="line">and should be removed before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Remove <span class="built_in">test</span> database and access to it? (Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) : Y</span><br><span class="line"> - Dropping <span class="built_in">test</span> database...</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line"> - Removing privileges on <span class="built_in">test</span> database...</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line">Reloading the privilege tables will ensure that all changes</span><br><span class="line">made so far will take effect immediately.</span><br><span class="line"></span><br><span class="line">Reload privilege tables now? (Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) : Y</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line">All <span class="keyword">done</span>!</span><br></pre></td></tr></table></figure><h3 id="安装Web-py及相关数据库操作模块"><a href="#安装Web-py及相关数据库操作模块" class="headerlink" title="安装Web.py及相关数据库操作模块"></a>安装Web.py及相关数据库操作模块</h3><ol><li>安装<code>web.py</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">easy_install web.py</span><br></pre></td></tr></table></figure></li><li>安装<code>MySQLdb</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">easy_install MySQLdb</span><br></pre></td></tr></table></figure></li><li>安装<code>psycopg2</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">easy_install psycopg2</span><br></pre></td></tr></table></figure></li><li>安装<code>DBUtils</code>，用于连接池<code>database pool</code>功能<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">easy_install DBUtiles</span><br></pre></td></tr></table></figure></li></ol><h3 id="web-py操作数据库"><a href="#web-py操作数据库" class="headerlink" title="web.py操作数据库"></a>web.py操作数据库</h3><h4 id="导入模块，定义数据库连接db"><a href="#导入模块，定义数据库连接db" class="headerlink" title="导入模块，定义数据库连接db"></a>导入模块，定义数据库连接<code>db</code></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import web</span><br><span class="line">db = web.database(dbn = <span class="string">'mysql'</span>, db = <span class="string">'mytable'</span>, user = <span class="string">'root'</span>, pw = <span class="string">'123456'</span>)</span><br><span class="line"><span class="comment"># dbn 用于指定数据库类型</span></span><br></pre></td></tr></table></figure><h4 id="select查询"><a href="#select查询" class="headerlink" title="select查询"></a><code>select</code>查询</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询表</span></span><br><span class="line">entries = db.select(<span class="string">'mytable'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># where 条件</span></span><br><span class="line">myvar = dict(name = <span class="string">"Bob"</span>)</span><br><span class="line">results = db.select(<span class="string">'mytable'</span>, myvar, where = <span class="string">"name = $name"</span>)</span><br><span class="line">results = db.select(<span class="string">'mytable'</span>, where = <span class="string">"id&gt;100"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询具体列</span></span><br><span class="line">results = db.select(<span class="string">'mytable'</span>, what = <span class="string">"id, name"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># order by</span></span><br><span class="line">results = db.select(<span class="string">'mytable'</span>, order = <span class="string">"post_date DESC"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># group</span></span><br><span class="line">results = db.select(<span class="string">'mytable'</span>, group = <span class="string">"color"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># limit</span></span><br><span class="line">results = db.select(<span class="string">'mytable'</span>, limit = <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># offset</span></span><br><span class="line">results = db.select(<span class="string">'mytable'</span>, offset = <span class="number">10</span>)</span><br></pre></td></tr></table></figure><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db.insert(<span class="string">'user'</span>, name = <span class="string">'TY'</span>, age = <span class="number">28</span>, passwd = <span class="string">'123456'</span>, email = <span class="string">'526077432@qq.com'</span>)</span><br><span class="line"><span class="comment"># 插入利用了Python的**kw提供字段值，非常方便</span></span><br></pre></td></tr></table></figure><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db.update(<span class="string">'mytable'</span>, where = <span class="string">"id = 10"</span>, value1 = <span class="string">"foo"</span>)</span><br><span class="line">db.update(<span class="string">'user'</span>, where = <span class="string">'id = $id'</span>, vars = &#123;<span class="string">'id'</span> : <span class="number">100</span>&#125;, name = <span class="string">'TY001'</span>, age = <span class="number">29</span>)</span><br><span class="line"><span class="comment"># update也充分利用了Python的**kw参数，只有传入的**kw才被update，其他字段保持不变。</span></span><br><span class="line"><span class="comment"># where和vars负责where语句的生成和绑定参数</span></span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db.delete(<span class="string">'mytable'</span>, where = <span class="string">"id = 10"</span>)</span><br><span class="line">db.delete(<span class="string">'user'</span>, where = <span class="string">'id = $id'</span>, vars = &#123;<span class="string">'id'</span>:<span class="number">100</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="复杂查询"><a href="#复杂查询" class="headerlink" title="复杂查询"></a>复杂查询</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># count</span></span><br><span class="line">results = db.query(<span class="string">"SELECT COUNT(*) AS total_users FROM users"</span>)</span><br><span class="line"><span class="keyword">print</span> results[<span class="number">0</span>].total_users</span><br><span class="line"></span><br><span class="line"><span class="comment"># join</span></span><br><span class="line">results = db.query(<span class="string">"SELECT * FROM entries JOIN users WHERE entries.author_id = users.id"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 防止SQL注入</span></span><br><span class="line">results = db.query(<span class="string">"SELECT * FROM entries WHERE id = $id"</span>, vars = &#123;<span class="string">'id'</span>:<span class="number">10</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="多数据库操作（web-py大于0-3）"><a href="#多数据库操作（web-py大于0-3）" class="headerlink" title="多数据库操作（web.py大于0.3）"></a>多数据库操作（web.py大于0.3）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db1 = web.database(dbn = <span class="string">'mysql'</span>, db = <span class="string">'dbname1'</span>, user = <span class="string">'foo'</span>)</span><br><span class="line">db2 = web.database(dbn = <span class="string">'mysql'</span>, db = <span class="string">'dbname2'</span>, user = <span class="string">'foo'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> db1.select(<span class="string">'foo'</span>, where = <span class="string">'id = 1'</span>)</span><br><span class="line"><span class="keyword">print</span> db2.select(<span class="string">'bar'</span>, where = <span class="string">'id = 5'</span>)</span><br></pre></td></tr></table></figure><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = db.transaction()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    db.insert(<span class="string">'person'</span>, name = <span class="string">'foo'</span>)</span><br><span class="line">    db.insert(<span class="string">'person'</span>, name = <span class="string">'bar'</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    t.rollback()</span><br><span class="line">    <span class="keyword">raise</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    t.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python 2.5+ 可以用with</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> with_statement</span><br><span class="line"><span class="keyword">with</span> db.transaction():</span><br><span class="line">    db.insert(<span class="string">'person'</span>, name = <span class="string">'foo'</span>)</span><br><span class="line">    db.insert(<span class="string">'person'</span>, name = <span class="string">'bar'</span>)</span><br></pre></td></tr></table></figure><p>和Java比，web.py的db操作非常简单，这主要得益于python的**kw参数和内建的dict支持（对应Java的Map）。</p>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>web.py</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>shell学习笔记</title>
    <url>/2019/04/30/2019-04-30-Learn-shell/</url>
    <content><![CDATA[<h4 id="命令嵌套【嵌套语句通过-来标记】"><a href="#命令嵌套【嵌套语句通过-来标记】" class="headerlink" title="命令嵌套【嵌套语句通过 `` 来标记】"></a>命令嵌套【嵌套语句通过 `` 来标记】</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> list <span class="keyword">in</span> \</span><br><span class="line">`find /root/.jenkins/<span class="built_in">jobs</span>/DEBUG-UZAO-*/ -maxdepth 1 -<span class="built_in">type</span> f -name config.xml`\</span><br><span class="line">;<span class="keyword">do</span> sed -i s/<span class="variable">$now_branch</span>/<span class="variable">$new_branch</span>/g <span class="variable">$list</span>\</span><br><span class="line">;<span class="keyword">done</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="shell的多行注释"><a href="#shell的多行注释" class="headerlink" title="shell的多行注释"></a>shell的多行注释</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:&lt;&lt;BLOCK</span><br><span class="line">....注释内容</span><br><span class="line">....注释内容1</span><br><span class="line">BLOCK</span><br></pre></td></tr></table></figure><p>实际意义：<br><code>:</code>：前的内容为空，表示执行空命令<br><code>&lt;&lt;</code>：重定向，表示把结果重定向到空命令下<br><code>BLOAK\nBLOCK</code>：<code>BLOCK</code>只需要成对出现，两个<code>BLOCK</code>之间的内容就相当于是被注释掉了<br>但是如果需要注释的内容中包含 ` 的话的话就需要在前后字符对的中间加入<code>&#39;&#39;</code>，把需要注释的内容放在<code>&#39;&#39;</code>之间<br>以下方式都能表示多行注释：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:&lt;&lt;<span class="string">'</span></span><br><span class="line"><span class="string">....注释内容</span></span><br><span class="line"><span class="string">....注释内容1</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:&lt;&lt;<span class="string">'BLOCK</span></span><br><span class="line"><span class="string">....注释内容</span></span><br><span class="line"><span class="string">....注释内容1</span></span><br><span class="line"><span class="string">BLOCK'</span></span><br></pre></td></tr></table></figure><h4 id="shell-并发执行"><a href="#shell-并发执行" class="headerlink" title="shell 并发执行"></a><code>shell</code> 并发执行</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">date</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 1 5`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    sh newAccount.sh</span><br><span class="line">    sleep 3</span><br><span class="line">&#125; &amp;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">wait</span>  <span class="comment">##等待所有子后台进程结束</span></span><br><span class="line">date</span><br></pre></td></tr></table></figure><p><code>date</code>打印当前时间<br><code>sh newAccount.sh</code>表示执行<code>newAccount.sh</code>脚本，并发执行5次，即同时发起</p>]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Docker&amp;Selenium的WEB自动化平台搭建</title>
    <url>/2019/09/19/2019-09-19-Docker-Selenium-environment-build/</url>
    <content><![CDATA[<h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装<code>Docker</code></h3><p><a href="https://download.docker.com/mac/stable/Docker.dmg" target="_blank" rel="noopener">MAC平台</a><br><a href="https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe" target="_blank" rel="noopener">Windows平台</a><br><a href="https://www.runoob.com/docker/ubuntu-docker-install.html" target="_blank" rel="noopener">Ubuntu平台</a><br><a href="https://blog.csdn.net/xinzhifu1/article/details/83579256" target="_blank" rel="noopener">Centos7平台</a></p><a id="more"></a><h3 id="下载主hub镜像selenium-hub"><a href="#下载主hub镜像selenium-hub" class="headerlink" title="下载主hub镜像selenium/hub"></a>下载主<code>hub</code>镜像<code>selenium/hub</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">docker pull selenium/hub</span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker run -d -P --name selenium-hub selenium/hub</span><br></pre></td></tr></table></figure><p><code>-d</code> 表示容器以守护态（Daemonized）形式运行。<br><code>-P</code> 表示 Docker 会随机映射一个 49000~49900 的端口到内部容器开放的网络端口。</p><h3 id="下载主node-chrome镜像selenium-node-chrome"><a href="#下载主node-chrome镜像selenium-node-chrome" class="headerlink" title="下载主node chrome镜像selenium/node-chrome"></a>下载主<code>node chrome</code>镜像<code>selenium/node-chrome</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">docker pull selenium/node-chrome</span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker run -d --link selenium-hub:hub selenium/node-chrome</span><br></pre></td></tr></table></figure><p><code>--link</code> 通过 link 关联<code>selenium-hub</code>容器，并为其设置了别名<code>hub</code></p><h3 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE                  COMMAND                  CREATED             STATUS                     PORTS                                            NAMES</span><br><span class="line">65bdddeb9293        selenium/node-chrome   <span class="string">"/opt/bin/entry_poin…"</span>   17 seconds ago      Up 16 seconds                                                               intelligent_mirzakhani</span><br><span class="line">a280e0bce3a4        selenium/hub           <span class="string">"/opt/bin/entry_poin…"</span>   38 seconds ago      Up 36 seconds              0.0.0.0:32768-&gt;4444/tcp                          selenium-hub</span><br></pre></td></tr></table></figure><p><code>Selenium/hub</code>容器的端口号为<code>4444</code>，对<code>MAC</code>映射的端口为<code>32768</code>，前面通过<code>-P</code>参数自动分配。</p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>selenium Grid脚本 -&gt; ubuntu(32768) -&gt; Hub容器(4444) -&gt; Node Chrome 容器</p><h3 id="创建Grid测试脚本与运行"><a href="#创建Grid测试脚本与运行" class="headerlink" title="创建Grid测试脚本与运行"></a>创建Grid测试脚本与运行</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># grid_demo.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Remote(</span><br><span class="line">command_executor=<span class="string">'http://127.0.0.1:32768/wd/hub'</span>,</span><br><span class="line">desired_capabilities=&#123;<span class="string">'browserName'</span>: <span class="string">'chrome'</span>&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">print(<span class="string">"get baidu"</span>)</span><br><span class="line"></span><br><span class="line">driver.find_element_by_id(<span class="string">"kw"</span>).send_keys(<span class="string">"docker selenium"</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">"su"</span>).click()</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">driver.get_screenshot_as_file(<span class="string">"~/baidu_img.png"</span>)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br><span class="line">print(<span class="string">"end..."</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name=chrome -p 5902:5900 \</span><br><span class="line">    -e NODE_MAX_INSTANCES=5 \</span><br><span class="line">    -e NODE_MAX_SESSION=5 \</span><br><span class="line">    -e NODE_REGISTER_CYCLE=5000 \</span><br><span class="line">    -e DBUS_SESSION_BUS_ADDRESS=/dev/null \</span><br><span class="line">    --link hub -d selenium/node-chrome-debug:3.7.1-beryllium</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>环境搭建</category>
        <category>Selenium</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>Telegram代理设置</title>
    <url>/2019/09/07/2019-09-07-Telegram-set-proxy/</url>
    <content><![CDATA[<ol><li><p>自身电脑的代理打开全局代理</p><a id="more"></a></li></ol><img src="/2019/09/07/2019-09-07-Telegram-set-proxy/%E5%85%A8%E5%B1%80%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE.png" title="全局代理设置"><ol start="2"><li><p>设置好全局代理后，查看全局代理情况下，电脑默认设置的socks代理IP和端口</p><img src="/2019/09/07/2019-09-07-Telegram-set-proxy/%E9%BB%98%E8%AE%A4SOCKS%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE.png" title="默认SOCKS代理设置"></li><li><p>然后设置Telegram的代理<br><code>Settings</code>-<code>Advanced</code>-<code>Network and proxy</code>-<code>Connection type</code></p><img src="/2019/09/07/2019-09-07-Telegram-set-proxy/%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE%E9%80%89%E6%8B%A9%E9%A1%B5.png" title="代理设置选择页"><p><code>Use custom proxy</code>，然后选择<code>ADD PROXY</code>，选择<code>SOCKS5</code>，填写其中的<code>Hostname</code>和<code>Port</code></p><img src="/2019/09/07/2019-09-07-Telegram-set-proxy/SOCKS%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE.png" title="SOCKS代理设置"></li></ol>]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>telegram</tag>
        <tag>tips</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac中Node多版本管理</title>
    <url>/2020/07/16/2020-07-16-Node-Version-Manage/</url>
    <content><![CDATA[<ol><li><p>安装<code>brew</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/bash -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)</span>"</span></span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>安装<code>NVM</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install nvm</span><br></pre></td></tr></table></figure></li><li><p>配置环境变量<br>在环境变量文件中加入如下内容，如<code>zsh</code>即为<code>~/.zshrc</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=~/.nvm</span><br><span class="line"><span class="built_in">source</span> $(brew --prefix nvm)/nvm.sh</span><br></pre></td></tr></table></figure></li><li><p>安装指定版本的<code>node</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm install 8.17.0        </span><br><span class="line">Downloading and installing node v8.17.0...</span><br><span class="line">Downloading https://nodejs.org/dist/v8.17.0/node-v8.17.0-darwin-x64.tar.xz...</span><br><span class="line"><span class="comment">######################################################################################################################################################### 100.0%</span></span><br><span class="line">Computing checksum with shasum -a 256</span><br><span class="line">Checksums matched!</span><br><span class="line">Now using node v8.17.0 (npm v6.13.4)</span><br><span class="line">Creating default <span class="built_in">alias</span>: default -&gt; 8.17.0 (-&gt; v8.17.0)</span><br></pre></td></tr></table></figure></li><li><p><code>nvm</code>常用命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm ls-remote           <span class="comment"># 查看所有的node可用版本</span></span><br><span class="line">nvm install xxx         <span class="comment"># 下载你想要的版本</span></span><br><span class="line">nvm use xxx             <span class="comment"># 使用指定版本的node</span></span><br><span class="line">nvm <span class="built_in">alias</span> default xxx   <span class="comment"># 每次启动终端都使用该版本的node</span></span><br></pre></td></tr></table></figure></li><li><p>问题解决</p></li></ol><ul><li><p>问题如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm ls-remote</span><br><span class="line">dyld: Library not loaded: /usr/<span class="built_in">local</span>/opt/openssl/lib/libssl.1.0.0.dylib</span><br><span class="line">  Referenced from: /usr/<span class="built_in">local</span>/opt/curl-openssl/bin/curl</span><br><span class="line">  Reason: image not found</span><br><span class="line">dyld: Library not loaded: /usr/<span class="built_in">local</span>/opt/openssl/lib/libssl.1.0.0.dylib</span><br><span class="line">  Referenced from: /usr/<span class="built_in">local</span>/opt/curl-openssl/bin/curl</span><br><span class="line">  Reason: image not found</span><br><span class="line">            N/A</span><br></pre></td></tr></table></figure></li><li><p>解决方法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew switch openssl 1.0.2s</span><br><span class="line">Cleaning /usr/<span class="built_in">local</span>/Cellar/openssl/1.0.2s</span><br><span class="line">Opt link created <span class="keyword">for</span> /usr/<span class="built_in">local</span>/Cellar/openssl/1.0.2s</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>TestNG使用简单总结</title>
    <url>/2020/04/19/2020-04-19-Simple-Summary-of-TestNG/</url>
    <content><![CDATA[<h3 id="TestNG介绍"><a href="#TestNG介绍" class="headerlink" title="TestNG介绍"></a><code>TestNG</code>介绍</h3><p><code>TestNG</code>是一个开源自动化测试框架；<code>TestNG</code>表示<strong>下一代</strong>(<strong>N</strong>ext <strong>G</strong>eneration的首字母)。</p><a id="more"></a><p>TestNG的特点：</p><ul><li>注解</li><li>使用Java和面向对象的功能</li><li>灵活的运行时配置</li><li>支持依赖测试方法，并行测试，负载测试，局部故障</li><li>灵活的插件API</li><li>支持多线程测试</li></ul><h3 id="TestNG测试类配置注释说明"><a href="#TestNG测试类配置注释说明" class="headerlink" title="TestNG测试类配置注释说明"></a><code>TestNG</code>测试类配置注释说明</h3><table><thead><tr><th>注解</th><th>描述</th></tr></thead><tbody><tr><td><code>@BeforeMethod</code></td><td>在每个测试方法 前 执行</td></tr><tr><td><code>@AfterMethod</code></td><td>在每个测试方法 后 执行</td></tr><tr><td><code>@BeforeClass</code></td><td>被注释的方法将在当前类的第一个测试方法调用前运行</td></tr><tr><td><code>@AfterClass</code></td><td>被注释的方法将在当前类的所有测试方法调用后运行</td></tr><tr><td><code>@BeforeGroups</code></td><td>被配置的方法将在列表中的gourp前运行。这个方法保证在第一个属于这些组的测试方法调用前立即执行</td></tr><tr><td><code>@BeforeTest</code></td><td>被注释的方法将在测试运行前运行</td></tr><tr><td><code>@AfterTest</code></td><td>被注释的方法将在测试运行后运行</td></tr><tr><td><code>@BeforeSuite</code></td><td>被注释的方法将在所有测试运行前运行</td></tr><tr><td><code>@AfterSuite</code></td><td>被注释的方法将在所有测试运行后运行</td></tr><tr><td><code>alwaysRun</code></td><td>对于每个bufore方法(beforeSuite, beforeTest, beforeTestClass 和 beforeTestMethod, 但是不包括 beforeGroups):\n如果设置为true，被配置的方法将总是运行而不管它属于哪个组。\n对于after方法(afterSuite, afterClass, …): 如果设置为true，被配置的方法甚至在一个或多个先调用的方法失败或被忽略时也将运行。</td></tr><tr><td><code>dependsOnGroups</code></td><td>这个方法依赖的组列表</td></tr><tr><td><code>dependsOnMethods</code></td><td>这个方法依赖的方法列表</td></tr><tr><td><code>enabled</code></td><td>这个类的方法是否激活</td></tr><tr><td><code>groups</code></td><td>这个类或方法所属的分组列表</td></tr><tr><td><code>inheritGroups</code></td><td>如果设置为true，这个方法被属于在类级别被@Test annotation指定的组</td></tr></tbody></table><h3 id="testng-xml-配置详解"><a href="#testng-xml-配置详解" class="headerlink" title="testng.xml 配置详解"></a><code>testng.xml</code> 配置详解</h3><h4 id="XML规则"><a href="#XML规则" class="headerlink" title="XML规则"></a><code>XML</code>规则</h4><ul><li>suite</li><li>–tests</li><li>—-parameters</li><li>—-groups</li><li>——definitions</li><li>——runs</li><li>—-classes</li><li>–parameters</li></ul><h4 id="XML简单的大概结构"><a href="#XML简单的大概结构" class="headerlink" title="XML简单的大概结构"></a><code>XML</code>简单的大概结构</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">suite</span> <span class="attr">name</span>=<span class="string">"xxx"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span> <span class="attr">name</span>=<span class="string">"xxxx"</span>&gt;</span></span><br><span class="line">    　　<span class="comment">&lt;!-- 参数定义的方法 --&gt;</span></span><br><span class="line">    　　<span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">"first-name"</span> <span class="attr">value</span>=<span class="string">"Cedric"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    　　<span class="comment">&lt;!-- groups的用法，前提是需要存在classes的组，否则所有方法不被运行 --&gt;</span></span><br><span class="line">    　　<span class="tag">&lt;<span class="name">groups</span>&gt;</span></span><br><span class="line">    　　<span class="comment">&lt;!-- 定义组中组的方法 --&gt;</span></span><br><span class="line">    　　　　<span class="tag">&lt;<span class="name">define</span> <span class="attr">name</span>=<span class="string">"groups_name"</span>&gt;</span></span><br><span class="line">    　　　　　　<span class="tag">&lt;<span class="name">include</span> <span class="attr">name</span>=<span class="string">"group1"</span>/&gt;</span></span><br><span class="line">    　　　　　　<span class="tag">&lt;<span class="name">include</span> <span class="attr">name</span>=<span class="string">"group2"</span>/&gt;</span></span><br><span class="line">    　　　　<span class="tag">&lt;/<span class="name">define</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    　　　　<span class="tag">&lt;<span class="name">run</span>&gt;</span></span><br><span class="line">    　　　　　　<span class="comment">&lt;!-- 此处用组名来区别 --&gt;</span></span><br><span class="line">    　　　　　　<span class="tag">&lt;<span class="name">inclue</span> <span class="attr">name</span>=<span class="string">"groups_name"</span> /&gt;</span></span><br><span class="line">    　　　　　　<span class="tag">&lt;<span class="name">exclue</span> <span class="attr">name</span>=<span class="string">"groups_name"</span> /&gt;</span></span><br><span class="line">    　　　　　　<span class="tag">&lt;/<span class="name">run</span>&gt;</span></span><br><span class="line">    　　<span class="tag">&lt;/<span class="name">groups</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    　　<span class="comment">&lt;!-- classes的用法，classes中包含类名，类名底下可以包含方法名或排除方法名 --&gt;</span></span><br><span class="line">    　　<span class="tag">&lt;<span class="name">classes</span>&gt;</span></span><br><span class="line">    　　　　<span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"class1"</span>&gt;</span></span><br><span class="line">    　　　　　　<span class="tag">&lt;<span class="name">methods</span>&gt;</span></span><br><span class="line">    　　　　　　　　<span class="comment">&lt;!-- 此处用方法名来区别 --&gt;</span></span><br><span class="line">    　　　　　　　　<span class="tag">&lt;<span class="name">inclue</span> <span class="attr">name</span>=<span class="string">"method_name"</span> /&gt;</span></span><br><span class="line">    　　　　　　　　<span class="tag">&lt;<span class="name">exclue</span> <span class="attr">name</span>=<span class="string">"method_name"</span> /&gt;</span></span><br><span class="line">    　　　　　　<span class="tag">&lt;/<span class="name">methods</span>&gt;</span></span><br><span class="line">    　　　　<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">    　　<span class="tag">&lt;/<span class="name">classes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">suite</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="各个参数说明"><a href="#各个参数说明" class="headerlink" title="各个参数说明"></a>各个参数说明</h4><ol><li><p><code>&lt;suite&gt;</code><br>说明：一个<code>xml</code>文件只能有一个<code>&lt;suite&gt;</code>，是一个<code>xml</code>文件的根级<br><code>&lt;suite&gt;</code>由<code>&lt;test&gt;</code>和<code>&lt;parameters&gt;</code>组成</p><p>参数说明：</p><p>参数 |说明|使用方法|参数值</p></li></ol><p>——————————|—|—|—<br><code>name</code> |必选项，<suite>的名字，将出现在reports里|name=”XXX”|suite名字<br><code>junit</code> |是否执行Junit模式(识别setup()等)|junit=”true”|true和false，默认false<br><code>verbose</code> |控制台输出的详细内容等级,0-10级（0无，10最详细）|verbose=”5”|0到10<br><code>parallel</code> |是否在不同的线程并行进行测试，要与thread-count配套使用|parallel=”mehods”|详见表格下内容，默认false<br><code>parent-module</code> |和Guice框架有关，只运行一次，创建一个parent injector给所有guice injectors|<br><code>guice-stage</code> |和Guice框架有关|guice-stage=”DEVELOPMENT”|DEVELOPMENT，PRODUCTION，TOOL，默认”DEVELOPMENT”<br><code>configfailurepolicy</code> |测试失败后是再次执行还是跳过，值skip和continue|configfailurepolicy=”skip”|skip、continue，默认skip<br><code>thread-count</code> |与parallel配套使用，线程池的大小，决定并行线程数量|thread-count=”10”|整数，默认5<br><code>annotations</code> |获取注解，值为javadoc时，使用JavaDoc的注释；否则用JDK5注释|annotations=”javadoc”|javadoc<br><code>time-out</code> |设置parallel时，终止执行单元之前的等待时间（毫秒）|time-out=”10000”|整数，单位毫秒<br><code>skipfailedinvocationcounts</code> |是否跳过失败的调用|skipfailedinvocationcounts=”true”|true和false，默认false<br><code>data-provider-thread-count</code> |并发时data-provider的线程池数量|data-provider-thread-count=”5”|整数<br><code>object-factory</code> |一个实现IObjectFactory接口的类，实例化测试对象|object-factory=”classname”|类名<br><code>allow-return-values</code> |是否允许返回函数值|all-return-values=”true”|true和false<br><code>preserve-order</code> |是否按照排序执行|preserve-order=”true”|true和false，默认true<br><code>group-by-instances</code> |按照实例分组|group-by-instances=”true”|true和false，默认false</suite></p><ol start="2"><li><p><code>&lt;test&gt;</code><br>说明：一个<suite>下可以有多个<test>，可以通过<suite>的parallel=”tests”来进行并行测试，必须和thread-count配套使用，否则是无效参数<br><code>&lt;test&gt;</code>由<code>&lt;parameters&gt;</code>、<code>&lt;groups&gt;</code>、<code>&lt;classes&gt;</code>三部分组成</suite></test></suite></p><p>参数说明：</p><p>参数 |说明|使用方法|参数值</p></li></ol><p>——————————|—|—|—<br><code>name</code> |test的名字，将出现在报告里|name=”testname”|test的名字<br><code>junit</code> |是否按照Junit模式运行|junit=”true”|true和false，默认false<br><code>verbose</code> |控制台输出的详细内容等级,0-10级（0无，10最详细），不在报告显示|verbose=”5”|0到10<br><code>parallel</code> |是否在不同的线程并行进行测试，要与thread-count配套使用|parallel=”mehods”|与suite的parallel一致，默认false<br><code>thread-count</code> |与parallel配套使用，线程池的大小，决定并行线程数量|thread-count=”10”|整数，默认5<br><code>annotations</code> |获取注解，值为javadoc时，使用JavaDoc的注释；否则用JDK5注释|annotations=”javadoc”|javadoc<br><code>time-out</code> |设置parallel时，终止执行单元之前的等待时间（毫秒）|time-out=”10000”|整数，单位毫秒<br><code>enabled</code> |标记是否执行这个test|enabled=”true”|true和false，默认true<br><code>skipfailedinvocationcounts</code> |是否跳过失败的调用|skipfailedinvocationcounts=”true”|true和false，默认false<br><code>preserve-order</code> |是否按照排序执行，如果是true，将按照xml文件中的顺序去执行|preserve-order=”true”|true和false，默认true<br><code>allow-return-values</code> |是否允许返回函数值|all-return-values=”true”|true和false，默认false</p><ol start="3"><li><p><code>parallel</code><br>该参数的值可以是<code>false</code>、<code>methods</code>、<code>tests</code>、<code>classes</code>、<code>instances</code>。默认<code>false</code><br><code>parallel</code>必须和<code>thread-count</code>配套使用，否则相当于无效参数，<code>thread-count</code>决定了并行测试时开启的线程数量</p><ul><li><code>parallel=&quot;mehods&quot;</code> TestNG将并行执行所有的测试方法在不同的线程里</li><li><code>parallel=&quot;tests&quot;</code> TestNG将并行执行在同一个<test>下的所有方法在不同线程里</test></li><li><code>parallel=&quot;classes&quot;</code> TestNG将并行执行在相同<class>下的方法在不同线程里</class></li><li><code>parallel=&quot;instances&quot;</code> TestNG将并行执行相同实例下的所有方法在不同的线程里</li></ul></li><li><p><code>&lt;parameter&gt;</code><br>说明：提供测试数据，有<code>name</code>和<code>value</code>两个参数<br>声明方法：<code>&lt;parameter name = &quot;parameter_name&quot; value = &quot;parameter_value &quot;/&gt;</code><br><code>testng.xml</code>文件中的<code>&lt;parameter&gt;</code>可以声明在<code>&lt;suite&gt;</code>或者<code>&lt;test&gt;</code>级别，在<code>&lt;test&gt;</code>下的<code>&lt;parameter&gt;</code>会覆盖在<code>&lt;suite&gt;</code>下声明的同名变量<br>使用示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestParameterXML</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Parameters</span>(&#123; <span class="string">"parameter_name1"</span>, <span class="string">"parameter_name2"</span> &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createConnection</span><span class="params">(String parameter_name1, <span class="keyword">int</span> parameter_name2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"parameter_name1 : "</span> + dbconfig);</span><br><span class="line">        System.out.println(<span class="string">"parameter_name2 : "</span> + poolsize);</span><br><span class="line"></span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">        InputStream input = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>&lt;DataProvider&gt;</code></p><p>使用示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yiibai;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.testng.Assert;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.DataProvider;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestParameterDataProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span>(dataProvider = <span class="string">"provideNumbers"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> number, <span class="keyword">int</span> expected)</span> </span>&#123;</span><br><span class="line">        Assert.assertEquals(number + <span class="number">10</span>, expected);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DataProvider</span>(name = <span class="string">"provideNumbers"</span>)</span><br><span class="line">    <span class="keyword">public</span> Object[][] provideData() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Object[][] &#123; &#123; <span class="number">10</span>, <span class="number">20</span> &#125;, &#123; <span class="number">100</span>, <span class="number">110</span> &#125;, &#123; <span class="number">200</span>, <span class="number">210</span> &#125; &#125;;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>&lt;groups&gt;</code><br>说明：要运行的组，可以自定义一个组，可以包括要执行的，还排除要执行的方法。必须和<code>&lt;classes&gt;</code>配套使用，从下面的类中找到对应名字的方法<br><code>&lt;groups&gt;</code>由<code>&lt;difine&gt;</code>和<code>&lt;run&gt;</code>、<code>&lt;dependencies&gt;</code>三部分组成。<code>&lt;diffine&gt;</code>可以将<code>group</code>组成一个新组，包括要执行和不执行的大组；<code>&lt;run&gt;</code>要执行的方法；<code>&lt;dependencies&gt;</code>指定了某<code>group</code>需要依赖的<code>group</code>（比如下面的例子，<code>group1</code>需要依赖<code>group2</code>和<code>group3</code>先执行）。</p><p>声明方法：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groups</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">define</span> <span class="attr">name</span> =<span class="string">"all"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span> <span class="attr">name</span> =<span class="string">"testgroup1"</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">exclude</span> <span class="attr">name</span> =<span class="string">"testgroup2'/&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">     &lt;/define&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">     &lt;run&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">          &lt;include name ="</span><span class="attr">all</span>"/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span> <span class="attr">name</span> =<span class="string">"testmethod1"</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">exclude</span> <span class="attr">name</span>=<span class="string">"testmethod2"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">run</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">group</span> <span class="attr">name</span> =<span class="string">"group1"</span> <span class="attr">depends-on</span>=<span class="string">"goup2 group3"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">groups</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>&lt;classes&gt;</code><br>说明：方法选择器，要执行的方法写在这里，参数有<code>name</code>和<code>priority</code>。<br>注释：<br>1.<classes>下必须写要执行的<class>，否则不会执行任何内容，如果填写了class没有写methods，会按照填写的class的下的注释@Test去执行所有的方法<br>2.<classes>下的<methods>如果填写了<include>，那只会执行所填写的方法，没有填写的方法不会去执行</include></methods></classes></class></classes></p><p>声明方法：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">classes</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"要执行的class名"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">methods</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span> <span class="attr">name</span> =<span class="string">"要执行的方法名"</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">methods</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">class</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">classes</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>&lt;packages&gt;</code><br>说明：<code>&lt;packages&gt;</code>指定包名代替类名。查找包下的所有包含<code>testNG annotation</code>的类进行测试</p><p>声明方法：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packages</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"packagename"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"packagename"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span> <span class="attr">name</span>=<span class="string">"methodname"</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">exclude</span> <span class="attr">name</span>=<span class="string">"methodname"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">packages</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>&lt;listener&gt;</code><br>说明：指定<code>listeners</code>，这个<code>class</code>必须继承自<code>org.testng.ITestNGListener</code>。在<code>java</code>中使用<code>@Listeners({com.example.MyListener.class,com.example.MyMethodInterceptor.class})</code>的注释也可以有同样效果</p><p>声明方法：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listeners</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">listener</span> <span class="attr">class-name</span>=<span class="string">"com.example.MyListener"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">listener</span> <span class="attr">class-name</span>=<span class="string">"com.example.MyMehodIntercepor"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listeners</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="忽略测试"><a href="#忽略测试" class="headerlink" title="忽略测试"></a>忽略测试</h3><p>在测试用例写好，但是并没有调试或者说还没有测试通过时，希望先不要执行该测试，可以使用<code>@Test(enabled = false)</code>来忽略这个测试方法。默认情况下，<code>enabled</code>参数是<code>true</code>。</p><h3 id="超时测试"><a href="#超时测试" class="headerlink" title="超时测试"></a>超时测试</h3><p><code>超时</code>表示如果单元测试花费的时间超过指定的毫秒数，那么<code>TestNG</code>将会终止它，并标记为失败。<br><code>超时</code>也可用于性能测试，以确保方法在合理的时间内返回。<br>示例代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yiibai;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTimeout</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span>(timeOut = <span class="number">5000</span>) <span class="comment">// time in mulliseconds</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testThisShouldPass</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span>(timeOut = <span class="number">1000</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testThisShouldFail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">// do nothing</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置失败用例重跑"><a href="#设置失败用例重跑" class="headerlink" title="设置失败用例重跑"></a>设置失败用例重跑</h3><p>对于<code>TestNG</code>，首先重写接口<code>IRetryAnalyzer</code>，重写该接口中的<code>retry</code>方法，自定义需要重试的次数<code>maxRetryCount</code>，如果一个用例失败，自动进入<code>retry</code>方法，在此方法中判断已经重试的次数是否小于<code>maxRetryCount</code>，如果是，则返回<code>true</code>，则自动再次执行失败的用例，如果是失败的用例再次执行还是失败，那么还是自动调用<code>retry</code>方法，直到到重试次数大于设定的<code>maxRetryCount</code>了，则返回<code>false</code>，那么系统就是判定该方法失败了。<br>失败用例重跑方法代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadow.qa.common.listeners;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.shadow.qa.common.tools.BT;</span><br><span class="line"><span class="keyword">import</span> org.testng.IRetryAnalyzer;</span><br><span class="line"><span class="keyword">import</span> org.testng.ITestResult;</span><br><span class="line"><span class="keyword">import</span> org.testng.Reporter;</span><br><span class="line"><span class="keyword">import</span> org.testng.log4testng.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNGRetryAnalyzer</span> <span class="keyword">implements</span> <span class="title">IRetryAnalyzer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Logger logger = Logger.getLogger(TestNGRetryAnalyzer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> retryCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> maxRetryCount = Integer.parseInt(BT.GetProv(<span class="string">"/config/application.properties"</span>, <span class="string">"maxRetryCount"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">retry</span><span class="params">(ITestResult iTestResult)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (retryCount &lt; maxRetryCount) &#123;</span><br><span class="line">            String message = <span class="string">"方法&lt;"</span> + iTestResult.getName() + <span class="string">"&gt;执行失败，重试第"</span> + retryCount + <span class="string">"次"</span>;</span><br><span class="line">            logger.info(message);</span><br><span class="line">            Reporter.setCurrentTestResult(iTestResult);</span><br><span class="line">            Reporter.log(message);</span><br><span class="line">            retryCount++;</span><br><span class="line">            BT.sleep(<span class="number">3000</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写了<code>TestNG</code>的<code>IRetryAnalyzer</code>接口，那么就需要让系统调用我们重写的接口，需要让<code>TestNG</code>调用，还需要对<code>TestNG.xml</code>中的注解接口进行重写。先判断<code>TestNG.xml</code>中是否有重试分析器，如果没有，则调用我们自己重写类。<br>失败重跑监听器代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadow.qa.common.listeners;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.testng.IAnnotationTransformer;</span><br><span class="line"><span class="keyword">import</span> org.testng.IRetryAnalyzer;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.ITestAnnotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RetryListener</span> <span class="keyword">implements</span> <span class="title">IAnnotationTransformer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(ITestAnnotation iTestAnnotation, Class aClass, Constructor constructor, Method method)</span> </span>&#123;</span><br><span class="line">        IRetryAnalyzer iRetryAnalyzer= iTestAnnotation.getRetryAnalyzer();</span><br><span class="line">        <span class="keyword">if</span>(iRetryAnalyzer==<span class="keyword">null</span>)&#123;</span><br><span class="line">            iTestAnnotation.setRetryAnalyzer(TestNGRetryAnalyzer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方法一：在<code>TestNG</code>的执行文件中配置<br>在<code>TestNG</code>的执行文件的<code>suite</code>标签中，增加一个监听器，用于监听<code>suite</code>下所有的用例执行情况。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">suite</span> <span class="attr">name</span>=<span class="string">"接口测试"</span> <span class="attr">verbose</span>=<span class="string">"1"</span>  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listeners</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener</span> <span class="attr">class-name</span>=<span class="string">"com.shadow.qa.common.listeners.RetryListener"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listeners</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span> <span class="attr">name</span>=<span class="string">"网管层接口"</span> <span class="attr">preserve-order</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">packages</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.shadow.qa.testCases.hhh.*"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">packages</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">suite</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用方法二：对特定的用例进行设置<br>在用例的<code>@Test</code>中，增加失败用例重跑的参数</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span>(dataProvider = <span class="string">"data"</span>, description = <span class="string">"Test"</span>, retryAnalyzer = TestNGRetryAnalyzer<span class="class">.<span class="keyword">class</span>)</span></span><br></pre></td></tr></table></figure><h3 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h3><h4 id="使用groups时，-BeforeClass、-BeforeSuite被跳过"><a href="#使用groups时，-BeforeClass、-BeforeSuite被跳过" class="headerlink" title="使用groups时，@BeforeClass、@BeforeSuite被跳过"></a>使用<code>groups</code>时，<code>@BeforeClass</code>、<code>@BeforeSuite</code>被跳过</h4><p>有两种解决方式：</p><ol><li><p>在<code>@BeforeClass</code>中添加<code>alwaysRun=true</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">classTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@BeforeClass</span>(alwaysRun=<span class="keyword">true</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initTest</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span>(groups = &#123;<span class="string">"testGroup"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>testNG</code>文件中包含了<code>该class</code>中存在的<code>groups</code>时，<code>该class</code>中的<code>@BeforeClass</code>才会执行，所以不必担心在所有的<code>@BeforeClass</code>中都添加<code>alwaysRun=true</code>会造成没必要的<code>@BeforeClass</code>执行的问题。</p></li><li><p>在<code>@BeforeClass</code>中也添加需要的<code>groups</code>参数</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">classTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@BeforeClass</span>(groups = &#123;<span class="string">"testGroup"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initTest</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span>(groups = &#123;<span class="string">"testGroup"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="执行某个包下所有包含某个分组的用例"><a href="#执行某个包下所有包含某个分组的用例" class="headerlink" title="执行某个包下所有包含某个分组的用例"></a>执行某个包下所有包含某个分组的用例</h4><p>testNG的xml配置文件如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">suite</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://testng.org/testng-1.0.dtd"</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">suite</span> <span class="attr">name</span>=<span class="string">"接口测试"</span> <span class="attr">verbose</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span> <span class="attr">name</span>=<span class="string">"网管层接口"</span> <span class="attr">preserve-order</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groups</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">run</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span> <span class="attr">name</span>=<span class="string">"testGroup"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">run</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">groups</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">packages</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.shadow.qa.testCases.api.*"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">packages</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">suite</span>&gt;</span></span><br></pre></td></tr></table></figure><p>多数文档说<code>groups</code>必须和<code>classes</code>配合使用，但是<code>class</code>是无法用通配符的，会造成要枚举所有的<code>class</code>，这样就会非常麻烦；<br>实际上<code>groups</code>也可以和<code>packages</code>配合使用，<code>packages</code>可以使用通配符，这样就大大省去了去找所有有需要的<code>groups</code>的<code>class</code>的麻烦</p>]]></content>
      <categories>
        <category>TestNG</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>testng</tag>
      </tags>
  </entry>
  <entry>
    <title>Jira问题列表转图片钉钉发送Python实现</title>
    <url>/2020/10/14/2020-10-14-Ding-Jira-Issues-List-Report/</url>
    <content><![CDATA[<h3 id="主要用到的开源API"><a href="#主要用到的开源API" class="headerlink" title="主要用到的开源API"></a>主要用到的开源API</h3><ol><li><p>公司内部JIRA的API文档地址：<a href="https://jira.shadow.com/plugins/servlet/restbrowser#/" target="_blank" rel="noopener">https://jira.shadow.com/plugins/servlet/restbrowser#/</a></p></li><li><p>JIRA官方提供的API文档地址：<a href="https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/" target="_blank" rel="noopener">https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/</a><br>官方已经出到第三个版本，使用时需要根据自己公司使用的API版本来进行调用<br>官方提供了各个语言的调用示例，可以进行参考</p></li><li><p>图床服务的API文档地址：<a href="https://doc.sm.ms/" target="_blank" rel="noopener">https://doc.sm.ms/</a><br>如果自己公司有影像件服务的话，可以传到公司的oss上进行保存</p><a id="more"></a></li></ol><h3 id="具体使用到的API"><a href="#具体使用到的API" class="headerlink" title="具体使用到的API"></a>具体使用到的API</h3><ol><li>获取JIRA筛选器详情：<a href="https://jira.shadow.com/rest/api/2/filter/{id" target="_blank" rel="noopener">https://jira.shadow.com/rest/api/2/filter/{id</a>}</li><li>获取问题列表：<a href="https://jira.shadow.com/rest/api/2/search" target="_blank" rel="noopener">https://jira.shadow.com/rest/api/2/search</a></li><li>上传图片到图床：<a href="https://sm.ms/api/v2/upload" target="_blank" rel="noopener">https://sm.ms/api/v2/upload</a></li></ol><h3 id="脚本主要方法说明"><a href="#脚本主要方法说明" class="headerlink" title="脚本主要方法说明"></a>脚本主要方法说明</h3><ol><li><p><code>getIssuesList()</code> 方法获取问题列表<br>首先调用<code>filter</code>接口，获取到筛选器的详情，从中取出<code>jql</code>字段值<br>然后调用<code>search</code>接口，获取问题列表</p></li><li><p><code>getShowWords()</code> 方法获取问题列表中所需的字段，并构建新的<code>jsonList</code><br>从原有复杂的问题列表的json返回接口中，提取出所需的字段</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"类型"</span>: <span class="string">"缺陷"</span>,</span><br><span class="line">        <span class="attr">"关键字"</span>: <span class="string">"ZSY-844"</span>,</span><br><span class="line">        <span class="attr">"链接"</span>: <span class="string">"https://jira.shadow.com/browse/ZSY-844"</span>,</span><br><span class="line">        <span class="attr">"概要"</span>: <span class="string">"【H5】工单失败"</span>,</span><br><span class="line">        <span class="attr">"报告人"</span>: <span class="string">"XX「测试」"</span>,</span><br><span class="line">        <span class="attr">"经办人"</span>: <span class="string">"XX「开发」"</span>,</span><br><span class="line">        <span class="attr">"优先级"</span>: <span class="string">"P1"</span>,</span><br><span class="line">        <span class="attr">"状态"</span>: <span class="string">"Close"</span>,</span><br><span class="line">        <span class="attr">"创建时间"</span>: <span class="string">"2020-10-12 16:37:23"</span>,</span><br><span class="line">        <span class="attr">"更新时间"</span>: <span class="string">"2020-10-12 19:03:20"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"类型"</span>: <span class="string">"缺陷"</span>,</span><br><span class="line">        <span class="attr">"关键字"</span>: <span class="string">"ZSY-843"</span>,</span><br><span class="line">        <span class="attr">"链接"</span>: <span class="string">"https://jira.shadow.com/browse/ZSY-843"</span>,</span><br><span class="line">        <span class="attr">"概要"</span>: <span class="string">"【H5】未显示指定门店"</span>,</span><br><span class="line">        <span class="attr">"报告人"</span>: <span class="string">"XX「测试」"</span>,</span><br><span class="line">        <span class="attr">"经办人"</span>: <span class="string">"XX「开发」"</span>,</span><br><span class="line">        <span class="attr">"优先级"</span>: <span class="string">"P3"</span>,</span><br><span class="line">        <span class="attr">"状态"</span>: <span class="string">"Close"</span>,</span><br><span class="line">        <span class="attr">"创建时间"</span>: <span class="string">"2020-10-12 16:02:58"</span>,</span><br><span class="line">        <span class="attr">"更新时间"</span>: <span class="string">"2020-10-12 17:55:15"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p><code>json2Excel()</code> 方法把第二点中得到的json转换成<code>Excel</code>，返回写入内容的<code>Excel</code>文件</p></li><li><p><code>excel2Image.py</code>自定义类中的<code>excel_html()</code> 方法把<code>Excel</code>文件转换为<code>HTML</code>文件</p></li><li><p><code>excel2Image.py</code>自定义类中的<code>html_image()</code> 方法把<code>HTML</code>文件转换为<code>.png</code>格式的图片</p></li><li><p><code>getBugImageUrl()</code> 方法把图片上传到图床服务，并获取到对应的图片<code>URL</code></p></li><li><p><code>sendMarkdownDing()</code> 方法以markdown格式组织消息体，发送钉钉通知</p></li></ol><h3 id="完整脚本"><a href="#完整脚本" class="headerlink" title="完整脚本"></a>完整脚本</h3><h4 id="excel2Image-py自定义类文件"><a href="#excel2Image-py自定义类文件" class="headerlink" title="excel2Image.py自定义类文件"></a><code>excel2Image.py</code>自定义类文件</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> imgkit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ReportImage -&gt; report convert include multiple sheets into pictures</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReportImage</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># excel_html -&gt; convert excel include multiple sheets into multiple html file</span></span><br><span class="line">    <span class="comment"># excel_file -&gt; file</span></span><br><span class="line">    <span class="comment"># html_path -&gt; path</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">excel_html</span><span class="params">(excel_file, html_path)</span>:</span></span><br><span class="line">        html_list = []</span><br><span class="line">        excel_obj = pd.ExcelFile(excel_file)</span><br><span class="line">        sheet_list = excel_obj.sheet_names</span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> sheet_list:</span><br><span class="line">            html_file = html_path + i + <span class="string">".html"</span></span><br><span class="line">            excel_data = excel_obj.parse(excel_obj.sheet_names[index])</span><br><span class="line">            <span class="keyword">with</span> codecs.open(html_file, <span class="string">'w'</span>, <span class="string">'utf-8'</span>) <span class="keyword">as</span> html:</span><br><span class="line">                html.write(excel_data.to_html(header=<span class="literal">True</span>, index=<span class="literal">True</span>))</span><br><span class="line">            html_list.append(html_file)</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> html_list</span><br><span class="line"></span><br><span class="line">    <span class="comment"># html_image -&gt; convert htmls into pictures file</span></span><br><span class="line">    <span class="comment"># html_list -&gt; list</span></span><br><span class="line">    <span class="comment"># image_path -&gt; path</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">html_image</span><span class="params">(html_list, image_path)</span>:</span></span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> html_list:</span><br><span class="line">            img_obj = image_path + str(index) + <span class="string">".png"</span></span><br><span class="line">            <span class="keyword">with</span> open(i, <span class="string">'r'</span>) <span class="keyword">as</span> html_file:</span><br><span class="line">                <span class="comment"># options内的参数，具体可以通过命令  `wkhtmltoimage --extended-help`  获取到详细的信息</span></span><br><span class="line">                imgkit.from_file(html_file, img_obj, options=&#123;<span class="string">"encoding"</span>: <span class="string">"UTF-8"</span>, <span class="string">"width"</span>: <span class="number">1920</span>, <span class="string">"quality"</span>: <span class="number">100</span>&#125;)</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    html_list = ReportImage.excel_html(<span class="string">"data.xlsx"</span>, <span class="string">"./"</span>)</span><br><span class="line">    ReportImage.html_image(html_list, <span class="string">"./"</span>)</span><br></pre></td></tr></table></figure><h4 id="jiraSearch-py脚本实现文件"><a href="#jiraSearch-py脚本实现文件" class="headerlink" title="jiraSearch.py脚本实现文件"></a><code>jiraSearch.py</code>脚本实现文件</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># This code sample uses the 'requests' library:</span></span><br><span class="line"><span class="comment"># http://docs.python-requests.org</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> tablib</span><br><span class="line"><span class="keyword">from</span> requests.auth <span class="keyword">import</span> HTTPBasicAuth</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> excel2Image</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">执行方式：python jiraSearch.py webhook mobiles</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">WEBHOOK_TOKEN = str(sys.argv[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    MOBILES = str(sys.argv[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    MOBILES = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">mobiles = <span class="string">""</span></span><br><span class="line"><span class="keyword">if</span> MOBILES:</span><br><span class="line">    atMobiles = MOBILES.split(<span class="string">','</span>)</span><br><span class="line">    <span class="keyword">for</span> mobile <span class="keyword">in</span> atMobiles:</span><br><span class="line">        mobiles += <span class="string">"@"</span> + mobile</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    atMobiles = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getIssuesList</span><span class="params">()</span>:</span></span><br><span class="line">    issuesSearchUrl = <span class="string">"https://jira.shadow.com/rest/api/2/search"</span></span><br><span class="line">    filterUrl = <span class="string">"https://jira.shadow.com/rest/api/2/filter/26517"</span></span><br><span class="line">    auth = HTTPBasicAuth(<span class="string">"taoyi"</span>, <span class="string">"XXXXXXXXXXXXXXXX"</span>)</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"Accept"</span>: <span class="string">"application/json"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    filterResp = requests.request(</span><br><span class="line">        <span class="string">"GET"</span>,</span><br><span class="line">        filterUrl,</span><br><span class="line">        headers=headers,</span><br><span class="line">        auth=auth</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    jql = filterResp.json()[<span class="string">'jql'</span>]</span><br><span class="line"></span><br><span class="line">    query = &#123;<span class="string">'jql'</span>: jql&#125;</span><br><span class="line"></span><br><span class="line">    response = requests.request(</span><br><span class="line">        <span class="string">"GET"</span>,</span><br><span class="line">        issuesSearchUrl,</span><br><span class="line">        headers=headers,</span><br><span class="line">        params=query,</span><br><span class="line">        auth=auth</span><br><span class="line">    )</span><br><span class="line">    issuesList = response.json()[<span class="string">'issues'</span>]</span><br><span class="line">    <span class="comment"># print(issuesList)</span></span><br><span class="line">    <span class="keyword">return</span> issuesList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getShowWords</span><span class="params">()</span>:</span></span><br><span class="line">    issueWords = []</span><br><span class="line">    issuesList = getIssuesList()</span><br><span class="line">    <span class="keyword">for</span> issue <span class="keyword">in</span> issuesList:</span><br><span class="line">        issueWords.append(&#123;<span class="string">'类型'</span>: issue[<span class="string">'fields'</span>][<span class="string">'issuetype'</span>][<span class="string">'name'</span>],</span><br><span class="line">                           <span class="string">'关键字'</span>: issue[<span class="string">'key'</span>],</span><br><span class="line">                           <span class="string">'概要'</span>: issue[<span class="string">'fields'</span>][<span class="string">'summary'</span>],</span><br><span class="line">                           <span class="string">'报告人'</span>: issue[<span class="string">'fields'</span>][<span class="string">'reporter'</span>][<span class="string">'displayName'</span>],</span><br><span class="line">                           <span class="string">'经办人'</span>: issue[<span class="string">'fields'</span>][<span class="string">'assignee'</span>][<span class="string">'displayName'</span>],</span><br><span class="line">                           <span class="string">'优先级'</span>: issue[<span class="string">'fields'</span>][<span class="string">'priority'</span>][<span class="string">'name'</span>],</span><br><span class="line">                           <span class="string">'状态'</span>: issue[<span class="string">'fields'</span>][<span class="string">'status'</span>][<span class="string">'name'</span>],</span><br><span class="line">                           <span class="string">'创建时间'</span>: issue[<span class="string">'fields'</span>][<span class="string">'created'</span>].replace(<span class="string">'T'</span>, <span class="string">' '</span>).split(<span class="string">'.'</span>)[<span class="number">0</span>],</span><br><span class="line">                           <span class="string">'更新时间'</span>: issue[<span class="string">'fields'</span>][<span class="string">'updated'</span>].replace(<span class="string">'T'</span>, <span class="string">' '</span>).split(<span class="string">'.'</span>)[<span class="number">0</span>]&#125;)</span><br><span class="line"></span><br><span class="line">    print(issueWords)</span><br><span class="line">    <span class="keyword">return</span> issueWords</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">json2Excel</span><span class="params">()</span>:</span></span><br><span class="line">    rows = getShowWords()</span><br><span class="line">    <span class="comment"># 将json中的key作为header, 也可以自定义header（列名）</span></span><br><span class="line">    header = tuple([i <span class="keyword">for</span> i <span class="keyword">in</span> rows[<span class="number">0</span>].keys()])</span><br><span class="line">    <span class="comment"># print('header',header)</span></span><br><span class="line">    data = []</span><br><span class="line">    <span class="comment"># 循环里面的字典，将value作为数据写入进去</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">        body = []</span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> row.values():</span><br><span class="line">            body.append(v)</span><br><span class="line">        data.append(tuple(body))</span><br><span class="line">    <span class="comment"># print('data',data)</span></span><br><span class="line">    data = tablib.Dataset(*data, headers=header)</span><br><span class="line">    print(data)</span><br><span class="line">    open(<span class="string">'data.xlsx'</span>, <span class="string">'wb'</span>).write(data.xlsx)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getBugImageUrl</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'https://sm.ms/api/v2/upload'</span></span><br><span class="line">    headers = &#123;<span class="string">'Authorization'</span>: <span class="string">'dq2u9BXgV2AzsZm7UUzxz8heTxl4ojmM'</span>&#125;</span><br><span class="line">    file_obj = open(<span class="string">'./0.png'</span>, <span class="string">'rb'</span>)</span><br><span class="line">    file = &#123;<span class="string">'smfile'</span>: file_obj&#125;  <span class="comment"># 参数名称必须为smfile</span></span><br><span class="line">    response = requests.post(url, files=file, headers=headers)</span><br><span class="line">    print(response.json())</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> response.json()[<span class="string">'success'</span>]:</span><br><span class="line">        bugImageUrl = response.json()[<span class="string">'images'</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bugImageUrl = response.json()[<span class="string">'data'</span>][<span class="string">'url'</span>]</span><br><span class="line">    print(bugImageUrl)</span><br><span class="line">    <span class="keyword">return</span> bugImageUrl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 钉钉自定义机器人文档地址：https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendMarkdownDing</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 1、构建url</span></span><br><span class="line">    webhook = <span class="string">"https://oapi.dingtalk.com/robot/send?access_token="</span> + WEBHOOK_TOKEN</span><br><span class="line">    <span class="comment"># 2、构建一下请求头部</span></span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>,</span><br><span class="line">        <span class="string">"Charset"</span>: <span class="string">"UTF-8"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 3、构建请求数据</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">"msgtype"</span>: <span class="string">"markdown"</span>,</span><br><span class="line">        <span class="string">"markdown"</span>: &#123;</span><br><span class="line">            <span class="string">"title"</span>: <span class="string">"未解决BUG列表，请及时处理！"</span>,</span><br><span class="line">            <span class="string">"text"</span>: <span class="string">'#### **未解决BUG列表，请及时处理！**\n\n'</span></span><br><span class="line">                    <span class="string">' &gt;https://jira.shadow.com/issues/?filter=26517\n\n'</span></span><br><span class="line">                    <span class="string">' &gt;%s\n\n'</span> % mobiles</span><br><span class="line">                    + <span class="string">'![]('</span> + getBugImageUrl() + <span class="string">')'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"at"</span>: &#123;</span><br><span class="line">            <span class="string">"atMobiles"</span>: atMobiles,</span><br><span class="line">            <span class="string">"isAtAll"</span>: <span class="literal">False</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    print(data)</span><br><span class="line">    <span class="comment"># 4、对请求的数据进行json封装</span></span><br><span class="line">    sendData = json.dumps(data)  <span class="comment"># 将字典类型数据转化为json格式</span></span><br><span class="line">    sendData = sendData.encode(<span class="string">"utf-8"</span>)  <span class="comment"># python3的Request要求data为byte类型</span></span><br><span class="line">    <span class="comment"># 5、发送请求</span></span><br><span class="line">    resp = requests.post(url=webhook, data=sendData, headers=header)</span><br><span class="line">    <span class="comment"># print(resp.json())</span></span><br><span class="line">    <span class="keyword">return</span> resp.json()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    json2Excel()</span><br><span class="line">    html_list = excel2Image.ReportImage.excel_html(<span class="string">"data.xlsx"</span>, <span class="string">"./"</span>)</span><br><span class="line">    excel2Image.ReportImage.html_image(html_list, <span class="string">"./"</span>)</span><br><span class="line">    sendMarkdownDing()</span><br></pre></td></tr></table></figure><h3 id="最后图片效果如下"><a href="#最后图片效果如下" class="headerlink" title="最后图片效果如下"></a>最后图片效果如下</h3><img src="/2020/10/14/2020-10-14-Ding-Jira-Issues-List-Report/%E7%BC%BA%E9%99%B7%E5%9B%BE.png" title="缺陷图">]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>jira</tag>
      </tags>
  </entry>
  <entry>
    <title>Xpath定位方法总结</title>
    <url>/2020/07/13/2020-07-13-Xpath-Location-Summary/</url>
    <content><![CDATA[<h3 id="浏览器控制台下，用Xpath命令调试"><a href="#浏览器控制台下，用Xpath命令调试" class="headerlink" title="浏览器控制台下，用Xpath命令调试"></a>浏览器控制台下，用<code>Xpath</code>命令调试</h3><ol><li><p>查看元素是否找到，如果有返回一个列表：<code>$x(&#39;xpath路径&quot;)][text()=&quot;项目总数&quot;]&#39;)</code><br>示例：</p><figure class="highlight xpath"><table><tr><td class="code"><pre><span class="line"><span class="variable">$x</span>(<span class="string">"//*[text()='确认']"</span>)</span><br><span class="line">(<span class="number">4</span>) [span.confirm, span.confirm, span.confirm, span.confirm]</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>实现元素点击：<code>$x(&#39;xpath路径&quot;)][text()=&quot;项目总数&quot;]&#39;)[0].click()</code><br>示例：</p><figure class="highlight xpath"><table><tr><td class="code"><pre><span class="line"><span class="variable">$x</span>(<span class="string">"//*[text()='确认']"</span>)[<span class="number">0</span>].click()</span><br></pre></td></tr></table></figure></li><li><p>调试模式下的其它元素定位方法</p><img src="/2020/07/13/2020-07-13-Xpath-Location-Summary/web%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%91%BD%E4%BB%A4%E8%B0%83%E8%AF%95.png" title="web控制台命令调试"></li></ol><h3 id="定位路径表达式"><a href="#定位路径表达式" class="headerlink" title="定位路径表达式"></a>定位路径表达式</h3><table><thead><tr><th>表达式</th><th>实例</th><th>描述</th></tr></thead><tbody><tr><td><code>/</code></td><td><code>xpath(&#39;//div&#39;)</code></td><td>路径以<code>/</code>开始，表示找到满足绝对路径的元素</td></tr><tr><td><code>//</code></td><td><code>xpath(&#39;//div&#39;)</code></td><td>路径以<code>//</code>开始，表示找到文档中所有满足<code>//</code>后规则的元素，如<code>//div</code>表示找到所有<code>div</code>元素</td></tr><tr><td><code>*</code></td><td><code>xpath（&#39;/div/*&#39;)</code></td><td>表示选择所有元素</td></tr><tr><td>[表达式]</td><td><code>xpath(&#39;/body/div[1]&#39;)</code><br><code>xpath(&#39;/body/div[@class]&#39;)</code><br><code>xpath(&#39;/body/div[@class=&quot;main&quot;]&#39;)</code></td><td>①[数字]：表示选择第几个，其中[last()]表示最后一个<br>②[@属性]限定满足该属性，如<code>//TEXT[@name]</code>表示含有<code>name</code>属性的<code>TEXT</code>元素；<code>//TEXT[not(@*)]</code>表示所有没有属性的<code>TEXT</code>元素；<br>③<code>/TEXT[@name=&quot;text&quot;]</code>表示所有含有name属性且其值为<code>text</code>的<code>TEXT</code>元素</td></tr><tr><td>&#124;</td><td>xpath(‘//div&#124;//table’)</td><td>逻辑或，将多个路径合并到一起，如<code>//BBB</code> &#124; <code>/AAA</code> 选择所有BBB元素和根元素AAA；可合并的路径数目没有限制</td></tr></tbody></table><h3 id="Xpath定位方法"><a href="#Xpath定位方法" class="headerlink" title="Xpath定位方法"></a><code>Xpath</code>定位方法</h3><ol><li><p>绝对路径定位</p><p>就是从根部开始找，一级一级往下走，如果有同级别的需要用[]标明序号，从1开始</p><figure class="highlight xpath"><table><tr><td class="code"><pre><span class="line">// CSDN博客的博主头像</span><br><span class="line">//*[<span class="built_in">@id</span>=<span class="string">"csdn_container_tool"</span>]/div/ul/li[<span class="number">6</span>]/div[<span class="number">1</span>]/a/img</span><br><span class="line">// CSDN博客的CSDNlogo</span><br><span class="line">//*[<span class="built_in">@id</span>=<span class="string">"nav-left-menu"</span>]/li[<span class="number">1</span>]/a/img</span><br><span class="line"></span><br><span class="line">// CSDN博客的搜索框的两种xpath定位方法</span><br><span class="line">//*[<span class="built_in">@id</span>=<span class="string">"toolber-keyword"</span>]</span><br><span class="line">/html/body/div[<span class="number">4</span>]/div/ul/div/input</span><br></pre></td></tr></table></figure></li><li><p>相对路径定位</p><figure class="highlight xpath"><table><tr><td class="code"><pre><span class="line">/html/body/div[<span class="number">1</span>]/div[<span class="number">2</span>]/div[<span class="number">1</span>]/div[<span class="number">1</span>]/form/span[<span class="number">1</span>]/input</span><br></pre></td></tr></table></figure><p>以下都以定位到<code>input</code>做说明。</p><p>2.1 元素本身查找（@表示属性）</p><figure class="highlight xpath"><table><tr><td class="code"><pre><span class="line">//input[<span class="built_in">@id</span>=<span class="string">"kw"</span>]</span><br><span class="line">//*[<span class="built_in">@id</span>=<span class="string">"kw"</span>]</span><br><span class="line">//*[@type=<span class="string">"text"</span>]</span><br></pre></td></tr></table></figure><p><code>//input</code>表示匹配<code>input</code>标签的所有元素<br><code>//*</code>表示匹配所有元素的标签</p><p>2.2 布尔值写法<br>如果<code>input</code>标签中，<code>id</code>不是唯一的，<code>type</code>也不是唯一的，但在该页面中包含该<code>id</code>和<code>type</code>的只有这个元素时，就可以用组合的方式定位</p><figure class="highlight xpath"><table><tr><td class="code"><pre><span class="line">//*[<span class="built_in">@id</span>=<span class="string">"kw"</span> <span class="keyword">and</span> @type=<span class="string">"text"</span>]</span><br><span class="line">//*[<span class="built_in">@id</span>=<span class="string">"kw"</span> <span class="keyword">or</span> @type=<span class="string">"text"</span>]</span><br></pre></td></tr></table></figure><p>2.3 找父级<br>如果自己没有唯一的标志，那么就找自己的上级（父级），或者上级的上级，以此类推。</p><figure class="highlight xpath"><table><tr><td class="code"><pre><span class="line">//找父级</span><br><span class="line">//span[@class=<span class="string">"s_ipt_w"</span>]/input</span><br><span class="line">//找父级的父级</span><br><span class="line">//form[<span class="built_in">@id</span>=<span class="string">"form"</span>]/span[<span class="number">1</span>]/input</span><br></pre></td></tr></table></figure><p>2.4 跳级<br>如果需要定位的元素在该页面不是唯一，但在某个容器内是唯一的，当然那个容器必须要有唯一的标志；<br>该方法要保证在某容器内该元素是唯一的。</p><figure class="highlight xpath"><table><tr><td class="code"><pre><span class="line">//div[<span class="built_in">@id</span>=<span class="string">"wrapper"</span>]//input[<span class="built_in">@id</span>=<span class="string">"kw"</span>]</span><br></pre></td></tr></table></figure></li><li><p><code>Xpath</code>函数过滤</p><p>3.1 <code>contains()</code></p><figure class="highlight xpath"><table><tr><td class="code"><pre><span class="line">//div<span class="built_in">[contains</span>(<span class="built_in">@id</span>,<span class="string">'in'</span>)]</span><br></pre></td></tr></table></figure><p>表示选择<code>id</code>中包含有<code>in</code>的<code>div</code>节点</p><p>3.2 <code>text()</code></p><figure class="highlight xpath"><table><tr><td class="code"><pre><span class="line">//a[<span class="type">text</span>()=<span class="string">'baidu'</span>]</span><br></pre></td></tr></table></figure><p>由于一个节点的文本值不属于属性，比如<code>&lt;a class=&quot;baidu&quot; herf=&quot;http://www.baidu.com&quot;&gt;baidu&lt;/a&gt;</code>，所以用<code>text()</code>函数来匹配节点</p><p>3.3 <code>last()</code><br>表示取列表的最后一个</p><p>3.4 <code>start-with()</code></p><figure class="highlight xpath"><table><tr><td class="code"><pre><span class="line">//div<span class="built_in">[starts-with</span>(<span class="built_in">@id</span>,<span class="string">'in'</span>)]</span><br></pre></td></tr></table></figure><p>表示选择以<code>in</code>开头的<code>id</code>属性的<code>div</code>节点</p><p>3.5 <code>not()</code>函数</p><figure class="highlight xpath"><table><tr><td class="code"><pre><span class="line">//input[<span class="built_in">@name</span>=<span class="string">'identity'</span> <span class="keyword">and</span><span class="built_in"> not</span><span class="built_in">(contains</span>(@class, <span class="string">'a'</span>))]</span><br></pre></td></tr></table></figure><p>表示匹配出<code>name</code>为<code>identity</code>，并且<code>class</code>的值中不包含a的<code>input</code>节点；<br>not()函数通常与返回值为<code>true or false</code>的函数组合使用，比如<code>contains()</code>，<code>starts-with()</code>等；<br>有一种特殊情况需要注意：要匹配出<code>input</code>节点下所有的<code>id</code>属性<code>//input[@id]</code>，要匹配出<code>input</code>节点下不含有<code>id</code>属性<code>//input[not(@id)]</code></p></li><li><p>轴&amp;步</p><p>轴可定义相对于当前节点的节点集。</p><table><thead><tr><th>轴名称</th><th>描述</th></tr></thead><tbody><tr><td><code>ancestor</code></td><td>选取当前节点的所有先辈（父、祖父等）。</td></tr><tr><td><code>ancestor-or-self</code></td><td>选取当前节点的所有先辈（父、祖父等）以及当前节点本身。</td></tr><tr><td><code>attribute</code></td><td>选取当前节点的所有属性。</td></tr><tr><td><code>child</code></td><td>选取当前节点的所有子元素。</td></tr><tr><td><code>descendant</code></td><td>选取当前节点的所有后代元素（子、孙等）。</td></tr><tr><td><code>descendant-or-self</code></td><td>选取当前节点的所有后代元素（子、孙等）以及当前节点本身。</td></tr><tr><td><code>following</code></td><td>选取文档中当前节点的结束标签之后的所有节点。</td></tr><tr><td><code>following-sibling</code></td><td>选取当前节点之后的所有同级节点</td></tr><tr><td><code>namespace</code></td><td>选取当前节点的所有命名空间节点。</td></tr><tr><td><code>parent</code></td><td>选取当前节点的父节点。</td></tr><tr><td><code>preceding</code></td><td>选取文档中当前节点的开始标签之前的所有节点。</td></tr><tr><td><code>preceding-sibling</code></td><td>选取当前节点之前的所有同级节点。</td></tr><tr><td><code>self</code></td><td>选取当前节点。</td></tr></tbody></table><p>语法：<code>轴名称::节点测试[谓语]</code></p></li></ol><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><ol><li><p>实例1：</p><table><thead><tr><th>例子</th><th>结果</th></tr></thead><tbody><tr><td>child::book</td><td>选取所有属于当前节点的子元素的 book 节点。</td></tr><tr><td>attribute::lang</td><td>选取当前节点的 lang 属性。</td></tr><tr><td>child::*</td><td>选取当前节点的所有子元素。</td></tr><tr><td>attribute::*</td><td>选取当前节点的所有属性。</td></tr><tr><td>child::text()</td><td>选取当前节点的所有文本子节点。</td></tr><tr><td>child::node()</td><td>选取当前节点的所有子节点。</td></tr><tr><td>descendant::book</td><td>选取当前节点的所有 book 后代。</td></tr><tr><td>ancestor::book</td><td>选择当前节点的所有 book 先辈。</td></tr><tr><td>ancestor-or-self::book</td><td>选取当前节点的所有 book 先辈以及当前节点（如果此节点是 book 节点）</td></tr><tr><td>child::*/child::price</td><td>选取当前节点的所有 price 孙节点。</td></tr></tbody></table></li><li><p>实例2：复杂HTML列表定位</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"carInfo"</span> <span class="attr">class</span>=<span class="string">"mt48"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>车辆信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"label mr12"</span>&gt;</span>车型<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"value"</span>&gt;</span>2016款 锐行 1.5L 手动风尚版<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"label mr12"</span>&gt;</span>外观颜色<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"value"</span>&gt;</span>泰晤士青<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"label mr12"</span>&gt;</span>内饰颜色<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"value"</span>&gt;</span>黑色<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"label mr12"</span>&gt;</span>车型编码<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"value"</span>&gt;</span>15004-n<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"label mr12"</span>&gt;</span>车架号<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"value"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"princeInfo"</span> <span class="attr">class</span>=<span class="string">"mt48"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>金额信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"label mr12"</span>&gt;</span>裸车价<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"value"</span>&gt;</span>¥ 0.06<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"label mr12"</span>&gt;</span>装潢合计<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"value"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"label mr12"</span>&gt;</span>金融合计<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"value"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"label mr12"</span>&gt;</span>保险合计<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"value"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"label mr12"</span>&gt;</span>延保金额<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"value"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"label mr12"</span>&gt;</span>代办合计<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"value"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"label mr12"</span>&gt;</span>实际成交价<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-f7a7d94e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"value"</span>&gt;</span>¥ 0.06<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2020/07/13/2020-07-13-Xpath-Location-Summary/UI%E5%B1%95%E7%A4%BA.png" title="UI展示"><p>UI组件化获取label对应的value：</p><figure class="highlight xpath"><table><tr><td class="code"><pre><span class="line">//div[@class=<span class="string">'title'</span> <span class="keyword">and</span><span class="built_in"> contains</span>(<span class="type">text</span>(),<span class="string">'"+分组名+"'</span>)]/parent::div/div[@class=<span class="string">'content'</span>]/descendant::div<span class="built_in">[contains</span>(@class,<span class="string">'label'</span>) <span class="keyword">and</span> <span class="type">text</span>()=<span class="string">'"+标签+"'</span>]/parent::div/div[@class=<span class="string">'value'</span>]</span><br></pre></td></tr></table></figure><ul><li>分组名：选择的<code>title</code>的名称</li><li>标签：选择的<code>label</code>的名称</li><li><code>//div[@class=&#39;title&#39; and contains(text(),&#39;&quot;+分组名+&quot;&#39;)]</code>：选取<code>div</code>中，<code>class</code>等于<code>title</code>，并且<code>div</code>中文案包含对应的<code>分组名</code>的节点</li><li><code>parent::div/div[@class=&#39;content&#39;]</code>：选取父级<code>div</code>节点的子<code>div</code>节点中，<code>class</code>等于<code>content</code>的节点</li><li><code>descendant::div[contains(@class,&#39;label&#39;) and text()=&#39;&quot;+标签+&quot;&#39;]</code>：选取当前节点所有的<code>div</code>子节点中，<code>class</code>包含<code>label</code>，并且文本等于<code>标签</code>值的节点</li><li><code>parent::div/div[@class=&#39;value&#39;]</code>：选取父级<code>div</code>节点的子<code>div</code>节点中，<code>class</code>等于<code>value</code>的节点</li></ul></li><li><p>实例3：Python中xpath取值</p><p>可以从需要的值开始往外取值，直到取值唯一就OK</p><img src="/2020/07/13/2020-07-13-Xpath-Location-Summary/%E7%A4%BA%E4%BE%8BHTML%E4%BB%A3%E7%A0%81.png" title="示例HTML代码"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = etree.HTML(resp)</span><br><span class="line">reportName = html.xpath(<span class="string">"//caption/h4/text()"</span>)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><img src="/2020/07/13/2020-07-13-Xpath-Location-Summary/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BF%90%E8%A1%8C.png" title="浏览器控制台运行"></li></ol>]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>xpath</tag>
      </tags>
  </entry>
  <entry>
    <title>Allure报告结果钉钉发送Python实现</title>
    <url>/2020/10/10/2020-10-10-Ding-Allure-Detail-Report/</url>
    <content><![CDATA[<h4 id="Jenkins中的Allure插件，增加Owner插件"><a href="#Jenkins中的Allure插件，增加Owner插件" class="headerlink" title="Jenkins中的Allure插件，增加Owner插件"></a>Jenkins中的Allure插件，增加Owner插件</h4><ol><li><p>Jenkins中配置Allure插件，目录为<code>System Configuation -&gt; Global Tool Configuration</code>，从中找到<code>Allure Commandline</code></p><img src="/2020/10/10/2020-10-10-Ding-Allure-Detail-Report/AllureCommandline.png" title="AllureCommandline"><a id="more"></a></li><li><p>下载<code>owners-failed-plugin</code>插件<br><a href="https://pan.baidu.com/s/1qJF5V2Eb8w946DgYtgNUkA" target="_blank" rel="noopener">插件地址</a> 提取码: ifqw</p></li><li><p>把插件加入<code>Allure Commandline</code>的安装目录中<br>安装完插件后，可以在Jenkins任务的执行机上，也就是jenkins任务真正执行的机器上，会有一个<code>workspace/tools/ru.yandex.qatools.allure.jenkins.tools.AllureCommandlineInstallation/Allure_Commandline/plugins</code>目录，这个<code>workspace</code>也就是Jenkins的一个工作空间<br><code>plugins</code>目录下，就是<code>Allure</code>插件自带的一些插件<br>我们把第二步下载的插件解压后的文件夹，放到该目录下，<code>owners-failed-plugin</code>展示如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># shadow @ domain in ~/jenkins_slave/workspace/tools/ru.yandex.qatools.allure.jenkins.tools.AllureCommandlineInstallation/Allure_Commandline/plugins [15:55:35] </span></span><br><span class="line">$ ll</span><br><span class="line">total 48K</span><br><span class="line">drwxrwxr-x 3 shadow shadow 4.0K Sep  9 14:45 behaviors-plugin</span><br><span class="line">drwxrwxr-x 3 shadow shadow 4.0K Sep  9 14:45 custom-logo-plugin</span><br><span class="line">drwxrwxr-x 3 shadow shadow 4.0K Sep  9 14:45 jira-plugin</span><br><span class="line">drwxrwxr-x 2 shadow shadow 4.0K Sep  9 14:45 junit-xml-plugin</span><br><span class="line">drwxr-xr-x 3 shadow shadow 4.0K Sep 10 09:31 owners-failed-plugin</span><br><span class="line">drwxrwxr-x 3 shadow shadow 4.0K Sep  9 14:45 packages-plugin</span><br><span class="line">-rwxrwxr-x 1 shadow shadow   85 Jul  7 10:18 README.txt</span><br><span class="line">drwxrwxr-x 3 shadow shadow 4.0K Sep  9 14:45 screen-diff-plugin</span><br><span class="line">drwxrwxr-x 2 shadow shadow 4.0K Sep  9 14:45 trx-plugin</span><br><span class="line">drwxrwxr-x 3 shadow shadow 4.0K Sep  9 14:45 xctest-plugin</span><br><span class="line">drwxrwxr-x 3 shadow shadow 4.0K Sep  9 14:45 xray-plugin</span><br><span class="line">drwxrwxr-x 2 shadow shadow 4.0K Sep  9 14:45 xunit-xml-plugin</span><br></pre></td></tr></table></figure><p>然后需要退一层目录，把插件的配置写入配置文件中，不然就无法被调用到</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> shadow @ domain <span class="keyword">in</span> ~/jenkins_slave/workspace/tools/ru.yandex.qatools.allure.jenkins.tools.AllureCommandlineInstallation/Allure_Commandline/plugins [15:55:51] </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ..</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> shadow @ domain <span class="keyword">in</span> ~/jenkins_slave/workspace/tools/ru.yandex.qatools.allure.jenkins.tools.AllureCommandlineInstallation/Allure_Commandline [16:03:19] </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ll</span></span><br><span class="line">total 16K</span><br><span class="line">drwxrwxr-x  2 shadow shadow 4.0K Sep  9 14:45 bin</span><br><span class="line">drwxrwxr-x  2 shadow shadow 4.0K Sep 10 09:32 config</span><br><span class="line">drwxrwxr-x  3 shadow shadow 4.0K Sep 10 09:06 lib</span><br><span class="line">drwxrwxr-x 13 shadow shadow 4.0K Sep 10 09:31 plugins</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> shadow @ domain <span class="keyword">in</span> ~/jenkins_slave/workspace/tools/ru.yandex.qatools.allure.jenkins.tools.AllureCommandlineInstallation/Allure_Commandline [16:03:20] </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> config </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> shadow @ domain <span class="keyword">in</span> ~/jenkins_slave/workspace/tools/ru.yandex.qatools.allure.jenkins.tools.AllureCommandlineInstallation/Allure_Commandline/config [16:03:25] </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ll</span></span><br><span class="line">total 8.0K</span><br><span class="line">-rwxrwxr-x 1 shadow shadow   0 Jul  7 10:18 allure-cucumber.yml</span><br><span class="line">-rwxrwxr-x 1 shadow shadow  46 Jul  7 10:18 allure-junit.yml</span><br><span class="line">-rwxrwxr-x 1 shadow shadow 205 Sep 10 09:32 allure.yml</span><br></pre></td></tr></table></figure><p>编辑allure.yml文件，写入<code>owners-failed-plugin</code>配置如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">plugins:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">junit-xml-plugin</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">xunit-xml-plugin</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">trx-plugin</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">behaviors-plugin</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">packages-plugin</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">screen-diff-plugin</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">xctest-plugin</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">jira-plugin</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">xray-plugin</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">owners-failed-plugin</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="读取报告信息"><a href="#读取报告信息" class="headerlink" title="读取报告信息"></a>读取报告信息</h4><ul><li>报告总体信息：”<a href="http://jenkins.shadow.com/job/&quot;" target="_blank" rel="noopener">http://jenkins.shadow.com/job/&quot;</a> + JOB_NAME + “/allure/widgets/summary.json”</li><li>Owner具体信息：”<a href="http://jenkins.shadow.com/job/&quot;" target="_blank" rel="noopener">http://jenkins.shadow.com/job/&quot;</a> + JOB_NAME + “/allure/data/owners.json”</li></ul><h4 id="脚本主要方法说明"><a href="#脚本主要方法说明" class="headerlink" title="脚本主要方法说明"></a>脚本主要方法说明</h4><ol><li><p><code>getSummary()</code> 方法返回总体信息</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">108</span>,</span><br><span class="line">    <span class="attr">"broken"</span>: <span class="number">25</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">196</span>,</span><br><span class="line">    <span class="attr">"passed"</span>: <span class="number">1055</span>,</span><br><span class="line">    <span class="attr">"unknown"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">1384</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>getResultDetails()</code> 方法返回Owner具体信息，并对异常数据做清理</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"张三"</span>,</span><br><span class="line">        <span class="attr">"children"</span>: [&#123;<span class="attr">""</span>: <span class="string">""</span>, <span class="attr">"status"</span>: <span class="string">"passed"</span>&#125;, &#123;<span class="attr">""</span>: <span class="string">""</span>, <span class="attr">"status"</span>: <span class="string">"failed"</span>&#125;, &#123;<span class="attr">""</span>: <span class="string">""</span>, <span class="attr">"status"</span>: <span class="string">"broken"</span>&#125;, &#123;<span class="attr">""</span>: <span class="string">""</span>, <span class="attr">"status"</span>: <span class="string">"skipped"</span>&#125;],</span><br><span class="line">        <span class="attr">"uid"</span>: <span class="string">"e1aaed47c8239f38d3450e9dfd3e7646"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"李四"</span>,</span><br><span class="line">        <span class="attr">"children"</span>: [&#123;<span class="attr">""</span>: <span class="string">""</span>, <span class="attr">"status"</span>: <span class="string">"passed"</span>&#125;, &#123;<span class="attr">""</span>: <span class="string">""</span>, <span class="attr">"status"</span>: <span class="string">"failed"</span>&#125;, &#123;<span class="attr">""</span>: <span class="string">""</span>, <span class="attr">"status"</span>: <span class="string">"broken"</span>&#125;, &#123;<span class="attr">""</span>: <span class="string">""</span>, <span class="attr">"status"</span>: <span class="string">"skipped"</span>&#125;],</span><br><span class="line">        <span class="attr">"uid"</span>: <span class="string">"90e00f4c3e58fc50b3766d36fe294203"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p><code>getPersonCounts()</code> 方法返回每个Owner的具体用例数据</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"张三"</span>,</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">111</span>,</span><br><span class="line">    <span class="attr">"passed"</span>: <span class="number">110</span>,</span><br><span class="line">    <span class="attr">"broken"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"李四"</span>,</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">56</span>,</span><br><span class="line">    <span class="attr">"passed"</span>: <span class="number">56</span>,</span><br><span class="line">    <span class="attr">"broken"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p><code>spillDingText()</code> 方法返回钉钉发送消息体中的<code>text</code></p></li><li><p><code>sendMarkdownDing()</code> 方法以markdown格式组织消息体，发送钉钉通知</p></li></ol><h4 id="完整脚本"><a href="#完整脚本" class="headerlink" title="完整脚本"></a>完整脚本</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">执行方式：python sendDingSummary.py Jenkins_Job webhook mobiles</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Jenkins任务的名称</span></span><br><span class="line">JOB_NAME = str(sys.argv[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只需要最后那个Token</span></span><br><span class="line">WEBHOOK_TOKEN = str(sys.argv[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手机号用英文逗号分隔，可以不传</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    MOBILES = str(sys.argv[<span class="number">3</span>])</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    MOBILES = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">reportUrl = <span class="string">'http://jenkins.shadow.com/job/'</span> + JOB_NAME + <span class="string">'/allure/'</span></span><br><span class="line"></span><br><span class="line">mobiles = <span class="string">""</span></span><br><span class="line"><span class="keyword">if</span> MOBILES:</span><br><span class="line">    atMobiles = MOBILES.split(<span class="string">','</span>)</span><br><span class="line">    <span class="keyword">for</span> mobile <span class="keyword">in</span> atMobiles:</span><br><span class="line">        mobiles += <span class="string">"@"</span> + mobile</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    atMobiles = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSummary</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://jenkins.shadow.com/job/'</span> + JOB_NAME + <span class="string">'/allure/widgets/summary.json'</span></span><br><span class="line">    summary = requests.get(url).json()[<span class="string">'statistic'</span>]</span><br><span class="line">    print(summary)</span><br><span class="line">    <span class="keyword">return</span> summary</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getResultDetails</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://jenkins.shadow.com/job/'</span> + JOB_NAME + <span class="string">'/allure/data/owners.json'</span></span><br><span class="line">    resultDetails = requests.get(url).json()[<span class="string">'children'</span>]</span><br><span class="line">    <span class="keyword">for</span> resultDetail <span class="keyword">in</span> resultDetails:</span><br><span class="line">        <span class="keyword">if</span> resultDetail.get(<span class="string">"children"</span>) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            resultDetails.remove(resultDetail)</span><br><span class="line"></span><br><span class="line">    print(resultDetails)</span><br><span class="line">    <span class="keyword">return</span> resultDetails</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPersonCounts</span><span class="params">()</span>:</span></span><br><span class="line">    resultDetails = getResultDetails()</span><br><span class="line">    personCounts = []</span><br><span class="line">    <span class="keyword">for</span> resultDetail <span class="keyword">in</span> resultDetails:</span><br><span class="line">        passed = <span class="number">0</span></span><br><span class="line">        broken = <span class="number">0</span></span><br><span class="line">        skipped = <span class="number">0</span></span><br><span class="line">        failed = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> detail <span class="keyword">in</span> resultDetail[<span class="string">'children'</span>]:</span><br><span class="line">            <span class="keyword">if</span> detail[<span class="string">'status'</span>] == <span class="string">'passed'</span>:</span><br><span class="line">                passed += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> detail[<span class="string">'status'</span>] == <span class="string">'broken'</span>:</span><br><span class="line">                broken += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> detail[<span class="string">'status'</span>] == <span class="string">'skipped'</span>:</span><br><span class="line">                skipped += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> detail[<span class="string">'status'</span>] == <span class="string">'failed'</span>:</span><br><span class="line">                failed += <span class="number">1</span></span><br><span class="line">        personCounts.append(</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">'name'</span>: resultDetail[<span class="string">'name'</span>],</span><br><span class="line">                <span class="string">'total'</span>: len(resultDetail[<span class="string">'children'</span>]),</span><br><span class="line">                <span class="string">'passed'</span>: passed,</span><br><span class="line">                <span class="string">'broken'</span>: broken,</span><br><span class="line">                <span class="string">'skipped'</span>: skipped,</span><br><span class="line">                <span class="string">'failed'</span>: failed</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    print(personCounts)</span><br><span class="line">    <span class="keyword">return</span> personCounts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spillDingText</span><span class="params">()</span>:</span></span><br><span class="line">    summary = getSummary()</span><br><span class="line">    Failed = summary[<span class="string">'failed'</span>]</span><br><span class="line">    Broken = summary[<span class="string">'broken'</span>]</span><br><span class="line">    Skipped = summary[<span class="string">'skipped'</span>]</span><br><span class="line">    Passed = summary[<span class="string">'passed'</span>]</span><br><span class="line">    Total = summary[<span class="string">'total'</span>]</span><br><span class="line">    PassRate = <span class="string">'%.2f%%'</span> % (Passed / (Total - Skipped) * <span class="number">100</span>)</span><br><span class="line">    summaryText = <span class="string">"### **『%s』项目接口自动化每日报告！**\n\n"</span> \</span><br><span class="line">                  <span class="string">" &gt;%s\n\n"</span> \</span><br><span class="line">                  <span class="string">" &gt;**[&lt;font color=#0A83D1 &gt;PassRate:%s&lt;/font&gt;](%s)**\n\n"</span> \</span><br><span class="line">                  <span class="string">" &gt;**&lt;font color=#000000 &gt;Total:%d&lt;/font&gt;**\n\n"</span> \</span><br><span class="line">                  <span class="string">" &gt;**&lt;font color=#97CC64 &gt;Passed:%d&lt;/font&gt;, &lt;font color=#AAAAAA &gt;Skipped:%d&lt;/font&gt;**\n\n"</span> \</span><br><span class="line">                  <span class="string">" &gt;**&lt;font color=#FF0000 &gt;Failed:%d&lt;/font&gt;, &lt;font color=#FFD050 &gt;Broken:%d&lt;/font&gt;**\n\n"</span> \</span><br><span class="line">                  % (JOB_NAME, mobiles, PassRate, reportUrl, Total, Passed, Skipped, Failed, Broken)</span><br><span class="line"></span><br><span class="line">    personCounts = getPersonCounts()</span><br><span class="line">    personCountsText = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> personCount <span class="keyword">in</span> personCounts:</span><br><span class="line">        Name = personCount[<span class="string">'name'</span>]</span><br><span class="line">        Total = personCount[<span class="string">'total'</span>]</span><br><span class="line">        Failed = personCount[<span class="string">'failed'</span>]</span><br><span class="line">        Broken = personCount[<span class="string">'broken'</span>]</span><br><span class="line">        Skipped = personCount[<span class="string">'skipped'</span>]</span><br><span class="line">        Passed = personCount[<span class="string">'passed'</span>]</span><br><span class="line">        PassRate = <span class="string">'%.2f%%'</span> % (Passed / (Total - Skipped) * <span class="number">100</span>)</span><br><span class="line">        personCountText = <span class="string">"**『%s』：**\n\n"</span> \</span><br><span class="line">                          <span class="string">" &gt;&lt;font color=#000000 &gt;Total:%d&lt;/font&gt;, &lt;font color=#0A83D1 &gt;PassRate:%s&lt;/font&gt;\n\n"</span> \</span><br><span class="line">                          <span class="string">" &gt;&lt;font color=#97CC64 &gt;Passed:%d&lt;/font&gt;, &lt;font color=#AAAAAA &gt;Skipped:%d&lt;/font&gt;, "</span> \</span><br><span class="line">                          <span class="string">" &lt;font color=#FF0000 &gt;Failed:%d&lt;/font&gt;, &lt;font color=#FFD050 &gt;Broken:%d&lt;/font&gt;\n\n"</span> \</span><br><span class="line">                          % (Name, Total, PassRate, Passed, Skipped, Failed, Broken)</span><br><span class="line">        personCountsText += personCountText</span><br><span class="line">    text = summaryText + personCountsText</span><br><span class="line">    print(text)</span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendMarkdownDing</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 1、构建url</span></span><br><span class="line">    webhook = <span class="string">"https://oapi.dingtalk.com/robot/send?access_token="</span> + WEBHOOK_TOKEN</span><br><span class="line">    <span class="comment"># 2、构建一下请求头部</span></span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>,</span><br><span class="line">        <span class="string">"Charset"</span>: <span class="string">"UTF-8"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 3、构建请求数据</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">"msgtype"</span>: <span class="string">"markdown"</span>,</span><br><span class="line">        <span class="string">"markdown"</span>: &#123;</span><br><span class="line">            <span class="string">"title"</span>: <span class="string">"接口自动化执行报告，请及时跟进处理！"</span>,</span><br><span class="line">            <span class="string">"text"</span>: spillDingText()</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"at"</span>: &#123;</span><br><span class="line">            <span class="string">"atMobiles"</span>: atMobiles,</span><br><span class="line">            <span class="string">"isAtAll"</span>: <span class="literal">False</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    print(data)</span><br><span class="line">    <span class="comment"># 4、对请求的数据进行json封装</span></span><br><span class="line">    sendData = json.dumps(data)  <span class="comment"># 将字典类型数据转化为json格式</span></span><br><span class="line">    sendData = sendData.encode(<span class="string">"utf-8"</span>)  <span class="comment"># python3的Request要求data为byte类型</span></span><br><span class="line">    <span class="comment"># 5、发送请求</span></span><br><span class="line">    resp = requests.post(url=webhook, data=sendData, headers=header)</span><br><span class="line">    print(resp.json())</span><br><span class="line">    <span class="keyword">return</span> resp.json()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    sendMarkdownDing()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>allure</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask使用小结【更新ING】</title>
    <url>/2019/09/02/2019-09-02-Flask-problems-resolve/</url>
    <content><![CDATA[<h3 id="Can-39-t-locate-revision-identified-by-39-3ba21fe709f1-39-问题处理"><a href="#Can-39-t-locate-revision-identified-by-39-3ba21fe709f1-39-问题处理" class="headerlink" title="Can&#39;t locate revision identified by &#39;3ba21fe709f1&#39; 问题处理"></a><code>Can&#39;t locate revision identified by &#39;3ba21fe709f1&#39;</code> 问题处理</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TyMac in ~ [16:26:14] </span></span><br><span class="line">$ flask db migrate</span><br><span class="line">INFO  [alembic.runtime.migration] Context impl MySQLImpl.</span><br><span class="line">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span><br><span class="line">ERROR [root] Error: Can<span class="string">'t locate revision identified by '</span>3ba21fe709f1<span class="string">'</span></span><br></pre></td></tr></table></figure><a id="more"></a><ol><li>查询对应表中的数据<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM alembic_version;</span><br><span class="line">+-------------+</span><br><span class="line">| version_num |</span><br><span class="line">+-------------+</span><br><span class="line">| 3ba21fe709f1 |</span><br><span class="line">+-------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>删除版本控制的数据表<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP TABLE alembic_version;</span><br></pre></td></tr></table></figure></li><li>然后删除之前的<code>migrations</code>文件夹，重新生成迁移版本文件夹<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flask db init</span><br></pre></td></tr></table></figure></li><li>然后重新生成迁移版本文件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flask db migrate</span><br></pre></td></tr></table></figure></li></ol><h3 id="query-filter常见操作符"><a href="#query-filter常见操作符" class="headerlink" title="query.filter常见操作符"></a><code>query.filter</code>常见操作符</h3><ol><li>equals<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">query.filter(User.name == <span class="string">'ed'</span>)</span><br></pre></td></tr></table></figure></li><li>not equals<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">query.filter(User.name != <span class="string">'ed'</span>)</span><br></pre></td></tr></table></figure></li><li>LIKE<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">query.filter(User.name.like(<span class="string">'%ed%'</span>))</span><br></pre></td></tr></table></figure></li><li>IN<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">query.filter(User.name.in_([<span class="string">'ed'</span>, <span class="string">'wendy'</span>, <span class="string">'jack'</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># works with query objects too:</span></span><br><span class="line">query.filter(User.name.in_(session.query(User.name).filter(User.name.like(<span class="string">'%ed%'</span>))))</span><br></pre></td></tr></table></figure></li><li>NOT IN<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">query.filter(~User.name.in_([<span class="string">'ed'</span>, <span class="string">'wendy'</span>, <span class="string">'jack'</span>]))</span><br></pre></td></tr></table></figure></li><li>IS NULL<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">query.filter(User.name == <span class="literal">None</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># alternatively, if pep8/linters are a concern</span></span><br><span class="line">query.filter(User.name.is_(<span class="literal">None</span>))</span><br></pre></td></tr></table></figure></li><li>IS NOT NULL<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">query.filter(User.name != <span class="literal">None</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># alternatively, if pep8/linters are a concern</span></span><br><span class="line">query.filter(User.name.isnot(<span class="literal">None</span>))</span><br></pre></td></tr></table></figure></li><li>AND<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># use and_()</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> and_</span><br><span class="line">query.filter(and_(User.name == <span class="string">'ed'</span>, User.fullname == <span class="string">'Ed Jones'</span>))</span><br><span class="line"><span class="comment"># or send multiple expressions to .filter()</span></span><br><span class="line">query.filter(User.name == <span class="string">'ed'</span>, User.fullname == <span class="string">'Ed Jones'</span>)</span><br><span class="line"><span class="comment"># or chain multiple filter()/filter_by() calls</span></span><br><span class="line">query.filter(User.name == <span class="string">'ed'</span>).filter(User.fullname == <span class="string">'Ed Jones'</span>)</span><br></pre></td></tr></table></figure></li><li>OR<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> or_</span><br><span class="line">query.filter(or_(User.name == <span class="string">'ed'</span>, User.name == <span class="string">'wendy'</span>))</span><br></pre></td></tr></table></figure></li><li>MATCH<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">query.filter(User.name.match(<span class="string">'wendy'</span>))</span><br></pre></td></tr></table></figure></li></ol><h3 id="多条件筛选接口"><a href="#多条件筛选接口" class="headerlink" title="多条件筛选接口"></a>多条件筛选接口</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@api.route('/gitCommit/find', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="meta">@cost_count</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gitcommit_find</span><span class="params">()</span>:</span></span><br><span class="line">    data = request.json</span><br><span class="line">    projectName = data.get(<span class="string">'project_name'</span>)</span><br><span class="line">    branchName = data.get(<span class="string">'branch_name'</span>)</span><br><span class="line">    commitMessage = data.get(<span class="string">'title'</span>)</span><br><span class="line"></span><br><span class="line">    period = data.get(<span class="string">'period'</span>)</span><br><span class="line"></span><br><span class="line">    time_start = period[<span class="number">0</span>] <span class="keyword">if</span> period <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">    time_end = period[<span class="number">1</span>] <span class="keyword">if</span> period <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">    page = data.get(<span class="string">'page'</span>) <span class="keyword">if</span> data.get(<span class="string">'page'</span>) <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">    per_page = data.get(<span class="string">'sizePage'</span>) <span class="keyword">if</span> data.get(<span class="string">'sizePage'</span>) <span class="keyword">else</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    筛选的时候会遇到多个筛选条件，但都是非必填的</span></span><br><span class="line"><span class="string">    把存在的筛选条件添加到数组中，然后进行解包</span></span><br><span class="line"><span class="string">    最后把解包后的数据添加到筛选条件中</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    filterList = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> projectName <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        filterList.append(GitCommits.project_name)</span><br><span class="line">    <span class="keyword">if</span> branchName <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        filterList.append(GitCommits.branch_name)</span><br><span class="line">    <span class="keyword">if</span> commitMessage <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        filterList.append(GitCommits.title.like(<span class="string">'%'</span> + commitMessage + <span class="string">'%'</span>))</span><br><span class="line">    <span class="keyword">if</span> time_start <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        filterList.append(time_start &lt; GitCommits.create_at &lt; time_end)</span><br><span class="line"></span><br><span class="line">    _data = GitCommits.query.filter(*filterList)</span><br><span class="line"></span><br><span class="line">    pagination = _data.order_by(GitCommits.create_at.desc()).paginate(page, per_page=per_page, error_out=<span class="literal">False</span>)</span><br><span class="line">    _data = pagination.items</span><br><span class="line">    total = pagination.total</span><br><span class="line"></span><br><span class="line">    end_data = [&#123;<span class="string">'id'</span>:c.id,</span><br><span class="line">                 <span class="string">'project_id'</span>: c.project_id,</span><br><span class="line">                 <span class="string">'project_name'</span>: c.project_name,</span><br><span class="line">                 <span class="string">'branch_name'</span>: c.branch_name,</span><br><span class="line">                 <span class="string">'commit_message'</span>: c.title,</span><br><span class="line">                 <span class="string">'author_name'</span>: c.author_name,</span><br><span class="line">                 <span class="string">'create_at'</span>: c.create_at&#125; <span class="keyword">for</span> c <span class="keyword">in</span> _data]</span><br><span class="line"></span><br><span class="line">    print(end_data)</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">'data'</span>: end_data, <span class="string">'total'</span>: total, <span class="string">'status'</span>: <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>JIRA常用的API使用介绍</title>
    <url>/2020/12/03/2020-12-03-Jira-Api-Useing/</url>
    <content><![CDATA[<h3 id="获取Issue详情"><a href="#获取Issue详情" class="headerlink" title="获取Issue详情"></a>获取Issue详情</h3><p>接口名：<code>https://jira.shadow.com/rest/api/2/issue/{issueIdOrKey}</code></p><a id="more"></a><h4 id="接口介绍"><a href="#接口介绍" class="headerlink" title="接口介绍"></a>接口介绍</h4><p>Returns a full representation of the issue for the given issue key.<br>An issue JSON consists of the issue key, a collection of fields, a link to the workflow transition sub-resource, and (optionally) the HTML rendered values of any fields that support it (e.g. if wiki syntax is enabled for the description or comments).</p><p>The fields param (which can be specified multiple times) gives a comma-separated list of fields to include in the response. This can be used to retrieve a subset of fields. A particular field can be excluded by prefixing it with a minus.</p><p>By default, all (<em>all) fields are returned in this get-issue resource. Note: the default is different when doing a jql search – the default there is just navigable fields (</em>navigable).</p><ul><li>*all - include all fields</li><li>*navigable - include just navigable fields</li><li>summary,comment - include just the summary and comments</li><li>-comment - include everything except comments (the default is *all for get-issue)</li><li>*all,-comment - include everything except comments</li></ul><p>The {@code properties} param is similar to {@code fields} and specifies a comma-separated list of issue properties to include. Unlike {@code fields}, properties are not included by default. To include them all send {@code ?properties=*all}. You can also include only specified properties or exclude some properties with a minus (-) sign.</p><ul><li>{@code *all} - include all properties</li><li>{@code *all, -prop1} - include all properties except {@code prop1}</li><li>{@code prop1, prop1} - include {@code prop1} and {@code prop2} properties</li></ul><p>JIRA will attempt to identify the issue by the issueIdOrKey path parameter. This can be an issue id, or an issue key. If the issue cannot be found via an exact match, JIRA will also look for the issue in a case-insensitive way, or by looking to see if the issue was moved. In either of these cases, the request will proceed as normal (a 302 or other redirect will not be returned). The issue key contained in the response will indicate the current value of issue’s key.</p><p>The expand param is used to include, hidden by default, parts of response. This can be used to include:</p><ul><li>renderedFields - field values in HTML format</li><li>names - display name of each field</li><li>schema - schema for each field which describes a type of the field</li><li>transitions - all possible transitions for the given issue</li><li>operations - all possibles operations which may be applied on issue</li><li>editmeta - information about how each field may be edited. It contains field’s schema as well.</li><li>changelog - history of all changes of the given issue</li><li>versionedRepresentations - REST representations of all fields. Some field may contain more recent versions. RESET representations are numbered. The greatest number always represents the most recent version. It is recommended that the most recent version is used. version for these fields which provide a more recent REST representation. After including versionedRepresentations “fields” field become hidden.</li></ul><h4 id="Request-Options"><a href="#Request-Options" class="headerlink" title="Request Options"></a>Request Options</h4><table><thead><tr><th>Parameter</th><th>Value</th><th>Type</th><th>Style</th><th>Description</th></tr></thead><tbody><tr><td>issueIdOrKey*</td><td></td><td>string</td><td>template</td><td>the issue id or key to update (i.e. JRA-1330)</td></tr><tr><td>fields</td><td></td><td>string</td><td>query</td><td>the list of fields to return for the issue. By default, all fields are returned.</td></tr><tr><td>expand</td><td></td><td>string</td><td>query</td><td></td></tr><tr><td>properties</td><td></td><td>string</td><td>query</td><td>the list of properties to return for the issue. By default no properties are returned.</td></tr><tr><td>updateHistory</td><td></td><td>boolean</td><td>query</td><td></td></tr></tbody></table><h4 id="常用参数说明"><a href="#常用参数说明" class="headerlink" title="常用参数说明"></a>常用参数说明</h4><p>主要说明<code>expand</code>字段</p><ul><li>changelog - 填写参数为<code>changelog</code>时，对应这个接口获取到的数据为<code>JIRA</code>的<code>Issue详情页</code>的<code>活动日志-改动记录</code></li></ul><h4 id="返回结果示例"><a href="#返回结果示例" class="headerlink" title="返回结果示例"></a>返回结果示例</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"expand"</span>: <span class="string">"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations"</span>,</span><br><span class="line">  <span class="attr">"id"</span>: <span class="string">"236714"</span>,</span><br><span class="line">  <span class="attr">"self"</span>: <span class="string">"https://jira.shadow.com/rest/api/2/issue/236714"</span>,</span><br><span class="line">  <span class="attr">"key"</span>: <span class="string">"SHADOW-123123"</span>,</span><br><span class="line">  <span class="attr">"fields"</span>: &#123;</span><br><span class="line">    <span class="attr">"summary"</span>: <span class="string">"测试JIRA单子状态活动日志-改动记录"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"changelog"</span>: &#123;</span><br><span class="line">    <span class="attr">"startAt"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"maxResults"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">"histories"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="string">"1126652"</span>,</span><br><span class="line">        <span class="attr">"author"</span>: &#123;</span><br><span class="line">          <span class="attr">"self"</span>: <span class="string">"https://jira.shadow.com/rest/api/2/user?username=shadow"</span>,</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"shadow"</span>,</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"shadow"</span>,</span><br><span class="line">          <span class="attr">"emailAddress"</span>: <span class="string">"shadow@shadow.com"</span>,</span><br><span class="line">          <span class="attr">"avatarUrls"</span>: &#123;</span><br><span class="line">            <span class="attr">"48x48"</span>: <span class="string">"https://jira.shadow.com/secure/useravatar?ownerId=shadow&amp;avatarId=11436"</span>,</span><br><span class="line">            <span class="attr">"24x24"</span>: <span class="string">"https://jira.shadow.com/secure/useravatar?size=small&amp;ownerId=shadow&amp;avatarId=11436"</span>,</span><br><span class="line">            <span class="attr">"16x16"</span>: <span class="string">"https://jira.shadow.com/secure/useravatar?size=xsmall&amp;ownerId=shadow&amp;avatarId=11436"</span>,</span><br><span class="line">            <span class="attr">"32x32"</span>: <span class="string">"https://jira.shadow.com/secure/useravatar?size=medium&amp;ownerId=shadow&amp;avatarId=11436"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"displayName"</span>: <span class="string">"shadow"</span>,</span><br><span class="line">          <span class="attr">"active"</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">"timeZone"</span>: <span class="string">"Asia/Shanghai"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"created"</span>: <span class="string">"2020-04-01T17:01:33.000+0800"</span>,</span><br><span class="line">        <span class="attr">"items"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"field"</span>: <span class="string">"status"</span>,</span><br><span class="line">            <span class="attr">"fieldtype"</span>: <span class="string">"jira"</span>,</span><br><span class="line">            <span class="attr">"from"</span>: <span class="string">"1"</span>,</span><br><span class="line">            <span class="attr">"fromString"</span>: <span class="string">"待受理"</span>,</span><br><span class="line">            <span class="attr">"to"</span>: <span class="string">"10207"</span>,</span><br><span class="line">            <span class="attr">"toString"</span>: <span class="string">"待办事项"</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="string">"1126653"</span>,</span><br><span class="line">        <span class="attr">"author"</span>: &#123;</span><br><span class="line">          <span class="attr">"self"</span>: <span class="string">"https://jira.shadow.com/rest/api/2/user?username=shadow"</span>,</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"shadow"</span>,</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"shadow"</span>,</span><br><span class="line">          <span class="attr">"emailAddress"</span>: <span class="string">"shadow@shadow.com"</span>,</span><br><span class="line">          <span class="attr">"avatarUrls"</span>: &#123;</span><br><span class="line">            <span class="attr">"48x48"</span>: <span class="string">"https://jira.shadow.com/secure/useravatar?ownerId=shadow&amp;avatarId=11436"</span>,</span><br><span class="line">            <span class="attr">"24x24"</span>: <span class="string">"https://jira.shadow.com/secure/useravatar?size=small&amp;ownerId=shadow&amp;avatarId=11436"</span>,</span><br><span class="line">            <span class="attr">"16x16"</span>: <span class="string">"https://jira.shadow.com/secure/useravatar?size=xsmall&amp;ownerId=shadow&amp;avatarId=11436"</span>,</span><br><span class="line">            <span class="attr">"32x32"</span>: <span class="string">"https://jira.shadow.com/secure/useravatar?size=medium&amp;ownerId=shadow&amp;avatarId=11436"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"displayName"</span>: <span class="string">"shadow"</span>,</span><br><span class="line">          <span class="attr">"active"</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">"timeZone"</span>: <span class="string">"Asia/Shanghai"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"created"</span>: <span class="string">"2020-04-01T17:01:36.000+0800"</span>,</span><br><span class="line">        <span class="attr">"items"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"field"</span>: <span class="string">"status"</span>,</span><br><span class="line">            <span class="attr">"fieldtype"</span>: <span class="string">"jira"</span>,</span><br><span class="line">            <span class="attr">"from"</span>: <span class="string">"10207"</span>,</span><br><span class="line">            <span class="attr">"fromString"</span>: <span class="string">"待办事项"</span>,</span><br><span class="line">            <span class="attr">"to"</span>: <span class="string">"11404"</span>,</span><br><span class="line">            <span class="attr">"toString"</span>: <span class="string">"开发开始"</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="string">"1126661"</span>,</span><br><span class="line">        <span class="attr">"author"</span>: &#123;</span><br><span class="line">          <span class="attr">"self"</span>: <span class="string">"https://jira.shadow.com/rest/api/2/user?username=shadow"</span>,</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"shadow"</span>,</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"shadow"</span>,</span><br><span class="line">          <span class="attr">"emailAddress"</span>: <span class="string">"shadow@shadow.com"</span>,</span><br><span class="line">          <span class="attr">"avatarUrls"</span>: &#123;</span><br><span class="line">            <span class="attr">"48x48"</span>: <span class="string">"https://jira.shadow.com/secure/useravatar?ownerId=shadow&amp;avatarId=11436"</span>,</span><br><span class="line">            <span class="attr">"24x24"</span>: <span class="string">"https://jira.shadow.com/secure/useravatar?size=small&amp;ownerId=shadow&amp;avatarId=11436"</span>,</span><br><span class="line">            <span class="attr">"16x16"</span>: <span class="string">"https://jira.shadow.com/secure/useravatar?size=xsmall&amp;ownerId=shadow&amp;avatarId=11436"</span>,</span><br><span class="line">            <span class="attr">"32x32"</span>: <span class="string">"https://jira.shadow.com/secure/useravatar?size=medium&amp;ownerId=shadow&amp;avatarId=11436"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"displayName"</span>: <span class="string">"shadow"</span>,</span><br><span class="line">          <span class="attr">"active"</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">"timeZone"</span>: <span class="string">"Asia/Shanghai"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"created"</span>: <span class="string">"2020-04-01T17:02:18.000+0800"</span>,</span><br><span class="line">        <span class="attr">"items"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"field"</span>: <span class="string">"status"</span>,</span><br><span class="line">            <span class="attr">"fieldtype"</span>: <span class="string">"jira"</span>,</span><br><span class="line">            <span class="attr">"from"</span>: <span class="string">"11404"</span>,</span><br><span class="line">            <span class="attr">"fromString"</span>: <span class="string">"开发开始"</span>,</span><br><span class="line">            <span class="attr">"to"</span>: <span class="string">"11201"</span>,</span><br><span class="line">            <span class="attr">"toString"</span>: <span class="string">"开发结束"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"field"</span>: <span class="string">"完工方案"</span>,</span><br><span class="line">            <span class="attr">"fieldtype"</span>: <span class="string">"custom"</span>,</span><br><span class="line">            <span class="attr">"from"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"fromString"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"to"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"toString"</span>: <span class="string">"判断，如果客户没有收整车款，也可以继续开票"</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="string">"1126662"</span>,</span><br><span class="line">        <span class="attr">"author"</span>: &#123;</span><br><span class="line">          <span class="attr">"self"</span>: <span class="string">"https://jira.shadow.com/rest/api/2/user?username=shadow"</span>,</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"shadow"</span>,</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"shadow"</span>,</span><br><span class="line">          <span class="attr">"emailAddress"</span>: <span class="string">"shadow@shadow.com"</span>,</span><br><span class="line">          <span class="attr">"avatarUrls"</span>: &#123;</span><br><span class="line">            <span class="attr">"48x48"</span>: <span class="string">"https://jira.shadow.com/secure/useravatar?ownerId=shadow&amp;avatarId=11436"</span>,</span><br><span class="line">            <span class="attr">"24x24"</span>: <span class="string">"https://jira.shadow.com/secure/useravatar?size=small&amp;ownerId=shadow&amp;avatarId=11436"</span>,</span><br><span class="line">            <span class="attr">"16x16"</span>: <span class="string">"https://jira.shadow.com/secure/useravatar?size=xsmall&amp;ownerId=shadow&amp;avatarId=11436"</span>,</span><br><span class="line">            <span class="attr">"32x32"</span>: <span class="string">"https://jira.shadow.com/secure/useravatar?size=medium&amp;ownerId=shadow&amp;avatarId=11436"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"displayName"</span>: <span class="string">"shadow"</span>,</span><br><span class="line">          <span class="attr">"active"</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">"timeZone"</span>: <span class="string">"Asia/Shanghai"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"created"</span>: <span class="string">"2020-04-01T17:02:25.000+0800"</span>,</span><br><span class="line">        <span class="attr">"items"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"field"</span>: <span class="string">"WorklogId"</span>,</span><br><span class="line">            <span class="attr">"fieldtype"</span>: <span class="string">"jira"</span>,</span><br><span class="line">            <span class="attr">"from"</span>: <span class="string">"30777"</span>,</span><br><span class="line">            <span class="attr">"fromString"</span>: <span class="string">"30777"</span>,</span><br><span class="line">            <span class="attr">"to"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"toString"</span>: <span class="literal">null</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"field"</span>: <span class="string">"timeestimate"</span>,</span><br><span class="line">            <span class="attr">"fieldtype"</span>: <span class="string">"jira"</span>,</span><br><span class="line">            <span class="attr">"from"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"fromString"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"to"</span>: <span class="string">"0"</span>,</span><br><span class="line">            <span class="attr">"toString"</span>: <span class="string">"0"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"field"</span>: <span class="string">"timespent"</span>,</span><br><span class="line">            <span class="attr">"fieldtype"</span>: <span class="string">"jira"</span>,</span><br><span class="line">            <span class="attr">"from"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"fromString"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"to"</span>: <span class="string">"7200"</span>,</span><br><span class="line">            <span class="attr">"toString"</span>: <span class="string">"7200"</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用JQL时间段精确搜索"><a href="#使用JQL时间段精确搜索" class="headerlink" title="使用JQL时间段精确搜索"></a>使用JQL时间段精确搜索</h3><p>示例：<code>project = CARSERVICE AND issuetype = 缺陷 AND priority in (P0, P1) AND createdDate &gt;= &quot;2020-11-20 01:00&quot; AND createdDate &lt;= &quot;2020-11-20 11:08&quot; ORDER BY created DESC</code><br>用于时间段精确搜索的字段<code>key</code>叫<code>createDate</code>（创建时间精确搜索），用于更新时间精确搜索的字段<code>key</code>叫<code>updatedDate</code>。<br>其中<code>createDate</code>或者<code>updatedDate</code>，正确的日期格式是：<code>yyyy/MM/dd HH:mm</code>，<code>yyyy-MM-dd HH:mm</code>，<code>yyyy/MM/dd</code>，<code>yyyy-MM-dd</code>，或者是一个时间段<code>-5d</code>，<code>4w 2d</code>。</p><h3 id="获取Issue的备注详情列表"><a href="#获取Issue的备注详情列表" class="headerlink" title="获取Issue的备注详情列表"></a>获取Issue的备注详情列表</h3><p>接口名：<code>https://jira.shadow.com/rest/api/2/issue/{issueIdOrKey}/comment</code></p><h4 id="接口介绍-1"><a href="#接口介绍-1" class="headerlink" title="接口介绍"></a>接口介绍</h4><p>Returns all comments for an issue.<br>Results can be ordered by the “created” field which means the date a comment was added.</p><h4 id="Request-Options-1"><a href="#Request-Options-1" class="headerlink" title="Request Options"></a>Request Options</h4><table><thead><tr><th>Parameter</th><th>Value</th><th>Type</th><th>Style</th><th>Description</th></tr></thead><tbody><tr><td>issueIdOrKey*</td><td></td><td>string</td><td>template</td><td>to get comments for</td></tr><tr><td>startAt</td><td></td><td>long</td><td>query</td><td>the page offset, if not specified then defaults to 0</td></tr><tr><td>maxResults</td><td></td><td>int</td><td>query</td><td>how many results on the page should be included. Defaults to 50.</td></tr><tr><td>orderBy</td><td></td><td>string</td><td>query</td><td>ordering of the results.</td></tr><tr><td>expand</td><td></td><td>string</td><td>query</td><td>optional flags: renderedBody (provides body rendered in HTML)</td></tr></tbody></table><h3 id="获取筛选器详情"><a href="#获取筛选器详情" class="headerlink" title="获取筛选器详情"></a>获取筛选器详情</h3><p>接口名：<code>https://jira.shadow.com/rest/api/2/filter/{id}</code></p><h4 id="接口介绍-2"><a href="#接口介绍-2" class="headerlink" title="接口介绍"></a>接口介绍</h4><p>Returns a filter given an id<br>从<code>Response</code>中可以拿到筛选器对应的<code>JQL</code>条件</p><h4 id="Request-Options-2"><a href="#Request-Options-2" class="headerlink" title="Request Options"></a>Request Options</h4><table><thead><tr><th>Parameter</th><th>Value</th><th>Type</th><th>Style</th><th>Description</th></tr></thead><tbody><tr><td>id*</td><td></td><td>long</td><td>template</td><td>the id of the filter being looked up</td></tr><tr><td>expand</td><td></td><td>string</td><td>query</td><td>the parameters to expand</td></tr></tbody></table><h3 id="获取Issue的列表"><a href="#获取Issue的列表" class="headerlink" title="获取Issue的列表"></a>获取Issue的列表</h3><p>接口名：<code>https://jira.shadow.com/rest/api/2/search</code></p><h4 id="接口介绍-3"><a href="#接口介绍-3" class="headerlink" title="接口介绍"></a>接口介绍</h4><p>Searches for issues using JQL.<br><strong>Sorting</strong> the jql parameter is a full JQL expression, and includes an ORDER BY clause.</p><p>The fields param (which can be specified multiple times) gives a comma-separated list of fields to include in the response. This can be used to retrieve a subset of fields. A particular field can be excluded by prefixing it with a minus.</p><p>By default, only navigable (<em>navigable) fields are returned in this search resource. Note: the default is different in the get-issue resource – the default there all fields (</em>all).</p><ul><li>*all - include all fields</li><li>*navigable - include just navigable fields</li><li>summary,comment - include just the summary and comments</li><li>-description - include navigable fields except the description (the default is *navigable for search)</li><li><em>all,-comment - include everything except comments<br>*</em>GET vs POST**: If the JQL query is too large to be encoded as a query param you should instead POST to this resource.</li></ul><p><strong>Expanding Issues in the Search Result</strong>: It is possible to expand the issues returned by directly specifying the expansion on the expand parameter passed in to this resources.</p><p>For instance, to expand the “changelog” for all the issues on the search result, it is neccesary to specify “changelog” as one of the values to expand.</p><h4 id="Request-Options-3"><a href="#Request-Options-3" class="headerlink" title="Request Options"></a>Request Options</h4><table><thead><tr><th>Parameter</th><th>Value</th><th>Type</th><th>Style</th><th>Description</th></tr></thead><tbody><tr><td>jql</td><td></td><td>string</td><td>query</td><td>a JQL query string</td></tr><tr><td>startAt</td><td></td><td>int</td><td>query</td><td>the index of the first issue to return (0-based)</td></tr><tr><td>maxResults</td><td></td><td>int</td><td>query</td><td>the maximum number of issues to return (defaults to 50). The maximum allowable value is dictated by the JIRA property ‘jira.search.views.default.max’. If you specify a value that is higher than this number, your search results will be truncated.</td></tr><tr><td>validateQuery</td><td></td><td>boolean</td><td>query</td><td>whether to validate the JQL query</td></tr><tr><td>fields</td><td></td><td>string</td><td>query</td><td>the list of fields to return for each issue. By default, all navigable fields are returned.</td></tr><tr><td>expand</td><td></td><td>string</td><td>query</td><td>A comma-separated list of the parameters to expand.</td></tr></tbody></table><h3 id="模糊搜索，获取自定义字段的相关信息"><a href="#模糊搜索，获取自定义字段的相关信息" class="headerlink" title="模糊搜索，获取自定义字段的相关信息"></a>模糊搜索，获取自定义字段的相关信息</h3><p>接口名：<code>https://jira.shadow.com/rest/api/2/customFields</code></p><h4 id="Request-Options-4"><a href="#Request-Options-4" class="headerlink" title="Request Options"></a>Request Options</h4><table><thead><tr><th>Parameter</th><th>Value</th><th>Type</th><th>Style</th><th>Description</th></tr></thead><tbody><tr><td>startAt</td><td></td><td>long</td><td>query</td><td></td></tr><tr><td>maxResults</td><td></td><td>int</td><td>query</td><td></td></tr><tr><td>search</td><td></td><td>string</td><td>query</td><td></td></tr></tbody></table><h4 id="返回结果示例-1"><a href="#返回结果示例-1" class="headerlink" title="返回结果示例"></a>返回结果示例</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"maxResults"</span>: <span class="number">50</span>,</span><br><span class="line">  <span class="attr">"startAt"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"isLast"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"values"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"customfield_17601"</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"端"</span>,</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"&lt;p&gt;标记Issue是在哪个端上被发现的&lt;/p&gt;"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"选择列表 (级联)"</span>,</span><br><span class="line">      <span class="attr">"searcherKey"</span>: <span class="string">"端"</span>,</span><br><span class="line">      <span class="attr">"self"</span>: <span class="string">"https://jira.shadow.com/rest/api/2/customFields/customfield_17601"</span>,</span><br><span class="line">      <span class="attr">"numericId"</span>: <span class="number">17601</span>,</span><br><span class="line">      <span class="attr">"isLocked"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"isManaged"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"isAllProjects"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"projectsCount"</span>: <span class="number">8</span>,</span><br><span class="line">      <span class="attr">"screensCount"</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Jira</category>
      </categories>
      <tags>
        <tag>jira</tag>
        <tag>api</tag>
      </tags>
  </entry>
  <entry>
    <title>软件测试流程管理</title>
    <url>/2021/02/23/2021-02-23-Software-Testing-Process-Management/</url>
    <content><![CDATA[<h2 id="软件研发中的测试"><a href="#软件研发中的测试" class="headerlink" title="软件研发中的测试"></a>软件研发中的测试</h2><ol><li><p>软件需求完成后，需要进行需求的评审，此时测试人员可以<strong>参与需求的评审</strong>。当需求确定后，测试人员可以开始进行<strong>系统测试方案及计划的制订</strong>。</p></li><li><p>软件项目总体设计方案完成后，测试人员可以开始进行<strong>集成测试方案及计划的制订</strong>。</p></li><li><p>详细设计完成后，测试方可以开始进行<strong>模块测试方案及计划的制订</strong>。</p></li><li><p>单元测试和编码一般是同步的，由开发人员自己完成。</p></li><li><p>整个模块开发完成后，测试人员开始进行<strong>模块测试</strong>。当然在这之前，<strong>所有的模块测试用例已经准备完毕</strong>。</p></li><li><p>模块测试后是<strong>集成测试和系统测试</strong>。</p></li><li><p>软件运行维护期间则要对运行期间发现的问题进行<strong>回归测试</strong>。</p><a id="more"></a></li></ol><p><img src="https://res.weread.qq.com/wrepub/epub_24981835_8" alt="软件研发中的测试环节及测试活动"></p><h2 id="软件测试模型"><a href="#软件测试模型" class="headerlink" title="软件测试模型"></a>软件测试模型</h2><h3 id="V模型"><a href="#V模型" class="headerlink" title="V模型"></a>V模型</h3><p><img src="https://res.weread.qq.com/wrepub/epub_24981835_9" alt="V模型"><br>项目研发中的开发活动是从需求分析到概要设计，之后到详细设计，再到编码，然后是测试活动。在这个模型中，把测试作为编码之后的最后一个活动，需求分析等前期产生的错误直到后期的验收测试才能发现。测试活动在编码之后，并且只对代码测试，未能体现尽早测试的原则。虽然该模型有局限性，但是该模型仍然是指导测试开展的一个重要模型。<br>测试活动对应开发的4个阶段，分别是<strong>单元测试</strong>、<strong>集成测试</strong>、<strong>系统测试</strong>和<strong>验收测试</strong>。</p><ol><li><strong>单元测试</strong>：对软件中的最小可测试单元进行检查和验证，是指在编码完成后，对所实现的方法/函数的内部逻辑进行的测试。<ul><li>单元测试的依据是方法/函数的功能与功能实现流程；</li><li>单元测试的主要对象是方法/函数的功能在实现过程中的错误或不完善的地方；</li><li>单元测试所采用的测试方法是白盒测试，即针对方法/函数的内部实现逻辑，并结合方法/函数的输入及输出的可能取值范围，进行程序的针对性测试。</li></ul></li><li><strong>集成测试</strong>：也叫组装测试或联合测试，将所有模块按照设计要求（如软件架构图）组装成为子系统或系统，进行集成测试。之所以进行集成测试，是因为一些模块虽然能够单独地工作，但并不能保证连接起来也能正常工作。一些局部反映不出来的问题，在全局上很可能暴露出来。在实际项目实践中，集成测试之前还会安排模块测试。模块测试是指针对产品设计所识别出的各个模块在本产品版本所承载的功能实现，测试模块级功能的实现，模块间的接口、交互，以及依赖关系的正确与否。</li><li><strong>系统测试</strong>：将经过集成测试的软件，作为计算机系统的一个部分，与系统中的其他部分结合起来，在实际运行环境下对计算机系统进行的一系列严格有效的测试，以发现软件潜在的问题，保证系统的正常运行。系统测试是针对产品版本系统进行的整体测试，主要采用的测试方法是黑盒测试，系统测试除了关注功能测试外，还需要关注软件产品的非功能需求，包括但不限于容量测试、性能测试、压力测试、负载测试、兼容性测试、稳定性测试、可靠性测试、可用性测试和用户文档测试。</li><li><strong>验收测试</strong>：也称为交付测试，目的是确保软件准备就绪，向未来的用户表明系统能够像预定的要求那样工作，即软件的功能和性能如同用户所合理期待的那样。<ul><li>验收测试阶段，相关的用户和独立测试人员根据测试计划及结果对系统进行测试和接收。</li><li>它让系统用户决定是否接收系统。</li><li>它是一项确定产品是否能够满足合同或用户所规定的需求的测试。</li><li><strong>非正式验收测试（Alpha测试）</strong>：是由用户在开发环境下进行的测试，也可以是公司内部的用户（比如技术支持人员、销售人员、代理商等）在模拟实际操作环境下进行的受控测试。Alpha测试不能由程序员或测试员完成。</li><li><strong>正式验收测试（Beta测试）</strong>：是软件的用户在实际使用环境下进行的测试，开发者通常不在测试现场。Beta测试不能由程序员或测试员完成。比如，游戏的公开测试就属于Beta测试。一般Beta测试通过后就可以正式发布产品了。</li></ul></li></ol><h3 id="W模型"><a href="#W模型" class="headerlink" title="W模型"></a>W模型</h3><p><img src="https://res.weread.qq.com/wrepub/epub_24981835_10" alt="W模型"></p><ol><li>从V模型演化而来，在这个模型中增加了与软件各开发阶段同步的测试活动。</li><li>测试伴随着整个软件开发的周期。</li><li>用户不仅需要对程序进行测试，还需要对需求和设计进行测试。</li><li>测试和开发是同步的，有利于尽早地发现问题。</li><li>但是W模型存在一个和V模型相同的问题，它们把软件研发的过程视为一系列串行的活动，没有融入迭代及变更的元素。</li></ol><h3 id="H模型"><a href="#H模型" class="headerlink" title="H模型"></a>H模型</h3><p><img src="https://res.weread.qq.com/wrepub/epub_24981835_11" alt="H模型"></p><ol><li>强调测试活动是独立的，贯穿于整个产品的周期，和研发流程是并发的。</li><li>只要测试就绪点达到了，就可以开始进行测试。</li><li>可以满足测试尽早开始这样一原则。</li><li>模型本身并没有太多的执行指导，可以把它理解为一种理念，测试就绪点满足了就可以测试了。</li></ol><h2 id="软件测试流程"><a href="#软件测试流程" class="headerlink" title="软件测试流程"></a>软件测试流程</h2><p><img src="https://res.weread.qq.com/wrepub/epub_24981835_12" alt="软件测试的一般性过程"><br><img src="https://res.weread.qq.com/wrepub/epub_24981835_13" alt="复杂大型项目的测试过程"></p><ol><li>测试需求分析</li><li>测试计划及监控</li><li>测试设计与开发</li><li>测试执行及报告</li><li>软件评估报告及批准</li><li>测试总结及资产归档<br><img src="https://res.weread.qq.com/wrepub/epub_24981835_15" alt="某企业软件测试跨职能流程图"></li></ol><h2 id="软件测试过程资产"><a href="#软件测试过程资产" class="headerlink" title="软件测试过程资产"></a>软件测试过程资产</h2><ol><li>测试方案文档（测试计划文档）。</li><li>测试用例列表。</li><li>测试缺陷列表。</li><li>测试总结报告。</li><li>其他。<ul><li>新开发或引入的测试工具。</li><li>测试工作会议记录。</li><li>测试计划（测试方案）、测试用例的评审报告。</li><li>测试总结。</li><li>测试原始数据及度量数据。</li><li>测试日志：每天测试日程记录。</li><li>周期性测试报告。</li><li>任务报告：任务完成情况报告。</li></ul></li></ol><table><thead><tr><th>文档名</th><th>作用</th><th>主要内容</th></tr></thead><tbody><tr><td>测试计划（测试方案）</td><td>描述为完成软件特性的测试而采用的测试方法的细节<br>描述测试活动的安排和管理</td><td>- 测试范围和策略:包括被测对象、应测试的特性不被测试的特性、测试模型、测试需求、测试设计<br>- 测试环境和工具<br>- 测试出入口准则及暂停标准<br>- 测试人员要求<br>- 测试管理约定<br>- 任务安排和进度计划<br>- 风险和应急</td></tr><tr><td>测试用例</td><td>描述测试用例的具体细节</td><td>- 测试项目<br>- 用例编号<br>- 用例级别：测试用例的重要程度<br>- 用例可用性<br>- 输入值<br>- 预期输出<br>- 实测结果<br>- 特殊环境需求（可选）<br>- 特殊测试步骤（可选）</td></tr><tr><td>测试缺陷</td><td>描述测试缺陷</td><td>- 缺陷简述<br>- 缺陷描述<br>- 缺陷级别<br>- 缺陷状态</td></tr><tr><td>测试报告</td><td>描述测试结果</td><td>- 测试时间、地点、人员<br>- 测试环境<br>- 测试结果统计分析<br>- 测试评估<br>- 测试总计和改进<br>- 遗留缺陷列表</td></tr></tbody></table><h2 id="软件测试流程中的度量分析"><a href="#软件测试流程中的度量分析" class="headerlink" title="软件测试流程中的度量分析"></a>软件测试流程中的度量分析</h2><ol><li>测试度量作用：积累数据，评价工作，改进过程，预测趋势。</li><li>缺陷遗漏统计：<ul><li>用例未覆盖</li><li>用例覆盖未执行</li><li>测试通过线上复发</li></ul></li><li>缺陷分布统计：<ul><li>严重程度</li><li>阶段</li><li>模块</li><li>开发人员</li></ul></li><li>用例统计：<ul><li>用例执行率</li><li>用例通过率</li><li>用例需求覆盖率</li><li>用例缺陷发现率</li><li>用例执行工作量</li><li>回归用例执行工作量</li></ul></li><li>缺陷分布统计：缺陷模块分布、缺陷开发人员分布、缺陷严重程度分布</li><li>缺陷修复统计：缺陷每日修复率、缺陷阶段修复率</li><li>缺陷收敛统计：缺陷收敛速率</li><li>工作量统计：发现缺陷数量、测试用例执行数量</li></ol><h3 id="度量的意义"><a href="#度量的意义" class="headerlink" title="度量的意义"></a>度量的意义</h3><table><thead><tr><th>度量项</th><th>含义</th><th>目标和意义</th></tr></thead><tbody><tr><td>测试生产率</td><td>单位时间所测试的代码量/单位时间执行测试用例的数量</td><td>一个团队的测试能力</td></tr><tr><td>工作量变化率</td><td>实际花费工作量相对于估计工作量的偏差百分比</td><td>提高估计能力、避免过载分配任务</td></tr><tr><td>测试进度变化率</td><td>项目实际测试进度相对于计划进度的偏差百分比</td><td>监控项目以便适时采取纠偏措施</td></tr><tr><td>工作量</td><td>测试所做的工作小时数</td><td>测试为整个项目贡献的工作量</td></tr><tr><td>缺陷密度</td><td>千行代码发现的缺陷数/千条用例发现的缺陷数</td><td>用于度量被测试系统的可靠性</td></tr><tr><td>测试问题的严重性</td><td>测试发现问题的严重性分布</td><td>用于确定目前被测试系统的可靠性</td></tr><tr><td>测试用例的问题发现效率</td><td>测试用例发现问题的数量</td><td>用于度量测试用例的有效性</td></tr><tr><td>测试用例覆盖率</td><td>需求覆盖率、功能点覆盖率、代码覆盖率等</td><td>度量测试的充分性</td></tr><tr><td>问题遗漏率</td><td>发布后反馈问题数/产品问题总数量</td><td>衡量内部测试质量</td></tr></tbody></table>]]></content>
      <categories>
        <category>软件测试管理</category>
      </categories>
      <tags>
        <tag>软件测试流程管理</tag>
      </tags>
  </entry>
  <entry>
    <title>测试需求分析</title>
    <url>/2021/02/24/2021-02-24-Test-Requirement-Analysis/</url>
    <content><![CDATA[<h2 id="软件需求"><a href="#软件需求" class="headerlink" title="软件需求"></a>软件需求</h2><p>软件需求是测试需求的基础。软件需求分为<strong>业务需求</strong>、<strong>用户需求</strong>、<strong>功能需求</strong>3个层次。<br>需求包括<strong>功能需求</strong>和<strong>非功能需求</strong>两个方面。</p><a id="more"></a><p><img src="https://res.weread.qq.com/wrepub/epub_24981835_18" alt="软件测试的3个层次"></p><h2 id="测试需求"><a href="#测试需求" class="headerlink" title="测试需求"></a>测试需求</h2><p>测试需求是解决“测什么”的问题，是整个测试项目的基础，是制订测试计划、开发测试用例的依据。清晰完整的测试需求有助于保证测试的质量与进度，有助于确保测试的覆盖率。如果没有明确的测试需求就开展测试工作，那么经常会出现需求遗漏、产品质量关注不全面等问题。<br>测试需求分析的目标是<strong>明确测试范围和功能处理过程</strong>。</p><h3 id="测试分类"><a href="#测试分类" class="headerlink" title="测试分类"></a>测试分类</h3><ol><li>根据测试阶段<ul><li>单元测试</li><li>模块测试</li><li>集成测试</li><li>系统测试</li><li>验收测试</li><li>Alpha测试</li><li>Beta测试</li></ul></li><li>根据是否执行被测软件<ul><li>静态测试：不运行被测软件，比如需求文档评审、设计文档评审、代码走查等</li><li>动态测试</li></ul></li><li>根据是否使用工具<ul><li>手工测试</li><li>自动化测试</li></ul></li><li>根据测试技术<ul><li>白盒测试：通过对程序内部结构的分析、检测来寻找问题</li><li>黑盒测试：通过软件的外部表现来发现其缺陷和错误</li><li>灰盒测试：介于白盒测试和黑盒测试之间的测试，灰盒测试不仅关注输出、输入的正确性，同时也关注程序内部的情况；通过一些表征性的现象、事件、标志来判断内部的运行状态</li></ul></li><li>根据测试类型<ul><li>功能测试</li><li>兼容性测试</li><li>性能测试</li><li>用户界面测试</li><li>安装卸载测试</li><li>接口测试</li><li>…</li></ul></li></ol><table><caption>常见的测试类型及其测试内容说明</caption><tr><th width="150px">测试类型</th><th>测试内容描述</th></tr><tr><td>功能测试</td><td>是对产品的各功能进行验证，根据功能需求逐项测试，检查产品是否达到用户要求的功能</td></tr><tr><td>兼容性测试</td><td>测试软件在特定的硬件平台上、不同的应用软件之间、不同的操作系统平台上、不同的网络等环境中是否能够正常运行</td></tr><tr><td>安全性测试</td><td>针对的是未授权的访问、拒绝访问攻击等，一般包括程序、网络、数据库的安全性测试</td></tr><tr><td>接口测试</td><td>是对测试系统组件间接口的一种测试。接口测试主要用于检测外部系统与系统之间以及内部各个子系统之间的交互点。测试的重点是检查数据的交换、传递和控制管理过程，以及系统间的相互逻辑依赖关系等</td></tr><tr><td>数据库完整性测试</td><td>该项测试内容主要以数据库表为单位，检查数据库表及表中各字段命名是否符合命名规范，表中字段是否完整，数据库表中的字段描述是否正确地包括字段的类型、长度，是否为空，数据库表中的关系、索引、主键、约束是否正确</td></tr><tr><td>用户界面测试</td><td>即UI测试，测试用户界面功能模块的布局是否合理，整体风格是否一致，各个控件的放置位置是否符合客户使用习惯，操作是否便捷，导航是否简单易懂，界面文字是否正确，命名是否统一，页面是否美观，文字、图片组合是否合适等。除此之外，还要确保 UI功能内部的对象符合预期要求，并遵循公司或行业的标准</td></tr><tr><td>负载测试</td><td>负载测试通过改变系统负载方式增加负载等来发现系统中所存在的性能问题。负载测试更多的是一种测试方法，而不是测试类型，可以为性能测试、压力测试所采用。负载测试的加载方式也有很多种，可以根据测试需要来选择</td></tr><tr><td>性能测试</td><td>性能测试是为获取或验证系统性能指标而进行的测试。多数情况下，性能测试会在不同的负载情况下进行。性能指标主要有系统吞吐量、响应速度、CPU占用率、内存占用率等</td></tr><tr><td>压力测试</td><td>压力测试通常在高负载的情况下来对系统的稳定性进行测试，能更有效地发现系统稳定性的隐患及系统在负载峰值下的功能隐患等</td></tr><tr><td>疲劳强度测试</td><td>通过长时间运行系统，测试系统的性能，发现性能问题。测试系统的日常业务(正常情况)和高峰业务(最大业务量)长时间运行的结果</td></tr><tr><td>恢复性测试</td><td>测试一个系统从灾难或出错中能否很好地恢复，如系统崩溃、硬件损坏或其他灾难性出错。恢复性测试一般通过人为的各种强制性手段让软件或硬件出现故障，然后检测系统是否能正确恢复(自动恢复和人工恢复)</td></tr><tr><td>配置测试</td><td>一般是针对硬件配置的测试，测试软件在最低配置和推荐配置情况下是否能够正常运行</td></tr><tr><td>安装卸载测试</td><td>确保软件在正常情况和异常情况下都能正确地完成安装和卸载。例如，进行首次安装、升级，或进行完整的或自定义的安装</td></tr><tr><td>用户文档测试</td><td>软件文档是软件的一部分，要确保文档能够给用户提供正确的说明或指引，重点关注文档的正确性、完备性及可理解性。交给用户的文档主要有系统帮助、用户使用手册、用户安装手册、示例及模板、图像和声音帮助、用户许可协议等</td></tr><tr><td>可用性（易用性）测试</td><td>让一群具有代表性的用户对产品进行典型操作，同时观察员和开发人员在一旁观察，聆听，做记录。可用性有5 个指标，分别是易学性、易记性、容错性、交互效率和用户满意度</td></tr><tr><td>稳定性（可靠性）测试</td><td>稳定性测试通过给系统加载一定的业务压力，让系统持续运行一段时间(一般为7x24h)，检测系统是否能够稳定运行</td></tr><tr><td>内存泄漏测试</td><td>内存泄漏是指用动态存储分配函数动态开辟的空间，在使用完毕后未释放，导致一直占据该内存单元，直到程序结束。内存泄漏测试就是测试有没有内存空间使用完毕之后未回收的情况，一般使用专门的检测工具</td></tr><tr><td>本地化测试</td><td>也称为国际化测试,有些产品为了满足特定区域用户的需要，有多个语言版本，比如简体中文、繁体中文、英文、日文等。本地化测试针对特定目标区域性或区域设置的产品进行测试，在本地化的软硬件环境下测试界面、安装、卸载等内容，也要关注产品目标地区的文化、 宗教、喜好等适用性测试</td></tr></table><h3 id="软件测试类型分析"><a href="#软件测试类型分析" class="headerlink" title="软件测试类型分析"></a>软件测试类型分析</h3><ol><li>不同的测试类型分析产品的角度不同</li><li>不同的测试阶段重点采用的测试类型也不同</li><li>不同的测试类型会发现不同类型的缺陷</li><li>不同的测试类型有不同的测试方法</li><li>不同的产品对应的测试类型的集合可能有很大的不同</li></ol><table><caption>移动APP软件的主要测试类型</caption><tr><th width="150px">移动APP软件测试类型</th><th>测试涉及的内容简介</th></tr><tr><td>安全测试</td><td>软件授权注册<br>软件获取系统的权限,比如访问联系人信息等</td></tr><tr><td>用户界面测试</td><td>测试用户界面,包括导航、布局、文字、图片、配色等</td></tr><tr><td>功能测试</td><td>对需求文档中的功能进行测试</td></tr><tr><td>性能测试-响应速度测试</td><td>正常环境下，APP中的关键操作响应时间能否满足用户要求，比如安装、升级、卸载响应时间，APP启动时间，其他关键操作响应时间(搜索、上传、下载等)</td></tr><tr><td>性能测试-极限测试</td><td>在极限条件下APP的响应速度测试，比如电量低、存储空间紧张、网速慢等运行环境比较差的情况</td></tr><tr><td>性能测试-资源占用率测试</td><td>典型场景下系统资源(CPU、内存)的使用情况，如 APP启动后，APP加载数据后(打开一个文件或显示了一些数据), APP长时间反复操作后</td></tr><tr><td>兼容性测试</td><td>不同操作系统的兼容性<br>不同手机分辨率的兼容性<br>不同手机品牌的兼容性</td></tr><tr><td>交叉事件测试</td><td>APP在运行过程中，另外一个事件或操作发生时的测试，比如有来电、收发邮件等</td></tr><tr><td>安装卸载测试</td><td>在主流的系统和不同手机品牌上开展测试，包括 APP 安装、升级更新、卸载</td></tr></table><h3 id="建立软件的测试类型列表"><a href="#建立软件的测试类型列表" class="headerlink" title="建立软件的测试类型列表"></a>建立软件的测试类型列表</h3><ol><li>参考以往的项目经验</li><li>对照软件特性寻找对应的测试类型</li></ol><table><caption>软件质量特性分类与软件测试类型之间的部分对应关系</caption><tr><th width="150px">质量特性</th><th width="300px">质量特性说明</th><th width="150px">子特性</th><th>对应的测试类型</th></tr><tr><td rowspan="5">功能性</td><td rowspan="5">与一组功能及其指定的性质有关的一组属性。这里的工鞥指满足明确或隐含需求的功能</td><td>适合性</td><td>功能测试</td></tr><tr><td>准确性</td><td>功能测试、负载测试、压力测试、疲劳强度测试</td></tr><tr><td>互操作性</td><td>接口测试</td></tr><tr><td>保密安全性</td><td>安全性测试</td></tr><tr><td>功能型依从性</td><td>功能测试</td></tr><tr><td rowspan="4">可靠性</td><td rowspan="4">在规定的一段时间和条件下，与软件维持其性能水平的能力有关的一组属性</td><td>成熟性</td><td>功能测试、疲劳强度测试、稳定性测试</td></tr><tr><td>容错性</td><td>安全性测试、接口测试、完整性测试、疲劳强度测试</td></tr><tr><td>易恢复性</td><td>恢复性测试</td></tr><tr><td>可靠性依从性</td><td></td></tr><tr><td rowspan="5">易用性</td><td rowspan="5">与一组规定或潜在的用户为使用软件所需做的努力和对这样的使用所做的评价有关的一组属性</td><td>易理解性</td><td>用户界面测试</td></tr><tr><td>易学习性</td><td>用户界面测试、用户文档测试</td></tr><tr><td>易操作性</td><td>用户界面测试</td></tr><tr><td>吸引性</td><td>用户界面测试</td></tr><tr><td>易用性依从性</td><td></td></tr><tr><td rowspan="3">效率</td><td rowspan="3">与在规定条件下软件的性能水平和所用资源量之间的关系有关的一组属性</td><td>时间特性</td><td>负载测试、压力测试、性能测试</td></tr><tr><td>资源利用特性</td><td>负载测试、压力测试、性能测试、内存泄漏测试</td></tr><tr><td>效率依从性</td><td></td></tr><tr><td rowspan="5">可维护性</td><td rowspan="5">与进行指定的修改所需的努力有关的一组属性</td><td>易分析性</td><td></td></tr><tr><td>易改变性</td><td></td></tr><tr><td>稳定性</td><td></td></tr><tr><td>易测试性</td><td>功能测试</td></tr><tr><td>维护性依从性</td><td></td></tr><tr><td rowspan="5">移植性</td><td rowspan="5">与软件可以从某一环境转移到另一环境的能力有关的一组属性</td><td>适应性</td><td>配置测试</td></tr><tr><td>易安裝性</td><td>安装测试</td></tr><tr><td>共存性</td><td>兼容性测试</td></tr><tr><td>易替换性</td><td>兼容性测试</td></tr><tr><td>可移植性的依从性</td><td></td></tr></table>]]></content>
      <categories>
        <category>软件测试管理</category>
      </categories>
      <tags>
        <tag>测试需求分析</tag>
      </tags>
  </entry>
  <entry>
    <title>测试用例设计方法总结</title>
    <url>/2021/03/02/2021-02-26-Test-Case-Design-Method/</url>
    <content><![CDATA[<h2 id="测试用例设计方法"><a href="#测试用例设计方法" class="headerlink" title="测试用例设计方法"></a>测试用例设计方法</h2><pre><code>1. 等价类划分法
2. 边界值法
3. 错误推测法
4. 因果图法
5. 场景法/流程分析法
6. 判定表法
7. 正交试验法
8. 功能图法</code></pre><p><a href="https://www.icloud.com/iclouddrive/0LOs-7Z7lePvixFZN6pPUnr6A" target="_blank" rel="noopener">Xmind原始文件地址</a></p><a id="more"></a> <img src="/2021/03/02/2021-02-26-Test-Case-Design-Method/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95.png" title="测试用例设计方法">]]></content>
      <categories>
        <category>软件测试管理</category>
      </categories>
      <tags>
        <tag>测试用例</tag>
      </tags>
  </entry>
  <entry>
    <title>测试计划</title>
    <url>/2021/02/26/2021-02-26-Test-Plan/</url>
    <content><![CDATA[<h2 id="测试计划的作用"><a href="#测试计划的作用" class="headerlink" title="测试计划的作用"></a>测试计划的作用</h2><pre><code>1. 管理者能够根据测试计划做宏观调控，进行相应资源配置等
2. 测试负责人可以根据测试计划跟踪测试进度
3. 测试人员能够了解整个项目测试情况，以及项目测试不同阶段所要进行的工作
4. 便于其他人员了解测试人员的工作内容，进行有关的配合工作</code></pre><p><a href="https://www.icloud.com/iclouddrive/0LOs-7Z7lePvixFZN6pPUnr6A" target="_blank" rel="noopener">Xmind原始文件地址</a></p><a id="more"></a> <img src="/2021/02/26/2021-02-26-Test-Plan/%E6%B5%8B%E8%AF%95%E8%AE%A1%E5%88%92.png" title="测试计划">]]></content>
      <categories>
        <category>软件测试管理</category>
      </categories>
      <tags>
        <tag>测试计划</tag>
      </tags>
  </entry>
  <entry>
    <title>Spock 测试实践</title>
    <url>/2021/10/31/2021-10-31-Spock-Test/</url>
    <content><![CDATA[<h3 id="异常测试"><a href="#异常测试" class="headerlink" title="异常测试"></a>异常测试</h3><h4 id="被测对象"><a href="#被测对象" class="headerlink" title="被测对象"></a>被测对象</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 校验请求参数user是否合法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> APIException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> validateUser(UserVO user) <span class="keyword">throws</span> APIException &#123;</span><br><span class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> APIException(<span class="string">"10001"</span>, <span class="string">"user is null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == user.getName() || <span class="string">""</span>.equals(user.getName())) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> APIException(<span class="string">"10002"</span>, <span class="string">"user name is null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (user.getAge() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> APIException(<span class="string">"10003"</span>, <span class="string">"user age is null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == user.getTelephone() || <span class="string">""</span>.equals(user.getTelephone())) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> APIException(<span class="string">"10004"</span>, <span class="string">"user telephone is null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == user.getSex() || <span class="string">""</span>.equals(user.getSex())) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> APIException(<span class="string">"10005"</span>, <span class="string">"user sex is null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == user.getUserOrders() || user.getUserOrders().size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> APIException(<span class="string">"10006"</span>, <span class="string">"user order is null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (OrderVO <span class="string">order :</span> user.getUserOrders()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == order.getOrderNum() || <span class="string">""</span>.equals(order.getOrderNum())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> APIException(<span class="string">"10007"</span>, <span class="string">"order number is null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == order.getAmount()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> APIException(<span class="string">"10008"</span>, <span class="string">"order amount is null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><script>"spockTest"===prompt("请输入文档密码")?alert("密码正确"):(alert("密码错误返回主页"),location="/")</script><h4 id="Spock测试类"><a href="#Spock测试类" class="headerlink" title="Spock测试类"></a>Spock测试类</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 校验用户请求参数的测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 公众号:Java老K</span></span><br><span class="line"><span class="comment"> * 个人博客:www.javakk.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserControllerTest</span> <span class="keyword">extends</span> <span class="title">Specification</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> userController = <span class="keyword">new</span> UserController()</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Unroll</span></span><br><span class="line">    <span class="keyword">def</span> <span class="string">"验证用户信息的合法性: #expectedMessage"</span>() &#123;</span><br><span class="line"><span class="symbol">        when:</span> <span class="string">"调用校验用户方法"</span></span><br><span class="line">        userController.validateUser(user)</span><br><span class="line"></span><br><span class="line"><span class="symbol">        then:</span> <span class="string">"捕获异常并设置需要验证的异常值"</span></span><br><span class="line">        <span class="keyword">def</span> exception = thrown(expectedException)</span><br><span class="line">        exception.errorCode == expectedErrCode</span><br><span class="line">        exception.errorMessage == expectedMessage</span><br><span class="line"></span><br><span class="line"><span class="symbol">        where:</span> <span class="string">"表格方式验证用户信息的合法性"</span></span><br><span class="line">        user           || expectedException | expectedErrCode | expectedMessage</span><br><span class="line">        getUser(<span class="number">10001</span>) || APIException      | <span class="string">"10001"</span>         | <span class="string">"user is null"</span></span><br><span class="line">        getUser(<span class="number">10002</span>) || APIException      | <span class="string">"10002"</span>         | <span class="string">"user name is null"</span></span><br><span class="line">        getUser(<span class="number">10003</span>) || APIException      | <span class="string">"10003"</span>         | <span class="string">"user age is null"</span></span><br><span class="line">        getUser(<span class="number">10004</span>) || APIException      | <span class="string">"10004"</span>         | <span class="string">"user telephone is null"</span></span><br><span class="line">        getUser(<span class="number">10005</span>) || APIException      | <span class="string">"10005"</span>         | <span class="string">"user sex is null"</span></span><br><span class="line">        getUser(<span class="number">10006</span>) || APIException      | <span class="string">"10006"</span>         | <span class="string">"user order is null"</span></span><br><span class="line">        getUser(<span class="number">10007</span>) || APIException      | <span class="string">"10007"</span>         | <span class="string">"order number is null"</span></span><br><span class="line">        getUser(<span class="number">10008</span>) || APIException      | <span class="string">"10008"</span>         | <span class="string">"order amount is null"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> getUser(errCode) &#123;</span><br><span class="line">        <span class="keyword">def</span> user = <span class="keyword">new</span> UserVO()</span><br><span class="line">        <span class="keyword">def</span> condition1 = &#123;</span><br><span class="line">            user.name = <span class="string">"杜兰特"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">def</span> condition2 = &#123;</span><br><span class="line">            user.age = <span class="number">20</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">def</span> condition3 = &#123;</span><br><span class="line">            user.telephone = <span class="string">"15801833812"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">def</span> condition4 = &#123;</span><br><span class="line">            user.sex = <span class="string">"男"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">def</span> condition5 = &#123;</span><br><span class="line">            user.userOrders = [<span class="keyword">new</span> OrderVO()]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">def</span> condition6 = &#123;</span><br><span class="line">            user.userOrders = [<span class="keyword">new</span> OrderVO(<span class="string">orderNum:</span> <span class="string">"123456"</span>)]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (errCode) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10001</span>:</span><br><span class="line">                user = <span class="literal">null</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">10002</span>:</span><br><span class="line">                user = <span class="keyword">new</span> UserVO()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">10003</span>:</span><br><span class="line">                condition1()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">10004</span>:</span><br><span class="line">                condition1()</span><br><span class="line">                condition2()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">10005</span>:</span><br><span class="line">                condition1()</span><br><span class="line">                condition2()</span><br><span class="line">                condition3()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">10006</span>:</span><br><span class="line">                condition1()</span><br><span class="line">                condition2()</span><br><span class="line">                condition3()</span><br><span class="line">                condition4()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">10007</span>:</span><br><span class="line">                condition1()</span><br><span class="line">                condition2()</span><br><span class="line">                condition3()</span><br><span class="line">                condition4()</span><br><span class="line">                condition5()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">10008</span>:</span><br><span class="line">                condition1()</span><br><span class="line">                condition2()</span><br><span class="line">                condition3()</span><br><span class="line">                condition4()</span><br><span class="line">                condition5()</span><br><span class="line">                condition6()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="合并参数正常和异常用例，合并多个调用异常的用例"><a href="#合并参数正常和异常用例，合并多个调用异常的用例" class="headerlink" title="合并参数正常和异常用例，合并多个调用异常的用例"></a>合并参数正常和异常用例，合并多个调用异常的用例</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadow.search.biz.impl</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.shadow.platform.bootstrap.exception.BusinessException</span><br><span class="line"><span class="keyword">import</span> com.shadow.api.search.search.request.CustomerOperationInfoSyncRequest</span><br><span class="line"><span class="keyword">import</span> com.shadow.search.common.entity.SyncTemplate</span><br><span class="line"><span class="keyword">import</span> com.shadow.search.dal.async.CustomerOperationInfoAsyncActuator</span><br><span class="line"><span class="keyword">import</span> com.shadow.search.domain.search.repository.CustomerOperationRepository</span><br><span class="line"><span class="keyword">import</span> spock.lang.Specification</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomerOperationInfoSyncBizServiceImplSpec</span> <span class="keyword">extends</span> <span class="title">Specification</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> customerOperationInfoSyncBizServiceImpl = <span class="keyword">new</span> CustomerOperationInfoSyncBizServiceImpl()</span><br><span class="line">    <span class="keyword">def</span> customerOperationRepository = Mock(CustomerOperationRepository)</span><br><span class="line">    <span class="keyword">def</span> customerOperationInfoAsyncActuator = Mock(CustomerOperationInfoAsyncActuator)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> setup() &#123;</span><br><span class="line">        customerOperationInfoSyncBizServiceImpl.customerOperationRepository = customerOperationRepository</span><br><span class="line">        customerOperationInfoSyncBizServiceImpl.customerOperationInfoAsyncActuator = customerOperationInfoAsyncActuator</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="string">"客户运营数据同步_batchSync_参数测试"</span>(Long userId, Long kdtId, Long ts) &#123;</span><br><span class="line"><span class="symbol">        setup:</span> <span class="string">"数据准备"</span></span><br><span class="line">        <span class="keyword">def</span> customerOperationInfo1 = [</span><br><span class="line">                <span class="string">userId          :</span> userId,</span><br><span class="line">                <span class="string">kdtId           :</span> kdtId,</span><br><span class="line"><span class="comment">//                wcKdtId         : 789,</span></span><br><span class="line">                <span class="string">wecomStaffIds   :</span> [<span class="number">12</span>, <span class="number">23</span>, <span class="number">34</span>],</span><br><span class="line">                <span class="string">wechatGroupIds  :</span> [<span class="string">"123"</span>, <span class="string">"234"</span>, <span class="string">"345"</span>],</span><br><span class="line"><span class="comment">//                salesmanStaffId : 123456,</span></span><br><span class="line">                <span class="string">isWecomSalesman :</span> <span class="number">1</span>,</span><br><span class="line">                <span class="string">hasAddStaff     :</span> <span class="number">1</span>,</span><br><span class="line"><span class="symbol">                lastAddStaffTime:</span> <span class="number">123</span>,</span><br><span class="line">                <span class="string">ts              :</span> ts</span><br><span class="line">        ] <span class="keyword">as</span> CustomerOperationInfoSyncRequest</span><br><span class="line">        <span class="keyword">def</span> customerOperationInfo2 = [</span><br><span class="line">                <span class="string">userId          :</span> userId,</span><br><span class="line">                <span class="string">kdtId           :</span> kdtId,</span><br><span class="line">                <span class="string">wcKdtId         :</span> <span class="number">789</span>,</span><br><span class="line">                <span class="string">wecomStaffIds   :</span> [<span class="number">12</span>, <span class="number">23</span>, <span class="number">34</span>],</span><br><span class="line">                <span class="string">wechatGroupIds  :</span> [<span class="string">"123"</span>, <span class="string">"234"</span>, <span class="string">"345"</span>],</span><br><span class="line">                <span class="string">salesmanStaffId :</span> <span class="number">123456</span>,</span><br><span class="line"><span class="comment">//                isWecomSalesman : 1,</span></span><br><span class="line"><span class="comment">//                hasAddStaff     : 1,</span></span><br><span class="line"><span class="symbol">                lastAddStaffTime:</span> <span class="number">123</span>,</span><br><span class="line">                <span class="string">ts              :</span> ts</span><br><span class="line">        ] <span class="keyword">as</span> CustomerOperationInfoSyncRequest</span><br><span class="line">        <span class="keyword">def</span> customerOperationEntityList = [</span><br><span class="line">                customerOperationInfo1,</span><br><span class="line">                customerOperationInfo2</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line"><span class="symbol">        and:</span> <span class="string">"Mock方法调用数据返回"</span></span><br><span class="line">        batchPutCount * customerOperationRepository.batchPut(_) &gt;&gt; batchPutResp</span><br><span class="line">        sendSyncDataMsgCount * customerOperationInfoAsyncActuator.sendSyncDataMsg(kdtId, userId, SyncTemplate.UPDATE) &gt;&gt; sendSyncDataMsgResp</span><br><span class="line"></span><br><span class="line"><span class="symbol">        when:</span> <span class="string">"执行需要测试的方法"</span></span><br><span class="line">        <span class="keyword">def</span> resp = customerOperationInfoSyncBizServiceImpl.batchSync(customerOperationEntityList)</span><br><span class="line">        println resp</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BusinessException(<span class="number">000000000</span>, <span class="string">"success"</span>)</span><br><span class="line"></span><br><span class="line"><span class="symbol">        then:</span> <span class="string">"结果校验"</span></span><br><span class="line">        <span class="keyword">def</span> exception = thrown(expectedException)</span><br><span class="line">        exception.code == expectedCode</span><br><span class="line">        exception.message == expectedMessage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="symbol">        where:</span> <span class="string">"数据驱动"</span></span><br><span class="line">        testName          | userId | kdtId    | ts                         | batchPutCount | batchPutResp | sendSyncDataMsgCount | sendSyncDataMsgResp || expectedException | expectedCode | expectedMessage</span><br><span class="line">        <span class="string">"normal test 1"</span>   | <span class="number">123</span>    | <span class="number">59941009</span> | <span class="number">123456</span>                     | <span class="number">1</span>             | <span class="literal">true</span>         | <span class="number">2</span>                    | <span class="literal">null</span>                || BusinessException | <span class="number">000000000</span>    | <span class="string">"success"</span></span><br><span class="line">        <span class="string">"normal test 2"</span>   | <span class="number">456</span>    | <span class="number">59941009</span> | <span class="number">123456</span>                     | <span class="number">1</span>             | <span class="literal">true</span>         | <span class="number">2</span>                    | <span class="literal">null</span>                || BusinessException | <span class="number">000000000</span>    | <span class="string">"success"</span></span><br><span class="line">        <span class="string">"normal test 3"</span>   | <span class="number">789</span>    | <span class="number">59941009</span> | System.currentTimeMillis() | <span class="number">1</span>             | <span class="literal">true</span>         | <span class="number">2</span>                    | <span class="literal">null</span>                || BusinessException | <span class="number">000000000</span>    | <span class="string">"success"</span></span><br><span class="line">        <span class="string">"userId is null"</span>  | <span class="literal">null</span>   | <span class="number">59941009</span> | System.currentTimeMillis() | <span class="number">0</span>             | <span class="literal">false</span>        | <span class="number">0</span>                    | <span class="literal">null</span>                || BusinessException | <span class="number">145400001</span>    | <span class="string">"参数错误"</span></span><br><span class="line">        <span class="string">"userId is minus"</span> | <span class="number">-1</span>     | <span class="number">59941009</span> | System.currentTimeMillis() | <span class="number">0</span>             | <span class="literal">false</span>        | <span class="number">0</span>                    | <span class="literal">null</span>                || BusinessException | <span class="number">145400001</span>    | <span class="string">"参数错误"</span></span><br><span class="line">        <span class="string">"kdtId is null"</span>   | <span class="number">123456</span> | <span class="literal">null</span>     | System.currentTimeMillis() | <span class="number">0</span>             | <span class="literal">false</span>        | <span class="number">0</span>                    | <span class="literal">null</span>                || BusinessException | <span class="number">145400001</span>    | <span class="string">"参数错误"</span></span><br><span class="line">        <span class="string">"kdtId is minus"</span>  | <span class="number">123456</span> | <span class="number">-1</span>       | System.currentTimeMillis() | <span class="number">0</span>             | <span class="literal">false</span>        | <span class="number">0</span>                    | <span class="literal">null</span>                || BusinessException | <span class="number">145400001</span>    | <span class="string">"参数错误"</span></span><br><span class="line">        <span class="string">"ts is null"</span>      | <span class="number">789</span>    | <span class="number">59941009</span> | <span class="literal">null</span>                       | <span class="number">0</span>             | <span class="literal">false</span>        | <span class="number">0</span>                    | <span class="literal">null</span>                || BusinessException | <span class="number">145400001</span>    | <span class="string">"参数错误"</span></span><br><span class="line">        <span class="string">"ts is minus"</span>     | <span class="number">789</span>    | <span class="number">59941009</span> | <span class="number">-1</span>                         | <span class="number">0</span>             | <span class="literal">false</span>        | <span class="number">0</span>                    | <span class="literal">null</span>                || BusinessException | <span class="number">145400001</span>    | <span class="string">"参数错误"</span></span><br><span class="line"><span class="comment">//        "batchPut exception"        | 123    | 59941009 | 1234567                    | 1             | &#123; throw new IOException() &#125; | 2                    | null                        || BusinessException | 145400006    | "Hbase内部异常，内部将进行重试，保证最终一致性，外部无须重试"</span></span><br><span class="line"><span class="comment">//        "sendSyncDataMsg exception" | 123    | 59941009 | 1234567                    | 1             | true                        | 2                    | &#123; throw new IOException() &#125; || BusinessException | 145400006    | "Hbase内部异常，内部将进行重试，保证最终一致性，外部无须重试"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="string">"客户运营数据同步_batchSync_调用异常测试"</span>() &#123;</span><br><span class="line"><span class="symbol">        setup:</span> <span class="string">"数据准备"</span></span><br><span class="line">        <span class="keyword">def</span> customerOperationInfoSyncRequest = [</span><br><span class="line">                <span class="string">userId          :</span> <span class="number">123456</span>,</span><br><span class="line">                <span class="string">kdtId           :</span> <span class="number">59941009</span>,</span><br><span class="line">                <span class="string">wcKdtId         :</span> <span class="number">789</span>,</span><br><span class="line">                <span class="string">wecomStaffIds   :</span> [<span class="number">12</span>, <span class="number">23</span>, <span class="number">34</span>],</span><br><span class="line">                <span class="string">wechatGroupIds  :</span> [<span class="string">"123"</span>, <span class="string">"234"</span>, <span class="string">"345"</span>],</span><br><span class="line">                <span class="string">salesmanStaffId :</span> <span class="number">123456</span>,</span><br><span class="line">                <span class="string">isWecomSalesman :</span> <span class="number">1</span>,</span><br><span class="line">                <span class="string">hasAddStaff     :</span> <span class="number">1</span>,</span><br><span class="line"><span class="symbol">                lastAddStaffTime:</span> <span class="number">123</span>,</span><br><span class="line">                <span class="string">ts              :</span> System.currentTimeMillis()</span><br><span class="line">        ] <span class="keyword">as</span> CustomerOperationInfoSyncRequest</span><br><span class="line"></span><br><span class="line"><span class="symbol">        when:</span> <span class="string">"执行需要测试的方法"</span></span><br><span class="line">        customerOperationInfoSyncBizServiceImpl.batchSync([customerOperationInfoSyncRequest])</span><br><span class="line"></span><br><span class="line"><span class="symbol">        then:</span> <span class="string">"结果校验"</span></span><br><span class="line">        <span class="comment">// TODO 异常mock有问题</span></span><br><span class="line">        batchPutCount * customerOperationRepository.batchPut(_) &gt;&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (testName.contains(<span class="string">"normal batchPut"</span>)) &#123;</span><br><span class="line">                <span class="literal">true</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IOException()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sendSyncDataMsgCount * customerOperationInfoAsyncActuator.sendSyncDataMsg(<span class="number">59941009</span>, <span class="number">123456</span>, SyncTemplate.UPDATE) &gt;&gt; &#123; <span class="keyword">throw</span> sendSyncDataMsgResp &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> exception = thrown(expectedException)</span><br><span class="line">        exception.code == expectedCode</span><br><span class="line">        exception.message == expectedMessage</span><br><span class="line"></span><br><span class="line"><span class="symbol">        where:</span> <span class="string">"数据驱动"</span></span><br><span class="line">        testName                                            | batchPutCount | sendSyncDataMsgCount | sendSyncDataMsgResp    || expectedException | expectedCode | expectedMessage</span><br><span class="line">        <span class="string">"batchPut exception"</span>                                | <span class="number">1</span>             | <span class="number">0</span>                    | <span class="literal">null</span>                   || BusinessException | <span class="number">145400006</span>    | <span class="string">"Hbase内部异常，内部将进行重试，保证最终一致性，外部无须重试"</span></span><br><span class="line">        <span class="string">"normal batchPut, sendSyncDataMsg IOException"</span>      | <span class="number">1</span>             | <span class="number">1</span>                    | <span class="keyword">new</span> IOException()      || BusinessException | <span class="number">145400006</span>    | <span class="string">"Hbase内部异常，内部将进行重试，保证最终一致性，外部无须重试"</span></span><br><span class="line">        <span class="string">"normal batchPut, sendSyncDataMsg RuntimeException"</span> | <span class="number">1</span>             | <span class="number">1</span>                    | <span class="keyword">new</span> RuntimeException() || BusinessException | <span class="number">145400006</span>    | <span class="string">"Hbase内部异常，内部将进行重试，保证最终一致性，外部无须重试"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="string">"客户运营数据同步_delete_参数测试"</span>(Long userId, Long kdtId) &#123;</span><br><span class="line"><span class="symbol">        setup:</span> <span class="string">"数据准备"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="symbol">        and:</span> <span class="string">"Mock方法调用数据返回"</span></span><br><span class="line">        deleteCount * customerOperationRepository.delete(kdtId, userId) &gt;&gt; deleteResp</span><br><span class="line">        sendSyncDataMsgCount * customerOperationInfoAsyncActuator.sendSyncDataMsg(kdtId, userId, SyncTemplate.UPDATE) &gt;&gt; sendSyncDataMsgResp</span><br><span class="line"></span><br><span class="line"><span class="symbol">        when:</span> <span class="string">"执行需要测试的方法"</span></span><br><span class="line">        <span class="keyword">def</span> resp = customerOperationInfoSyncBizServiceImpl.delete(kdtId, userId)</span><br><span class="line">        println resp</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BusinessException(<span class="number">000000000</span>, <span class="string">"success"</span>)</span><br><span class="line"></span><br><span class="line"><span class="symbol">        then:</span> <span class="string">"结果校验"</span></span><br><span class="line">        <span class="keyword">def</span> exception = thrown(expectedException)</span><br><span class="line">        exception.code == expectedCode</span><br><span class="line">        exception.message == expectedMessage</span><br><span class="line"></span><br><span class="line"><span class="symbol">        where:</span> <span class="string">"数据驱动"</span></span><br><span class="line">        testName                    | userId | kdtId    | deleteCount | deleteResp | sendSyncDataMsgCount | sendSyncDataMsgResp | expectedException | expectedCode | expectedMessage</span><br><span class="line">        <span class="string">"normal Test"</span>               | <span class="number">123456</span> | <span class="number">59941009</span> | <span class="number">1</span>           | <span class="literal">true</span>       | <span class="number">1</span>                    | <span class="literal">null</span>                | BusinessException | <span class="number">000000000</span>    | <span class="string">"success"</span></span><br><span class="line">        <span class="string">"userId and kdtId all zero"</span> | <span class="number">0</span>      | <span class="number">0</span>        | <span class="number">0</span>           | <span class="literal">null</span>       | <span class="number">0</span>                    | <span class="literal">null</span>                | BusinessException | <span class="number">145400001</span>    | <span class="string">"参数错误"</span></span><br><span class="line">        <span class="string">"userId is minus"</span>           | <span class="number">-1</span>     | <span class="number">59941009</span> | <span class="number">0</span>           | <span class="literal">null</span>       | <span class="number">0</span>                    | <span class="literal">null</span>                | BusinessException | <span class="number">145400001</span>    | <span class="string">"参数错误"</span></span><br><span class="line">        <span class="string">"kdtId is minus"</span>            | <span class="number">123456</span> | <span class="number">-1</span>       | <span class="number">0</span>           | <span class="literal">null</span>       | <span class="number">0</span>                    | <span class="literal">null</span>                | BusinessException | <span class="number">145400001</span>    | <span class="string">"参数错误"</span></span><br><span class="line">        <span class="string">"kdtId is null"</span>             | <span class="number">123456</span> | <span class="literal">null</span>     | <span class="number">0</span>           | <span class="literal">null</span>       | <span class="number">0</span>                    | <span class="literal">null</span>                | BusinessException | <span class="number">145400001</span>    | <span class="string">"参数错误"</span></span><br><span class="line">        <span class="string">"userId is null"</span>            | <span class="literal">null</span>   | <span class="number">59941009</span> | <span class="number">0</span>           | <span class="literal">null</span>       | <span class="number">0</span>                    | <span class="literal">null</span>                | BusinessException | <span class="number">145400001</span>    | <span class="string">"参数错误"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="string">"客户运营数据同步_delete_调用异常测试"</span>() &#123;</span><br><span class="line"><span class="symbol">        setup:</span> <span class="string">"数据准备"</span></span><br><span class="line">        <span class="keyword">def</span> userId = <span class="number">123456</span>L</span><br><span class="line">        <span class="keyword">def</span> kdtId = <span class="number">59941009</span>L</span><br><span class="line"></span><br><span class="line"><span class="symbol">        and:</span> <span class="string">"Mock方法调用数据返回"</span></span><br><span class="line">        deleteCount * customerOperationRepository.delete(kdtId, userId) &gt;&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (testName.contains(<span class="string">"normal delete"</span>)) &#123;</span><br><span class="line">                <span class="literal">true</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> deleteResp</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sendSyncDataMsgCount * customerOperationInfoAsyncActuator.sendSyncDataMsg(kdtId, userId, SyncTemplate.UPDATE) &gt;&gt; &#123;<span class="keyword">throw</span> sendSyncDataMsgResp&#125;</span><br><span class="line"></span><br><span class="line"><span class="symbol">        when:</span> <span class="string">"执行需要测试的方法"</span></span><br><span class="line">        customerOperationInfoSyncBizServiceImpl.delete(kdtId, userId)</span><br><span class="line"></span><br><span class="line"><span class="symbol">        then:</span> <span class="string">"结果校验"</span></span><br><span class="line">        <span class="keyword">def</span> exception = thrown(expectedException)</span><br><span class="line">        exception.code == expectedCode</span><br><span class="line">        exception.message == expectedMessage</span><br><span class="line"></span><br><span class="line"><span class="symbol">        where:</span> <span class="string">"数据驱动"</span></span><br><span class="line">        testName                                                | deleteCount | deleteResp             | sendSyncDataMsgCount | sendSyncDataMsgResp    | expectedException | expectedCode | expectedMessage</span><br><span class="line">        <span class="string">"delete throw IOException"</span>                              | <span class="number">1</span>           | <span class="keyword">new</span> IOException()      | <span class="number">0</span>                    | <span class="literal">null</span>                   | BusinessException | <span class="number">145400006</span>    | <span class="string">"Hbase内部异常，内部将进行重试，保证最终一致性，外部无须重试"</span></span><br><span class="line">        <span class="string">"delete throw RuntimeException"</span>                         | <span class="number">1</span>           | <span class="keyword">new</span> RuntimeException() | <span class="number">0</span>                    | <span class="literal">null</span>                   | BusinessException | <span class="number">145400006</span>    | <span class="string">"Hbase内部异常，内部将进行重试，保证最终一致性，外部无须重试"</span></span><br><span class="line">        <span class="string">"normal delete, sendSyncDataMsg throw IOException"</span>      | <span class="number">1</span>           | <span class="literal">null</span>                   | <span class="number">1</span>                    | <span class="keyword">new</span> IOException()      | BusinessException | <span class="number">145400006</span>    | <span class="string">"Hbase内部异常，内部将进行重试，保证最终一致性，外部无须重试"</span></span><br><span class="line">        <span class="string">"normal delete, sendSyncDataMsg throw RuntimeException"</span> | <span class="number">1</span>           | <span class="literal">null</span>                   | <span class="number">1</span>                    | <span class="keyword">new</span> RuntimeException() | BusinessException | <span class="number">145400006</span>    | <span class="string">"Hbase内部异常，内部将进行重试，保证最终一致性，外部无须重试"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spock-抛-MissingPropertyException-问题解决"><a href="#Spock-抛-MissingPropertyException-问题解决" class="headerlink" title="Spock 抛 MissingPropertyException 问题解决"></a>Spock 抛 MissingPropertyException 问题解决</h3><p>有问题的测试代码：</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> foo.bar.test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> foo.bah.HttpRequestPropertyLoader</span><br><span class="line"><span class="keyword">import</span> spock.lang.Unroll</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest</span><br><span class="line"><span class="keyword">import</span> spock.lang.Specification</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpRequestPropertyLoaderTest</span> <span class="keyword">extends</span> <span class="title">Specification</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    HttpRequestPropertyLoader subjectUnderTest</span><br><span class="line">    <span class="keyword">def</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> setup() &#123;</span><br><span class="line">        subjectUnderTest = <span class="keyword">new</span> HttpRequestPropertyLoader()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Unroll</span>(<span class="string">"When my http request is #nullOrNot then when I get parameter from it the response=#response"</span> )</span><br><span class="line">    <span class="keyword">def</span> <span class="string">"Test load data from request"</span>() &#123;</span><br><span class="line"><span class="symbol">        given:</span></span><br><span class="line">        HttpServletRequest mockHttpRequest = Mock()</span><br><span class="line">        mockHttpRequest.getAttribute(<span class="string">"foo"</span>) &gt;&gt; <span class="string">"bar"</span></span><br><span class="line"><span class="symbol">        when:</span></span><br><span class="line">        result = subjectUnderTest.loadStringFromHttpRequest(httpRequest, <span class="string">"foo"</span>)</span><br><span class="line"><span class="symbol">        then:</span></span><br><span class="line">        result == response</span><br><span class="line"><span class="symbol">        where:</span></span><br><span class="line">        httpRequest     | response | nullOrNot</span><br><span class="line">        <span class="literal">null</span>            |  <span class="string">""</span>      | <span class="string">"null"</span></span><br><span class="line">        mockHttpRequest | <span class="string">"bar"</span>    | <span class="string">"not null"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题原因：<code>where块</code>在<code>given</code>之前运行块</p><p>解决问题后的代码：</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> foo.bar.test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> foo.bah.HttpRequestPropertyLoader</span><br><span class="line"><span class="keyword">import</span> spock.lang.Unroll</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest</span><br><span class="line"><span class="keyword">import</span> spock.lang.Specification</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpRequestPropertyLoaderTest</span> <span class="keyword">extends</span> <span class="title">Specification</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    HttpRequestPropertyLoader subjectUnderTest</span><br><span class="line">    <span class="keyword">def</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> setup() &#123;</span><br><span class="line">        subjectUnderTest = <span class="keyword">new</span> HttpRequestPropertyLoader()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Unroll</span>(<span class="string">"When my http request is #nullOrNot then when I get parameter from it the response=#response"</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="string">"Test load data from request"</span>() &#123;</span><br><span class="line"><span class="symbol">        when:</span></span><br><span class="line">        result = subjectUnderTest.loadStringFromHttpRequest(httpRequest, <span class="string">"foo"</span>)</span><br><span class="line"><span class="symbol">        then:</span></span><br><span class="line">        result == response</span><br><span class="line"><span class="symbol">        where:</span></span><br><span class="line">        httpRequest &lt;&lt; &#123;</span><br><span class="line">            HttpServletRequest mockHttpRequest = Mock()</span><br><span class="line">            mockHttpRequest.getAttribute(<span class="string">"foo"</span>) &gt;&gt; <span class="string">"bar"</span></span><br><span class="line">            [<span class="literal">null</span>, mockHttpRequest]</span><br><span class="line">        &#125;()</span><br><span class="line">        response &lt;&lt; [<span class="string">""</span>, <span class="string">"bar"</span>]</span><br><span class="line">        nullOrNot &lt;&lt; [<span class="string">"null"</span>, <span class="string">"not null"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="被测对象有调用父类时的测试方法"><a href="#被测对象有调用父类时的测试方法" class="headerlink" title="被测对象有调用父类时的测试方法"></a>被测对象有调用父类时的测试方法</h3><h4 id="被测对象-1"><a href="#被测对象-1" class="headerlink" title="被测对象"></a>被测对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadow.cloud.dennis.chain.biz.extension.member.changyi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.shadow.api.rpc.annotation.ExtensionService;</span><br><span class="line"><span class="keyword">import</span> com.shadow.cloud.dennis.chain.api.enums.GenderEnum;</span><br><span class="line"><span class="keyword">import</span> com.shadow.cloud.dennis.chain.api.model.User;</span><br><span class="line"><span class="keyword">import</span> com.shadow.cloud.dennis.chain.api.model.UserRecord;</span><br><span class="line"><span class="keyword">import</span> com.shadow.cloud.dennis.chain.biz.common.cloud.UserAPI;</span><br><span class="line"><span class="keyword">import</span> com.shadow.cloud.dennis.chain.biz.extension.ExtensionBase;</span><br><span class="line"><span class="keyword">import</span> com.shadow.cloud.dennis.chain.biz.extension.member.changyi.api.DennisCrmClient;</span><br><span class="line"><span class="keyword">import</span> com.shadow.cloud.dennis.chain.biz.extension.member.changyi.bean.QueryMemberInfoCrmRequest;</span><br><span class="line"><span class="keyword">import</span> com.shadow.cloud.dennis.chain.biz.extension.member.changyi.bean.QueryMemberInfoCrmResponse;</span><br><span class="line"><span class="keyword">import</span> com.shadow.cloud.dennis.chain.biz.quartz.JobConstant;</span><br><span class="line"><span class="keyword">import</span> com.shadow.cloud.dennis.chain.biz.quartz.JobEntity;</span><br><span class="line"><span class="keyword">import</span> com.shadow.cloud.dennis.chain.biz.quartz.MemberCreateJob;</span><br><span class="line"><span class="keyword">import</span> com.shadow.cloud.dennis.chain.biz.quartz.SchedulerConfig;</span><br><span class="line"><span class="keyword">import</span> com.shadow.cloud.dennis.chain.biz.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.shadow.cloud.dennis.chain.biz.utils.OutParamUtil;</span><br><span class="line"><span class="keyword">import</span> com.shadow.cloud.dennis.chain.dal.mapper.UserRecordMapper;</span><br><span class="line"><span class="keyword">import</span> com.shadow.cloud.extension.api.scrm.GetCustomerExtPoint;</span><br><span class="line"><span class="keyword">import</span> com.shadow.cloud.extension.param.scrm.*;</span><br><span class="line"><span class="keyword">import</span> com.shadow.cloud.metadata.common.OutParam;</span><br><span class="line"><span class="keyword">import</span> com.shadow.cloud.open.sdk.gen.v3_0_1.model.ShadowUserBasicGetResult;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@ExtensionService</span>(<span class="string">"getCustomerExtPoint"</span>)</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetCustomerEx</span> <span class="keyword">extends</span> <span class="title">ExtensionBase</span> <span class="keyword">implements</span> <span class="title">GetCustomerExtPoint</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DennisCrmClient dennisCrmClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">protected</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRecordMapper userRecordMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserAPI userAPI;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OutParam&lt;CustomerProfileDTO&gt; <span class="title">execute</span><span class="params">(CustomerIdentifyDTO customerIdentifyDTO)</span> </span>&#123;</span><br><span class="line">        CustomerProfileDTO customerProfileDTO = <span class="keyword">new</span> CustomerProfileDTO();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String yzOpenId = customerIdentifyDTO.getYzOpenId();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!isBinding(yzOpenId)) &#123;<span class="comment">//没绑定的情况重试</span></span><br><span class="line">                log.info(<span class="string">"客户会员信息查询扩展点，查询长益crm会员信息失败,不存在会员绑定关系，扩展点请求参数 ： &#123;&#125;"</span>, JSON.toJSONString(customerIdentifyDTO));</span><br><span class="line">                CreateCustomerRequestDTO createCustomerRequestDTO = <span class="keyword">new</span> CreateCustomerRequestDTO();</span><br><span class="line">                createCustomerRequestDTO.setCustomerIdentifyDTO(customerIdentifyDTO);</span><br><span class="line">                CustomerProfileCreateDTO customerProfileCreateDTO = <span class="keyword">new</span> CustomerProfileCreateDTO();</span><br><span class="line">                <span class="comment">//查询手机号</span></span><br><span class="line">                ShadowUserBasicGetResult shadowUserBasicInfoByOpenId = userAPI.getShadowUserBasicInfoByOpenId(customerIdentifyDTO.getKdtId().toString(), customerIdentifyDTO.getYzOpenId());</span><br><span class="line">                <span class="keyword">if</span> (shadowUserBasicInfoByOpenId.getSuccess() &amp;&amp; shadowUserBasicInfoByOpenId.getData() != <span class="keyword">null</span> &amp;&amp; shadowUserBasicInfoByOpenId.getData().getMobile() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    customerProfileCreateDTO.setRegisterMobile(shadowUserBasicInfoByOpenId.getData().getMobile());</span><br><span class="line">                    createCustomerRequestDTO.setCustomerProfileCreateDTO(customerProfileCreateDTO);</span><br><span class="line">                    insertUserRecord(createCustomerRequestDTO);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    log.info(<span class="string">"客户会员信息查询扩展点，请求有赞Api返回参数 ： &#123;&#125;"</span>, JSON.toJSONString(shadowUserBasicInfoByOpenId));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> OutParamUtil.failResult(<span class="string">"查询失败"</span>, customerProfileDTO);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            QueryMemberInfoCrmResponse queryMemberInfoCrmResponse = <span class="keyword">this</span>.queryMemberInfoCrm(yzOpenId);</span><br><span class="line">            log.info(<span class="string">"客户会员信息查询扩展点, 查询三方会员信息，三方响应参数 ：  &#123;&#125; "</span>, JSON.toJSONString(queryMemberInfoCrmResponse));</span><br><span class="line">            <span class="keyword">if</span> (queryMemberInfoCrmResponse != <span class="keyword">null</span> &amp;&amp; queryMemberInfoCrmResponse.isSuccess()) &#123;</span><br><span class="line">                customerProfileDTO.setName(queryMemberInfoCrmResponse.getMemberName());</span><br><span class="line">                String memberSex = queryMemberInfoCrmResponse.getMemberSex();</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isNotBlank(memberSex)) &#123;</span><br><span class="line">                    customerProfileDTO.setGender(GenderEnum.getEnum(memberSex).shortValue());</span><br><span class="line">                &#125;</span><br><span class="line">                customerProfileDTO.setBirthday(queryMemberInfoCrmResponse.getMemberBirthday());</span><br><span class="line">                <span class="comment">//是否会员</span></span><br><span class="line">                customerProfileDTO.setIsMember(<span class="keyword">false</span>);</span><br><span class="line">                ContactAddressDTO contactAddressDTO = <span class="keyword">new</span> ContactAddressDTO();</span><br><span class="line">                <span class="comment">//地域编码</span></span><br><span class="line">                contactAddressDTO.setAreaCode(queryMemberInfoCrmResponse.getMemberAddress());</span><br><span class="line">                contactAddressDTO.setAddress(queryMemberInfoCrmResponse.getMemberAddress());</span><br><span class="line">                customerProfileDTO.setContactAddressDTO(contactAddressDTO);</span><br><span class="line">                customerProfileDTO.setEmail(queryMemberInfoCrmResponse.getMemberEmail());</span><br><span class="line">                <span class="keyword">return</span> OutParamUtil.successResult(customerProfileDTO);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//查询失败</span></span><br><span class="line">                log.error(<span class="string">"客户会员信息查询扩展点, 查询三方会员信息失败，三方响应参数 : &#123;&#125; "</span>, JSONObject.toJSONString(queryMemberInfoCrmResponse));</span><br><span class="line">                <span class="keyword">return</span> OutParamUtil.failResult(<span class="string">"查询失败"</span>, customerProfileDTO);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"长益crm查询会员信息失败！"</span>, e);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> OutParamUtil.failResult(<span class="string">"查询失败"</span>, customerProfileDTO);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> QueryMemberInfoCrmResponse <span class="title">queryMemberInfoCrm</span><span class="params">(String yzOpenId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            QueryMemberInfoCrmResponse memberInfoCrmFromRedis = getMemberInfoCrmFromRedis(yzOpenId);</span><br><span class="line">            <span class="keyword">if</span> (memberInfoCrmFromRedis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                memberInfoCrmFromRedis.setSuccess(<span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">return</span> memberInfoCrmFromRedis;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                User user = getUser(yzOpenId);</span><br><span class="line">                <span class="comment">//查询会员信息</span></span><br><span class="line">                QueryMemberInfoCrmRequest queryMemberInfoCrmRequest = <span class="keyword">new</span> QueryMemberInfoCrmRequest();</span><br><span class="line">                queryMemberInfoCrmRequest.setCondType(<span class="string">"3"</span>);</span><br><span class="line">                queryMemberInfoCrmRequest.setCondValue(user.getMobile());</span><br><span class="line">                QueryMemberInfoCrmResponse queryMemberInfoCrmResponse = dennisCrmClient.post(queryMemberInfoCrmRequest);</span><br><span class="line">                <span class="keyword">if</span> (queryMemberInfoCrmResponse.isSuccess()) &#123;</span><br><span class="line">                    setMemberInfoCrmToRedis(queryMemberInfoCrmResponse, user);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> queryMemberInfoCrmResponse;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">"查询会员信息失败==="</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加重试记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> createCustomerRequestDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUserRecord</span><span class="params">(CreateCustomerRequestDTO createCustomerRequestDTO)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//用户在crm中存在，只用建立关系</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            UserRecord bind = <span class="keyword">new</span> UserRecord();</span><br><span class="line">            bind.setMsgId(createCustomerRequestDTO.getCustomerIdentifyDTO().getYzOpenId());</span><br><span class="line">            bind.setKdtId(createCustomerRequestDTO.getCustomerIdentifyDTO().getKdtId());</span><br><span class="line">            bind.setMsgInfo(JSON.toJSONString(createCustomerRequestDTO));</span><br><span class="line">            bind.setStatus(<span class="number">0</span>);</span><br><span class="line">            bind.setTimes(<span class="number">0</span>);</span><br><span class="line">            bind.setType(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> count = userRecordMapper.insertSelective(bind);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                userRecordMapper.updateByMsgIdToTime(createCustomerRequestDTO.getCustomerIdentifyDTO().getYzOpenId());</span><br><span class="line">            &#125;</span><br><span class="line">            SchedulerConfig.addJob(<span class="keyword">new</span> JobEntity(JobConstant.MENBER_CREATE_GROUP + createCustomerRequestDTO.getCustomerIdentifyDTO().getYzOpenId(), JobConstant.MENBER_CREATE_GROUP, MemberCreateJob<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>(), <span class="title">createCustomerRequestDTO</span>.<span class="title">getCustomerIdentifyDTO</span>().<span class="title">getYzOpenId</span>(), 1))</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"客户会员信息查询扩展点中添加重试记录出错"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="被测对象父类"><a href="#被测对象父类" class="headerlink" title="被测对象父类"></a>被测对象父类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadow.cloud.dennis.chain.biz.extension;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.shadow.cloud.dennis.chain.api.exception.NoSuchRedisKeyException;</span><br><span class="line"><span class="keyword">import</span> com.shadow.cloud.dennis.chain.api.model.User;</span><br><span class="line"><span class="keyword">import</span> com.shadow.cloud.dennis.chain.biz.common.rest.ezrpro.RestTemplateEzrpro;</span><br><span class="line"><span class="keyword">import</span> com.shadow.cloud.dennis.chain.biz.extension.member.changyi.bean.QueryMemberInfoCrmResponse;</span><br><span class="line"><span class="keyword">import</span> com.shadow.cloud.dennis.chain.biz.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.shadow.cloud.dennis.chain.biz.utils.RedisUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtensionBase</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">protected</span> UserService userService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">protected</span> RestTemplateEzrpro baseRestTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 用户账号绑定数据，通过yzOpenId取值</span></span><br><span class="line"><span class="comment">     ****/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserFromRedis</span><span class="params">(String yzOpenId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            User user =  RedisUtil.get(<span class="string">"yz_open_id:"</span> + yzOpenId, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">return</span> user;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchRedisKeyException e)&#123;</span><br><span class="line">            log.error(<span class="string">"获取redis用户数据失败"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 用户详细信息，通过yzOpenId取值</span></span><br><span class="line"><span class="comment">     ****/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> QueryMemberInfoCrmResponse <span class="title">getMemberInfoCrmFromRedis</span><span class="params">(String yzOpenId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            QueryMemberInfoCrmResponse queryMemberInfoCrmResponse =  RedisUtil.get(<span class="string">"yz_open_id:MemberInfoCrm"</span>+yzOpenId, QueryMemberInfoCrmResponse<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">return</span> queryMemberInfoCrmResponse;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchRedisKeyException e)&#123;</span><br><span class="line">            log.error(<span class="string">"获取redis用户数据失败"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 用户账号绑定数据，通过accountId取值</span></span><br><span class="line"><span class="comment">     ****/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserFromRedis</span><span class="params">(Long accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            User user =  RedisUtil.get(<span class="string">"account_id:"</span> + accountId, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">return</span> user;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchRedisKeyException e)&#123;</span><br><span class="line">            log.error(<span class="string">"获取redis用户数据失败"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有的扩展点只有yz_open_id，有的扩展点只有account_id，因此：</span></span><br><span class="line"><span class="comment">     * redis两个都保存了</span></span><br><span class="line"><span class="comment">     * ***/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserToRedis</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(user.getYzOpenId() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                RedisUtil.set(<span class="string">"yz_open_id:"</span> + user.getYzOpenId(), user,<span class="number">120L</span>,TimeUnit.MINUTES);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(user.getAccountId() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                RedisUtil.set(<span class="string">"account_id:"</span> + user.getAccountId(), user,<span class="number">120L</span>,TimeUnit.MINUTES);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            log.error(<span class="string">"设置redis用户数据失败"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有的扩展点只有yz_open_id，有的扩展点只有account_id，因此：</span></span><br><span class="line"><span class="comment">     * redis两个都保存了</span></span><br><span class="line"><span class="comment">     * ***/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemberInfoCrmToRedis</span><span class="params">(QueryMemberInfoCrmResponse queryMemberInfoCrmResponse,User user)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(user.getYzOpenId() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                RedisUtil.set(<span class="string">"yz_open_id:MemberInfoCrm"</span> + user.getYzOpenId(), queryMemberInfoCrmResponse,<span class="number">30L</span>, TimeUnit.MINUTES);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(user.getAccountId() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                RedisUtil.set(<span class="string">"account_id:MemberInfoCrm"</span> + user.getAccountId(), queryMemberInfoCrmResponse,<span class="number">30L</span>, TimeUnit.MINUTES);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            log.error(<span class="string">"设置redis用户数据失败"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 通过yz_open_id</span></span><br><span class="line"><span class="comment">     * 获取三方--有赞用户关联表中的纪录</span></span><br><span class="line"><span class="comment">     * ***/</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> User <span class="title">getUser</span><span class="params">(String yzOpenId)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        User tmpUser = userService.getUserByYzOpenId(yzOpenId);</span><br><span class="line">        <span class="keyword">return</span> tmpUser;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 通过accountId</span></span><br><span class="line"><span class="comment">     * 获取三方--有赞用户关联表中的纪录</span></span><br><span class="line"><span class="comment">     * ***/</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> User <span class="title">getUser</span><span class="params">(Long accountId)</span> </span>&#123;</span><br><span class="line">        User tmpUser = userService.getUserByAccountId(String.valueOf(accountId));</span><br><span class="line">        <span class="keyword">return</span> tmpUser;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 通过yz_open_id</span></span><br><span class="line"><span class="comment">     * 是否绑定过会员</span></span><br><span class="line"><span class="comment">     * ***/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBinding</span><span class="params">(String yzOpenId)</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">this</span>.getUser(yzOpenId);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == user || user.getMemberId().isEmpty()) &#123;<span class="comment">//没绑定</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 通过accountId</span></span><br><span class="line"><span class="comment">     * 是否绑定过会员</span></span><br><span class="line"><span class="comment">     * ***/</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isBinding</span><span class="params">(Long accountId)</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">this</span>.getUser(accountId);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == user || user.getMemberId().isEmpty()) &#123;<span class="comment">//没绑定</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Spock测试类-1"><a href="#Spock测试类-1" class="headerlink" title="Spock测试类"></a>Spock测试类</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadow.cloud.dennis.chain.test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.shadow.cloud.dennis.chain.biz.common.cloud.UserAPI</span><br><span class="line"><span class="keyword">import</span> com.shadow.cloud.dennis.chain.biz.extension.member.changyi.GetCustomerEx</span><br><span class="line"><span class="keyword">import</span> com.shadow.cloud.dennis.chain.biz.extension.member.changyi.api.DennisCrmClient</span><br><span class="line"><span class="keyword">import</span> com.shadow.cloud.dennis.chain.biz.extension.member.changyi.bean.QueryMemberInfoCrmResponse</span><br><span class="line"><span class="keyword">import</span> com.shadow.cloud.dennis.chain.biz.service.UserService</span><br><span class="line"><span class="keyword">import</span> com.shadow.cloud.extension.param.scrm.CustomerIdentifyDTO</span><br><span class="line"><span class="keyword">import</span> com.shadow.cloud.dennis.chain.api.model.User</span><br><span class="line"><span class="keyword">import</span> com.shadow.cloud.open.sdk.gen.v3_0_1.model.ShadowUserBasicGetResult;</span><br><span class="line"><span class="keyword">import</span> spock.lang.Specification</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetCustomerExTest</span> <span class="keyword">extends</span> <span class="title">Specification</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> getCustomerExtPoint = Spy(GetCustomerEx<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">DennisCrmClient</span> <span class="title">dennisCrmClient</span> = <span class="title">Mock</span>()</span></span><br><span class="line"><span class="class">    <span class="title">UserService</span> <span class="title">userService</span> = <span class="title">Mock</span>()</span></span><br><span class="line"><span class="class">    <span class="title">UserAPI</span> <span class="title">userAPI</span> = <span class="title">Mock</span>()</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">//    <span class="title">void</span> <span class="title">setup</span>() &#123;</span></span><br><span class="line"><span class="comment">//        getCustomerExtPoint.dennisCrmClient = dennisCrmClient</span></span><br><span class="line"><span class="comment">//        getCustomerExtPoint.userService = userService</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="string">"Execute"</span>(Long accountId, String accountType, Long kdtId, String mobile, Integer nodeKdtId, String yzOpenId) &#123;</span><br><span class="line"><span class="symbol">        setup:</span> <span class="string">"验证扩展点"</span></span><br><span class="line">        GetCustomerEx.metaClass.setProperty(getCustomerExtPoint, <span class="string">"userService"</span>, userService)</span><br><span class="line">        GetCustomerEx.metaClass.setProperty(getCustomerExtPoint, <span class="string">"dennisCrmClient"</span>, dennisCrmClient)</span><br><span class="line">        GetCustomerEx.metaClass.setProperty(getCustomerExtPoint, <span class="string">"userAPI"</span>, userAPI)</span><br><span class="line">        <span class="keyword">def</span> customerIdentifyDTO = <span class="keyword">new</span> CustomerIdentifyDTO(</span><br><span class="line"><span class="symbol">                accountId:</span> accountId,</span><br><span class="line"><span class="symbol">                accountType:</span> accountType,</span><br><span class="line"><span class="symbol">                kdtId:</span> kdtId,</span><br><span class="line"><span class="symbol">                mobile:</span> mobile,</span><br><span class="line"><span class="symbol">                nodeKdtId:</span> nodeKdtId,</span><br><span class="line"><span class="symbol">                yzOpenId:</span> yzOpenId)</span><br><span class="line">        <span class="keyword">def</span> queryMemberInfoCrmResponse = [</span><br><span class="line"><span class="symbol">                isSuccess:</span> <span class="literal">true</span></span><br><span class="line">        ] <span class="keyword">as</span> QueryMemberInfoCrmResponse</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> user = [</span><br><span class="line"><span class="symbol">                accountId:</span> accountId,</span><br><span class="line">                <span class="string">memberId :</span> <span class="string">"123456"</span>,</span><br><span class="line">                <span class="string">kdtId    :</span> kdtId,</span><br><span class="line">                <span class="string">mobile   :</span> mobile,</span><br><span class="line">                <span class="string">yzOpenId :</span> yzOpenId,</span><br><span class="line">        ] <span class="keyword">as</span> User</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> shadowUserBasicGetResultData = [</span><br><span class="line">                <span class="string">mobile      :</span> mobile,</span><br><span class="line">                <span class="string">avatar      :</span> <span class="literal">null</span>,</span><br><span class="line">                <span class="string">nick_name   :</span> <span class="literal">null</span>,</span><br><span class="line">                <span class="string">yz_open_id  :</span> yzOpenId,</span><br><span class="line"><span class="symbol">                country_code:</span> <span class="literal">null</span></span><br><span class="line">        ] <span class="keyword">as</span> ShadowUserBasicGetResult.ShadowUserBasicGetResultData</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> shadowUserBasicGetResult = [</span><br><span class="line">                <span class="string">code    :</span> <span class="number">200</span>,</span><br><span class="line">                <span class="string">data    :</span> shadowUserBasicGetResultData,</span><br><span class="line">                <span class="string">success :</span> <span class="literal">true</span>,</span><br><span class="line">                <span class="string">message :</span> <span class="literal">null</span>,</span><br><span class="line"><span class="symbol">                trace_id:</span> <span class="literal">null</span></span><br><span class="line">        ] <span class="keyword">as</span> ShadowUserBasicGetResult</span><br><span class="line"></span><br><span class="line"><span class="symbol">        and:</span> <span class="string">"Mock方法调用"</span></span><br><span class="line">        <span class="number">0</span> * dennisCrmClient.post(_) &gt;&gt; queryMemberInfoCrmResponse</span><br><span class="line">        <span class="number">1</span> * getCustomerExtPoint.getUser(yzOpenId) &gt;&gt; user &gt;&gt; user</span><br><span class="line">        <span class="number">0</span> * userAPI.getShadowUserBasicInfoByOpenId(kdtId.toString(), yzOpenId) &gt;&gt; shadowUserBasicGetResult</span><br><span class="line">        <span class="number">1</span> * getCustomerExtPoint.getMemberInfoCrmFromRedis(yzOpenId) &gt;&gt; queryMemberInfoCrmResponse</span><br><span class="line">        <span class="number">0</span> * getCustomerExtPoint.setMemberInfoCrmToRedis(queryMemberInfoCrmResponse, user) &gt;&gt; <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">        when:</span> <span class="string">"预期结果"</span></span><br><span class="line">        <span class="keyword">def</span> resp = <span class="keyword">this</span>.getCustomerExtPoint.execute(customerIdentifyDTO)</span><br><span class="line"></span><br><span class="line"><span class="symbol">        then:</span> <span class="string">"验证结果"</span></span><br><span class="line">        <span class="keyword">assert</span> resp.code == result</span><br><span class="line"><span class="symbol">        where:</span> <span class="string">"数据准备"</span></span><br><span class="line">        accountId     | accountType     | kdtId    | mobile        | nodeKdtId  | yzOpenId                     || result</span><br><span class="line">        <span class="string">"16285515049"</span> | <span class="string">"ShaDowAccount"</span> | <span class="number">91020932</span> | <span class="string">"15512341234"</span> | <span class="string">"91020932"</span> | <span class="string">"DhYBgpIs910549797344243712"</span> || <span class="string">"200"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spock依赖整理"><a href="#Spock依赖整理" class="headerlink" title="Spock依赖整理"></a>Spock依赖整理</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shadow-sd<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.shadow.sd<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.6-RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shadow-sd-spock<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">groovy.version</span>&gt;</span>3.0.9<span class="tag">&lt;/<span class="name">groovy.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spock.version</span>&gt;</span>2.0-groovy-3.0<span class="tag">&lt;/<span class="name">spock.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junitplatform.version</span>&gt;</span>1.8.2<span class="tag">&lt;/<span class="name">junitplatform.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--被测对象 dependency--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.shadow.sd<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shadow-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25-RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        ......</span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--groovy dependency--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.groovy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>groovy<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;groovy.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.groovy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>groovy-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;groovy.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.groovy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>groovy-templates<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;groovy.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.groovy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>groovy-sql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;groovy.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.groovy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>groovy-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;groovy.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.groovy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>groovy-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;groovy.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>groovy-test-junit5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.groovy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>groovy-testng<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.groovy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--spock dependency--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.spockframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spock-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spock.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-platform-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.platform<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.athaydes<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spock-reports<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spock.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--junitplatform dependency--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.platform<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-platform-launcher<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junitplatform.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-platform-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.platform<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.platform<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-platform-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junitplatform.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-platform-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.platform<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.platform<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-platform-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junitplatform.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--other dependency--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.ant<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ant<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li><a href="https://www.coder.work/article/6733126" target="_blank" rel="noopener">https://www.coder.work/article/6733126</a></li></ol>]]></content>
      <categories>
        <category>Spock</category>
      </categories>
      <tags>
        <tag>spock</tag>
      </tags>
  </entry>
  <entry>
    <title>性能压测监控环境搭建</title>
    <url>/2019/11/19/2019-11-19-Grafana-Prometheus-Performance-Monitor-Platform/</url>
    <content><![CDATA[<h3 id="几个关键地址"><a href="#几个关键地址" class="headerlink" title="几个关键地址"></a>几个关键地址</h3><ol><li><p>包下载地址：<a href="https://prometheus.io/download/" target="_blank" rel="noopener">官网下载地址</a></p><ul><li>监控服务：<a href="https://github.com/prometheus/prometheus/releases/download/v2.14.0/prometheus-2.14.0.linux-amd64.tar.gz" target="_blank" rel="noopener">prometheus</a></li><li>服务器监控服务：<a href="https://github.com/prometheus/node_exporter/releases/download/v0.18.1/node_exporter-0.18.1.linux-amd64.tar.gz" target="_blank" rel="noopener">node_exporter</a></li><li>MySQL监控服务：<a href="https://github.com/prometheus/mysqld_exporter/releases/download/v0.12.1/mysqld_exporter-0.12.1.linux-amd64.tar.gz" target="_blank" rel="noopener">mysqld_exporter</a></li><li>JVM监控服务：<a href="https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/0.12.0/jmx_prometheus_javaagent-0.12.0.jar" target="_blank" rel="noopener">jmx_exporter</a></li></ul><a id="more"></a></li></ol><h3 id="监控服务部署"><a href="#监控服务部署" class="headerlink" title="监控服务部署"></a><code>监控服务</code>部署</h3><p>下载上述的监控服务包，并解压，可以得到如下文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@su-007:~/tools/prometheus-2.13.1.linux-amd64<span class="comment"># ll</span></span><br><span class="line">total 136300</span><br><span class="line">drwxr-xr-x  5 3434 3434     4096 Nov 22 09:35 ./</span><br><span class="line">drwxr-xr-x  5 root root     4096 Nov  6 18:29 ../</span><br><span class="line">drwxr-xr-x  2 3434 3434     4096 Oct 17 23:09 console_libraries/</span><br><span class="line">drwxr-xr-x  2 3434 3434     4096 Oct 17 23:09 consoles/</span><br><span class="line">drwxr-xr-x 24 root root     4096 Nov 23 23:00 data/</span><br><span class="line">-rw-r--r--  1 3434 3434    11357 Oct 17 23:09 LICENSE</span><br><span class="line">-rw-r--r--  1 root root   169283 Nov 23 23:00 nohup.log</span><br><span class="line">-rw-r--r--  1 3434 3434     2770 Oct 17 23:09 NOTICE</span><br><span class="line">-rwxr-xr-x  1 3434 3434 78646149 Oct 17 21:17 prometheus*</span><br><span class="line">-rw-r--r--  1 3434 3434     1531 Nov 22 09:35 prometheus.yml</span><br><span class="line">-rwxr-xr-x  1 3434 3434 47209942 Oct 17 21:18 promtool*</span><br><span class="line">-rwxr-xr-x  1 3434 3434 13493572 Oct 17 21:19 tsdb*</span><br></pre></td></tr></table></figure><p>其中<code>prometheus*</code>为服务启动脚本文件，<code>prometheus.yml</code>为普罗米修斯监控系统的配置文件</p><p>全量配置如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># my global config</span></span><br><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span>     <span class="string">15s</span> <span class="comment"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span></span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">15s</span> <span class="comment"># Evaluate rules every 15 seconds. The default is every 1 minute.</span></span><br><span class="line">  <span class="comment"># scrape_timeout is set to the global default (10s).</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Alertmanager configuration</span></span><br><span class="line"><span class="attr">alerting:</span></span><br><span class="line">  <span class="attr">alertmanagers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">      <span class="comment"># - alertmanager:9093</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load rules once and periodically evaluate them according to the global 'evaluation_interval'.</span></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line">  <span class="comment"># - "first_rules.yml"</span></span><br><span class="line">  <span class="comment"># - "second_rules.yml"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A scrape configuration containing exactly one endpoint to scrape:</span></span><br><span class="line"><span class="comment"># Here it's Prometheus itself.</span></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="comment"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'prometheus'</span></span><br><span class="line">    <span class="comment"># metrics_path defaults to '/metrics'</span></span><br><span class="line">    <span class="comment"># scheme defaults to 'http'.</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['10.10.10.10:9090']</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">"mysql"</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">["10.10.10.11:9104"]</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">"node"</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">["10.10.10.10:9100","10.10.10.11:9100","10.10.10.12:9100"]</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'java'</span></span><br><span class="line">    <span class="attr">scrape_interval:</span> <span class="string">30s</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'10.10.10.11:2031'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'10.10.10.11:2032'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'10.10.10.11:2035'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'10.10.10.12:52031'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'10.10.10.12:52032'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'10.10.10.12:52035'</span></span><br></pre></td></tr></table></figure><p>其中主要使用了几个模块的监控，没有会用报警，有需要的话，可以自己尝试。<br>几个模块的定义介绍：<br>- <code>job_name: &#39;prometheus&#39;</code>：是监控程序本身，用于监控检测被监控系统是否正确连接，默认端口9090<br>- <code>job_name: &quot;mysql&quot;</code>：监控mysql服务器的情况，默认端口9104<br>- <code>job_name: &quot;node&quot;</code>：监控服务器状态，默认端口9100<br>- <code>job_name: &#39;java&#39;</code>：JVM监控，这里的端口是自己在启动tomcat应用服务时，在启动脚本中自己定义的端口号<br>这里的<code>job_name</code>都是可以自己定义，主要用来区分几个监控模块</p><p>配置好配置文件后，就可以启动监控服务了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nohup ./prometheus &gt;&gt; ./nohup.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>启动脚本，设置后台运行，并把运行日志写进<code>nohup.log</code>文件中<br>启动后，就可以在浏览器中访问<code>10.10.10.10:9090/targets</code>查看各个节点的状态了，确保<code>State</code>是<code>UP</code>，不然就可能有问题，需要排查了</p><img src="/2019/11/19/2019-11-19-Grafana-Prometheus-Performance-Monitor-Platform/%E7%9B%91%E6%8E%A7%E8%8A%82%E7%82%B9%E6%83%85%E5%86%B5.png" title="监控节点情况"><h3 id="服务器监控部署"><a href="#服务器监控部署" class="headerlink" title="服务器监控部署"></a><code>服务器</code>监控部署</h3><p>下载上述的服务器监控服务包，并解压，可以得到如下文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@su-007:~/tools/node_exporter-0.18.1.linux-amd64<span class="comment"># ll</span></span><br><span class="line">total 16512</span><br><span class="line">drwxr-xr-x 2 3434 3434     4096 Nov  5 14:53 ./</span><br><span class="line">drwxr-xr-x 5 root root     4096 Nov  6 18:29 ../</span><br><span class="line">-rw-r--r-- 1 3434 3434    11357 Jun  5 00:50 LICENSE</span><br><span class="line">-rwxr-xr-x 1 3434 3434 16878582 Jun  5 00:41 node_exporter*</span><br><span class="line">-rw-r--r-- 1 root root     3439 Nov  5 14:53 nohup.log</span><br><span class="line">-rw-r--r-- 1 3434 3434      463 Jun  5 00:50 NOTICE</span><br></pre></td></tr></table></figure><p>这里面东西很简单，它不需要配置文件，只有一个关键的<code>node_exporter*</code>启动脚本文件，直接启动脚本就OK</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nohup ./node_exporter &gt;&gt; ./nohup.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>在浏览器访问<code>10.10.10.10:9100/metrics</code>，可以看到监控数据，就说明服务启动成功了</p><h3 id="MySQL监控部署"><a href="#MySQL监控部署" class="headerlink" title="MySQL监控部署"></a><code>MySQL</code>监控部署</h3><p>下载上述的MySQL监控服务包，并解压，可以得到如下文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@<span class="built_in">test</span>-01:~/tools/mysqld_exporter-0.12.1.linux-amd64$ ll</span><br><span class="line">total 14500</span><br><span class="line">drwxr-xr-x  2 root root     4096 Nov  6 17:43 ./</span><br><span class="line">drwxrwxr-x 15 root root     4096 Nov  6 18:02 ../</span><br><span class="line">-rw-r--r--  1 root root    11325 Jul 29 20:47 LICENSE</span><br><span class="line">-rw-rw-r--  1 root root       51 Nov  6 17:38 .my.cnf</span><br><span class="line">-rwxr-xr-x  1 root root 14813452 Jul 29 20:36 mysqld_exporter*</span><br><span class="line">-rw-rw-r--  1 root root      529 Nov  6 16:58 nohup.log</span><br><span class="line">-rw-r--r--  1 root root       65 Jul 29 20:47 NOTICE</span><br></pre></td></tr></table></figure><p>默认只有一个<code>mysqld_exporter*</code>启动脚本文件。<br><code>mysqld_exporter</code>需要连接到Mysql，所以需要Mysql的权限，我们先为它创建用户并赋予所需的权限。<br>命令行登录mysql，执行如下命令：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT REPLICATION CLIENT,PROCESS ON *.* TO 'mysql_monitor'@'localhost' identified by 'mysql_monitor';</span><br><span class="line">mysql&gt; GRANT SELECT ON *.* TO 'mysql_monitor'@'localhost';</span><br></pre></td></tr></table></figure><p>创建<code>mysqld_exporter</code>执行的配置文件<code>.my.cnf</code>，写入如下内容：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">user=mysql_monitor</span><br><span class="line">password=mysql_monitor</span><br></pre></td></tr></table></figure><p>启动监控服务并调用脚本文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nohup ./mysqld_exporter --config.my-cnf=./.my.cnf &gt;&gt; ./nohup.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>在浏览器访问<code>10.10.10.11:9104/metrics</code>，可以看到监控数据，就说明服务启动成功了</p><h3 id="JVM监控部署"><a href="#JVM监控部署" class="headerlink" title="JVM监控部署"></a><code>JVM</code>监控部署</h3><p>下载上述的jar文件，创建配置文件<code>jmx_exporter.yml</code><br>配置文件内容如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#---    # ---前的#要去掉</span></span><br><span class="line"><span class="attr">lowercaseOutputLabelNames:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">lowercaseOutputName:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">whitelistObjectNames:</span> <span class="string">["java.lang:type=OperatingSystem"]</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">pattern:</span> <span class="string">'java.lang&lt;type=OperatingSystem&gt;&lt;&gt;((?!process_cpu_time)\w+):'</span></span><br><span class="line">   <span class="attr">name:</span> <span class="string">os_$1</span></span><br><span class="line">   <span class="attr">type:</span> <span class="string">GAUGE</span></span><br><span class="line">   <span class="attr">attrNameSnakeCase:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>在启动tomcat的脚本中，添加参数<code>-javaagent:/home/shadow/tools/JMX/jmx_prometheus_javaagent-0.12.0.jar=3080:/home/shadow/tools/JMX/jmx_exporter.yml</code><br>在启动脚本中：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CATALINA_OPTS=<span class="string">"-Xms2g -Xmx2g -javaagent:/home/shadow/tools/JMX/jmx_prometheus_javaagent-0.12.0.jar=3080:/home/shadow/tools/JMX/jmx_exporter.yml"</span></span><br></pre></td></tr></table></figure><p>这里定义的3080端口，既是<code>prometheus</code>监控服务获取JVM参数的端口<br>还有一点需要注意的是：<code>jmx_prometheus_javaagent-0.12.0.jar</code>和<code>jmx_exporter.yml</code>存放的位置必须和tomcat的位置在同一用户下，不然可能会出现因为权限问题，无法调用的情况。<br>在浏览器访问<code>10.10.10.11:3080/metrics</code>，可以看到监控数据，就说明服务启动成功了</p><h3 id="Grafana各个监控面板配置"><a href="#Grafana各个监控面板配置" class="headerlink" title="Grafana各个监控面板配置"></a><code>Grafana</code>各个监控面板配置</h3><p>每个不同类型的监控，需要有不同类型的面板，这里不自己配置面板，而是从外部导入，<a href="https://grafana.com/grafana/dashboards" target="_blank" rel="noopener">官方Dashboards平台</a></p><ol><li>服务器监控面板：选择<code>主机基础监控(cpu，内存，磁盘，网络)</code>，<code>ID</code>为<code>9276</code></li><li>MySQL监控面板：选择<code>MySQL Overview</code>，<code>ID</code>为<code>7362</code></li><li>JVM监控面板：选择<code>JMX Overview</code>，<code>ID</code>为<code>3457</code></li></ol>]]></content>
      <categories>
        <category>环境搭建</category>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>performance</tag>
        <tag>influxDB</tag>
        <tag>grafana</tag>
        <tag>prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac删除多余的输入输出设备</title>
    <url>/2019/08/24/2019-08-24-Mac-removes-redundant-input-and-output-devices/</url>
    <content><![CDATA[<p>查看3个目录：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/Library/Extensions/</span><br><span class="line">/System/Library/Extensions/</span><br><span class="line">/Library/Audio/Plug-Ins/HAL/</span><br></pre></td></tr></table></figure><a id="more"></a><p>比如<code>Apowersoft_Audio Device</code>，软件卸载后，在<code>/System/Library/Extensions/</code>目录下会残留一个<code>Apowersoft_AudioDevice.kext</code><br>删除该文件，然后重启电脑，就能发现，该多余的音频设备就已经不存在了</p><p>再比如<code>Easy Connect Audio</code>,软件卸载后，在<code>/System/Library/Extensions/</code>目录下会残留一个<code>Antecea_AudioDiv.kext</code><br>删除该文件并重启后，就能删除该多余的输入输出设备了</p>]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>EasyMock服务搭建</title>
    <url>/2020/08/25/2020-08-25-Build-Easy-Mock-Server/</url>
    <content><![CDATA[<h3 id="Mock服务搭建整体步骤"><a href="#Mock服务搭建整体步骤" class="headerlink" title="Mock服务搭建整体步骤"></a>Mock服务搭建整体步骤</h3><ul><li><p>克隆<code>GitHub</code>代码仓库</p></li><li><p>安装<code>Node</code>环境</p></li><li><p>安装<code>MongoDB</code>服务</p></li><li><p>安装<code>Redis</code>服务</p></li><li><p>安装<code>Mock</code>服务</p><a id="more"></a></li></ul><h3 id="克隆代码"><a href="#克隆代码" class="headerlink" title="克隆代码"></a>克隆代码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/easy-mock/easy-mock.git</span><br><span class="line"><span class="built_in">cd</span> easy-mock &amp;&amp; npm install</span><br></pre></td></tr></table></figure><h3 id="安装Node服务"><a href="#安装Node服务" class="headerlink" title="安装Node服务"></a>安装Node服务</h3><p>推荐使用<code>nvm</code>来管理本地<code>Node</code>服务，方便随意切换<code>Node</code>版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install nvm</span><br></pre></td></tr></table></figure><p><a href="https://shadow000902.space/2018/04/10/2018-04-10-Python-version-management-tool-pyenv-use-summary/">Linux下安装Brew</a><br>然后再安装指定版本的Node</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm install 10.22.0</span><br></pre></td></tr></table></figure><h3 id="安装MongoDB服务"><a href="#安装MongoDB服务" class="headerlink" title="安装MongoDB服务"></a>安装MongoDB服务</h3><p><a href="https://shadow000902.space/2017/01/18/2017-01-18-Useing-Extent-test-report/">安装MongoDB服务</a><br>注意文件目录需要放在当前用户有权限的位置，否则可能会有无法辨别的报错信息</p><h3 id="安装Redis服务"><a href="#安装Redis服务" class="headerlink" title="安装Redis服务"></a>安装Redis服务</h3><p><a href="https://shadow000902.space/2017/06/18/2017-06-18-Building-a-Redis-environment-under-Mac/">Redis服务部署</a></p><h3 id="启动Mock服务"><a href="#启动Mock服务" class="headerlink" title="启动Mock服务"></a>启动Mock服务</h3><p>基本命令如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run dev</span><br><span class="line"><span class="comment"># Visit http://127.0.0.1:7300</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># More Commands</span></span><br><span class="line"><span class="comment"># Build front-end assets</span></span><br><span class="line">$ npm run build</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run Easy Mock as production environment (You should run `build` first)</span></span><br><span class="line">$ npm run start</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run unit test</span></span><br><span class="line">$ npm run <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Test lint</span></span><br><span class="line">$ npm run lint</span><br></pre></td></tr></table></figure><p>服务启动后，登录主页如下：</p><img src="/2020/08/25/2020-08-25-Build-Easy-Mock-Server/EasyMock%E4%B8%BB%E9%A1%B5.png" title="EasyMock主页"><p>如果IP+Port的方式无法访问，可能就是网络上的访问的限制了，可以配置一个域名映射解决</p><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><h4 id="curl报错"><a href="#curl报错" class="headerlink" title="curl报错"></a>curl报错</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># shadow @ kickseed in ~/easy-mock on git:dev x [17:43:05] C:1</span></span><br><span class="line">$ brew reinstall nvm</span><br><span class="line">==&gt; Reinstalling nvm </span><br><span class="line">==&gt; Downloading https://github.com/creationix/nvm/archive/v0.33.11.tar.gz</span><br><span class="line">Error: An exception occurred within a child process:</span><br><span class="line">  RuntimeError: no executable curl was found</span><br></pre></td></tr></table></figure><p>安装curl命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install curl</span><br></pre></td></tr></table></figure><h4 id="webpack报错"><a href="#webpack报错" class="headerlink" title="webpack报错"></a>webpack报错</h4><p>报错信息如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># shadow @ kickseed in ~/easy-mock on git:dev x [17:53:45] </span></span><br><span class="line">$ npm run build                                                 </span><br><span class="line"></span><br><span class="line">&gt; easy-mock@1.6.0 build /home/shadow/easy-mock</span><br><span class="line">&gt; cross-env NODE_ENV=production npm run build:dev</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; easy-mock@1.6.0 build:dev /home/shadow/easy-mock</span><br><span class="line">&gt; rimraf dist &amp;&amp; npm run build:client &amp;&amp; npm run build:server</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; easy-mock@1.6.0 build:client /home/shadow/easy-mock</span><br><span class="line">&gt; webpack --config build/webpack.client.config.js --progress --hide-modules</span><br><span class="line"></span><br><span class="line">WARNING: NODE_ENV value of <span class="string">'production'</span> did not match any deployment config file names.</span><br><span class="line">WARNING: See https://github.com/lorenwest/node-config/wiki/Strict-Mode</span><br><span class="line"> 23% building modules 116/140 modules 24 active ...odules/js-beautify/js/lib/beautify.jsnode[6188]: ../src/node_file.cc:943:void node::fs::Stat(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;): Assertion `(argc) == (4)<span class="string">' failed.</span></span><br><span class="line"><span class="string"> 1: 0x8fb090 node::Abort() [node]</span></span><br><span class="line"><span class="string"> 2: 0x8fb165  [node]</span></span><br><span class="line"><span class="string"> 3: 0x93bb1a  [node]</span></span><br><span class="line"><span class="string"> 4: 0xb917ef  [node]</span></span><br><span class="line"><span class="string"> 5: 0xb92359 v8::internal::Builtin_HandleApiCall(int, v8::internal::Object**, v8::internal::Isolate*) [node]</span></span><br><span class="line"><span class="string"> 6: 0x3744a845be1d </span></span><br><span class="line"><span class="string">Aborted</span></span><br><span class="line"><span class="string">npm ERR! code ELIFECYCLE</span></span><br><span class="line"><span class="string">npm ERR! errno 134</span></span><br><span class="line"><span class="string">npm ERR! easy-mock@1.6.0 build:client: `webpack --config build/webpack.client.config.js --progress --hide-modules`</span></span><br><span class="line"><span class="string">npm ERR! Exit status 134</span></span><br><span class="line"><span class="string">npm ERR! </span></span><br><span class="line"><span class="string">npm ERR! Failed at the easy-mock@1.6.0 build:client script.</span></span><br><span class="line"><span class="string">npm ERR! This is probably not a problem with npm. There is likely additional logging output above.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">npm ERR! A complete log of this run can be found in:</span></span><br><span class="line"><span class="string">npm ERR!     /home/shadow/.npm/_logs/2020-08-25T09_54_02_278Z-debug.log</span></span><br><span class="line"><span class="string">npm ERR! code ELIFECYCLE</span></span><br><span class="line"><span class="string">npm ERR! errno 134</span></span><br><span class="line"><span class="string">npm ERR! easy-mock@1.6.0 build:dev: `rimraf dist &amp;&amp; npm run build:client &amp;&amp; npm run build:server`</span></span><br><span class="line"><span class="string">npm ERR! Exit status 134</span></span><br><span class="line"><span class="string">npm ERR! </span></span><br><span class="line"><span class="string">npm ERR! Failed at the easy-mock@1.6.0 build:dev script.</span></span><br><span class="line"><span class="string">npm ERR! This is probably not a problem with npm. There is likely additional logging output above.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">npm ERR! A complete log of this run can be found in:</span></span><br><span class="line"><span class="string">npm ERR!     /home/shadow/.npm/_logs/2020-08-25T09_54_02_300Z-debug.log</span></span><br><span class="line"><span class="string">npm ERR! code ELIFECYCLE</span></span><br><span class="line"><span class="string">npm ERR! errno 134</span></span><br><span class="line"><span class="string">npm ERR! easy-mock@1.6.0 build: `cross-env NODE_ENV=production npm run build:dev`</span></span><br><span class="line"><span class="string">npm ERR! Exit status 134</span></span><br><span class="line"><span class="string">npm ERR! </span></span><br><span class="line"><span class="string">npm ERR! Failed at the easy-mock@1.6.0 build script.</span></span><br><span class="line"><span class="string">npm ERR! This is probably not a problem with npm. There is likely additional logging output above.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">npm ERR! A complete log of this run can be found in:</span></span><br><span class="line"><span class="string">npm ERR!     /home/shadow/.npm/_logs/2020-08-25T09_54_02_315Z-debug.log</span></span><br></pre></td></tr></table></figure><p>需要安装webpack，命令如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install webpack</span><br></pre></td></tr></table></figure><h4 id="node报错"><a href="#node报错" class="headerlink" title="node报错"></a>node报错</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># shadow @ kickseed in ~/easy-mock on git:dev x [17:54:02] C:134</span></span><br><span class="line">$ npm run dev  </span><br><span class="line"></span><br><span class="line">&gt; easy-mock@1.6.0 dev /home/shadow/easy-mock</span><br><span class="line">&gt; nodemon --ignore views/ --ignore public/ app</span><br><span class="line"></span><br><span class="line">[nodemon] 1.14.11</span><br><span class="line">[nodemon] to restart at any time, enter `rs`</span><br><span class="line">[nodemon] watching: *.*</span><br><span class="line">[nodemon] starting `node app.js`</span><br><span class="line">server started at http://0.0.0.0:7300</span><br><span class="line">&#123;<span class="string">"t"</span>:&#123;<span class="string">"<span class="variable">$date</span>"</span>:<span class="string">"2020-08-25T17:54:29.409+08:00"</span>&#125;,<span class="string">"s"</span>:<span class="string">"I"</span>,  <span class="string">"c"</span>:<span class="string">"NETWORK"</span>,  <span class="string">"id"</span>:22943,   <span class="string">"ctx"</span>:<span class="string">"listener"</span>,<span class="string">"msg"</span>:<span class="string">"connection accepted"</span>,<span class="string">"attr"</span>:&#123;<span class="string">"remote"</span>:<span class="string">"127.0.0.1:59488"</span>,<span class="string">"sessionId"</span>:5,<span class="string">"connectionCount"</span>:1&#125;&#125;</span><br><span class="line">&#123;<span class="string">"t"</span>:&#123;<span class="string">"<span class="variable">$date</span>"</span>:<span class="string">"2020-08-25T17:54:29.415+08:00"</span>&#125;,<span class="string">"s"</span>:<span class="string">"I"</span>,  <span class="string">"c"</span>:<span class="string">"NETWORK"</span>,  <span class="string">"id"</span>:51800,   <span class="string">"ctx"</span>:<span class="string">"conn5"</span>,<span class="string">"msg"</span>:<span class="string">"client metadata"</span>,<span class="string">"attr"</span>:&#123;<span class="string">"remote"</span>:<span class="string">"127.0.0.1:59488"</span>,<span class="string">"client"</span>:<span class="string">"conn5"</span>,<span class="string">"doc"</span>:&#123;<span class="string">"driver"</span>:&#123;<span class="string">"name"</span>:<span class="string">"nodejs"</span>,<span class="string">"version"</span>:<span class="string">"2.2.34"</span>&#125;,<span class="string">"os"</span>:&#123;<span class="string">"type"</span>:<span class="string">"Linux"</span>,<span class="string">"name"</span>:<span class="string">"linux"</span>,<span class="string">"architecture"</span>:<span class="string">"x64"</span>,<span class="string">"version"</span>:<span class="string">"4.4.0-140-generic"</span>&#125;,<span class="string">"platform"</span>:<span class="string">"Node.js v10.22.0, LE, mongodb-core: 2.1.18"</span>&#125;&#125;&#125;</span><br><span class="line">&#123;<span class="string">"t"</span>:&#123;<span class="string">"<span class="variable">$date</span>"</span>:<span class="string">"2020-08-25T17:54:29.435+08:00"</span>&#125;,<span class="string">"s"</span>:<span class="string">"I"</span>,  <span class="string">"c"</span>:<span class="string">"NETWORK"</span>,  <span class="string">"id"</span>:22943,   <span class="string">"ctx"</span>:<span class="string">"listener"</span>,<span class="string">"msg"</span>:<span class="string">"connection accepted"</span>,<span class="string">"attr"</span>:&#123;<span class="string">"remote"</span>:<span class="string">"127.0.0.1:59492"</span>,<span class="string">"sessionId"</span>:6,<span class="string">"connectionCount"</span>:2&#125;&#125;</span><br><span class="line">&#123;<span class="string">"t"</span>:&#123;<span class="string">"<span class="variable">$date</span>"</span>:<span class="string">"2020-08-25T17:54:29.440+08:00"</span>&#125;,<span class="string">"s"</span>:<span class="string">"I"</span>,  <span class="string">"c"</span>:<span class="string">"NETWORK"</span>,  <span class="string">"id"</span>:22943,   <span class="string">"ctx"</span>:<span class="string">"listener"</span>,<span class="string">"msg"</span>:<span class="string">"connection accepted"</span>,<span class="string">"attr"</span>:&#123;<span class="string">"remote"</span>:<span class="string">"127.0.0.1:59494"</span>,<span class="string">"sessionId"</span>:7,<span class="string">"connectionCount"</span>:3&#125;&#125;</span><br><span class="line">&#123;<span class="string">"t"</span>:&#123;<span class="string">"<span class="variable">$date</span>"</span>:<span class="string">"2020-08-25T17:54:29.443+08:00"</span>&#125;,<span class="string">"s"</span>:<span class="string">"I"</span>,  <span class="string">"c"</span>:<span class="string">"NETWORK"</span>,  <span class="string">"id"</span>:22943,   <span class="string">"ctx"</span>:<span class="string">"listener"</span>,<span class="string">"msg"</span>:<span class="string">"connection accepted"</span>,<span class="string">"attr"</span>:&#123;<span class="string">"remote"</span>:<span class="string">"127.0.0.1:59496"</span>,<span class="string">"sessionId"</span>:8,<span class="string">"connectionCount"</span>:4&#125;&#125;</span><br><span class="line">/home/shadow/.nvm/versions/node/v10.22.0/bin/node[6242]: ../src/node_file.cc:943:void node::fs::Stat(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;): Assertion `(argc) == (4)<span class="string">' failed.</span></span><br><span class="line"><span class="string"> 1: 0x8fb090 node::Abort() [/home/shadow/.nvm/versions/node/v10.22.0/bin/node]</span></span><br><span class="line"><span class="string"> 2: 0x8fb165  [/home/shadow/.nvm/versions/node/v10.22.0/bin/node]</span></span><br><span class="line"><span class="string"> 3: 0x93bb1a  [/home/shadow/.nvm/versions/node/v10.22.0/bin/node]</span></span><br><span class="line"><span class="string"> 4: 0xb917ef  [/home/shadow/.nvm/versions/node/v10.22.0/bin/node]</span></span><br><span class="line"><span class="string"> 5: 0xb92359 v8::internal::Builtin_HandleApiCall(int, v8::internal::Object**, v8::internal::Isolate*) [/home/shadow/.nvm/versions/node/v10.22.0/bin/node]</span></span><br><span class="line"><span class="string"> 6: 0x3a1c83a5be1d </span></span><br><span class="line"><span class="string">&#123;"t":&#123;"$date":"2020-08-25T17:54:39.976+08:00"&#125;,"s":"I",  "c":"NETWORK",  "id":22944,   "ctx":"conn8","msg":"connection ended","attr":&#123;"remote":"127.0.0.1:59496","connectionCount":3&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;"t":&#123;"$date":"2020-08-25T17:54:39.976+08:00"&#125;,"s":"I",  "c":"NETWORK",  "id":22944,   "ctx":"conn7","msg":"connection ended","attr":&#123;"remote":"127.0.0.1:59494","connectionCount":1&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;"t":&#123;"$date":"2020-08-25T17:54:39.976+08:00"&#125;,"s":"I",  "c":"NETWORK",  "id":22944,   "ctx":"conn6","msg":"connection ended","attr":&#123;"remote":"127.0.0.1:59492","connectionCount":0&#125;&#125;</span></span><br><span class="line"><span class="string">[nodemon] app crashed - waiting for file changes before starting...</span></span><br><span class="line"><span class="string">&#123;"t":&#123;"$date":"2020-08-25T17:54:39.976+08:00"&#125;,"s":"I",  "c":"NETWORK",  "id":22944,   "ctx":"conn5","msg":"connection ended","attr":&#123;"remote":"127.0.0.1:59488","connectionCount":2&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>切换node版本为8.17.0</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm install 8.17.0</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>环境搭建</category>
        <category>Mock</category>
      </categories>
      <tags>
        <tag>mock</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac电脑使用总结</title>
    <url>/2021/01/05/2021-01-05-Mac-Useing-Tips/</url>
    <content><![CDATA[<h2 id="浏览器使用总结"><a href="#浏览器使用总结" class="headerlink" title="浏览器使用总结"></a>浏览器使用总结</h2><h3 id="emsp-标签页快捷键"><a href="#emsp-标签页快捷键" class="headerlink" title="&emsp;标签页快捷键"></a>&emsp;标签页快捷键</h3><ol><li><p>Chrome浏览器，超链接点击后，在新的标签页打开，且切换到新的标签页<br><strong>快捷键</strong>：<code>COMMAND + SHIFT + 鼠标左键点击超链接</code><br><strong>适用场景</strong>：不想页面跳转，又想立马看到超链接页面的内容</p><a id="more"></a></li><li><p>Chrome浏览器，超链接点击后，在新的窗口打开，且切换到新的窗口<br><strong>快捷键</strong>：<code>SHIFT + 鼠标左键点击超链接</code><br><strong>适用场景</strong>：已经打开多个标签了，再在同一窗口打开标签会造成切换标签不便时</p></li><li><p>Chrome浏览器，超链接点击后，在新的标签页打开，且停留在当前标签页<br><strong>快捷键</strong>：<code>COMMAND + 鼠标左键点击超链接</code><br><strong>适用场景</strong>：需要快速查看单页面内的多个内部跳转的页面，又不想要每次查看再返回</p></li></ol><h3 id="emsp-好用的浏览器插件"><a href="#emsp-好用的浏览器插件" class="headerlink" title="&emsp;好用的浏览器插件"></a>&emsp;好用的浏览器插件</h3><ol><li><p>请求头管理插件<code>ModHeader</code><br>插件下载地址：<a href="https://bewisse.com/modheader/" target="_blank" rel="noopener">https://bewisse.com/modheader/</a></p></li><li><p>浏览器代理切换工具<code>SwitchyOmega</code><br>插件下载地址：<a href="https://github.com/FelisCatus/SwitchyOmega/releases" target="_blank" rel="noopener">https://github.com/FelisCatus/SwitchyOmega/releases</a></p></li><li><p>Web开发者助手<code>FeHelper</code><br>插件下载地址：<a href="https://www.baidufe.com/fehelper/index/index.html" target="_blank" rel="noopener">https://www.baidufe.com/fehelper/index/index.html</a><br>插件常用功能列表：</p><ul><li>JSON美化工具</li><li>时间(戳)转换</li><li>随机密码生成</li><li>颜色转换工具</li><li>二维码/解码</li><li>JSON对比工具</li><li>等等</li></ul></li><li><p>浏览器黑暗模式<code>DACK READER</code><br>插件下载地址：<a href="https://darkreader.org/" target="_blank" rel="noopener">https://darkreader.org/</a></p></li><li><p>网页翻译工具<code>彩云小译</code><br>插件下载地址：<a href="https://fanyi.caiyunapp.com/#/web" target="_blank" rel="noopener">https://fanyi.caiyunapp.com/#/web</a><br><strong>整篇文章，根据段落进行翻译，中文在英文下展示，即直观有方便</strong></p></li><li><p>网页json格式化工具<code>JSON Formatter</code><br>插件下载地址：<a href="https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa</a><br>浏览器请求返回的JSON结果，会自动格式化后进行可视化展示</p></li></ol><h2 id="Mac系统使用总结"><a href="#Mac系统使用总结" class="headerlink" title="Mac系统使用总结"></a>Mac系统使用总结</h2><h3 id="emsp-升级系统后，截图软件无法使用"><a href="#emsp-升级系统后，截图软件无法使用" class="headerlink" title="&emsp;升级系统后，截图软件无法使用"></a>&emsp;升级系统后，截图软件无法使用</h3><p>问题可能原因：因为系统升级原因，<code>/Library/Application\ Support/com.apple.TCC</code>目录中的文件，损坏或权限异常<br>导致在<code>系统偏好设置-安全性与隐私-隐私-屏幕录制</code>中，无法添加软件，从而无法进行截图和录屏。<br>解决方案：删除<code>/Library/Application\ Support/com.apple.TCC</code>目录中的<code>TCC.db</code>文件，然后重启系统<br>然后重新在<code>系统偏好设置-安全性与隐私-隐私-屏幕录制</code>中添加软件，就可以看到对应软件被添加到了列表中</p>]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>软件测试度量</title>
    <url>/2021/03/11/2021-03-11-Software-Test-Metrics/</url>
    <content><![CDATA[<h2 id="软件测试度量的目的"><a href="#软件测试度量的目的" class="headerlink" title="软件测试度量的目的"></a>软件测试度量的目的</h2><p>通过过程监控、结果度量（包括用例维度、缺陷维度、需求维度、接口自动化维度等）等度量数据的获取，通过对于这些度量数据的分析，获取其中的异常数据，从而促进产研流程改进。<br><a href="https://www.icloud.com/iclouddrive/0LOs-7Z7lePvixFZN6pPUnr6A" target="_blank" rel="noopener">Xmind原始文件地址</a></p><a id="more"></a> <img src="/2021/03/11/2021-03-11-Software-Test-Metrics/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%BA%A6%E9%87%8F.png" title="软件测试度量">]]></content>
      <categories>
        <category>软件测试管理</category>
      </categories>
      <tags>
        <tag>度量</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA忽略掉.idea等文件</title>
    <url>/2018/11/01/2018-11-01-IDEA-ignores-files-such-as-idea/</url>
    <content><![CDATA[<p><code>idea</code>需要下载一个专门的<code>plugins</code>来<code>ignore</code>、<code>.idea</code>、<code>*.iml</code>等文件，名称为<code>.ignore</code>。</p><p>然后<code>git status</code>就会发现<code>.idea/</code>文件消失,但是也可能还是有,可能是因为对应的目录被<code>git</code>跟踪过，可以通过运行一下命令解决：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rm -rf --cached .idea</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中正则表达式的应用</title>
    <url>/2018/01/11/2018-01-11-The-application-of-regular-expressions-in-Python/</url>
    <content><![CDATA[<h3 id="简单字符串替换"><a href="#简单字符串替换" class="headerlink" title="简单字符串替换"></a>简单字符串替换</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re  </span><br><span class="line">urlp = <span class="string">"http://www.mypcera.com/star/mm/jiepaimeinv/942&#123;_page&#125;.html&amp;&#123;what&#125;&amp;&amp;&#123;come&#125;"</span></span><br><span class="line"><span class="comment"># 匹配出所有 &#123;.*?&#125; 的值，并取第一个匹配到的值</span></span><br><span class="line">pageParam = re.findall(<span class="string">'&#123;.*?&#125;'</span>, urlp)[<span class="number">0</span>]  </span><br><span class="line"><span class="comment"># 输出结果：&#123;_page&#125;</span></span><br><span class="line">print(pageParam)</span><br><span class="line"><span class="comment"># 匹配结果中的 page 替换为 3，并剔除匹配结果中的 &#123;&#125;</span></span><br><span class="line">pageParam = pageParam.replace(<span class="string">"page"</span>, <span class="string">"3"</span>).strip(<span class="string">"&#123;&#125;"</span>)  </span><br><span class="line"><span class="comment"># 输出结果：_3</span></span><br><span class="line">print(pageParam)  </span><br><span class="line"><span class="comment"># 对所有匹配到的结果进行替换操作</span></span><br><span class="line">result = re.sub(<span class="string">'&#123;.*?&#125;'</span>, pageParam, urlp)  </span><br><span class="line"><span class="comment"># 打印最后的结果：http://www.mypcera.com/star/mm/jiepaimeinv/942_3.html&amp;_3&amp;&amp;_3</span></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="修改字典-value-值"><a href="#修改字典-value-值" class="headerlink" title="# 修改字典 value 值"></a># 修改字典 value 值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">updateDictValue</span><span class="params">(fileName, key, value)</span>:</span></span><br><span class="line"> fileLineContent = []</span><br><span class="line"></span><br><span class="line"> <span class="keyword">with</span> open(fileName, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">     line = f.readline()</span><br><span class="line">     <span class="keyword">while</span> line:</span><br><span class="line">         <span class="comment"># 找到 line 中的 "shadow2015" 值</span></span><br><span class="line">         regex = key + <span class="string">'\s*=\s*"(.*)"'</span></span><br><span class="line">         pattern = re.compile(regex)</span><br><span class="line">         m = pattern.search(line)</span><br><span class="line">         <span class="keyword">if</span> m:</span><br><span class="line">             print(m.group(<span class="number">1</span>))</span><br><span class="line">             <span class="comment"># 将 "shadow2015" 替换为对应的 value</span></span><br><span class="line">             fileLineContent.append(line.replace(m.group(<span class="number">1</span>), value))</span><br><span class="line">         <span class="keyword">else</span>:</span><br><span class="line">             fileLineContent.append(line)</span><br><span class="line">         <span class="comment"># continue</span></span><br><span class="line">         line = f.readline()</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 重新写入新内容</span></span><br><span class="line"> <span class="keyword">with</span> open(fileName, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">     f.writelines(fileLineContent)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux环境安装MySQL</title>
    <url>/2018/07/21/2018-07-21-Linux-install-MySQL/</url>
    <content><![CDATA[<h3 id="以下内容基于CentOS完成"><a href="#以下内容基于CentOS完成" class="headerlink" title="以下内容基于CentOS完成"></a>以下内容基于CentOS完成</h3><h4 id="MySQL包下载地址"><a href="#MySQL包下载地址" class="headerlink" title="MySQL包下载地址"></a>MySQL包下载地址</h4><p><a href="https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.22-linux-glibc2.12-i686.tar.gz" target="_blank" rel="noopener">32位5.7.22版本下载地址</a><br><a href="https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.22-linux-glibc2.12-x86_64.tar.gz" target="_blank" rel="noopener">64位5.7.22版本下载地址</a></p><a id="more"></a><h4 id="下载、解压并安装"><a href="#下载、解压并安装" class="headerlink" title="下载、解压并安装"></a>下载、解压并安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.22-linux-glibc2.12-i686.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf mysql-5.7.22-linux-glibc2.12-i686.tar.gz</span><br><span class="line"><span class="comment"># 移动并重命名文件夹mysql-5.7.22-linux-glibc2.12-i686为mysql，并移动文件夹到/usr/local/</span></span><br><span class="line">mv ~/Documents/mysql-5.7.22-linux-glibc2.12-i686 /usr/<span class="built_in">local</span>/mysql</span><br><span class="line"><span class="comment"># 检查库文件是否有删除，若有便删除（linux系统自带的）</span></span><br><span class="line">rpm -qa | grep mysql</span><br><span class="line"><span class="comment"># 检查mysql组和用户是否存在，如无创建</span></span><br><span class="line">cat /etc/group | grep mysql</span><br><span class="line">cat /etc/passwd |grep mysql</span><br><span class="line"><span class="comment"># 创建用户组和用户</span></span><br><span class="line">groupadd mysql</span><br><span class="line"><span class="comment"># //useradd -r参数表示mysql用户是系统用户，不可用于登录系统</span></span><br><span class="line">useradd -r -g mysql mysql</span><br><span class="line"><span class="comment"># 在mysql下添加data目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mysql</span><br><span class="line">mkdir data</span><br><span class="line"><span class="comment"># 更改mysql目录下所有的目录及文件夹所属组合用户</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/</span><br><span class="line">chown -R mysql mysql/</span><br><span class="line">chgrp -R mysql mysql/</span><br></pre></td></tr></table></figure><h4 id="安装和初始化数据库"><a href="#安装和初始化数据库" class="headerlink" title="安装和初始化数据库"></a>安装和初始化数据库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./mysqld --initialize --user=mysql --basedir=/usr/<span class="built_in">local</span>/mysql/ --datadir=/usr/<span class="built_in">local</span>/mysql/data/</span><br></pre></td></tr></table></figure><p>成功结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2018-07-21T06:59:31.854623Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation <span class="keyword">for</span> more details).</span><br><span class="line">2018-07-21T06:59:32.366767Z 0 [Warning] InnoDB: New <span class="built_in">log</span> files created, LSN=45790</span><br><span class="line">2018-07-21T06:59:32.468040Z 0 [Warning] InnoDB: Creating foreign key constraint system tables.</span><br><span class="line">2018-07-21T06:59:32.526369Z 0 [Warning] No existing UUID has been found, so we assume that this is the first time that this server has been started. Generating a new UUID: 9ec0b2b8-8cb3-11e8-b9c4-f022d6ce8326.</span><br><span class="line">2018-07-21T06:59:32.526606Z 0 [Warning] Gtid table is not ready to be used. Table <span class="string">'mysql.gtid_executed'</span> cannot be opened.</span><br><span class="line">2018-07-21T06:59:32.529148Z 1 [Note] A temporary password is generated <span class="keyword">for</span> root@localhost: ,:eh&lt;pj(p2NZ</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2018-10-20T18:10:58.363348Z 0 [System] [MY-013169] [Server] /opt/mysql-8.0.12-linux-glibc2.12-x86_64/bin/mysqld (mysqld 8.0.12) initializing of server <span class="keyword">in</span> progress as process 12636</span><br><span class="line">2018-10-20T18:10:58.366576Z 0 [Warning] [MY-010122] [Server] One can only use the --user switch <span class="keyword">if</span> running as root</span><br><span class="line">2018-10-20T18:11:01.748127Z 5 [Note] [MY-010454] [Server] A temporary password is generated <span class="keyword">for</span> root@localhost: &amp;h3Th88Lwx5f</span><br><span class="line">2018-10-20T18:11:03.525973Z 0 [System] [MY-013170] [Server] /opt/mysql-8.0.12-linux-glibc2.12-x86_64/bin/mysqld (mysqld 8.0.12) initializing of server has completed</span><br></pre></td></tr></table></figure><p>最后的<code>,:eh&lt;pj(p2NZ</code>为mysql初始化默认密码。</p><h4 id="配置-etc-my-cnf"><a href="#配置-etc-my-cnf" class="headerlink" title="配置/etc/my.cnf"></a>配置<code>/etc/my.cnf</code></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">#skip-grant-tables</span><br><span class="line">basedir &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;</span><br><span class="line">datadir &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data&#x2F;</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">#skip-grant-tables</span><br><span class="line">basedir &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;</span><br><span class="line">datadir &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data&#x2F;</span><br></pre></td></tr></table></figure><h4 id="初始化报错"><a href="#初始化报错" class="headerlink" title="初始化报错"></a>初始化报错</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./bin/mysqld --initialize --user=mysql --basedir=/usr/<span class="built_in">local</span>/mysql/ --datadir=/usr/<span class="built_in">local</span>/mysql/data/</span><br><span class="line">2018-07-21T06:58:34.705850Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation <span class="keyword">for</span> more details).</span><br><span class="line">2018-07-21T06:58:34.707384Z 0 [ERROR] Could not open file <span class="string">'/var/log/mysqld.log'</span> <span class="keyword">for</span> error logging: Permission denied</span><br><span class="line">2018-07-21T06:58:34.707398Z 0 [ERROR] Aborting</span><br></pre></td></tr></table></figure><p>原因：文件没有权限<br>解决方法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch /var/<span class="built_in">log</span>/mysqld.log</span><br><span class="line"><span class="comment"># 设置文件所有者为mysql</span></span><br><span class="line">chown -R mysql:mysql /var/<span class="built_in">log</span>/mysqld.log</span><br></pre></td></tr></table></figure><h4 id="将mysqld服务加入开机自启动项"><a href="#将mysqld服务加入开机自启动项" class="headerlink" title="将mysqld服务加入开机自启动项"></a>将<code>mysqld</code>服务加入开机自启动项</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mysql</span><br><span class="line">cp ./support-files/mysql.server /etc/init.d/mysql</span><br><span class="line"><span class="comment"># 把mysql注册为开机启动的服务</span></span><br><span class="line">chmod +x /etc/init.d/mysql</span><br><span class="line"><span class="comment"># 查看是否添加成功</span></span><br><span class="line">chkconfig --add mysql</span><br><span class="line">chkconfig --list mysql</span><br><span class="line"><span class="comment"># mysql          	0:关闭	1:关闭	2:启用	3:启用	4:启用	5:启用	6:关闭</span></span><br></pre></td></tr></table></figure><p><code>Ubuntu</code>下，已经没有了<code>chkconfig</code>，替换之后的是<code>sysv-rc-conf</code></p><h4 id="启动mysql服务"><a href="#启动mysql服务" class="headerlink" title="启动mysql服务"></a>启动<code>mysql</code>服务</h4><h4 id="设置远程登录权限"><a href="#设置远程登录权限" class="headerlink" title="设置远程登录权限"></a>设置远程登录权限</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; grant all privileges on *.* to<span class="string">'root'</span> @<span class="string">'%'</span> identified by <span class="string">'root'</span>;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; quit</span><br><span class="line">Bye</span><br></pre></td></tr></table></figure><h4 id="无密码登录mysql"><a href="#无密码登录mysql" class="headerlink" title="无密码登录mysql"></a>无密码登录mysql</h4><p>在<code>/etc/my.cnf</code>中加入<code>skip-grant-tables</code></p><h4 id="修改mysql默认密码"><a href="#修改mysql默认密码" class="headerlink" title="修改mysql默认密码"></a>修改mysql默认密码</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> password=<span class="string">'123456'</span>;</span><br></pre></td></tr></table></figure><h4 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h4><ol><li><code>libaio.so.1</code>未安装<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./mysqld: error <span class="keyword">while</span> loading shared libraries: libaio.so.1: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>解决方法：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install libaio.so.1</span><br></pre></td></tr></table></figure></li><li><code>libnuma.so.1</code>未安装<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/mysqld: error <span class="keyword">while</span> loading shared libraries: libnuma.so.1: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>解决方法：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install libnuma.so.1</span><br><span class="line">apt-get install libaio-dev     <span class="comment"># ubuntu下解决该问题，可能还需要执行 apt-get -f install</span></span><br></pre></td></tr></table></figure></li><li>服务启动报错<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Starting MySQL.Logging to <span class="string">'/var/log/mysql/mysql.log'</span>.</span><br><span class="line"> ERROR! The server quit without updating PID file (/var/lib/mysql/dbserver.pid).</span><br></pre></td></tr></table></figure>解决方法：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /etc/init.d/mysql start </span></span><br><span class="line">Starting MySQL.Logging to <span class="string">'/usr/local/mysql/data/dbserver.err'</span>.</span><br><span class="line"> SUCCESS! </span><br><span class="line"><span class="comment"># service mysql start</span></span><br><span class="line">Starting MySQL SUCCESS!</span><br></pre></td></tr></table></figure></li></ol><h3 id="UBUNTU系统安装mysql"><a href="#UBUNTU系统安装mysql" class="headerlink" title="UBUNTU系统安装mysql"></a>UBUNTU系统安装mysql</h3><h4 id="使用apt-get安装mysql"><a href="#使用apt-get安装mysql" class="headerlink" title="使用apt-get安装mysql"></a>使用apt-get安装mysql</h4><ol><li><p>系统纯净的情况下安装：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mysql-server-5.7</span><br></pre></td></tr></table></figure></li><li><p>如果安装中出现各种莫名其妙的问题，说明环境有问题，处理方法是卸载掉所有mysql相关的库，然后重新安装<br>需要用到的主要是<code>dpkg</code>命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ dpkg --list | grep mysql</span><br><span class="line">ii  mysql-client-5.7                              5.7.27-0ubuntu0.16.04.1                  amd64        MySQL database client binaries</span><br><span class="line">ii  mysql-client-core-5.7                         5.7.27-0ubuntu0.16.04.1                  amd64        MySQL database core client binaries</span><br><span class="line">ii  mysql-common                                  5.7.27-0ubuntu0.16.04.1                  all          MySQL database common files, e.g. /etc/mysql/my.cnf</span><br><span class="line">ii  mysql-server-5.7                              5.7.27-0ubuntu0.16.04.1                  amd64        MySQL database server binaries and system database setup</span><br><span class="line">ii  mysql-server-core-5.7                         5.7.27-0ubuntu0.16.04.1                  amd64        MySQL database server binaries</span><br><span class="line">ii  python-pymysql                                0.7.2-1ubuntu1                           all          Pure-Python MySQL driver - Python 2.x</span><br></pre></td></tr></table></figure><p>可以看到所有系统已经安装的，或者是之前有人安装的mysql<br>我们需要做的是先卸载这些所有的库，只要是名称上有mysql的全部卸载掉，命令为：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg --remove mysql-client-5.7 mysql-client-core-5.7 mysql-common mysql-server mysql-server-5.7 mysql-server-core-5.7</span><br></pre></td></tr></table></figure><p>或者使用：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg --purge --remove mysql-server-5.7</span><br></pre></td></tr></table></figure><p>即纯净模式，删除所有相关的依赖<br>如果出现还是无法删除的情况，那多数是还是被依赖，把报错出来的相关的包进行删除，比如：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg --remove libqt4-sql-mysql:amd64</span><br><span class="line">sudo dpkg --remove libmysqlclient20</span><br><span class="line">sudo dpkg --remove libmysqlclient-dev</span><br></pre></td></tr></table></figure><p>清除干净环境后，就可以重新用上面的命令安装了，正常情况下，会正常安装成功，安装成功的日志如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># shadow @ kickseed in ~/ITPlatform/interfaceManage on git:master x [21:00:39] C:100</span></span><br><span class="line">$ sudo apt-get install mysql-server-5.7 </span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree       </span><br><span class="line">Reading state information... Done</span><br><span class="line">The following additional packages will be installed:</span><br><span class="line">  libcgi-fast-perl libcgi-pm-perl libevent-core-2.0-5 libfcgi-perl libhtml-template-perl libnuma1 mysql-client-5.7 mysql-client-core-5.7 mysql-common</span><br><span class="line">  mysql-server-core-5.7</span><br><span class="line">Suggested packages:</span><br><span class="line">  libipc-sharedcache-perl mailx tinyca</span><br><span class="line">The following NEW packages will be installed:</span><br><span class="line">  libcgi-fast-perl libcgi-pm-perl libevent-core-2.0-5 libfcgi-perl libhtml-template-perl libnuma1 mysql-client-5.7 mysql-client-core-5.7 mysql-common</span><br><span class="line">  mysql-server-5.7 mysql-server-core-5.7</span><br><span class="line">0 upgraded, 11 newly installed, 0 to remove and 251 not upgraded.</span><br><span class="line">Need to get 14.7 kB/19.0 MB of archives.</span><br><span class="line">After this operation, 162 MB of additional disk space will be used.</span><br><span class="line">Do you want to <span class="built_in">continue</span>? [Y/n] y</span><br><span class="line">Get:1 http://mirrors.aliyun.com/ubuntu xenial-security/main amd64 mysql-common all 5.7.27-0ubuntu0.16.04.1 [14.7 kB]</span><br><span class="line">Fetched 14.7 kB <span class="keyword">in</span> 0s (191 kB/s)   </span><br><span class="line">Preconfiguring packages ...</span><br><span class="line">Selecting previously unselected package mysql-common.</span><br><span class="line">(Reading database ... 114991 files and directories currently installed.)</span><br><span class="line">Preparing to unpack .../mysql-common_5.7.27-0ubuntu0.16.04.1_all.deb ...</span><br><span class="line">Unpacking mysql-common (5.7.27-0ubuntu0.16.04.1) ...</span><br><span class="line">Selecting previously unselected package libnuma1:amd64.</span><br><span class="line">Preparing to unpack .../libnuma1_2.0.11-1ubuntu1.1_amd64.deb ...</span><br><span class="line">Unpacking libnuma1:amd64 (2.0.11-1ubuntu1.1) ...</span><br><span class="line">Selecting previously unselected package mysql-client-core-5.7.</span><br><span class="line">Preparing to unpack .../mysql-client-core-5.7_5.7.27-0ubuntu0.16.04.1_amd64.deb ...</span><br><span class="line">Unpacking mysql-client-core-5.7 (5.7.27-0ubuntu0.16.04.1) ...</span><br><span class="line">Selecting previously unselected package mysql-client-5.7.</span><br><span class="line">Preparing to unpack .../mysql-client-5.7_5.7.27-0ubuntu0.16.04.1_amd64.deb ...</span><br><span class="line">Unpacking mysql-client-5.7 (5.7.27-0ubuntu0.16.04.1) ...</span><br><span class="line">Selecting previously unselected package mysql-server-core-5.7.</span><br><span class="line">Preparing to unpack .../mysql-server-core-5.7_5.7.27-0ubuntu0.16.04.1_amd64.deb ...</span><br><span class="line">Unpacking mysql-server-core-5.7 (5.7.27-0ubuntu0.16.04.1) ...</span><br><span class="line">Selecting previously unselected package libevent-core-2.0-5:amd64.</span><br><span class="line">Preparing to unpack .../libevent-core-2.0-5_2.0.21-stable-2ubuntu0.16.04.1_amd64.deb ...</span><br><span class="line">Unpacking libevent-core-2.0-5:amd64 (2.0.21-stable-2ubuntu0.16.04.1) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> libc-bin (2.23-0ubuntu5) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> man-db (2.7.5-1) ...</span><br><span class="line">Setting up mysql-common (5.7.27-0ubuntu0.16.04.1) ...</span><br><span class="line">update-alternatives: using /etc/mysql/my.cnf.fallback to provide /etc/mysql/my.cnf (my.cnf) <span class="keyword">in</span> auto mode</span><br><span class="line">Selecting previously unselected package mysql-server-5.7.</span><br><span class="line">(Reading database ... 115159 files and directories currently installed.)</span><br><span class="line">Preparing to unpack .../mysql-server-5.7_5.7.27-0ubuntu0.16.04.1_amd64.deb ...</span><br><span class="line">Unpacking mysql-server-5.7 (5.7.27-0ubuntu0.16.04.1) ...</span><br><span class="line">Selecting previously unselected package libcgi-pm-perl.</span><br><span class="line">Preparing to unpack .../libcgi-pm-perl_4.26-1_all.deb ...</span><br><span class="line">Unpacking libcgi-pm-perl (4.26-1) ...</span><br><span class="line">Selecting previously unselected package libfcgi-perl.</span><br><span class="line">Preparing to unpack .../libfcgi-perl_0.77-1build1_amd64.deb ...</span><br><span class="line">Unpacking libfcgi-perl (0.77-1build1) ...</span><br><span class="line">Selecting previously unselected package libcgi-fast-perl.</span><br><span class="line">Preparing to unpack .../libcgi-fast-perl_1%3a2.10-1_all.deb ...</span><br><span class="line">Unpacking libcgi-fast-perl (1:2.10-1) ...</span><br><span class="line">Selecting previously unselected package libhtml-template-perl.</span><br><span class="line">Preparing to unpack .../libhtml-template-perl_2.95-2_all.deb ...</span><br><span class="line">Unpacking libhtml-template-perl (2.95-2) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> systemd (229-4ubuntu21.4) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> ureadahead (0.100.0-19) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> man-db (2.7.5-1) ...</span><br><span class="line">Setting up libnuma1:amd64 (2.0.11-1ubuntu1.1) ...</span><br><span class="line">Setting up mysql-client-core-5.7 (5.7.27-0ubuntu0.16.04.1) ...</span><br><span class="line">Setting up mysql-client-5.7 (5.7.27-0ubuntu0.16.04.1) ...</span><br><span class="line">Setting up mysql-server-core-5.7 (5.7.27-0ubuntu0.16.04.1) ...</span><br><span class="line">Setting up libevent-core-2.0-5:amd64 (2.0.21-stable-2ubuntu0.16.04.1) ...</span><br><span class="line">Setting up mysql-server-5.7 (5.7.27-0ubuntu0.16.04.1) ...</span><br><span class="line">update-alternatives: using /etc/mysql/mysql.cnf to provide /etc/mysql/my.cnf (my.cnf) <span class="keyword">in</span> auto mode</span><br><span class="line">Renaming removed key_buffer and myisam-recover options (<span class="keyword">if</span> present)</span><br><span class="line">Setting up libcgi-pm-perl (4.26-1) ...</span><br><span class="line">Setting up libfcgi-perl (0.77-1build1) ...</span><br><span class="line">Setting up libcgi-fast-perl (1:2.10-1) ...</span><br><span class="line">Setting up libhtml-template-perl (2.95-2) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> libc-bin (2.23-0ubuntu5) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> systemd (229-4ubuntu21.4) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> ureadahead (0.100.0-19) ...</span><br><span class="line">(venv) </span><br><span class="line"><span class="comment"># shadow @ kickseed in ~/ITPlatform/interfaceManage on git:master x [21:01:53] </span></span><br><span class="line">$ <span class="built_in">which</span> mysql</span><br><span class="line">/usr/bin/mysql</span><br><span class="line">(venv) </span><br><span class="line"><span class="comment"># shadow @ kickseed in ~/ITPlatform/interfaceManage on git:master x [21:02:00] </span></span><br><span class="line">$ mysql -uroot</span><br><span class="line">ERROR 1045 (28000): Access denied <span class="keyword">for</span> user <span class="string">'root'</span>@<span class="string">'localhost'</span> (using password: NO)</span><br><span class="line">(venv) </span><br><span class="line"><span class="comment"># shadow @ kickseed in ~/ITPlatform/interfaceManage on git:master x [21:02:06] C:1</span></span><br><span class="line">$ mysql -uroot -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 5</span><br><span class="line">Server version: 5.7.27-0ubuntu0.16.04.1 (Ubuntu)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">'\c'</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">exit</span></span><br><span class="line">Bye</span><br></pre></td></tr></table></figure></li></ol><p>安装过程中会跳出弹窗，让输入root密码，输入两边后，即会安装成功，记住自己设置的密码就可以登录了。</p><h4 id="使用brew安装mysql"><a href="#使用brew安装mysql" class="headerlink" title="使用brew安装mysql"></a>使用brew安装mysql</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ubuntu @ VM-4-14-ubuntu <span class="keyword">in</span> ~ [16:39:03] C:1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew install mysql</span></span><br><span class="line">Running `brew update --auto-update`...</span><br><span class="line">Error: Failed to download https://formulae.brew.sh/api/cask.jws.json!</span><br><span class="line">==&gt; Downloading https://formulae.brew.sh/api/cask.jws.json</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######################################################################################################################################################################################### 100.0%</span></span></span><br><span class="line">==&gt; Downloading https://formulae.brew.sh/api/formula_tap_migrations.jws.json</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######################################################################################################################################################################################### 100.0%</span></span></span><br><span class="line">==&gt; Auto-updated Homebrew!</span><br><span class="line">Updated 2 taps (homebrew/core and homebrew/cask).</span><br><span class="line">==&gt; New Formulae</span><br><span class="line">blink                           botan@2                         espflash                        pylyzer                         ruff-lsp                        woof-doom</span><br><span class="line">==&gt; New Casks</span><br><span class="line">apple-hewlett-packard-printer-drivers  drata-agent                            graalvm-jdk                            rio                                    whisky</span><br><span class="line">audiocupcake                           elektron-overbridge                    grs-bluewallet                         rode-connect</span><br><span class="line">chatall                                eset-cyber-security                    mumu-x                                 score</span><br><span class="line">command-x                              flexoptix                              mycard                                 screen-studio</span><br><span class="line">devpod                                 frappe-books                           picoscope                              ths</span><br><span class="line"></span><br><span class="line">You have 4 outdated formulae installed.</span><br><span class="line">==&gt; Downloading https://formulae.brew.sh/api/cask_tap_migrations.jws.json</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######################################################################################################################################################################################### 100.0%</span></span></span><br><span class="line"></span><br><span class="line">==&gt; Fetching dependencies for mysql: icu4c, openssl@3, libevent, libcbor, pcre2, dbus, libxcrypt, util-linux, mpdecimal, sqlite, berkeley-db@5, libedit, krb5, libtirpc, libnsl, unzip, python@3.11, glib, libcap, lz4, zstd, systemd, libfido2, protobuf@21, brotli, libunistring, libidn2, libnghttp2, libssh2, openldap, rtmpdump, curl and cyrus-sasl</span><br><span class="line">==&gt; Fetching icu4c</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/icu4c/manifests/73.2</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/2e5082de52a2c85ae665e51f8d0de0651611397cb02f4b4e2bb37898ba52a629--icu4c-73.2.bottle_manifest.json</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/icu4c/blobs/sha256:714dc987ca9c9b594e6e17c02640f93b49074f81264be16051a93a8f5f674d77</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/d467742181d935c7e6128244f70d5fced229aaf7d1f2b7af9ae1009f663c0f49--icu4c--73.2.x86_64_linux.bottle.tar.gz</span><br><span class="line">==&gt; Fetching openssl@3</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/openssl/3/manifests/3.1.1_1</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/30a4cb7b3cf5e6879dbfb142a6ecbf65a0fc2e36dec4627348665c0bcc348dcb--openssl@3-3.1.1_1.bottle_manifest.json</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/openssl/3/blobs/sha256:1231b6b95a6c55e775258b4c19b3babbc504a065b984ec6df9d960cf7ffc947b</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/33833a468db1399c62bc53bd3bcd306d3def3cc28f752328b92ede28eb0cb77b--openssl@3--3.1.1_1.x86_64_linux.bottle.tar.gz</span><br><span class="line">==&gt; Fetching libevent</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/libevent/manifests/2.1.12_1</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/68b113f9ab63db45f4e1860de522ce2ca4fa081eb3c0d5c7d6005a35c3cf8d06--libevent-2.1.12_1.bottle_manifest.json</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/libevent/blobs/sha256:83ef4ce689a91f6fca013d6b4b0b2fcda3706080f8e0cccd056a3d94d6bc0f17</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/694835ad258e8dc6e9758f34fd0f18013d7a61f2a6ac1ca0e481f652d80b086a--libevent--2.1.12_1.x86_64_linux.bottle.tar.gz</span><br><span class="line">==&gt; Fetching libcbor</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/libcbor/manifests/0.10.2</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/b3b69aa10b9eff19299a02bde62661644cfd29b742e5e5bb197e70c03b8f4d96--libcbor-0.10.2.bottle_manifest.json</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/libcbor/blobs/sha256:0c532bdfe6b9efb37ff7cd43d1fcf2def27aefbffbea09093cecf16f95adc198</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/f6d81f223b81ac56d58b624409ac9b60e17b6ea18ce51d61e5a0e1f56b751e6c--libcbor--0.10.2.x86_64_linux.bottle.tar.gz</span><br><span class="line">==&gt; Fetching pcre2</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/pcre2/manifests/10.42</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/6a53794fcaabc5cc5e05b19c02ca9c4c5f2cb9a4d65a5790a6841146465b040f--pcre2-10.42.bottle_manifest.json</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/pcre2/blobs/sha256:6fb73ccbfd7f7d48b9400512ded73383a19dc54ec015ab1aab2b849480c3b3f8</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/9195332009f1485200ff410fafd513e4d339be267d4b8bbeb15d20556558c33f--pcre2--10.42.x86_64_linux.bottle.tar.gz</span><br><span class="line">==&gt; Fetching dbus</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/dbus/manifests/1.14.8</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/3c5f9d9d68c9be7706a0e09b6bf728f60e829d09e300ad19d64058133c4fde61--dbus-1.14.8.bottle_manifest.json</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/dbus/blobs/sha256:e317deee5c58aea9757d6a84537a5b54532e593a366901005786b9f4d00fb00f</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/2b9f4c39f7bb2fc88a83183d7e136ed713c026c5284f780061344f81e591d2e3--dbus--1.14.8.x86_64_linux.bottle.tar.gz</span><br><span class="line">==&gt; Fetching libxcrypt</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/libxcrypt/manifests/4.4.36</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/950e230307625f9e57d74f0076caab42b6c67a325c70b83efa2c9cc84be1f839--libxcrypt-4.4.36.bottle_manifest.json</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/libxcrypt/blobs/sha256:ad1c4b570d7a66046038c13345b54337d858a2db78dcfb7e90a2b21adc1d6802</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/8a89cd46e87dade4849639585d2fd436fa581e9d21471f24e76e590d177c095f--libxcrypt--4.4.36.x86_64_linux.bottle.tar.gz</span><br><span class="line">==&gt; Fetching util-linux</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/util-linux/manifests/2.39.1</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/ab19c77ba7ed43a7bf3be64312099e176d64e319f12d8cf9e4925dc2f3f80548--util-linux-2.39.1.bottle_manifest.json</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/util-linux/blobs/sha256:3e38d81b856507fb126b26eaba4d20459dbe06993e26e798786954de730052ab</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/735dc2b32f5c3930622c0c132830c39bfd9c57acd688e558ea471c67f7034a9b--util-linux--2.39.1.x86_64_linux.bottle.tar.gz</span><br><span class="line">==&gt; Fetching mpdecimal</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/mpdecimal/manifests/2.5.1</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/f367c2ee08c56b88be0662703a8e4275f8657608a268c8c44e845154b0cea543--mpdecimal-2.5.1.bottle_manifest.json</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/mpdecimal/blobs/sha256:c5d64a4dd47dc1b66887c0cecd884f0848a801cb2f684cde0f4664e709574067</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/e02dc86f10704b9aeb72336cbffeb0d490260c2d5d976556c00f8d9fce6bef03--mpdecimal--2.5.1.x86_64_linux.bottle.tar.gz</span><br><span class="line">==&gt; Fetching sqlite</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/sqlite/manifests/3.42.0</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/9054dbd2014cfa67115dbd42da881a047783b58c96344ba1d65317539985b631--sqlite-3.42.0.bottle_manifest.json</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/sqlite/blobs/sha256:8226fd550248842674a281032e758b0f2fd1f0d7dd543f6eb78512b1edf00ad5</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/aae9b14e25dc720feab29f6ba2b1e54edbb4502703c3ed5cb2d86dfd25e9c4f9--sqlite--3.42.0.x86_64_linux.bottle.tar.gz</span><br><span class="line">==&gt; Fetching berkeley-db@5</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/berkeley-db/5/manifests/5.3.28_1</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/17e4e0def00184b561c8a490b5c0813a7c4f5e1365eb2e927570786eb4e05e09--berkeley-db@5-5.3.28_1.bottle_manifest.json</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/berkeley-db/5/blobs/sha256:c0e2906cc6657dc497fec75629560b0a404b81cebadf5e10c1f70616a14fa886</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/8b5fb485cdbb78c808921aeee52f32eadf4dc239fa5c03df690e316a1f9f4021--berkeley-db@5--5.3.28_1.x86_64_linux.bottle.tar.gz</span><br><span class="line">==&gt; Fetching libedit</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/libedit/manifests/20221030-3.1</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/fb5226448ca27f1779ac14bd7419ae08a24df67c516a919bd176b81ad0896390--libedit-20221030-3.1.bottle_manifest.json</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/libedit/blobs/sha256:bee1f6bfb90dd3c9b26ce4732e04025a468fe2fa29d63049cb0aa2a888e610d2</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/cb584d6de2880054c41aceb962c287de5101444edfd2611e6afdb4aee428cca9--libedit--20221030-3.1.x86_64_linux.bottle.tar.gz</span><br><span class="line">==&gt; Fetching krb5</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/krb5/manifests/1.21_1</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/32c98b39241cf26de27624b054208954d379c44c1ea6895a726ee27bdea76260--krb5-1.21_1.bottle_manifest.json</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/krb5/blobs/sha256:cb324a8c5a6c8f60143a4e24f235c0955183a7262c5a2fc6c08a3a9408645f99</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/8af61a009a5d99e012ed5e2c5ebb522bfe060d9e9d02daf8aa04f7a5891e1bc6--krb5--1.21_1.x86_64_linux.bottle.tar.gz</span><br><span class="line">==&gt; Fetching libtirpc</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/libtirpc/manifests/1.3.3</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/8855f5ef631c25ab1532940cd26ad4e298df26b4414ccd1426becf1b4ed7a3f9--libtirpc-1.3.3.bottle_manifest.json</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/libtirpc/blobs/sha256:26371c5e683f16a4b2ebf4475150672f76d45e3d43583c942fcb0e916be77dc3</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/5fff9750e00be58fcd7274922fd551422a2b885f50e849d9af74a44e659317f1--libtirpc--1.3.3.x86_64_linux.bottle.tar.gz</span><br><span class="line">==&gt; Fetching libnsl</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/libnsl/manifests/2.0.0_1</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/86e8a2a3ce4c0d286a9ff3a6776bfbbf67e8e9aefa48596a6149f09457bde4ef--libnsl-2.0.0_1.bottle_manifest.json</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/libnsl/blobs/sha256:ed70b285939e2ab21ba53d122ce2d4beab4cd0f9c86925c3d3a2cfb1b0eeecb3</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/c9eaf36a8d19f53ae16de75047a0662fb77c2865d66e83a3b90391ace3a79617--libnsl--2.0.0_1.x86_64_linux.bottle.tar.gz</span><br><span class="line">==&gt; Fetching unzip</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/unzip/manifests/6.0_8</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/b9a98c1a65dea38eb0bb5d9106a5758ed0ff17635811bd7f7cd6be5908c2961b--unzip-6.0_8.bottle_manifest.json</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/unzip/blobs/sha256:baf15e19852a0f9756e3302fa6f3866eaeccc06730c9907bffc19f32861d64bf</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/b21864e34ef4cb82ce78fcf50f8d91e7b3525e695b095c7d006c15cd802eefbb--unzip--6.0_8.x86_64_linux.bottle.tar.gz</span><br><span class="line">==&gt; Fetching python@3.11</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/python/3.11/manifests/3.11.4_1</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/c009c3cb6566d4e36121a40c85204870afab2b9c86263b1d38d3c672361c6cb1--python@3.11-3.11.4_1.bottle_manifest.json</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/python/3.11/blobs/sha256:7e8892393a9df0437e1ada50c011df549867348fe12e998d8d659da77379aa07</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/56dabc6f51c30c659a7b638dc2e0db03ee0abfb654824bfbc7f56eacbeb68a75--python@3.11--3.11.4_1.x86_64_linux.bottle.tar.gz</span><br><span class="line">==&gt; Fetching glib</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/glib/manifests/2.76.4</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/948354b81d1afa62d6c2c2bb260e244d78249c041da621692ead9cdee06fc7f8--glib-2.76.4.bottle_manifest.json</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/glib/blobs/sha256:a66ad2580fe4a040cb0c0d51b37772d6d8df4b5505e2d6f6d87c82471d7adcaa</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/7cce68ea37f6935ce98a383b9400218c3424c4896c03068d01a28b295899c272--glib--2.76.4.x86_64_linux.bottle.tar.gz</span><br><span class="line">==&gt; Fetching libcap</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/libcap/manifests/2.69</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/686c24487732ef743b26325cb6d31abae653b97d379a56729a3dd5a6ffe85fd6--libcap-2.69.bottle_manifest.json</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/libcap/blobs/sha256:c76a15fd8bef73c4c24174992f4507ae01260b7e2a6864e7e528acd93f1f488f</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/e3a42780561a92d24c64a550297443785c41440945d5bc9edd7e907ed3100d22--libcap--2.69.x86_64_linux.bottle.tar.gz</span><br><span class="line">==&gt; Fetching lz4</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/lz4/manifests/1.9.4</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/379e59b981667f9585b33a2ff318769d8edca3ce6fd2e9a67ed291ae3e0cc872--lz4-1.9.4.bottle_manifest.json</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/lz4/blobs/sha256:1757fefc3840e11c4822e4c2a95aa62aca44a4eaccce6f5c414ea51d1e58bf8e</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/0e1822b21340968e08a38ebad2df2a2007600450c01d984e82071a679ae9b419--lz4--1.9.4.x86_64_linux.bottle.tar.gz</span><br><span class="line">==&gt; Fetching zstd</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/zstd/manifests/1.5.5</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/0afc423c03e4ef9c6e5a0a9bd0833be3f24fe4d17390e10342137f0d1b53dbf7--zstd-1.5.5.bottle_manifest.json</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/zstd/blobs/sha256:68c8655224f058316c16462507b6cdd061bd546e161bf8419c68ca526d3a9a48</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/bc77edd851b4d46b2f563b6dc3edff96e6230c9fac665fd0cb8ffe20a4280cfd--zstd--1.5.5.x86_64_linux.bottle.tar.gz</span><br><span class="line">==&gt; Fetching systemd</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/systemd/manifests/253.6</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######################################################################################################################################################################################### 100.0%</span></span></span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/systemd/blobs/sha256:002ce9cec2c8050ab3273e9c8fea98ed90b3d59260fc792440b9f1845c01e7ad</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######################################################################################################################################################################################### 100.0%</span></span></span><br><span class="line">==&gt; Fetching libfido2</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/libfido2/manifests/1.13.0_1</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/45bf50ee4ed0a5bef8bd7337de5554ff6b69e7b3dc2848d8e971a12d28b6ec0f--libfido2-1.13.0_1.bottle_manifest.json</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/libfido2/blobs/sha256:54a0268ea3f24f5d9f0c4bfbe997d425d7f2f133c4df6f8ebe8c87bf7e76372f</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/5d1fee224f250026e4cd1bd966657e41ae1651b68537080f340d1046ada77e4b--libfido2--1.13.0_1.x86_64_linux.bottle.tar.gz</span><br><span class="line">==&gt; Fetching protobuf@21</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/protobuf/21/manifests/21.12</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/9f24cec38d165f7984e74442740f777284ab3ead474a5ebc3838c58635419111--protobuf@21-21.12.bottle_manifest.json</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/protobuf/21/blobs/sha256:57404e662da5768d45c06790cd227171205fcc0e1f775d4e1f2a91cad8ec45cc</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/ee7198a3a8e7ea8a5081e161de87ceac018071feca856132cd7677457ba71ef7--protobuf@21--21.12.x86_64_linux.bottle.tar.gz</span><br><span class="line">==&gt; Fetching brotli</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/brotli/manifests/1.0.9</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/922ce7b351cec833f9bd2641f27d8ac011005f8b1f7e1119b8271cfb4c0d3cd7--brotli-1.0.9.bottle_manifest.json</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/brotli/blobs/sha256:97756cdd4ee7ca03251307eafdb3dff7be3f070a8c0fdf385e87e7ad4a1068de</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/be14053abf40a4424e57a05dbcf0a241f0fd10f0fc3c19426dbd25f37720e533--brotli--1.0.9.x86_64_linux.bottle.tar.gz</span><br><span class="line">==&gt; Fetching libunistring</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/libunistring/manifests/1.1</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/a34801f1ad5800ba51b2b3951d82a913ccf0641982f86b02df2f0aa182535055--libunistring-1.1.bottle_manifest.json</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/libunistring/blobs/sha256:252f3716191a8c08f8d10e2c20b84cf9645e2c264f409f58d3255d9a4edce77f</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/acc8b5bda4be9c1f9fb5016ebed59e76f37c87c5ead566f58f79aa3064cfbbe1--libunistring--1.1.x86_64_linux.bottle.tar.gz</span><br><span class="line">==&gt; Fetching libidn2</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/libidn2/manifests/2.3.4_1-1</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/03ad193177f4e7d05ee2ed19a455028cb5fbf7ea1a812d88f18f5e9e8b4a4d43--libidn2-2.3.4_1-1.bottle_manifest.json</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/libidn2/blobs/sha256:af78945967847cdf33779abbd1142cabb31d6b5d428f367e23bc068f1d240e49</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/bc61c7d91e776e8967178a1ff72134e7d5a797c3db23c0c90e45612f99815fe0--libidn2--2.3.4_1.x86_64_linux.bottle.1.tar.gz</span><br><span class="line">==&gt; Fetching libnghttp2</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/libnghttp2/manifests/1.54.0</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/44bf2473b9a633f7b958b0e0d691180f8618f4bec47778672bd9758948fdde1f--libnghttp2-1.54.0.bottle_manifest.json</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/libnghttp2/blobs/sha256:c5ea523e4a8618aae652c01e9695ab274571e13f2db926910202dea089d7336d</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/193b0388c2733e1c9ac4ff0f253035095c5f8b8485bba7168d0b907e404ca7cc--libnghttp2--1.54.0.x86_64_linux.bottle.tar.gz</span><br><span class="line">==&gt; Fetching libssh2</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/libssh2/manifests/1.11.0_1</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/48ca0c7785b21630a4817c59b72205609ccb0575e7abc64d64af2e61a60b5b0a--libssh2-1.11.0_1.bottle_manifest.json</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/libssh2/blobs/sha256:57746d26d6d96b0ba3a7b7021b8f13a466685e8a2172fa49bf4cb44d91d24429</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/dd2e47d97bc9571f46d4876b2ae13568f5ceff7cfb9b99d955fa8d4d262afd3a--libssh2--1.11.0_1.x86_64_linux.bottle.tar.gz</span><br><span class="line">==&gt; Fetching openldap</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/openldap/manifests/2.6.5</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######################################################################################################################################################################################### 100.0%</span></span></span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/openldap/blobs/sha256:acc12b445557a8b4c5872e7fae4653e36ccc74b618c9bd82eb40f28c7618e0b6</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######################################################################################################################################################################################### 100.0%</span></span></span><br><span class="line">==&gt; Fetching rtmpdump</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/rtmpdump/manifests/2.4.20151223_2</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/9cc68d151bcde6dce7c43dbbb240d184da5bffbb50ee3f345ca291ce52d3a4d5--rtmpdump-2.4+20151223_2.bottle_manifest.json</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/rtmpdump/blobs/sha256:d051297b563e80fbcff1a9006ae9fa0ce66280716322fa58a669298d73407e6f</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/fdaa004be81732c1b57b752b441481a3672510077bf7f7869a01687d213b654f--rtmpdump--2.4+20151223_2.x86_64_linux.bottle.tar.gz</span><br><span class="line">==&gt; Fetching curl</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/curl/manifests/8.1.2_1</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/4a6e1184385038c60152e94e38e334f9468b728d7a029833b9d4bb64a93fbebd--curl-8.1.2_1.bottle_manifest.json</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/curl/blobs/sha256:02b3b8dde04541f3fe2e0cd4c996909597cf9dd3473a1e298d21e25853529082</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/92f0b26272b01dfcad285b2995ef379c47d86f62313b06a12218302a8507e727--curl--8.1.2_1.x86_64_linux.bottle.tar.gz</span><br><span class="line">==&gt; Fetching cyrus-sasl</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/cyrus-sasl/manifests/2.1.28_2</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/1b83b1c4579a3298a1011c9418ccdf6449e5bb9797de00bca7d20dfbff820257--cyrus-sasl-2.1.28_2.bottle_manifest.json</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/cyrus-sasl/blobs/sha256:f1bc6d528c1c0e53c2eecb599e5127070654a7bdfb9acb0232cfd08bfaf38efd</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/a8f7183cca0be88bce3698861d233ac60f48d72b1c84fab941bde64a0c128119--cyrus-sasl--2.1.28_2.x86_64_linux.bottle.tar.gz</span><br><span class="line">==&gt; Fetching mysql</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/mysql/manifests/8.0.33_3</span><br><span class="line">Already downloaded: /home/ubuntu/.cache/Homebrew/downloads/a1894ed626d297a083fba6b13f7cdb7725c2df94967d7ccbcae44b27f3fdb5ea--mysql-8.0.33_3.bottle_manifest.json</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/mysql/blobs/sha256:e81e56785691e7ea4d0af44e4ce5d73035bc09959b9b80ea2300d1df66ef2958</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######################################################################################################################################################################################### 100.0%</span></span></span><br><span class="line">==&gt; Installing dependencies for mysql: icu4c, openssl@3, libevent, libcbor, pcre2, dbus, libxcrypt, util-linux, mpdecimal, sqlite, berkeley-db@5, libedit, krb5, libtirpc, libnsl, unzip, python@3.11, glib, libcap, lz4, zstd, systemd, libfido2, protobuf@21, brotli, libunistring, libidn2, libnghttp2, libssh2, openldap, rtmpdump, curl and cyrus-sasl</span><br><span class="line">==&gt; Installing mysql dependency: icu4c</span><br><span class="line">==&gt; Pouring icu4c--73.2.x86_64_linux.bottle.tar.gz</span><br><span class="line">==&gt; Downloading https://formulae.brew.sh/api/cask.jws.json</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######################################################################################################################################################################################### 100.0%</span></span></span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/icu4c/73.2: 268 files, 87.1MB</span><br><span class="line">==&gt; Installing mysql dependency: openssl@3</span><br><span class="line">==&gt; Pouring openssl@3--3.1.1_1.x86_64_linux.bottle.tar.gz</span><br><span class="line">Unlinking /home/linuxbrew/.linuxbrew/Cellar/openssl@1.1/1.1.1u... 3999 symlinks removed.</span><br><span class="line">==&gt; Downloading https://formulae.brew.sh/api/formula.jws.json</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######################################################################################################################################################################################### 100.0%</span></span></span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/openssl@3/3.1.1_1: 6,820 files, 38.2MB</span><br><span class="line">==&gt; Installing mysql dependency: libevent</span><br><span class="line">==&gt; Pouring libevent--2.1.12_1.x86_64_linux.bottle.tar.gz</span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/libevent/2.1.12_1: 62 files, 2.6MB</span><br><span class="line">==&gt; Installing mysql dependency: libcbor</span><br><span class="line">==&gt; Pouring libcbor--0.10.2.x86_64_linux.bottle.tar.gz</span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/libcbor/0.10.2: 31 files, 218.7KB</span><br><span class="line">==&gt; Installing mysql dependency: pcre2</span><br><span class="line">==&gt; Pouring pcre2--10.42.x86_64_linux.bottle.tar.gz</span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/pcre2/10.42: 234 files, 7MB</span><br><span class="line">==&gt; Installing mysql dependency: dbus</span><br><span class="line">==&gt; Pouring dbus--1.14.8.x86_64_linux.bottle.tar.gz</span><br><span class="line">==&gt; /home/linuxbrew/.linuxbrew/Cellar/dbus/1.14.8/bin/dbus-uuidgen --ensure=/home/linuxbrew/.linuxbrew/var/lib/dbus/machine-id</span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/dbus/1.14.8: 77 files, 2.9MB</span><br><span class="line">==&gt; Installing mysql dependency: libxcrypt</span><br><span class="line">==&gt; Pouring libxcrypt--4.4.36.x86_64_linux.bottle.tar.gz</span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/libxcrypt/4.4.36: 24 files, 369.2KB</span><br><span class="line">==&gt; Installing mysql dependency: util-linux</span><br><span class="line">==&gt; Pouring util-linux--2.39.1.x86_64_linux.bottle.tar.gz</span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/util-linux/2.39.1: 410 files, 23.9MB</span><br><span class="line">==&gt; Installing mysql dependency: mpdecimal</span><br><span class="line">==&gt; Pouring mpdecimal--2.5.1.x86_64_linux.bottle.tar.gz</span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/mpdecimal/2.5.1: 71 files, 2.4MB</span><br><span class="line">==&gt; Installing mysql dependency: sqlite</span><br><span class="line">==&gt; Pouring sqlite--3.42.0.x86_64_linux.bottle.tar.gz</span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/sqlite/3.42.0: 12 files, 5.8MB</span><br><span class="line">==&gt; Installing mysql dependency: berkeley-db@5</span><br><span class="line">==&gt; Pouring berkeley-db@5--5.3.28_1.x86_64_linux.bottle.tar.gz</span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/berkeley-db@5/5.3.28_1: 5,271 files, 87.7MB</span><br><span class="line">==&gt; Installing mysql dependency: libedit</span><br><span class="line">==&gt; Pouring libedit--20221030-3.1.x86_64_linux.bottle.tar.gz</span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/libedit/20221030-3.1: 54 files, 791.9KB</span><br><span class="line">==&gt; Installing mysql dependency: krb5</span><br><span class="line">==&gt; Pouring krb5--1.21_1.x86_64_linux.bottle.tar.gz</span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/krb5/1.21_1: 163 files, 5.3MB</span><br><span class="line">==&gt; Installing mysql dependency: libtirpc</span><br><span class="line">==&gt; Pouring libtirpc--1.3.3.x86_64_linux.bottle.tar.gz</span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/libtirpc/1.3.3: 85 files, 1MB</span><br><span class="line">==&gt; Installing mysql dependency: libnsl</span><br><span class="line">==&gt; Pouring libnsl--2.0.0_1.x86_64_linux.bottle.tar.gz</span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/libnsl/2.0.0_1: 18 files, 182.2KB</span><br><span class="line">==&gt; Installing mysql dependency: unzip</span><br><span class="line">==&gt; Pouring unzip--6.0_8.x86_64_linux.bottle.tar.gz</span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/unzip/6.0_8: 16 files, 597.1KB</span><br><span class="line">==&gt; Installing mysql dependency: python@3.11</span><br><span class="line">==&gt; Pouring python@3.11--3.11.4_1.x86_64_linux.bottle.tar.gz</span><br><span class="line">==&gt; /home/linuxbrew/.linuxbrew/Cellar/python@3.11/3.11.4_1/bin/python3.11 -m ensurepip</span><br><span class="line">==&gt; /home/linuxbrew/.linuxbrew/Cellar/python@3.11/3.11.4_1/bin/python3.11 -m pip install -v --no-deps --no-index --upgrade --isolated --target=/home/linuxbrew/.linuxbrew/lib/python3.11/site-pac</span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/python@3.11/3.11.4_1: 2,845 files, 67.3MB</span><br><span class="line">==&gt; Installing mysql dependency: glib</span><br><span class="line">==&gt; Pouring glib--2.76.4.x86_64_linux.bottle.tar.gz</span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/glib/2.76.4: 462 files, 26.1MB</span><br><span class="line">==&gt; Installing mysql dependency: libcap</span><br><span class="line">==&gt; Pouring libcap--2.69.x86_64_linux.bottle.tar.gz</span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/libcap/2.69: 99 files, 464KB</span><br><span class="line">==&gt; Installing mysql dependency: lz4</span><br><span class="line">==&gt; Pouring lz4--1.9.4.x86_64_linux.bottle.tar.gz</span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/lz4/1.9.4: 22 files, 695.3KB</span><br><span class="line">==&gt; Installing mysql dependency: zstd</span><br><span class="line">==&gt; Pouring zstd--1.5.5.x86_64_linux.bottle.tar.gz</span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/zstd/1.5.5: 31 files, 3.2MB</span><br><span class="line">==&gt; Installing mysql dependency: systemd</span><br><span class="line">==&gt; Pouring systemd--253.6.x86_64_linux.bottle.tar.gz</span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/systemd/253.6: 663 files, 23.0MB</span><br><span class="line">==&gt; Installing mysql dependency: libfido2</span><br><span class="line">==&gt; Pouring libfido2--1.13.0_1.x86_64_linux.bottle.tar.gz</span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/libfido2/1.13.0_1: 548 files, 1.6MB</span><br><span class="line">==&gt; Installing mysql dependency: protobuf@21</span><br><span class="line">==&gt; Pouring protobuf@21--21.12.x86_64_linux.bottle.tar.gz</span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/protobuf@21/21.12: 288 files, 38.4MB</span><br><span class="line">==&gt; Installing mysql dependency: brotli</span><br><span class="line">==&gt; Pouring brotli--1.0.9.x86_64_linux.bottle.tar.gz</span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/brotli/1.0.9: 25 files, 2.5MB</span><br><span class="line">==&gt; Installing mysql dependency: libunistring</span><br><span class="line">==&gt; Pouring libunistring--1.1.x86_64_linux.bottle.tar.gz</span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/libunistring/1.1: 57 files, 5.5MB</span><br><span class="line">==&gt; Installing mysql dependency: libidn2</span><br><span class="line">==&gt; Pouring libidn2--2.3.4_1.x86_64_linux.bottle.1.tar.gz</span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/libidn2/2.3.4_1: 80 files, 1.2MB</span><br><span class="line">==&gt; Installing mysql dependency: libnghttp2</span><br><span class="line">==&gt; Pouring libnghttp2--1.54.0.x86_64_linux.bottle.tar.gz</span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/libnghttp2/1.54.0: 14 files, 832.8KB</span><br><span class="line">==&gt; Installing mysql dependency: libssh2</span><br><span class="line">==&gt; Pouring libssh2--1.11.0_1.x86_64_linux.bottle.tar.gz</span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/libssh2/1.11.0_1: 198 files, 1.4MB</span><br><span class="line">==&gt; Installing mysql dependency: openldap</span><br><span class="line">==&gt; Pouring openldap--2.6.5.x86_64_linux.bottle.tar.gz</span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/openldap/2.6.5: 85 files, 7.9MB</span><br><span class="line">==&gt; Installing mysql dependency: rtmpdump</span><br><span class="line">==&gt; Pouring rtmpdump--2.4+20151223_2.x86_64_linux.bottle.tar.gz</span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/rtmpdump/2.4+20151223_2: 20 files, 624.1KB</span><br><span class="line">==&gt; Installing mysql dependency: curl</span><br><span class="line">==&gt; Pouring curl--8.1.2_1.x86_64_linux.bottle.tar.gz</span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/curl/8.1.2_1: 511 files, 5.0MB</span><br><span class="line">==&gt; Installing mysql dependency: cyrus-sasl</span><br><span class="line">==&gt; Pouring cyrus-sasl--2.1.28_2.x86_64_linux.bottle.tar.gz</span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/cyrus-sasl/2.1.28_2: 89 files, 1.1MB</span><br><span class="line">==&gt; Installing mysql</span><br><span class="line">==&gt; Pouring mysql--8.0.33_3.x86_64_linux.bottle.tar.gz</span><br><span class="line">==&gt; /home/linuxbrew/.linuxbrew/Cellar/mysql/8.0.33_3/bin/mysqld --initialize-insecure --user=ubuntu --basedir=/home/linuxbrew/.linuxbrew/Cellar/mysql/8.0.33_3 --datadir=/home/linuxbrew/.linuxbr</span><br><span class="line">==&gt; Caveats</span><br><span class="line">We've installed your MySQL database without a root password. To secure it run:</span><br><span class="line">    mysql_secure_installation</span><br><span class="line"></span><br><span class="line">MySQL is configured to only allow connections from localhost by default</span><br><span class="line"></span><br><span class="line">To connect run:</span><br><span class="line">    mysql -u root</span><br><span class="line"></span><br><span class="line">To start mysql now and restart at login:</span><br><span class="line">  brew services start mysql</span><br><span class="line">Or, if you don't want/need a background service you can just run:</span><br><span class="line">  /home/linuxbrew/.linuxbrew/opt/mysql/bin/mysqld_safe --datadir=/home/linuxbrew/.linuxbrew/var/mysql</span><br><span class="line">==&gt; Summary</span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/mysql/8.0.33_3: 320 files, 360.8MB</span><br><span class="line">==&gt; Running `brew cleanup mysql`...</span><br><span class="line">Disable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP.</span><br><span class="line">Hide these hints with HOMEBREW_NO_ENV_HINTS (see `man brew`).</span><br><span class="line">==&gt; Upgrading 1 dependent of upgraded formulae:</span><br><span class="line">Disable this behaviour by setting HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK.</span><br><span class="line">Hide these hints with HOMEBREW_NO_ENV_HINTS (see `man brew`).</span><br><span class="line">pyenv 2.3.18 -&gt; 2.3.22</span><br><span class="line">==&gt; Fetching dependencies for pyenv: berkeley-db</span><br><span class="line">==&gt; Fetching berkeley-db</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/berkeley-db/manifests/18.1.40_2</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######################################################################################################################################################################################### 100.0%</span></span></span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/berkeley-db/blobs/sha256:3ba948d2977fbfcc865086fab6d6567b4f3972fcc46e327817fb7600f64d4312</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######################################################################################################################################################################################### 100.0%</span></span></span><br><span class="line">==&gt; Fetching pyenv</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/pyenv/manifests/2.3.22</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######################################################################################################################################################################################### 100.0%</span></span></span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/pyenv/blobs/sha256:350eeb5f925813f78110c2e2492bfae3da6d71ba0e931124ed90a78b39fa9137</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######################################################################################################################################################################################### 100.0%</span></span></span><br><span class="line">==&gt; Upgrading pyenv</span><br><span class="line">  2.3.18 -&gt; 2.3.22</span><br><span class="line"></span><br><span class="line">==&gt; Installing dependencies for pyenv: berkeley-db</span><br><span class="line">==&gt; Installing pyenv dependency: berkeley-db</span><br><span class="line">==&gt; Pouring berkeley-db--18.1.40_2.x86_64_linux.bottle.tar.gz</span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/berkeley-db/18.1.40_2: 44 files, 8.2MB</span><br><span class="line">==&gt; Installing pyenv</span><br><span class="line">==&gt; Pouring pyenv--2.3.22.x86_64_linux.bottle.tar.gz</span><br><span class="line">🍺  /home/linuxbrew/.linuxbrew/Cellar/pyenv/2.3.22: 1,086 files, 4.2MB</span><br><span class="line">==&gt; Running `brew cleanup pyenv`...</span><br><span class="line">Removing: /home/linuxbrew/.linuxbrew/Cellar/pyenv/2.3.18... (1,067 files, 4.1MB)</span><br><span class="line">==&gt; Checking for dependents of upgraded formulae...</span><br><span class="line">==&gt; No broken dependents found!</span><br><span class="line">==&gt; Caveats</span><br><span class="line">==&gt; mysql</span><br><span class="line">We've installed your MySQL database without a root password. To secure it run:</span><br><span class="line">    mysql_secure_installation</span><br><span class="line"></span><br><span class="line">MySQL is configured to only allow connections from localhost by default</span><br><span class="line"></span><br><span class="line">To connect run:</span><br><span class="line">    mysql -u root</span><br><span class="line"></span><br><span class="line">To start mysql now and restart at login:</span><br><span class="line">  brew services start mysql</span><br><span class="line">Or, if you don't want/need a background service you can just run:</span><br><span class="line">  /home/linuxbrew/.linuxbrew/opt/mysql/bin/mysqld_safe --datadir=/home/linuxbrew/.linuxbrew/var/mysql</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ubuntu @ VM-4-14-ubuntu <span class="keyword">in</span> ~ [14:23:34] C:1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew services start mysql</span></span><br><span class="line">==&gt; Tapping homebrew/services</span><br><span class="line">Cloning into '/home/linuxbrew/.linuxbrew/Homebrew/Library/Taps/homebrew/homebrew-services'...</span><br><span class="line">remote: Enumerating objects: 2461, done.</span><br><span class="line">remote: Counting objects: 100% (2461/2461), done.</span><br><span class="line">remote: Compressing objects: 100% (1173/1173), done.</span><br><span class="line">remote: Total 2461 (delta 1152), reused 2344 (delta 1100), pack-reused 0</span><br><span class="line">Receiving objects: 100% (2461/2461), 672.89 KiB | 1.93 MiB/s, done.</span><br><span class="line">Resolving deltas: 100% (1152/1152), done.</span><br><span class="line">Tapped 1 command (45 files, 950.0KB).</span><br><span class="line">Created symlink /home/ubuntu/.config/systemd/user/default.target.wants/homebrew.mysql.service → /home/ubuntu/.config/systemd/user/homebrew.mysql.service.</span><br><span class="line">==&gt; Successfully started `mysql` (label: homebrew.mysql)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ubuntu @ VM-4-14-ubuntu <span class="keyword">in</span> ~ [14:26:08]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysql_secure_installation</span></span><br><span class="line"></span><br><span class="line">Securing the MySQL server deployment.</span><br><span class="line"></span><br><span class="line">Connecting to MySQL using a blank password.</span><br><span class="line"></span><br><span class="line">VALIDATE PASSWORD COMPONENT can be used to test passwords</span><br><span class="line">and improve security. It checks the strength of password</span><br><span class="line">and allows the users to set only those passwords which are</span><br><span class="line">secure enough. Would you like to setup VALIDATE PASSWORD component?</span><br><span class="line"></span><br><span class="line">Press y|Y for Yes, any other key for No: Y</span><br><span class="line"></span><br><span class="line">There are three levels of password validation policy:</span><br><span class="line"></span><br><span class="line">LOW    Length &gt;= 8</span><br><span class="line">MEDIUM Length &gt;= 8, numeric, mixed case, and special characters</span><br><span class="line">STRONG Length &gt;= 8, numeric, mixed case, special characters and dictionary                  file</span><br><span class="line"></span><br><span class="line">Please enter 0 = LOW, 1 = MEDIUM and 2 = STRONG: 0</span><br><span class="line">Please set the password for root here.</span><br><span class="line"></span><br><span class="line">New password:</span><br><span class="line"></span><br><span class="line">Re-enter new password:</span><br><span class="line"></span><br><span class="line">Estimated strength of the password: 50</span><br><span class="line">Do you wish to continue with the password provided?(Press y|Y for Yes, any other key for No) : Y</span><br><span class="line">By default, a MySQL installation has an anonymous user,</span><br><span class="line">allowing anyone to log into MySQL without having to have</span><br><span class="line">a user account created for them. This is intended only for</span><br><span class="line">testing, and to make the installation go a bit smoother.</span><br><span class="line">You should remove them before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line">Remove anonymous users? (Press y|Y for Yes, any other key for No) : Y</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Normally, root should only be allowed to connect from</span><br><span class="line">'localhost'. This ensures that someone cannot guess at</span><br><span class="line">the root password from the network.</span><br><span class="line"></span><br><span class="line">Disallow root login remotely? (Press y|Y for Yes, any other key for No) : q</span><br><span class="line"></span><br><span class="line"> ... skipping.</span><br><span class="line">By default, MySQL comes with a database named 'test' that</span><br><span class="line">anyone can access. This is also intended only for testing,</span><br><span class="line">and should be removed before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Remove test database and access to it? (Press y|Y for Yes, any other key for No) : Y</span><br><span class="line"> - Dropping test database...</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line"> - Removing privileges on test database...</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line">Reloading the privilege tables will ensure that all changes</span><br><span class="line">made so far will take effect immediately.</span><br><span class="line"></span><br><span class="line">Reload privilege tables now? (Press y|Y for Yes, any other key for No) : Y</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line">All done!</span><br></pre></td></tr></table></figure><h3 id="Mac环境安装MySQL"><a href="#Mac环境安装MySQL" class="headerlink" title="Mac环境安装MySQL"></a>Mac环境安装MySQL</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># taoyi @ tysYZMac in ~ [11:01:18]</span></span><br><span class="line">$ brew install mysql</span><br><span class="line">Running `brew update --auto-update`...</span><br><span class="line">Installing from the API is now the default behaviour!</span><br><span class="line">You can save space and time by running:</span><br><span class="line">  brew untap homebrew/core</span><br><span class="line">==&gt; Downloading https://formulae.brew.sh/api/formula_tap_migrations.jws.json</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Auto-updated Homebrew!</span><br><span class="line">Updated 3 taps (homebrew/services, homebrew/core and homebrew/cask).</span><br><span class="line">==&gt; New Formulae</span><br><span class="line">access                        cycode                        joshuto                       mods                          shush</span><br><span class="line">adb-enhanced                  ddns-go                       jsign                         nerdfix                       sickchill</span><br><span class="line">aftman                        debugbreak                    jsmn                          nexttrace                     slsa-verifier</span><br><span class="line">alass                         driftwood                     judy                          ntbtls                        spotify_player</span><br><span class="line">ansible@7                     dtools                        libabigail                    openfga                       ssocr</span><br><span class="line">apko                          dzr                           libclc                        ord                           staq</span><br><span class="line">argparse                      erlang@25                     libdivsufsort                 pocketbase                    svlint</span><br><span class="line">ast-grep                      fastgron                      libecpint                     procps@3                      svls</span><br><span class="line">aws-amplify                   forgit                        libfastjson                   protobuf@21                   swift-outdated</span><br><span class="line">bashate                       fuc                           libgedit-gtksourceview        proxygen                      tailwindcss-language-server</span><br><span class="line">bbot                          fw                            libint                        pypy3.10                      tern</span><br><span class="line">bilix                         gcc@12                        liblxi                        pypy3.9                       trufflehog</span><br><span class="line">blades                        getmail6                      libmediainfo                  python-toml                   trzsz-ssh</span><br><span class="line">boolector                     gffread                       libomemo-c                    quantum++                     typical</span><br><span class="line">cargo-binstall                git-credential-oauth          libpaho-mqtt                  rio                           virtualfish</span><br><span class="line">cargo-generate                git-tools                     libversion                    roblox-ts                     votca</span><br><span class="line">cbonsai                       gitoxide                      libzen                        rojo                          wally</span><br><span class="line">charls                        go-feature-flag               lowdown                       runme                         wzprof</span><br><span class="line">clive                         gotestsum                     lpeg                          rye                           xbyak</span><br><span class="line">conda-lock                    grpc@1.54                     lr                            safeint                       xe</span><br><span class="line">convco                        grype                         ls-lint                       scrapy                        yamlfmt</span><br><span class="line">core-lightning                hex                           mariadb@10.11                 sh4d0wup                      zchunk</span><br><span class="line">cppinsights                   hivex                         melange                       shodan                        zrok</span><br><span class="line">crabz                         jet                           minigraph                     shub</span><br><span class="line">==&gt; New Casks</span><br><span class="line">1kc-razer                                                                   lg-onscreen-control</span><br><span class="line">apple-hewlett-packard-printer-drivers                                       linn-konfig</span><br><span class="line">asix-ax88179                                                                llamachat</span><br><span class="line">audiocupcake                                                                lo-rain</span><br><span class="line">bloop                                                                       logitune</span><br><span class="line">bookletcreator                                                              loupedeck</span><br><span class="line">bose-updater                                                                motu-m-series</span><br><span class="line">caldigit-docking-utility                                                    mumu-x</span><br><span class="line">caldigit-thunderbolt-charging                                               music-miniplayer</span><br><span class="line">chatall                                                                     music-remote</span><br><span class="line">chatbox                                                                     music-widget</span><br><span class="line"><span class="built_in">command</span>-x                                                                   mycard</span><br><span class="line">concept2-utility                                                            nordic-nrf-command-line-tools</span><br><span class="line">copilot                                                                     obsbot-webcam</span><br><span class="line">craft                                                                       opal</span><br><span class="line">creative                                                                    pallotron-yubiswitch</span><br><span class="line">dadroit-json-viewer                                                         philips-hue-sync</span><br><span class="line">ddpm                                                                        picoscope</span><br><span class="line">devpod                                                                      pololu-avr-programmer-v2</span><br><span class="line">dintch                                                                      processmonitor</span><br><span class="line">drata-agent                                                                 qflipper</span><br><span class="line">elektron-overbridge                                                         red-canary-mac-monitor</span><br><span class="line">engine-dj                                                                   rio</span><br><span class="line">entry                                                                       rode-connect</span><br><span class="line">eobcanka                                                                    saleae-logic</span><br><span class="line">eset-cyber-security                                                         samsung-portable-ssd-t7</span><br><span class="line">eu                                                                          score</span><br><span class="line">eusamanager                                                                 screen-studio</span><br><span class="line">filemonitor                                                                 shureplus-motiv</span><br><span class="line">firefly-shimmer                                                             skiff</span><br><span class="line">flexoptix                                                                   smooze-pro</span><br><span class="line">focusrite-control                                                           submariner</span><br><span class="line">fractal-bot                                                                 synology-cloud-station-backup</span><br><span class="line">frappe-books                                                                synology-photo-station-uploader</span><br><span class="line">genesys-cloud                                                               synology-surveillance-station-client</span><br><span class="line">graalvm-jdk                                                                 synologyassistant</span><br><span class="line">grs-bluewallet                                                              tea</span><br><span class="line">hdhomerun                                                                   ths</span><br><span class="line">hp-easy-start                                                               tiptoi-manager</span><br><span class="line">huiontablet                                                                 uhk-agent</span><br><span class="line">insta360-studio                                                             volta</span><br><span class="line">jabra-direct                                                                wacom-tablet</span><br><span class="line">kiibohd-configurator                                                        whisky</span><br><span class="line">konica-minolta-bizhub-c759-c658-c368-c287-c3851-driver                      yealink-meeting</span><br><span class="line">lasso                                                                       zsa-wally</span><br><span class="line"></span><br><span class="line">You have 12 outdated formulae installed.</span><br><span class="line">==&gt; Downloading https://formulae.brew.sh/api/cask_tap_migrations.jws.json</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line"></span><br><span class="line">==&gt; Fetching dependencies <span class="keyword">for</span> mysql: icu4c, ca-certificates, openssl@3, libevent, libcbor, libfido2, lz4, protobuf@21, zlib, xz and zstd</span><br><span class="line">==&gt; Fetching icu4c</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/icu4c/manifests/73.2</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/icu4c/blobs/sha256:953797d46546c570c4fab4e8b2395624ae90acd492f75b68ff99fbd115ccd748</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Fetching ca-certificates</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/ca-certificates/manifests/2023-05-30</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/ca-certificates/blobs/sha256:f664c0f185677a82689ada2a4e35c555e48885e6c2fb5e2dfcc82d9fb79cf870</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Fetching openssl@3</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/openssl/3/manifests/3.1.1_1</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/openssl/3/blobs/sha256:c4366444ddd5f55ff7dc1cb24a81c01f6ba946e255556af9c641da17142d472e</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Fetching libevent</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/libevent/manifests/2.1.12_1</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/libevent/blobs/sha256:a75d453a7fe2aba1eaba334621b7bd9f0ff6f9e1f04aa400565f68711a9f6db4</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Fetching libcbor</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/libcbor/manifests/0.10.2</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/libcbor/blobs/sha256:ee1e77e1e6cef7ba754d1757f7aa038e34b139466f789231b672e389a194a5fc</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Fetching libfido2</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/libfido2/manifests/1.13.0_1</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/libfido2/blobs/sha256:92ec60d842d0f283bf1d5f3e063aee439cbe1bfdb3b458556caa0dabeed3d0e1</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Fetching lz4</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/lz4/manifests/1.9.4</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/lz4/blobs/sha256:cd29e40287b0a2d665a647acbea5512e8db4c371687147aab5c60bf9059b2cca</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Fetching protobuf@21</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/protobuf/21/manifests/21.12</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/protobuf/21/blobs/sha256:d0909077ab9abd27d47a7990c7bcea6622805421de263ff5a5366beef171bf74</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Fetching zlib</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/zlib/manifests/1.2.13-1</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/zlib/blobs/sha256:565286ede6cc691fb781b96a76235d714159bf47c7af2cadbca01bffa92bd785</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Fetching xz</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/xz/manifests/5.4.3</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/xz/blobs/sha256:179cc5316bed5c452aa1658a2a100bc8cd1b210d79c0f2fffec4934fd1f4cd8a</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Fetching zstd</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/zstd/manifests/1.5.5</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/zstd/blobs/sha256:b709835f4cd5d339b97103f0dfa343489a02d2073f8e80ba7b04d682f1d29bd4</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Fetching mysql</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/mysql/manifests/8.0.33_3</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/mysql/blobs/sha256:11af549049440ae84f55b8458528d0221e82f48f684e3fc05986072ee0c3c64f</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Installing dependencies <span class="keyword">for</span> mysql: icu4c, ca-certificates, openssl@3, libevent, libcbor, libfido2, lz4, protobuf@21, zlib, xz and zstd</span><br><span class="line">==&gt; Installing mysql dependency: icu4c</span><br><span class="line">==&gt; Pouring icu4c--73.2.arm64_ventura.bottle.tar.gz</span><br><span class="line">🍺  /opt/homebrew/Cellar/icu4c/73.2: 268 files, 80.1MB</span><br><span class="line">==&gt; Installing mysql dependency: ca-certificates</span><br><span class="line">==&gt; Pouring ca-certificates--2023-05-30.arm64_ventura.bottle.tar.gz</span><br><span class="line">==&gt; Regenerating CA certificate bundle from keychain, this may take a <span class="keyword">while</span>...</span><br><span class="line">🍺  /opt/homebrew/Cellar/ca-certificates/2023-05-30: 3 files, 216.2KB</span><br><span class="line">==&gt; Installing mysql dependency: openssl@3</span><br><span class="line">==&gt; Pouring openssl@3--3.1.1_1.arm64_ventura.bottle.tar.gz</span><br><span class="line">🍺  /opt/homebrew/Cellar/openssl@3/3.1.1_1: 6,495 files, 28.4MB</span><br><span class="line">==&gt; Installing mysql dependency: libevent</span><br><span class="line">==&gt; Pouring libevent--2.1.12_1.arm64_ventura.bottle.tar.gz</span><br><span class="line">🍺  /opt/homebrew/Cellar/libevent/2.1.12_1: 57 files, 2.2MB</span><br><span class="line">==&gt; Installing mysql dependency: libcbor</span><br><span class="line">==&gt; Pouring libcbor--0.10.2.arm64_ventura.bottle.tar.gz</span><br><span class="line">🍺  /opt/homebrew/Cellar/libcbor/0.10.2: 31 files, 193.7KB</span><br><span class="line">==&gt; Installing mysql dependency: libfido2</span><br><span class="line">==&gt; Pouring libfido2--1.13.0_1.arm64_ventura.bottle.tar.gz</span><br><span class="line">🍺  /opt/homebrew/Cellar/libfido2/1.13.0_1: 547 files, 1.3MB</span><br><span class="line">==&gt; Installing mysql dependency: lz4</span><br><span class="line">==&gt; Pouring lz4--1.9.4.arm64_ventura.bottle.tar.gz</span><br><span class="line">🍺  /opt/homebrew/Cellar/lz4/1.9.4: 22 files, 680.1KB</span><br><span class="line">==&gt; Installing mysql dependency: protobuf@21</span><br><span class="line">==&gt; Pouring protobuf@21--21.12.arm64_ventura.bottle.tar.gz</span><br><span class="line">🍺  /opt/homebrew/Cellar/protobuf@21/21.12: 288 files, 19.6MB</span><br><span class="line">==&gt; Installing mysql dependency: zlib</span><br><span class="line">==&gt; Pouring zlib--1.2.13.arm64_ventura.bottle.1.tar.gz</span><br><span class="line">🍺  /opt/homebrew/Cellar/zlib/1.2.13: 13 files, 399KB</span><br><span class="line">==&gt; Installing mysql dependency: xz</span><br><span class="line">==&gt; Pouring xz--5.4.3.arm64_ventura.bottle.tar.gz</span><br><span class="line">🍺  /opt/homebrew/Cellar/xz/5.4.3: 162 files, 2.6MB</span><br><span class="line">==&gt; Installing mysql dependency: zstd</span><br><span class="line">==&gt; Pouring zstd--1.5.5.arm64_ventura.bottle.tar.gz</span><br><span class="line">🍺  /opt/homebrew/Cellar/zstd/1.5.5: 31 files, 2.3MB</span><br><span class="line">==&gt; Installing mysql</span><br><span class="line">==&gt; Pouring mysql--8.0.33_3.arm64_ventura.bottle.tar.gz</span><br><span class="line">==&gt; /opt/homebrew/Cellar/mysql/8.0.33_3/bin/mysqld --initialize-insecure --user=taoyi --basedir=/opt/homebrew/Cellar/mysql/8.0.33_3 --datadir=/opt/hom</span><br><span class="line">==&gt; Caveats</span><br><span class="line">We<span class="string">'ve installed your MySQL database without a root password. To secure it run:</span></span><br><span class="line"><span class="string">    mysql_secure_installation</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">MySQL is configured to only allow connections from localhost by default</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">To connect run:</span></span><br><span class="line"><span class="string">    mysql -u root</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">To start mysql now and restart at login:</span></span><br><span class="line"><span class="string">  brew services start mysql</span></span><br><span class="line"><span class="string">Or, if you don'</span>t want/need a background service you can just run:</span><br><span class="line">  /opt/homebrew/opt/mysql/bin/mysqld_safe --datadir=/opt/homebrew/var/mysql</span><br><span class="line">==&gt; Summary</span><br><span class="line">🍺  /opt/homebrew/Cellar/mysql/8.0.33_3: 318 files, 300.4MB</span><br><span class="line">==&gt; Running `brew cleanup mysql`...</span><br><span class="line">Disable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP.</span><br><span class="line">Hide these hints with HOMEBREW_NO_ENV_HINTS (see `man brew`).</span><br><span class="line">==&gt; Upgrading 4 dependents of upgraded formulae:</span><br><span class="line">Disable this behaviour by setting HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK.</span><br><span class="line">Hide these hints with HOMEBREW_NO_ENV_HINTS (see `man brew`).</span><br><span class="line">openssl@1.1 1.1.1t -&gt; 1.1.1u, nghttp2 1.52.0 -&gt; 1.54.0_1, node 20.0.0 -&gt; 20.4.0, pyenv 2.3.13 -&gt; 2.3.22</span><br><span class="line">==&gt; Fetching openssl@1.1</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/openssl/1.1/manifests/1.1.1u</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/openssl/1.1/blobs/sha256:0a4b0a3deefd8c470db72605e7a05cfaafe9fcdf4ee834de2b3ec031080b4dde</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Fetching dependencies <span class="keyword">for</span> nghttp2: c-ares and libnghttp2</span><br><span class="line">==&gt; Fetching c-ares</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/c-ares/manifests/1.19.1</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/c-ares/blobs/sha256:ba35cc0962beaea7ae345ee1818297c40d5653649e563dc9493b93924b87ae41</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Fetching libnghttp2</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/libnghttp2/manifests/1.54.0</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/libnghttp2/blobs/sha256:6cf8b32982c49da3773729b84d205660591fdad185e2b1a5f267ebd498b60622</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Fetching nghttp2</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/nghttp2/manifests/1.54.0_1</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/nghttp2/blobs/sha256:890634f1d69a36e62202197a07eddf858e9f391403a6ba993a245f73b321f714</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Fetching dependencies <span class="keyword">for</span> node: libuv</span><br><span class="line">==&gt; Fetching libuv</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/libuv/manifests/1.46.0</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/libuv/blobs/sha256:8c3beb4d11ed0d45cf0b7e07d280ff815eab9f9c138eec90a2f824168aed039e</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Fetching node</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/node/manifests/20.4.0</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/node/blobs/sha256:7d20cdeeaab118ba6df4505d9bc7fb65735c71f2696c0d001b44a8917f23f3d2</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Fetching pyenv</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/pyenv/manifests/2.3.22</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/pyenv/blobs/sha256:77b3b2bb54c95d1feb48bd5b4b83b00fd6fa91907239331dd2f058f98b294e62</span><br><span class="line"><span class="comment">############################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Upgrading openssl@1.1</span><br><span class="line">  1.1.1t -&gt; 1.1.1u</span><br><span class="line"></span><br><span class="line">==&gt; Pouring openssl@1.1--1.1.1u.arm64_ventura.bottle.tar.gz</span><br><span class="line">🍺  /opt/homebrew/Cellar/openssl@1.1/1.1.1u: 8,101 files, 18MB</span><br><span class="line">==&gt; Running `brew cleanup openssl@1.1`...</span><br><span class="line">Removing: /opt/homebrew/Cellar/openssl@1.1/1.1.1t... (8,101 files, 18MB)</span><br><span class="line">Removing: /Users/taoyi/Library/Caches/Homebrew/openssl@1.1--1.1.1t... (5.3MB)</span><br><span class="line">==&gt; Upgrading nghttp2</span><br><span class="line">  1.52.0 -&gt; 1.54.0_1</span><br><span class="line"></span><br><span class="line">==&gt; Installing dependencies <span class="keyword">for</span> nghttp2: c-ares and libnghttp2</span><br><span class="line">==&gt; Installing nghttp2 dependency: c-ares</span><br><span class="line">==&gt; Pouring c-ares--1.19.1.arm64_ventura.bottle.tar.gz</span><br><span class="line">🍺  /opt/homebrew/Cellar/c-ares/1.19.1: 87 files, 681.2KB</span><br><span class="line">==&gt; Installing nghttp2 dependency: libnghttp2</span><br><span class="line">==&gt; Pouring libnghttp2--1.54.0.arm64_ventura.bottle.tar.gz</span><br><span class="line">🍺  /opt/homebrew/Cellar/libnghttp2/1.54.0: 13 files, 731.4KB</span><br><span class="line">==&gt; Installing nghttp2</span><br><span class="line">==&gt; Pouring nghttp2--1.54.0_1.arm64_ventura.bottle.tar.gz</span><br><span class="line">🍺  /opt/homebrew/Cellar/nghttp2/1.54.0_1: 17 files, 2.3MB</span><br><span class="line">==&gt; Running `brew cleanup nghttp2`...</span><br><span class="line">Removing: /opt/homebrew/Cellar/nghttp2/1.52.0... (17 files, 2.2MB)</span><br><span class="line">Removing: /Users/taoyi/Library/Caches/Homebrew/nghttp2--1.52.0... (777KB)</span><br><span class="line">==&gt; Upgrading node</span><br><span class="line">  20.0.0 -&gt; 20.4.0</span><br><span class="line"></span><br><span class="line">==&gt; Installing dependencies <span class="keyword">for</span> node: libuv</span><br><span class="line">==&gt; Installing node dependency: libuv</span><br><span class="line">==&gt; Pouring libuv--1.46.0.arm64_ventura.bottle.tar.gz</span><br><span class="line">🍺  /opt/homebrew/Cellar/libuv/1.46.0: 47 files, 3MB</span><br><span class="line">==&gt; Installing node</span><br><span class="line">==&gt; Pouring node--20.4.0.arm64_ventura.bottle.tar.gz</span><br><span class="line">🍺  /opt/homebrew/Cellar/node/20.4.0: 2,359 files, 57.2MB</span><br><span class="line">==&gt; Running `brew cleanup node`...</span><br><span class="line">Removing: /opt/homebrew/Cellar/node/20.0.0... (2,260 files, 57.2MB)</span><br><span class="line">Removing: /Users/taoyi/Library/Caches/Homebrew/node--20.0.0... (14.5MB)</span><br><span class="line">==&gt; Upgrading pyenv</span><br><span class="line">  2.3.13 -&gt; 2.3.22</span><br><span class="line"></span><br><span class="line">==&gt; Pouring pyenv--2.3.22.arm64_ventura.bottle.tar.gz</span><br><span class="line">🍺  /opt/homebrew/Cellar/pyenv/2.3.22: 1,086 files, 3.3MB</span><br><span class="line">==&gt; Running `brew cleanup pyenv`...</span><br><span class="line">Removing: /opt/homebrew/Cellar/pyenv/2.3.13... (1,048 files, 3.2MB)</span><br><span class="line">==&gt; Checking <span class="keyword">for</span> dependents of upgraded formulae...</span><br><span class="line">==&gt; No broken dependents found!</span><br><span class="line">==&gt; `brew cleanup` has not been run <span class="keyword">in</span> the last 30 days, running now...</span><br><span class="line">Disable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP.</span><br><span class="line">Hide these hints with HOMEBREW_NO_ENV_HINTS (see `man brew`).</span><br><span class="line">Removing: /opt/homebrew/Cellar/c-ares/1.19.0... (87 files, 675.9KB)</span><br><span class="line">Removing: /Users/taoyi/Library/Caches/Homebrew/c-ares--1.19.0... (160.3KB)</span><br><span class="line">Removing: /opt/homebrew/Cellar/ca-certificates/2023-01-10... (3 files, 216.9KB)</span><br><span class="line">Removing: /Users/taoyi/Library/Caches/Homebrew/ca-certificates--2023-01-10... (122.6KB)</span><br><span class="line">Removing: /Users/taoyi/Library/Caches/Homebrew/gettext--0.21.1... (8.8MB)</span><br><span class="line">Removing: /opt/homebrew/Cellar/icu4c/72.1... (263 files, 78.4MB)</span><br><span class="line">Removing: /Users/taoyi/Library/Caches/Homebrew/icu4c--72.1... (28.9MB)</span><br><span class="line">Removing: /opt/homebrew/Cellar/libnghttp2/1.52.0... (13 files, 731.5KB)</span><br><span class="line">Removing: /Users/taoyi/Library/Caches/Homebrew/libnghttp2--1.52.0... (211.3KB)</span><br><span class="line">Removing: /opt/homebrew/Cellar/libuv/1.44.2... (50 files, 3.5MB)</span><br><span class="line">Removing: /opt/homebrew/Cellar/openssl@3/3.0.8... (6,480 files, 28.1MB)</span><br><span class="line">Removing: /Users/taoyi/Library/Caches/Homebrew/pcre2--10.42... (2.0MB)</span><br><span class="line">Removing: /Users/taoyi/Library/Caches/Homebrew/readline--8.2.1... (573.8KB)</span><br><span class="line">Removing: /Users/taoyi/Library/Caches/Homebrew/ca-certificates_bottle_manifest--2023-01-10... (1.8KB)</span><br><span class="line">Removing: /Users/taoyi/Library/Caches/Homebrew/nghttp2_bottle_manifest--1.52.0... (10.7KB)</span><br><span class="line">Removing: /Users/taoyi/Library/Caches/Homebrew/gettext_bottle_manifest--0.21.1... (10.8KB)</span><br><span class="line">Removing: /Users/taoyi/Library/Caches/Homebrew/readline_bottle_manifest--8.2.1... (8.6KB)</span><br><span class="line">Removing: /Users/taoyi/Library/Caches/Homebrew/node_bottle_manifest--19.7.0... (14.9KB)</span><br><span class="line">Removing: /Users/taoyi/Library/Caches/Homebrew/newrelic-infra-agent_bottle_manifest--1.37.2... (7.6KB)</span><br><span class="line">Removing: /Users/taoyi/Library/Caches/Homebrew/c-ares_bottle_manifest--1.19.0... (7.2KB)</span><br><span class="line">Removing: /Users/taoyi/Library/Caches/Homebrew/git_bottle_manifest--2.39.2-1... (12.7KB)</span><br><span class="line">Removing: /Users/taoyi/Library/Caches/Homebrew/pcre2_bottle_manifest--10.42... (8.5KB)</span><br><span class="line">Removing: /Users/taoyi/Library/Caches/Homebrew/icu4c_bottle_manifest--72.1... (8.1KB)</span><br><span class="line">Removing: /Users/taoyi/Library/Caches/Homebrew/pyenv_bottle_manifest--2.3.13... (23.8KB)</span><br><span class="line">Removing: /Users/taoyi/Library/Caches/Homebrew/libnghttp2_bottle_manifest--1.52.0... (7.2KB)</span><br><span class="line">Removing: /Users/taoyi/Library/Caches/Homebrew/openssl@1.1_bottle_manifest--1.1.1t... (8.7KB)</span><br><span class="line">Removing: /Users/taoyi/Library/Caches/Homebrew/openssl@3_bottle_manifest--3.0.8... (8.7KB)</span><br><span class="line">Removing: /Users/taoyi/Library/Logs/Homebrew/terminal-notifier... (64B)</span><br><span class="line">Removing: /Users/taoyi/Library/Logs/Homebrew/vue-cli... (64B)</span><br><span class="line">Pruned 0 symbolic links and 4 directories from /opt/homebrew</span><br><span class="line">==&gt; Caveats</span><br><span class="line">==&gt; mysql</span><br><span class="line">We<span class="string">'ve installed your MySQL database without a root password. To secure it run:</span></span><br><span class="line"><span class="string">    mysql_secure_installation</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">MySQL is configured to only allow connections from localhost by default</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">To connect run:</span></span><br><span class="line"><span class="string">    mysql -u root</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">To start mysql now and restart at login:</span></span><br><span class="line"><span class="string">  brew services start mysql</span></span><br><span class="line"><span class="string">Or, if you don'</span>t want/need a background service you can just run:</span><br><span class="line">  /opt/homebrew/opt/mysql/bin/mysqld_safe --datadir=/opt/homebrew/var/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># taoyi @ tysYZMac in ~ [11:05:53]</span></span><br><span class="line">$ brew services start mysql</span><br><span class="line">==&gt; Successfully started `mysql` (label: homebrew.mxcl.mysql)</span><br><span class="line"></span><br><span class="line"><span class="comment"># taoyi @ tysYZMac in ~ [11:06:02]</span></span><br><span class="line">$ mysql_secure_installation</span><br><span class="line"></span><br><span class="line">Securing the MySQL server deployment.</span><br><span class="line"></span><br><span class="line">Connecting to MySQL using a blank password.</span><br><span class="line"></span><br><span class="line">VALIDATE PASSWORD COMPONENT can be used to <span class="built_in">test</span> passwords</span><br><span class="line">and improve security. It checks the strength of password</span><br><span class="line">and allows the users to <span class="built_in">set</span> only those passwords <span class="built_in">which</span> are</span><br><span class="line">secure enough. Would you like to setup VALIDATE PASSWORD component?</span><br><span class="line"></span><br><span class="line">Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No: Y</span><br><span class="line"></span><br><span class="line">There are three levels of password validation policy:</span><br><span class="line"></span><br><span class="line">LOW    Length &gt;= 8</span><br><span class="line">MEDIUM Length &gt;= 8, numeric, mixed <span class="keyword">case</span>, and special characters</span><br><span class="line">STRONG Length &gt;= 8, numeric, mixed <span class="keyword">case</span>, special characters and dictionary                  file</span><br><span class="line"></span><br><span class="line">Please enter 0 = LOW, 1 = MEDIUM and 2 = STRONG: 0</span><br><span class="line">Please <span class="built_in">set</span> the password <span class="keyword">for</span> root here.</span><br><span class="line"></span><br><span class="line">New password:</span><br><span class="line"></span><br><span class="line">Re-enter new password:</span><br><span class="line"></span><br><span class="line">Estimated strength of the password: 50</span><br><span class="line">Do you wish to <span class="built_in">continue</span> with the password provided?(Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) : Y</span><br><span class="line">By default, a MySQL installation has an anonymous user,</span><br><span class="line">allowing anyone to <span class="built_in">log</span> into MySQL without having to have</span><br><span class="line">a user account created <span class="keyword">for</span> them. This is intended only <span class="keyword">for</span></span><br><span class="line">testing, and to make the installation go a bit smoother.</span><br><span class="line">You should remove them before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line">Remove anonymous users? (Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) : Y</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Normally, root should only be allowed to connect from</span><br><span class="line"><span class="string">'localhost'</span>. This ensures that someone cannot guess at</span><br><span class="line">the root password from the network.</span><br><span class="line"></span><br><span class="line">Disallow root login remotely? (Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) : q</span><br><span class="line"></span><br><span class="line"> ... skipping.</span><br><span class="line">By default, MySQL comes with a database named <span class="string">'test'</span> that</span><br><span class="line">anyone can access. This is also intended only <span class="keyword">for</span> testing,</span><br><span class="line">and should be removed before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Remove <span class="built_in">test</span> database and access to it? (Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) : Y</span><br><span class="line"> - Dropping <span class="built_in">test</span> database...</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line"> - Removing privileges on <span class="built_in">test</span> database...</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line">Reloading the privilege tables will ensure that all changes</span><br><span class="line">made so far will take effect immediately.</span><br><span class="line"></span><br><span class="line">Reload privilege tables now? (Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) : Y</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line">All <span class="keyword">done</span>!</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
</search>
