<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shadow&#39;S Site</title>
  <icon>https://www.gravatar.com/avatar/7b03ab113f2f8c26715b5f45cee6f38f</icon>
  <subtitle>谁当声震人间，必长久深自缄默。谁当划破闪电，必长久如云漂泊。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://shadow000902.space/"/>
  <updated>2018-01-10T07:36:17.373Z</updated>
  <id>http://shadow000902.space/</id>
  
  <author>
    <name>shadow</name>
    <email>shadow000902@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Brew命令报错问题解决</title>
    <link href="http://shadow000902.space/2018/01/10/Brew%E5%91%BD%E4%BB%A4%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <id>http://shadow000902.space/2018/01/10/Brew命令报错问题解决/</id>
    <published>2018-01-10T07:33:52.000Z</published>
    <updated>2018-01-10T07:36:17.373Z</updated>
    
    <content type="html"><![CDATA[<h5 id="运行任何brew命令，都提示错误"><a href="#运行任何brew命令，都提示错误" class="headerlink" title="运行任何brew命令，都提示错误"></a>运行任何<code>brew</code>命令，都提示错误</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git: error: unable to find utility <span class="string">"git"</span>, not a developer tool or <span class="keyword">in</span> PATH</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang: error: unable to find utility <span class="string">"clang"</span>, not a developer tool or <span class="keyword">in</span> PATH</span><br></pre></td></tr></table></figure><p>原因主要是因为<code>xcode-select</code>的位置错误，需要修改指向的位置：<br>原来的位置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TaoYi-Mac in ~/Desktop/MySQL-python-1.2.5 [13:27:05] C:72</span></span><br><span class="line">$ xcode-select --<span class="built_in">print</span>-path</span><br><span class="line">/Applications/Xcode.app/Contents/Developer</span><br></pre></td></tr></table></figure></p><p>修改到另一个位置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TaoYi-Mac in /Applications/Xcode.app/Contents/Developer [13:33:33] C:1</span></span><br><span class="line">$ sudo xcode-select --switch /Library/Developer/CommandLineTools</span><br><span class="line">Password:</span><br><span class="line"></span><br><span class="line"><span class="comment"># taoyi @ TaoYi-Mac in /Applications/Xcode.app/Contents/Developer [13:33:52] </span></span><br><span class="line">$ xcode-select --<span class="built_in">print</span>-path                                     </span><br><span class="line">/Library/Developer/CommandLineTools</span><br></pre></td></tr></table></figure></p><p>如此操作之后，再执行brew命令，就不会再报上面的错了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;运行任何brew命令，都提示错误&quot;&gt;&lt;a href=&quot;#运行任何brew命令，都提示错误&quot; class=&quot;headerlink&quot; title=&quot;运行任何brew命令，都提示错误&quot;&gt;&lt;/a&gt;运行任何&lt;code&gt;brew&lt;/code&gt;命令，都提示错误&lt;/h5&gt;&lt;fig
      
    
    </summary>
    
      <category term="SolveProblem" scheme="http://shadow000902.space/categories/SolveProblem/"/>
    
    
      <category term="brew" scheme="http://shadow000902.space/tags/brew/"/>
    
  </entry>
  
  <entry>
    <title>Python通过SSH隧道连接MySQL数据库</title>
    <link href="http://shadow000902.space/2018/01/10/Python%E9%80%9A%E8%BF%87SSH%E9%9A%A7%E9%81%93%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://shadow000902.space/2018/01/10/Python通过SSH隧道连接MySQL数据库/</id>
    <published>2018-01-10T01:56:03.000Z</published>
    <updated>2018-01-10T02:11:06.070Z</updated>
    
    <content type="html"><![CDATA[<h4 id="方式一：通过MySQLdb模块"><a href="#方式一：通过MySQLdb模块" class="headerlink" title="方式一：通过MySQLdb模块"></a>方式一：通过<code>MySQLdb</code>模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">con_sshDb</span><span class="params">(self, sql)</span>:</span></span><br><span class="line"><span class="comment"># ssh的地址，端口，用户名，密码</span></span><br><span class="line"><span class="keyword">from</span> sshtunnel <span class="keyword">import</span> SSHTunnelForwarder</span><br><span class="line"><span class="keyword">with</span> SSHTunnelForwarder(</span><br><span class="line">(<span class="string">'XXX.XXX.XXX.XXX'</span>, <span class="number">22</span>),</span><br><span class="line">ssh_password=<span class="string">"XXXXXX"</span>,</span><br><span class="line">ssh_username=<span class="string">"XXXXXX"</span>,</span><br><span class="line">remote_bind_address=(<span class="string">'XXX.XXX'</span>, <span class="number">3306</span>)</span><br><span class="line">) <span class="keyword">as</span> server:</span><br><span class="line"><span class="comment"># 此处必须是是127.0.0.1</span></span><br><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line">conn = MySQLdb.connect(host=<span class="string">'127.0.0.1'</span>,</span><br><span class="line">   port=server.local_bind_port,</span><br><span class="line">   <span class="comment"># Navicat常规处的链接用户名和密码，以及连接数据库名称</span></span><br><span class="line">   user=<span class="string">'XXXXXX'</span>,</span><br><span class="line">   passwd=<span class="string">'XXXXXX'</span>,</span><br><span class="line">   db=<span class="string">'XXXXXX'</span>)</span><br><span class="line"><span class="comment"># .cursor()用来获得python执行Mysql命令的方法</span></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">select = sql</span><br><span class="line"><span class="comment"># .execute()执行mysql语句</span></span><br><span class="line">cursor.execute(select)</span><br><span class="line"><span class="comment"># fetchall()则是接收全部的返回结果行</span></span><br><span class="line">data = cursor.fetchall()</span><br><span class="line"><span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><h4 id="方式二：通过paramiko模块"><a href="#方式二：通过paramiko模块" class="headerlink" title="方式二：通过paramiko模块"></a>方式二：通过<code>paramiko</code>模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">con_sshDb</span><span class="params">(self, sql)</span>:</span></span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line">ssh = paramiko.SSHClient()</span><br><span class="line">ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">ssh.connect(<span class="string">"XXX.XXX.XXX.XXX"</span>, <span class="number">22</span>, <span class="string">"ssh_username"</span>, <span class="string">"ssh_password"</span>)</span><br><span class="line">       select = sql</span><br><span class="line">stdin, stdout, stderr = ssh.exec_command(<span class="string">"mysql -u user -p passwd -D mysql -e 'select'"</span>)</span><br><span class="line"><span class="keyword">print</span> stdout.readlines()</span><br><span class="line">ssh.close()</span><br></pre></td></tr></table></figure><h4 id="方式二：通过sqlalchemy模块"><a href="#方式二：通过sqlalchemy模块" class="headerlink" title="方式二：通过sqlalchemy模块"></a>方式二：通过<code>sqlalchemy</code>模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">con_sshDb</span><span class="params">(self, sql)</span>:</span></span><br><span class="line"><span class="keyword">from</span> sshtunnel <span class="keyword">import</span> SSHTunnelForwarder</span><br><span class="line"><span class="keyword">with</span> SSHTunnelForwarder(</span><br><span class="line">(<span class="string">'XXX.XXX.XXX.XXX'</span>, <span class="number">22</span>),</span><br><span class="line">ssh_password=<span class="string">"XXXXXX"</span>,</span><br><span class="line">ssh_username=<span class="string">"XXXXXX"</span>,</span><br><span class="line">remote_bind_address=(<span class="string">'XXX.XXX'</span>, <span class="number">3306</span>)</span><br><span class="line">) <span class="keyword">as</span> server:</span><br><span class="line">server.start()  <span class="comment"># start ssh sever</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Server connected via SSH'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># connect to PostgreSQL</span></span><br><span class="line">local_port = str(server.local_bind_port)</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line">engine = create_engine(<span class="string">'postgresql://&lt;db_user&gt;:&lt;db_pwd&gt;@127.0.0.1:'</span> + local_port +<span class="string">'/&lt;db_name&gt;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line">Session = sessionmaker(bind=engine)</span><br><span class="line">session = Session()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Database session created'</span></span><br><span class="line"></span><br><span class="line">select = sql</span><br><span class="line">data = session.execute(select)</span><br><span class="line"><span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;方式一：通过MySQLdb模块&quot;&gt;&lt;a href=&quot;#方式一：通过MySQLdb模块&quot; class=&quot;headerlink&quot; title=&quot;方式一：通过MySQLdb模块&quot;&gt;&lt;/a&gt;方式一：通过&lt;code&gt;MySQLdb&lt;/code&gt;模块&lt;/h4&gt;&lt;figure 
      
    
    </summary>
    
      <category term="python" scheme="http://shadow000902.space/categories/python/"/>
    
    
      <category term="ssh" scheme="http://shadow000902.space/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Robot-Framework的几点总结</title>
    <link href="http://shadow000902.space/2017/12/16/Robot-Framework%E7%9A%84%E5%87%A0%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://shadow000902.space/2017/12/16/Robot-Framework的几点总结/</id>
    <published>2017-12-16T13:59:38.000Z</published>
    <updated>2017-12-18T13:06:34.409Z</updated>
    
    <content type="html"><![CDATA[<h5 id="命令行执行RF用例"><a href="#命令行执行RF用例" class="headerlink" title="命令行执行RF用例"></a>命令行执行RF用例</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行整个项目下的所有用例</span></span><br><span class="line">pybot /opt/robotframework/</span><br><span class="line"><span class="comment"># 执行某个suite中的所有用例</span></span><br><span class="line">pybot /opt/robotframework/rf.robot</span><br><span class="line"><span class="comment"># 执行具体的某个用例</span></span><br><span class="line">pybot --<span class="built_in">test</span> case_1 /opt/robotframework/rf.robot</span><br><span class="line"><span class="comment"># 执行项目中指定标签的用例</span></span><br><span class="line">pybot --include tagName /opt/robotframework/</span><br></pre></td></tr></table></figure>  <a id="more"></a><h5 id="IDE设置命令行执行RF用例"><a href="#IDE设置命令行执行RF用例" class="headerlink" title="IDE设置命令行执行RF用例"></a>IDE设置命令行执行RF用例</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行单条用例</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/pybot -d results -t testcase001 ./</span><br></pre></td></tr></table></figure><img src="/2017/12/16/Robot-Framework的几点总结/SingleTestCase.png" title="SingleTestCase"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行单个suite</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/pybot -d results testsuite001.robot</span><br></pre></td></tr></table></figure><img src="/2017/12/16/Robot-Framework的几点总结/TestSuite.png" title="TestSuite"><h5 id="指定RF用例执行后日志的保存位置"><a href="#指定RF用例执行后日志的保存位置" class="headerlink" title="指定RF用例执行后日志的保存位置"></a>指定RF用例执行后日志的保存位置</h5><p>其实上面的<code>-d</code>参数就是用来指定Log的保存位置的，默认<code>-d results</code>指定日志保存在运行命令的目录的<code>results</code>文件夹下。<br>在<code>ride</code>中的<code>run</code>标签下，<code>Arguments</code>中填入<code>-d results</code>也能达到同样的效果。</p><h5 id="重新运行上一轮Fail的Case"><a href="#重新运行上一轮Fail的Case" class="headerlink" title="重新运行上一轮Fail的Case"></a>重新运行上一轮<code>Fail</code>的<code>Case</code></h5><p>使用<code>-R</code>参数，同<code>--rerunfailed output</code>，后面跟前次执行生成的<code>results/output.xml</code>，这样就只会运行上次失败了的Case。</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;命令行执行RF用例&quot;&gt;&lt;a href=&quot;#命令行执行RF用例&quot; class=&quot;headerlink&quot; title=&quot;命令行执行RF用例&quot;&gt;&lt;/a&gt;命令行执行RF用例&lt;/h5&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 执行整个项目下的所有用例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pybot /opt/robotframework/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 执行某个suite中的所有用例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pybot /opt/robotframework/rf.robot&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 执行具体的某个用例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pybot --&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; case_1 /opt/robotframework/rf.robot&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 执行项目中指定标签的用例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pybot --include tagName /opt/robotframework/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="RobotFramework" scheme="http://shadow000902.space/categories/RobotFramework/"/>
    
    
      <category term="robotframework" scheme="http://shadow000902.space/tags/robotframework/"/>
    
  </entry>
  
  <entry>
    <title>账号体系测试总结</title>
    <link href="http://shadow000902.space/2017/12/11/%E8%B4%A6%E5%8F%B7%E4%BD%93%E7%B3%BB%E6%B5%8B%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    <id>http://shadow000902.space/2017/12/11/账号体系测试总结/</id>
    <published>2017-12-11T05:15:18.000Z</published>
    <updated>2017-12-23T16:43:18.509Z</updated>
    
    <content type="html"><![CDATA[<h4 id="管理后台账号"><a href="#管理后台账号" class="headerlink" title="管理后台账号"></a>管理后台账号</h4><h4 id="客户端账号"><a href="#客户端账号" class="headerlink" title="客户端账号"></a>客户端账号</h4><h4 id="客户端账号需要登录后台管理"><a href="#客户端账号需要登录后台管理" class="headerlink" title="客户端账号需要登录后台管理"></a>客户端账号需要登录后台管理</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;管理后台账号&quot;&gt;&lt;a href=&quot;#管理后台账号&quot; class=&quot;headerlink&quot; title=&quot;管理后台账号&quot;&gt;&lt;/a&gt;管理后台账号&lt;/h4&gt;&lt;h4 id=&quot;客户端账号&quot;&gt;&lt;a href=&quot;#客户端账号&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="WorkSummary" scheme="http://shadow000902.space/categories/WorkSummary/"/>
    
    
      <category term="worksummary" scheme="http://shadow000902.space/tags/worksummary/"/>
    
  </entry>
  
  <entry>
    <title>TESTER面试官</title>
    <link href="http://shadow000902.space/2017/12/10/TESTER%E9%9D%A2%E8%AF%95%E5%AE%98/"/>
    <id>http://shadow000902.space/2017/12/10/TESTER面试官/</id>
    <published>2017-12-09T16:42:50.000Z</published>
    <updated>2017-12-11T05:27:19.286Z</updated>
    
    <content type="html"><![CDATA[<h5 id="筛选简历"><a href="#筛选简历" class="headerlink" title="筛选简历"></a>筛选简历</h5><ol><li>首先看学历和专业，这样就可以pass掉好多简历了。</li><li>再看工作岗位，项目经验。项目经验则需要和简历上的工作技能结合着一起看。一般项目经验里有的才是真实使用的。没有的话，就需要在面试时沟通，看是自学的，还是掺水了。</li><li><p>如果工作经验符合要求，技能和项目经验过关就可以约面了。</p><a id="more"></a></li></ol><h5 id="面试问题"><a href="#面试问题" class="headerlink" title="面试问题"></a>面试问题</h5><ol><li>项目介绍，工作内容介绍，说的条理清楚的，说明工作中用心总结了，第一印象比较重要。</li><li>简历上写的技能，工作中是怎么使用的？</li><li>工作中遇到困难，怎么处理的？遇到难复现的bug？与开发沟通不畅？项目紧急无法推动等等？这个主要是看面试者平时工作中解决问题的能力和沟通能力。</li><li>上份工作有哪些成长，优势有哪些？</li><li>除了工作中用到的，平时有没有其他方面的学习？这个是考察自主学习能力的。</li><li>离职原因？主要是看面试者的稳定性如何</li><li>觉得自己目前的能力与在这个工作年限应该具备的能力相符么？</li></ol><h5 id="对项目经验描述的建议"><a href="#对项目经验描述的建议" class="headerlink" title="对项目经验描述的建议"></a>对项目经验描述的建议</h5><ol><li>什么类型项目，解决什么问题，针对的用户群，用户量级，项目业务流概述等。</li><li>主要负责什么内容，有哪些技术手段去保证质量。</li><li>什么语言，什么部署环境。</li><li>项目团队成员结构、人员占比等。</li></ol><h5 id="简历意见"><a href="#简历意见" class="headerlink" title="简历意见"></a>简历意见</h5><ol><li>基本信息中，添加关键字，简单、直接的提炼出自己的核心能力和技能。</li><li>自我评价中，尽可能的提炼自己掌握的测试相关技能，简单、直接，<code>不写自己不熟悉的技能，不要给自己挖坑</code>。后面加上几段话，用精炼的语句描述自己的核心价值，也可简要说明在上架公司的核心职责。</li><li>工作经验，不要拖沓写一堆，要用精炼的语言描述清楚产品的情况，然后分点说明自己的具体职责。</li><li>简历一般两页就够了，排版要干练清爽，不要花哨。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;筛选简历&quot;&gt;&lt;a href=&quot;#筛选简历&quot; class=&quot;headerlink&quot; title=&quot;筛选简历&quot;&gt;&lt;/a&gt;筛选简历&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;首先看学历和专业，这样就可以pass掉好多简历了。&lt;/li&gt;
&lt;li&gt;再看工作岗位，项目经验。项目经验则需要和简历上的工作技能结合着一起看。一般项目经验里有的才是真实使用的。没有的话，就需要在面试时沟通，看是自学的，还是掺水了。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果工作经验符合要求，技能和项目经验过关就可以约面了。&lt;/p&gt;
    
    </summary>
    
      <category term="TestTheory" scheme="http://shadow000902.space/categories/TestTheory/"/>
    
    
  </entry>
  
  <entry>
    <title>TESTER的核心价值</title>
    <link href="http://shadow000902.space/2017/12/08/TESTER%E7%9A%84%E6%A0%B8%E5%BF%83%E4%BB%B7%E5%80%BC/"/>
    <id>http://shadow000902.space/2017/12/08/TESTER的核心价值/</id>
    <published>2017-12-08T12:04:50.000Z</published>
    <updated>2017-12-11T05:27:19.230Z</updated>
    
    <content type="html"><![CDATA[<p>我认为当前测试人员的核心价值是加速整个项目的反馈以及对产品的快速验证。</p><p>这两项价值中又各自有三项主要工作：</p>  <a id="more"></a><img src="/2017/12/08/TESTER的核心价值/TESTER的核心价值.png" title="TESTER的核心价值"><h5 id="加速反馈"><a href="#加速反馈" class="headerlink" title="加速反馈"></a>加速反馈</h5><ol><li><p>促进沟通<br>测试人员在整个交付团队里至关重要的工作就是促进整个项目的沟通，需要和产品团队一起工作做需求的定义，和开发团队一起工作写自动化的验证，保障项目组之间对于目标和实现都能够达成一致。<br>在这项工作中，最重要的能力是热情，看起来很虚，但是只有充满热情的人员才可能实现足够的沟通，同时高效的沟通能力也是非常重要的能力，这方面需要一些思维和沟通的工具和训练。<br>还有一个重要的能力就是能够想到一些促进项目组沟通的办法（例如交换三色卡片），这个算是一种灵气吧，但相信也和热情有很大关系。</p></li><li><p>持续交付基础设施的搭建<br>测试人员应该主持团队持续交付基础设施的搭建，从集成开始到环境自动部署，提交测试验收测试的自动触发，运行，结构展示等等，总之就是持续交付整套基础设施。<br>本着不重复造轮子的原则，这项工作的主要能力就是对业界相关工具的掌握和使用的能力，当然整合可能涉及到一些二次开发或者自己搭个WEB。并且能够像一个产品经理对产品负责一样，能够及时看到项目组使用这套基础设施的实际需求和问题并能够持续改进。<br>这里面的主要需要的能力是技术视野、工具使用的能力，以及英文文档的阅档（基本上能看的说明文档都是英文的官方文档）和平台搭建的能力。</p></li><li><p>全流程反馈规则的制定<br>除了基础设施和高效的沟通，在整个团队工作过程中还是需要制定很多各种有益的规则来促进反馈（例如对产品需求的要求，单元测试覆盖的要求，代码规范的要求等等等等）。<br>规则应该和项目组的实际情况相结合，而且很多规则并不是所有人都一开始能欣然接受，所以一方面要能够看到目前的问题和瓶颈来制定相关规则来改善更重要的是能够说服项目组的能力（当然这个能力不是说舌战群儒的说话术，更多是技术上能够说得明白，自己能够先做一些实践来证明有效等）</p></li></ol><h5 id="快速验证"><a href="#快速验证" class="headerlink" title="快速验证"></a>快速验证</h5><ol><li><p>整体角度考虑对其他部分的影响<br>测试人员的工作效率取决于他对软件和项目的理解，而不是他掌握的测试技术。（理解产品、理解用户期望、理解产品架构、了解产品元素，项目团队）在迭代中开发更关注当前功能，而测试需要做的是实时考虑对系统其它部分、相关系统的影响。<br>因此测试最应该维护的是系统当前的全貌、架构、模块调用以及核心用例。因此对项目整体的熟悉程度是测试人员不变的核心能力之一。</p></li><li><p>风险，优先级选择<br>这一项其实算是测试人员的看家本领。整个测试分析体系的知识中，最重要的基础之一就是“取舍”，选择更高优先级，更有代表性的case来减少整体case的执行数量，这个技能之于测试相当于算法的掌握之于开发。<br>在快速迭代的过程中对于优先级的选择重要性更高，因为很多时候要承担更多风险来追求交付速度，风险和速度之间的平衡才是最见功力的。这里主要是测试分析能力，RBT测试的掌握等等这些基本能力。<br>测试人员应该积累多种测试技术，综合应用它们，把一个“网”织的更密的性价比远低于用各种不同的“网”来防护。</p></li><li><p>自动化回归<br>自动化回归作为整个持续交付中的核心，重要性不用多说，怎么做好自动化回归是个很大的话题，另外找机会总结。这里只提我的一个观点。要做好和维护好一个真正有效的自动化回归，对于case和数据的设计&gt;自动化的架构&gt;编码能力。所以坚决反对不是本团队的人，不了解整个产品的人来做，也坚决反对简单按模块分解给不同的人，用case堆砌的模式做。<br>同核心用例一样，要以整体视角来做你的自动化回归，好的实践有狠多，还是另找机会总结。</p></li></ol><p>结论：<br>在持续交付的团队中，测试人员最重要的能力是对项目整体的掌握程度，技术视野以及热情。然后厚实的编码能力和测试分析能力也是必不可少的基础。反省一下，之前在招人过程中只注意了后面两项，最重要的能力项没有设计很好的题目和方法来考察。不过感觉前面的能力不光和人本身有关，团队氛围也是能够影响前面能力表达的重要因素。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我认为当前测试人员的核心价值是加速整个项目的反馈以及对产品的快速验证。&lt;/p&gt;
&lt;p&gt;这两项价值中又各自有三项主要工作：&lt;/p&gt;
    
    </summary>
    
      <category term="TestTheory" scheme="http://shadow000902.space/categories/TestTheory/"/>
    
    
  </entry>
  
  <entry>
    <title>如何做好一个执行者</title>
    <link href="http://shadow000902.space/2017/12/04/%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E5%9F%BA%E7%A1%80%E7%9A%84%E6%89%A7%E8%A1%8C%E8%80%85/"/>
    <id>http://shadow000902.space/2017/12/04/如何做好基础的执行者/</id>
    <published>2017-12-03T16:28:42.000Z</published>
    <updated>2017-12-11T05:27:19.291Z</updated>
    
    <content type="html"><![CDATA[<h5 id="如何做好基础的执行者"><a href="#如何做好基础的执行者" class="headerlink" title="如何做好基础的执行者"></a>如何做好基础的执行者</h5><ol><li>对于安排的任务，及时跟进，及时了解，及时产出结果，主动同步结果给leader。</li><li>有好的工作习惯，每天工作结束，对于项目情况有一个简单的总结，并能主动同步给leader。</li><li><p>遇到阻塞流程的问题，能够及时寻找帮助，寻找解决问题的办法。</p><a id="more"></a><p>如果遇到问题只知道自己琢磨，那就会浪费很多时间，导致项目延期；<br>如果不能及时沟通，遇到项目临时出现变故，需要紧急协调资源，你只会束手无策，不知所以；<br>职场是一个需要与人沟通的环境，如果只是单纯的基础执行者，独立模块的功能你也许能够很好的解决，对于多方合作的项目你将束手无策，当然也就不会混的太好。<br>所以有问题，主动沟通，不用怕，不用担心，不用害羞，迈出了第一步，才会有第二步。<br>做到如上，很简单，只要把心思放在工作上，任何人都可以搞定。</p></li></ol><h5 id="如何晋级为一个优秀的执行者"><a href="#如何晋级为一个优秀的执行者" class="headerlink" title="如何晋级为一个优秀的执行者"></a>如何晋级为一个优秀的执行者</h5><ol><li>工作中，能够主动思考，更好的解决方案，并善于总结。</li><li>对于工作中遇到的棘手问题解决后，能够梳理成自己的方法论，并分享给同事，共同进步。</li><li>时刻思考着，如何去通过改善流程，或者去引入小的工具，提高工作效率，更高效的执行，节省资源。<br>如上，一样可以轻松胜任，不需要什么核心技术，只要你想，都可以做到。</li></ol><h5 id="基础执行者的核心竞争力"><a href="#基础执行者的核心竞争力" class="headerlink" title="基础执行者的核心竞争力"></a>基础执行者的核心竞争力</h5><ol><li>养成好的工作习惯，善于总结，建立自己的知识体系。<br>如果单纯只是不断的执行，没有积累总结，那永远只是一个执行者，不求上进，也就只能是低级的执行者（都不能算初级执行者，初级是满足职位要求，低级连岗位需求都做不好），久而久之，只能被淘汰。</li><li>对于交代的任务，能够主动沟通，主要推进，促使任务顺畅完成。</li><li>能够不骄不躁，把简单的事情，做到极致。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;如何做好基础的执行者&quot;&gt;&lt;a href=&quot;#如何做好基础的执行者&quot; class=&quot;headerlink&quot; title=&quot;如何做好基础的执行者&quot;&gt;&lt;/a&gt;如何做好基础的执行者&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;对于安排的任务，及时跟进，及时了解，及时产出结果，主动同步结果给leader。&lt;/li&gt;
&lt;li&gt;有好的工作习惯，每天工作结束，对于项目情况有一个简单的总结，并能主动同步给leader。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;遇到阻塞流程的问题，能够及时寻找帮助，寻找解决问题的办法。&lt;/p&gt;
    
    </summary>
    
      <category term="TestTheory" scheme="http://shadow000902.space/categories/TestTheory/"/>
    
    
  </entry>
  
  <entry>
    <title>测试人员需要的数据库知识</title>
    <link href="http://shadow000902.space/2017/12/03/%E6%B5%8B%E8%AF%95%E4%BA%BA%E5%91%98%E9%9C%80%E8%A6%81%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9F%A5%E8%AF%86/"/>
    <id>http://shadow000902.space/2017/12/03/测试人员需要的数据库知识/</id>
    <published>2017-12-03T14:28:34.000Z</published>
    <updated>2017-12-11T05:27:19.272Z</updated>
    
    <content type="html"><![CDATA[<h5 id="第一阶段、基础需求"><a href="#第一阶段、基础需求" class="headerlink" title="第一阶段、基础需求"></a>第一阶段、基础需求</h5><ol><li><p>知道常用的数据库类型<br>MySQL、MSSQL、Oracle、Memcached、Redis、MongoDB</p></li><li><p>数据库的安装、部署，基础使用<br>至少得会自己在服务器或自己电脑上安装个数据库</p><a id="more"></a></li><li><p>常用的数据库连接工具<br>WorkBench、Navicat、Sequel Pro等</p></li><li><p>数据库的基本配置<br>修改密码，添加用户等</p></li><li><p>库/表操作<br>创建库/表，删除库/表，查看库/表</p></li><li><p>基本命令<br>基本的增删改查语句</p></li></ol><h5 id="第二阶段、一些对数据有强需求的业务测试"><a href="#第二阶段、一些对数据有强需求的业务测试" class="headerlink" title="第二阶段、一些对数据有强需求的业务测试"></a>第二阶段、一些对数据有强需求的业务测试</h5><ol><li><p>备份、还原数据库</p></li><li><p>稍微复杂点的SQL<br>多表查询、子查询 等等</p></li><li><p>存储过程 、视图 等</p></li><li><p>数据导入、导出数据 等</p></li><li><p>造数据<br>实际测试过程中，经常需要通过数据库造一些测试数据</p></li></ol><h5 id="第三阶段、数据库的一些优化知识安全知识"><a href="#第三阶段、数据库的一些优化知识安全知识" class="headerlink" title="第三阶段、数据库的一些优化知识安全知识"></a>第三阶段、数据库的一些优化知识安全知识</h5><p>如慢sql 、sql优化、使用规范等，主要是方便定位问题、性能优化 等</p><p>待补充~</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;第一阶段、基础需求&quot;&gt;&lt;a href=&quot;#第一阶段、基础需求&quot; class=&quot;headerlink&quot; title=&quot;第一阶段、基础需求&quot;&gt;&lt;/a&gt;第一阶段、基础需求&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;知道常用的数据库类型&lt;br&gt;MySQL、MSSQL、Oracle、Memcached、Redis、MongoDB&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据库的安装、部署，基础使用&lt;br&gt;至少得会自己在服务器或自己电脑上安装个数据库&lt;/p&gt;
    
    </summary>
    
      <category term="TestTheory" scheme="http://shadow000902.space/categories/TestTheory/"/>
    
    
  </entry>
  
  <entry>
    <title>安卓无线ADB连接</title>
    <link href="http://shadow000902.space/2017/11/04/%E5%AE%89%E5%8D%93%E6%97%A0%E7%BA%BFADB%E8%BF%9E%E6%8E%A5/"/>
    <id>http://shadow000902.space/2017/11/04/安卓无线ADB连接/</id>
    <published>2017-11-04T14:00:31.000Z</published>
    <updated>2017-12-11T05:18:23.498Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>在手机上安装<code>QPython</code><br>GitHub上的<a href="https://github.com/qpython-android/qpython/releases" target="_blank" rel="noopener">下载链接</a></p></li><li><p>在手机上打开<code>QPython</code>软件的<code>Terminal</code>，安装<code>uiautomator2</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Since uiautomator2 is still developing, you have to add --pre to install development version</span></span><br><span class="line">pip install --pre uiautomator2</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>在手机上安装<code>app-uiautomator.apk</code><br>最新版<a href="https://github.com/openatx/android-uiautomator-server/releases" target="_blank" rel="noopener">下载链接</a></p></li><li><p>导入最新版的<code>atx-agent</code>到手机中<br>最新版<a href="https://github.com/openatx/atx-agent/releases" target="_blank" rel="noopener">下载地址</a><br>下载以<code>linux_armv7.tar.gz</code>结尾的二进制包。绝大部分手机都是linux-arm架构的。<br>解压出<code>atx-agent</code>文件，导入到手机中并启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb push atx-agent /data/<span class="built_in">local</span>/tmp</span><br><span class="line">adb shell chmod 755 /data/<span class="built_in">local</span>/tmp/atx-agent</span><br><span class="line"><span class="comment"># launch atx-agent in daemon mode</span></span><br><span class="line">adb shell /data/<span class="built_in">local</span>/tmp/atx-agent -d</span><br><span class="line"><span class="comment"># example: server started, listening on 192.168.28.230:7912</span></span><br></pre></td></tr></table></figure></li></ol><p>假设手机的地址是<code>$DEVICE_URL</code>(eg: <code>http://192.168.28.230:7912</code>)</p><ol><li><p>无线访问手机系统</p><ol><li><p>获取当前程序版本</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="variable">$DEVICE_URL</span>/version</span><br><span class="line"><span class="comment"># expect example: 0.0.7</span></span><br></pre></td></tr></table></figure></li><li><p>安装应用</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -d url=<span class="string">"http://some-host/some.apk"</span> <span class="variable">$DEVICE_URL</span>/install</span><br><span class="line"><span class="comment"># expect example: install id</span></span><br></pre></td></tr></table></figure> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get install progress</span></span><br><span class="line">curl -X GET <span class="variable">$DEVICE_URL</span>/install/1</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"1"</span>,<span class="string">"totalSize"</span>:985435,<span class="string">"copiedSize"</span>:16951,<span class="string">"message"</span>:<span class="string">"downloading"</span>&#125;</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"1"</span>,<span class="string">"totalSize"</span>:985435,<span class="string">"copiedSize"</span>:985435,<span class="string">"message"</span>:<span class="string">"success installed"</span>&#125;</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"1"</span>,<span class="string">"totalSize"</span>:985435,<span class="string">"copiedSize"</span>:342641,<span class="string">"message"</span>:<span class="string">"error install"</span>,<span class="string">"error"</span>:<span class="string">"exit status 1"</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>上传文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上传到/sdcard目录下 (url以/结尾)</span></span><br><span class="line">curl -F <span class="string">"file=@somefile.txt"</span> <span class="variable">$DEVICE_URL</span>/upload/sdcard/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传到/sdcard/tmp.txt</span></span><br><span class="line">curl -F <span class="string">"file=@somefile.txt"</span> <span class="variable">$DEVICE_URL</span>/upload/sdcard/tmp.txt</span><br></pre></td></tr></table></figure></li><li><p>程序自升级<br> 升级程序从gihub releases里面直接下载，升级完后自动重启</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 升级到最新版</span></span><br><span class="line">curl 10.0.0.1:7912/upgrade</span><br></pre></td></tr></table></figure> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定升级的版本</span></span><br><span class="line">curl <span class="string">"<span class="variable">$DEVICE_URL</span>/upgrade?version=0.0.7"</span></span><br></pre></td></tr></table></figure></li><li><p><code>ATX Log Path</code></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sdcard/atx-agent.log</span><br></pre></td></tr></table></figure></li></ol></li></ol><p>RESOURCE:<br>    <a href="https://testerhome.com/topics/10361" target="_blank" rel="noopener">testerhome_10361</a><br>    <a href="https://testerhome.com/topics/10298" target="_blank" rel="noopener">testerhome_10298</a><br>    <a href="https://github.com/openatx/uiautomator2" target="_blank" rel="noopener">github_uiautomator2</a><br>    <a href="https://github.com/openatx/android-uiautomator-server" target="_blank" rel="noopener">github_android-uiautomator-server</a><br>    <a href="https://github.com/openatx/atx-agent" target="_blank" rel="noopener">github_atx-agent</a><br>    <a href="https://github.com/qpython-android/qpython" target="_blank" rel="noopener">github_qpython</a></p>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;在手机上安装&lt;code&gt;QPython&lt;/code&gt;&lt;br&gt;GitHub上的&lt;a href=&quot;https://github.com/qpython-android/qpython/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载链接&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在手机上打开&lt;code&gt;QPython&lt;/code&gt;软件的&lt;code&gt;Terminal&lt;/code&gt;，安装&lt;code&gt;uiautomator2&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Since uiautomator2 is still developing, you have to add --pre to install development version&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip install --pre uiautomator2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="http://shadow000902.space/categories/Android/"/>
    
    
      <category term="adb" scheme="http://shadow000902.space/tags/adb/"/>
    
  </entry>
  
  <entry>
    <title>Shell小脚本</title>
    <link href="http://shadow000902.space/2017/11/04/Shell%E5%B0%8F%E8%84%9A%E6%9C%AC/"/>
    <id>http://shadow000902.space/2017/11/04/Shell小脚本/</id>
    <published>2017-11-04T07:51:48.000Z</published>
    <updated>2018-01-06T16:37:28.972Z</updated>
    
    <content type="html"><![CDATA[<h5 id="删除目录下的除今天外的所有文件夹"><a href="#删除目录下的除今天外的所有文件夹" class="headerlink" title="删除目录下的除今天外的所有文件夹"></a>删除目录下的除今天外的所有文件夹</h5><ol><li><p>目录下的文件夹规律【年月日时分秒】</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TaoYi-Mac in ~/Desktop/test0001 [15:54:29] </span></span><br><span class="line">$ ll</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x  2 taoyi  staff    68B 11  3 18:29 20171027121219</span><br><span class="line">drwxr-xr-x  3 taoyi  staff   102B 11  3 18:30 20171101124273</span><br><span class="line">drwxr-xr-x  3 taoyi  staff   102B 11  3 18:29 20171102124212</span><br><span class="line">drwxr-xr-x  2 taoyi  staff    68B 11  3 18:29 20171103121216</span><br><span class="line">drwxr-xr-x  3 taoyi  staff   102B 11  3 18:29 20171103124211</span><br><span class="line">drwxr-xr-x  2 taoyi  staff    68B 11  3 18:29 20171103124216</span><br><span class="line">drwxr-xr-x  2 taoyi  staff    68B 11  3 18:29 20171104124212</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>shell脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 目录下的所有文件夹名称写入文件``dir``</span></span><br><span class="line">ls -l /Users/taoyi/Desktop/test0001/ | awk <span class="string">'/^d/ &#123;print $NF&#125;'</span> &gt; /Users/taoyi/Desktop/test0001/dir</span><br><span class="line"></span><br><span class="line"><span class="comment"># `date +%Y%m%d`，获取当天的年月日</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(grep -v `date +%Y%m%d` /Users/taoyi/Desktop/test0001/dir)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="comment"># 删除目录下的文件夹</span></span><br><span class="line">    rm -rf /Users/taoyi/Desktop/test0001/<span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除零时写入的文件``dir``</span></span><br><span class="line">rm -rf /Users/taoyi/Desktop/test0001/dir</span><br></pre></td></tr></table></figure></li></ol><h5 id="kill指定name的pid"><a href="#kill指定name的pid" class="headerlink" title="kill指定name的pid"></a>kill指定name的pid</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kill指定name的pid</span></span><br><span class="line"><span class="comment"># 示例："./kill_pidname.sh jhost"</span></span><br><span class="line"></span><br><span class="line">pid_name=<span class="variable">$1</span></span><br><span class="line">ps -ef | grep -v grep | grep <span class="variable">$pid_name</span> | <span class="keyword">while</span> <span class="built_in">read</span> username pid other</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">kill</span> -9 <span class="variable">$pid</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h5 id="adb截图导出并展示"><a href="#adb截图导出并展示" class="headerlink" title="adb截图导出并展示"></a>adb截图导出并展示</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调用安卓系统内部截图命令screencap截图保存</span></span><br><span class="line">adb shell /system/bin/screencap -p /sdcard/screenshot.jpg</span><br><span class="line"><span class="comment"># 导出图片到本地目录</span></span><br><span class="line">adb pull /sdcard/screenshot.jpg ~/shell-tools/ScreenShots/</span><br><span class="line"><span class="comment"># 打开图片</span></span><br><span class="line">open ~/shell-tools/ScreenShots/screenshot.jpg</span><br></pre></td></tr></table></figure><h5 id="android打包并安装"><a href="#android打包并安装" class="headerlink" title="android打包并安装"></a>android打包并安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /Users/taoyi/git_projects/Gitlab/androidclientnative/</span><br><span class="line">git checkout develop</span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line">rm -rf /Users/taoyi/git_projects/Gitlab/androidclientnative/app/build/</span><br><span class="line">rm -rf /Users/taoyi/shell-tools/APK/*.apk</span><br><span class="line"></span><br><span class="line">gradle clean assembleFengcheBeta</span><br><span class="line"><span class="comment"># gradle clean assembleFengchePreview</span></span><br><span class="line"><span class="comment"># gradle clean assembleFengcheRelease</span></span><br><span class="line"></span><br><span class="line">cp -rf /Users/taoyi/git_projects/Gitlab/androidclientnative/app/build/outputs/apk/beta/*.apk /Users/taoyi/shell-tools/APK/</span><br><span class="line">adb uninstall com.souche.fengche</span><br><span class="line">adb install /Users/taoyi/shell-tools/APK/*.apk</span><br></pre></td></tr></table></figure><h5 id="Shell脚本解析xml文件字段"><a href="#Shell脚本解析xml文件字段" class="headerlink" title="Shell脚本解析xml文件字段"></a>Shell脚本解析xml文件字段</h5><p>示例文件内容<code>build.xml</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parameters</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hudson.model.StringParameterValue</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>SCHEME<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>scheme configuration of this project StoreCI<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>Coding_iOS<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">hudson.model.StringParameterValue</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hudson.model.StringParameterValue</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>CONFIGURATION<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>configuration of packing, Release/Debug<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>Release<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">hudson.model.StringParameterValue</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hudson.model.StringParameterValue</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>OUTPUT_FOLDER<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>output folder for build artifacts, it is located in workspace/project root dir.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>build_outputs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">hudson.model.StringParameterValue</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hudson.model.StringParameterValue</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>BRANCH<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>git repository branch<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>master<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">hudson.model.StringParameterValue</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parameters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">causeBag</span> <span class="attr">class</span>=<span class="string">"linked-hash-map"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hudson.model.Cause_-UserIdCause</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">userId</span>&gt;</span>shadow<span class="tag">&lt;/<span class="name">userId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">hudson.model.Cause_-UserIdCause</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">int</span>&gt;</span>1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">causeBag</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取&lt;userId&gt;shadow&lt;/userId&gt;中的shadow</span></span><br><span class="line">sed -n <span class="string">'s/.*&gt;\(.*\)&lt;\/userId&gt;/\1/p'</span> <span class="variable">$JENKINS_HOME</span>/<span class="built_in">jobs</span>/<span class="variable">$JOB_NAME</span>/builds/<span class="variable">$BUILD_NUMBER</span>/build.xml</span><br><span class="line"><span class="comment"># 获取&lt;userId&gt;shadow&lt;/userId&gt;中的shadow，赋值给userId</span></span><br><span class="line"><span class="comment"># 使用位置：Jenkins获取构建人</span></span><br><span class="line">userId=(`sed -n <span class="string">'s/.*&gt;\(.*\)&lt;\/userId&gt;/\1/p'</span> <span class="variable">$JENKINS_HOME</span>/<span class="built_in">jobs</span>/<span class="variable">$JOB_NAME</span>/builds/<span class="variable">$BUILD_NUMBER</span>/build.xml`)</span><br></pre></td></tr></table></figure><h5 id="Shell脚本获取文本特定字段"><a href="#Shell脚本获取文本特定字段" class="headerlink" title="Shell脚本获取文本特定字段"></a>Shell脚本获取文本特定字段</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取log文件第一行中，``[0m``字符后面的所有字符</span></span><br><span class="line">head -1 <span class="variable">$JENKINS_HOME</span>/<span class="built_in">jobs</span>/<span class="variable">$JOB_NAME</span>/builds/<span class="variable">$BUILD_NUMBER</span>/<span class="built_in">log</span> | awk -F <span class="string">'\\[0m'</span> <span class="string">'&#123;print $NF&#125;'</span></span><br></pre></td></tr></table></figure><h5 id="Jenkins获取构建人，并赋值到变量并使用"><a href="#Jenkins获取构建人，并赋值到变量并使用" class="headerlink" title="Jenkins获取构建人，并赋值到变量并使用"></a>Jenkins获取构建人，并赋值到变量并使用</h5><p>取值<code>shell</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">head -1 <span class="variable">$JENKINS_HOME</span>/<span class="built_in">jobs</span>/<span class="variable">$JOB_NAME</span>/builds/<span class="variable">$BUILD_NUMBER</span>/<span class="built_in">log</span> | awk -F <span class="string">'\\[0m'</span> <span class="string">'&#123;print $NF&#125;'</span> &gt; userId</span><br><span class="line"><span class="built_in">read</span> userId &lt; userId</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"userId=<span class="variable">$&#123;userId&#125;</span>"</span> &gt; userId.txt</span><br></pre></td></tr></table></figure></p><p><code>set Build Name</code>中加入构建人<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;PROPFILE,file="userId.txt",property="userId"&#125;</span></span><br></pre></td></tr></table></figure></p><h5 id="Jenkins获取安卓APP版本号并赋值给变量并使用"><a href="#Jenkins获取安卓APP版本号并赋值给变量并使用" class="headerlink" title="Jenkins获取安卓APP版本号并赋值给变量并使用"></a>Jenkins获取安卓APP版本号并赋值给变量并使用</h5><p>取值<code>shell</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">versionName=`cat app/gradle.properties | grep <span class="string">'VERSION_NAME'</span> | cut -d <span class="string">'='</span> -f 2 `</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"versionName=<span class="variable">$&#123;versionName&#125;</span>"</span> &gt; versionName.txt</span><br></pre></td></tr></table></figure></p><p><code>set Build Name</code>中加入安卓APP版本号<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;PROPFILE,file="versionName.txt",property="versionName"&#125;</span></span><br></pre></td></tr></table></figure></p><h5 id="获取目录的所有csv文件并合并为一个csv文件"><a href="#获取目录的所有csv文件并合并为一个csv文件" class="headerlink" title="获取目录的所有csv文件并合并为一个csv文件"></a>获取目录的所有csv文件并合并为一个csv文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /Users/taoyi/git_projects/Gitlab/RF_InterfaceTest</span><br><span class="line"><span class="comment"># 获取./Library/output/api-docs/souche/*/*.csv文件并移动到./Library目录下</span></span><br><span class="line">mv -f ./Library/*/*/*/*/*.csv ./Library </span><br><span class="line"><span class="comment"># 把所有的csv文件合并为一个together.csv文件</span></span><br><span class="line">cat ./Library/*.csv &gt; together.csv</span><br><span class="line"></span><br><span class="line">rm -rf ./Library/output</span><br><span class="line">rm -rf ./Library/*.csv</span><br><span class="line"></span><br><span class="line">mv -f together.csv ./Library</span><br></pre></td></tr></table></figure><h5 id="Json中的字典转化成Robot-Framework的参数格式"><a href="#Json中的字典转化成Robot-Framework的参数格式" class="headerlink" title="Json中的字典转化成Robot-Framework的参数格式"></a><code>Json</code>中的字典转化成<code>Robot-Framework</code>的参数格式</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ``Json``中的字典转化成``Robot-Framework``的参数格式</span></span><br><span class="line"><span class="comment"># 先把需要修改的json文本写入文件，再对该文件进行操作</span></span><br><span class="line"><span class="comment"># 示例："./change_Dict.sh pice"</span></span><br><span class="line"></span><br><span class="line">file_name=<span class="variable">$1</span></span><br><span class="line">sed -ig <span class="string">'s/":/=/g'</span> <span class="variable">$file_name</span></span><br><span class="line">sed -ig <span class="string">'s/"//g'</span> <span class="variable">$file_name</span></span><br><span class="line">sed -ig <span class="string">'s/,/    /g'</span> <span class="variable">$file_name</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;删除目录下的除今天外的所有文件夹&quot;&gt;&lt;a href=&quot;#删除目录下的除今天外的所有文件夹&quot; class=&quot;headerlink&quot; title=&quot;删除目录下的除今天外的所有文件夹&quot;&gt;&lt;/a&gt;删除目录下的除今天外的所有文件夹&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;目录下的文件夹规律【年月日时分秒】&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# taoyi @ TaoYi-Mac in ~/Desktop/test0001 [15:54:29] &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;total 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drwxr-xr-x  2 taoyi  staff    68B 11  3 18:29 20171027121219&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drwxr-xr-x  3 taoyi  staff   102B 11  3 18:30 20171101124273&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drwxr-xr-x  3 taoyi  staff   102B 11  3 18:29 20171102124212&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drwxr-xr-x  2 taoyi  staff    68B 11  3 18:29 20171103121216&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drwxr-xr-x  3 taoyi  staff   102B 11  3 18:29 20171103124211&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drwxr-xr-x  2 taoyi  staff    68B 11  3 18:29 20171103124216&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drwxr-xr-x  2 taoyi  staff    68B 11  3 18:29 20171104124212&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Tips" scheme="http://shadow000902.space/categories/Tips/"/>
    
    
      <category term="shell" scheme="http://shadow000902.space/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Robot-Framework框架系统关键字之断言</title>
    <link href="http://shadow000902.space/2017/08/28/Robot-Framework%E6%A1%86%E6%9E%B6%E7%B3%BB%E7%BB%9F%E5%85%B3%E9%94%AE%E5%AD%97%E4%B9%8B%E6%96%AD%E8%A8%80/"/>
    <id>http://shadow000902.space/2017/08/28/Robot-Framework框架系统关键字之断言/</id>
    <published>2017-08-27T17:07:24.000Z</published>
    <updated>2017-12-11T05:27:19.196Z</updated>
    
    <content type="html"><![CDATA[<h5 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 三个list变量：list_a、list_b、list_c；</span></span><br><span class="line">@&#123;list_a&#125;    create list    1    a    <span class="variable">$&#123;21&#125;</span>    21    12</span><br><span class="line">@&#123;list_b&#125;    <span class="built_in">set</span> variable    1.0    a    <span class="variable">$&#123;21&#125;</span>    21    21</span><br><span class="line">@&#123;list_c&#125;    create list</span><br><span class="line"><span class="comment"># 两个scalar变量：string和name</span></span><br><span class="line"><span class="variable">$&#123;string&#125;</span>    <span class="built_in">set</span> variable    taoyi is <span class="keyword">in</span> hangzhou</span><br><span class="line"><span class="variable">$&#123;name&#125;</span>    <span class="built_in">set</span> variable    ty</span><br></pre></td></tr></table></figure>  <a id="more"></a><h5 id="断言实例"><a href="#断言实例" class="headerlink" title="断言实例"></a>断言实例</h5><ol><li><p><code>should contain</code>、<code>should not contain</code>、<code>should contain x times</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">should contain    <span class="variable">$&#123;list_b&#125;</span>    1.0</span><br><span class="line">should not contain    <span class="variable">$&#123;list_b&#125;</span>    1</span><br><span class="line">should contain x <span class="built_in">times</span>    <span class="variable">$&#123;list_b&#125;</span>    21    2</span><br><span class="line"><span class="comment"># 变量$&#123;list_b&#125;包含对象1.0而不包含对象1，且对象21在变量$&#123;lst_b&#125;出现了两次</span></span><br></pre></td></tr></table></figure></li><li><p><code>should be empty</code>、<code>should not be empty</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">should be empty    <span class="variable">$&#123;list_c&#125;</span></span><br><span class="line">should not be empty    <span class="variable">$&#123;list_a&#125;</span></span><br><span class="line"><span class="comment"># 变量$&#123;list_c&#125;没有赋值，所以为空；相反，变量$&#123;list_a&#125;有赋初始值，故为非空</span></span><br></pre></td></tr></table></figure></li><li><p><code>should be equal</code>、<code>should not be equal</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">should be equal    <span class="variable">$&#123;list_a[1]&#125;</span>    <span class="variable">$&#123;list_b[1]&#125;</span></span><br><span class="line">should not be equal    <span class="variable">$&#123;list_a&#125;</span>    <span class="variable">$&#123;list_b&#125;</span></span><br><span class="line"><span class="comment"># $&#123;list_a[1]&#125;=a，$&#123;list_b[1]&#125;=a故两个对象相等;而$&#123;list_a&#125;和$&#123;list_b&#125;有元素不一致，这两个对象不相等</span></span><br></pre></td></tr></table></figure></li><li><p><code>should be equal as numbers</code>、<code>should not be equal as numbers</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">should be equal as numbers    <span class="variable">$&#123;list_b[0]&#125;</span>    1.0000</span><br><span class="line">should not be equal as number    <span class="variable">$&#123;list_b[0]&#125;</span>    1.1</span><br><span class="line"><span class="comment"># $&#123;list_b[0]&#125;=1，忽略精度，故与1.0000相等；而即使是忽略精度，1与1.1还是不相等的</span></span><br></pre></td></tr></table></figure></li><li><p><code>should be equal as integers</code>、<code>should not be equal as integers</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">should be equal as integers    <span class="variable">$&#123;list_a[3]&#125;</span>    <span class="variable">$&#123;list_b[3]&#125;</span></span><br><span class="line">should not be equal as integers    <span class="variable">$&#123;list_a[4]&#125;</span>    <span class="variable">$&#123;list_b[4]&#125;</span></span><br><span class="line"><span class="comment"># $&#123;list_a[3]&#125;=21，$&#123;list_b[3]&#125;=21，而系统默认为字符串格式的“21”,故需要转化为整数类型，转化为整数后两个对象相等</span></span><br><span class="line"><span class="comment"># $&#123;list_a[4]&#125;=12，$&#123;list_b[4]&#125;=21，即使转化为整数后两个对象依旧是不相等</span></span><br></pre></td></tr></table></figure></li><li><p><code>should be equal as strings</code>、<code>should not be equal as strings</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">should be equal as strings    <span class="variable">$&#123;list_a[2]&#125;</span>    <span class="variable">$&#123;list_b[2]&#125;</span></span><br><span class="line">should not be equal as strings    <span class="variable">$&#123;list_a[0]&#125;</span>    <span class="variable">$&#123;list_b[0]&#125;</span></span><br><span class="line"><span class="comment"># $&#123;list_a[2]&#125;=$&#123;21&#125;，$&#123;list_b[2]&#125;=$&#123;21&#125;，而均为数值型的21,故需要转化为字符串类型，转化为字符串后两个对象相等</span></span><br></pre></td></tr></table></figure></li><li><p><code>should be true</code>、<code>should not be true</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">should be <span class="literal">true</span>    <span class="variable">$&#123;list_a[0]&#125;</span> &lt; 10</span><br><span class="line">should not be <span class="literal">true</span>    <span class="variable">$&#123;list_a[0]&#125;</span> &lt; 1</span><br><span class="line"><span class="comment"># $&#123;list_a[0]&#125;=1（字符串类型），其ASCII值比字符串10的ASCII值小</span></span><br></pre></td></tr></table></figure></li><li><p><code>should start with</code>、<code>should not start with</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">should start with    <span class="variable">$&#123;string&#125;</span>    tao</span><br><span class="line">should not start with    <span class="variable">$&#123;string&#125;</span>    h</span><br><span class="line"><span class="comment"># $&#123;string&#125;="taoyi is in hangzhou"是以sha开头，而非以h开头</span></span><br></pre></td></tr></table></figure></li><li><p><code>should end with</code>、<code>should not end with</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">should end with    <span class="variable">$&#123;string&#125;</span>    hangzhou</span><br><span class="line">should not end with    <span class="variable">$&#123;string&#125;</span>    taoyi</span><br><span class="line"><span class="comment"># $&#123;string&#125;="taoyi is in hangzhou"是以hangzhou结尾，而非以taoyi结尾</span></span><br></pre></td></tr></table></figure></li><li><p><code>should match</code>、<code>should not match</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">should match    <span class="variable">$&#123;name&#125;</span>    t?</span><br><span class="line">should not match    <span class="variable">$&#123;string&#125;</span>    h?*</span><br><span class="line"><span class="comment"># 模式匹配和shell中的通配符类似，它区分大小写，'*'匹配0~无穷多个字符，“？”单个字符</span></span><br><span class="line"><span class="comment"># $&#123;name&#125;=ty,由以t开头的两个字母组成</span></span><br></pre></td></tr></table></figure></li><li><p><code>should match regexp</code>、<code>should not match regexp</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">should match regexp    <span class="variable">$&#123;name&#125;</span>    ^\\w&#123;2&#125;$</span><br><span class="line">should not match regexp    <span class="variable">$&#123;name&#125;</span>    ^\\d&#123;2&#125;$</span><br><span class="line"><span class="comment"># 反斜杠在测试数据是转义字符，因此模式中要使用双重转义；'^'和'$'字符可以用来表示字符串的开头和结尾</span></span><br><span class="line"><span class="comment"># $&#123;name&#125;=ty，是有两个字母--w&#123;2&#125;组成，而不是由两个数字--d&#123;2&#125;组成</span></span><br></pre></td></tr></table></figure></li></ol><p><a href="http://blog.sina.com.cn/s/blog_7f66d4ea0101k3fl.html" target="_blank" rel="noopener">转载</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;准备数据&quot;&gt;&lt;a href=&quot;#准备数据&quot; class=&quot;headerlink&quot; title=&quot;准备数据&quot;&gt;&lt;/a&gt;准备数据&lt;/h5&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 三个list变量：list_a、list_b、list_c；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@&amp;#123;list_a&amp;#125;    create list    1    a    &lt;span class=&quot;variable&quot;&gt;$&amp;#123;21&amp;#125;&lt;/span&gt;    21    12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@&amp;#123;list_b&amp;#125;    &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; variable    1.0    a    &lt;span class=&quot;variable&quot;&gt;$&amp;#123;21&amp;#125;&lt;/span&gt;    21    21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@&amp;#123;list_c&amp;#125;    create list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 两个scalar变量：string和name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$&amp;#123;string&amp;#125;&lt;/span&gt;    &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; variable    taoyi is &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; hangzhou&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$&amp;#123;name&amp;#125;&lt;/span&gt;    &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; variable    ty&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="RobotFramework" scheme="http://shadow000902.space/categories/RobotFramework/"/>
    
    
      <category term="robot-framework" scheme="http://shadow000902.space/tags/robot-framework/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins持续集成平台搭建</title>
    <link href="http://shadow000902.space/2017/08/16/Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/"/>
    <id>http://shadow000902.space/2017/08/16/Jenkins持续集成平台搭建/</id>
    <published>2017-08-16T03:55:43.000Z</published>
    <updated>2018-01-07T13:15:20.785Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Jenkins-部署"><a href="#Jenkins-部署" class="headerlink" title="Jenkins 部署"></a>Jenkins 部署</h5><ol><li><p>创建<code>Jenkins</code>运行目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Jenkins主目录</span></span><br><span class="line">mkdir /opt/Jenkins/Home</span><br><span class="line"><span class="comment"># Jenkins缓存位置</span></span><br><span class="line">mkdir /opt/Jenkins/tmp</span><br><span class="line"><span class="comment"># 脚本存放位置</span></span><br><span class="line">mkdir /opt/Jenkins/script</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>下载<code>jenkins.war</code><br><a href="https://jenkins.io/download/" target="_blank" rel="noopener">下载地址</a><br>把下载的<code>war</code>包放入<code>/opt/Jenkins</code>目录下</p></li><li><p>编写启动脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/java -Dfile.encoding=UTF-8 \</span><br><span class="line">                    -XX:PermSize=256m -XX:MaxPermSize=512m -Xms256m -Xmx512m \</span><br><span class="line">                    -Djava.io.tmpdir=/opt/Jenkins/tmp \</span><br><span class="line">                    -jar /opt/Jenkins/jenkins.war \</span><br><span class="line">                    --httpPort=8080 \</span><br><span class="line">                    &gt;&gt; /opt/Jenkins/nohup.out \</span><br><span class="line">                    2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置编码格式</span></span><br><span class="line">-Dfile.encoding=UTF-8</span><br><span class="line"><span class="comment"># 设置内存占用</span></span><br><span class="line">-XX:PermSize=256m -XX:MaxPermSize=512m -Xms256m -Xmx512m</span><br><span class="line"><span class="comment"># 指定Jenkins运行缓存位置</span></span><br><span class="line">-Djava.io.tmpdir=/opt/Jenkins/tmp</span><br><span class="line"><span class="comment"># 指定执行的war包</span></span><br><span class="line">-jar /opt/Jenkins/jenkins.war</span><br><span class="line"><span class="comment"># 指定本地端口</span></span><br><span class="line">--httpPort=8080</span><br><span class="line"><span class="comment"># 指定Jenkins运行日志输出位置</span></span><br><span class="line">&gt;&gt; /opt/Jenkins/nohup.out</span><br><span class="line"><span class="comment"># 设置进程在后台运行</span></span><br><span class="line">2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>新建脚本文件存放脚本<code>startJenkins.sh</code>，放到<code>script</code>目录下。<br>执行脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 赋予可执行权限</span></span><br><span class="line">chmod a+x startJenkins.sh</span><br><span class="line"><span class="comment"># 执行脚本，启动Jenkins</span></span><br><span class="line">./startJenkins.sh</span><br></pre></td></tr></table></figure><ol><li><code>Jenkins</code>主目录介绍<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># jenkins主配置文件</span></span><br><span class="line">-rw-r--r--   1 taoyi  wheel   1.6K  8 16 01:43 config.xml</span><br><span class="line">-rw-r--r--   1 taoyi  wheel   159B  8 16 01:43 hudson.model.UpdateCenter.xml</span><br><span class="line">-rw-------   1 taoyi  wheel   1.7K  8 16 01:27 identity.key.enc</span><br><span class="line">-rw-r--r--   1 taoyi  wheel    94B  8 16 01:27 jenkins.CLI.xml</span><br><span class="line">-rw-r--r--   1 taoyi  wheel     4B  8 16 01:43 jenkins.install.InstallUtil.lastExecVersion</span><br><span class="line">-rw-r--r--   1 taoyi  wheel     4B  8 16 01:30 jenkins.install.UpgradeWizard.state</span><br><span class="line"><span class="comment"># 包含所有的项目，包含所有项目对应的配置文件，包括挂到slave中的项目的配置文件</span></span><br><span class="line">drwxr-xr-x   4 taoyi  wheel   136B  8 16 09:35 <span class="built_in">jobs</span></span><br><span class="line">drwxr-xr-x   4 taoyi  wheel   136B  8 16 01:29 logs</span><br><span class="line">-rw-r--r--   1 taoyi  wheel   907B  8 16 01:43 nodeMonitors.xml</span><br><span class="line"><span class="comment"># 所有的slave节点配置文件</span></span><br><span class="line">drwxr-xr-x   2 taoyi  wheel    68B  8 16 01:27 nodes</span><br><span class="line"><span class="comment"># Jenkins插件</span></span><br><span class="line">drwxr-xr-x   2 taoyi  wheel    68B  8 16 01:27 plugins</span><br><span class="line">-rw-r--r--   1 taoyi  wheel    64B  8 16 01:27 secret.key</span><br><span class="line">-rw-r--r--   1 taoyi  wheel     0B  8 16 01:27 secret.key.not-so-secret</span><br><span class="line">drwx------  15 taoyi  wheel   510B  8 16 01:44 secrets</span><br><span class="line">drwxr-xr-x   5 taoyi  wheel   170B  8 16 01:27 updates</span><br><span class="line">drwxr-xr-x   3 taoyi  wheel   102B  8 16 01:27 userContent</span><br><span class="line"><span class="comment"># 在Jenkins中添加的所有用户都会在这个目录下新建文件夹管理，每个用户都会有一个config.xml配置文件</span></span><br><span class="line">drwxr-xr-x   4 taoyi  wheel   136B  8 16 01:40 users</span><br><span class="line">drwxr-xr-x  25 taoyi  wheel   850B  8 16 01:27 war</span><br><span class="line"><span class="comment"># 挂在本机下的所有项目的工作空间</span></span><br><span class="line">drwxr-xr-x   3 taoyi  wheel   102B  8 16 01:44 workspace</span><br></pre></td></tr></table></figure></li></ol><h5 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h5><ol><li><code>Jenkins console</code>输出乱码<br>在<code>/etc/profile</code>中添加<code>export JAVA_TOOL_OPTIONS=&quot;-Dfile.encoding=UTF-8&quot;</code><br>在<code>Jenkins</code>系统管理里，添加环境变量<code>Key</code>：<code>LANG</code>，<code>Value</code>：<code>en_US.UTF-8</code>（如果系统默认的已经是en_US.UTF-8，就不用设置了）</li></ol><h5 id="好用的Jenkins插件"><a href="#好用的Jenkins插件" class="headerlink" title="好用的Jenkins插件"></a>好用的Jenkins插件</h5><ol><li><code>Build User Vars Plugin</code>【获取项目构建人】</li></ol><p>插件名称：<code>user build vars plugin</code></p><p>变量值表<br><html><body><table border="1"><tr><th>Variable</th><th>Description</th></tr><tr><td>BUILD_USER</td><td>Full name (first name + last name) </td></tr><tr><td>BUILD_USER_EMAIL</td><td>Email address</td></tr><tr><td>BUILD_USER_FIRST_NAME</td><td>First name</td></tr><tr><td>BUILD_USER_ID</td><td>Jenkins user ID</td></tr><tr><td>BUILD_USER_LAST_NAME</td><td>Last name</td></tr></table></body></html></p><p>在jenkins任务中使用构建变量：注意需要勾选 “Set jenkins user build variables.”</p><ol><li><code>Naginator</code>【任务失败重新构建插件】<br>在<code>构建后操作</code>中选择<code>Retry build after failure</code>。<code>Fixed delay</code>填写每次重试的时间延迟，单位是秒。<code>Maximum number of successive failed builds</code>文本框中填写重试次数。</li></ol><ol><li><p><code>Publish Over SSH</code>【通过ssh构建项目】</p></li><li><p><code>触发远程构建（例如，使用脚本）</code></p><img src="/2017/08/16/Jenkins持续集成平台搭建/构建触发器_身份验证令牌.png" title="构建触发器_身份验证令牌"><p>设置身份验证令牌<code>TOKEN_NAME</code>，可以随意定义。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认参数执行远程构建</span></span><br><span class="line">JENKINS_URL/job/JOB_NAME/build?token=TOKEN_NAME</span><br><span class="line"><span class="comment"># 参数化形式执行远程构建</span></span><br><span class="line">JENKINS_URL/job/JOB_NAME/buildWithParameters?token=TOKEN_NAME&amp;params1=params1&amp;...</span><br></pre></td></tr></table></figure></li><li><p>常用插件汇总<br><code>Build Environment Plugin</code>构建环境插件，可以进行构建环境比较。<br><code>Build Flow Plugin</code>工作流插件，支持DSL脚本定义工作流<br><code>Build Graph View Plugin</code>build Flow插件视图（安装后需要重新才能生效）<br><code>Build Monitor View</code>使用心得：基于该插件可以实现dashboard功能<br><code>Build Pipeline Plugin View</code>Pipeline 管道流图表展示插件<br><code>Build Timestamp Plugin</code>任务log时间戳插件，使得job log的每次输出前面都增加当时的时间<br><code>Build-timeout Plugin</code>job构建超时插件<br><code>BuildResultTrigger Plugin</code>根据其他的job的成功或失败来启动此build。<br><code>Cron Column Plugin</code> 通过定时任务例行的运行一些job<br><code>Files Found Trigger</code>检测指定的目录，如果发现指定模式的文件则启动build。<br><code>HTTP Request Plugin</code>使用心得：在构建前后可以通过该插件以http形式调用各种api接口实现和内部系统的联动<br><code>Job Configuration History Plugin</code>使用心得：使job具备版本管理的能力，diff和rollback功能更是非常赞<br><code>Job Import Plugin</code>使用心得：可以快速导入其他jenkins集群的已有job，需要认证的jenkins系统导入需要提供凭证才可以<br><code>Join Plugin</code>这也是一个触发job的插件，亮点在于它触发job的条件是等待所有当前job的下游的job都完成才会发生。<br><code>Multijob Plugin</code>多任务插件<br><code>Naginator Plugin</code>任务重试插件<br><code>Parameterized Trigger Plugin</code>这是一个扩展型的插件，使各个job连接的时候可以传递一些job相关的信息<br><code>Periodic Backup</code>使用心得：备份是运维一个系统必须要保障的事情，该插件的恢复功能可能不可用，需要手工进行，好处在于可以定时备份<br><code>Publish Over SSH Plugin</code>通过ssh发布文件<br><code>Rebuild Plugin</code>重新执行插件<br><code>Status Monitor Plugin</code>构建状态插件<br><code>ws-cleanup Plugin</code>workspace清理插件</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;Jenkins-部署&quot;&gt;&lt;a href=&quot;#Jenkins-部署&quot; class=&quot;headerlink&quot; title=&quot;Jenkins 部署&quot;&gt;&lt;/a&gt;Jenkins 部署&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建&lt;code&gt;Jenkins&lt;/code&gt;运行目录&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Jenkins主目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir /opt/Jenkins/Home&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Jenkins缓存位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir /opt/Jenkins/tmp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 脚本存放位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir /opt/Jenkins/script&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Jenkins" scheme="http://shadow000902.space/categories/Jenkins/"/>
    
    
      <category term="jenkins" scheme="http://shadow000902.space/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Mac下删除安装的pkg</title>
    <link href="http://shadow000902.space/2017/08/06/Mac%E4%B8%8B%E5%88%A0%E9%99%A4%E5%AE%89%E8%A3%85%E7%9A%84pkg/"/>
    <id>http://shadow000902.space/2017/08/06/Mac下删除安装的pkg/</id>
    <published>2017-08-06T05:10:45.000Z</published>
    <updated>2017-12-11T05:27:19.250Z</updated>
    
    <content type="html"><![CDATA[<h5 id="使用pkg-uninstaller来卸载pkg安装的软件"><a href="#使用pkg-uninstaller来卸载pkg安装的软件" class="headerlink" title="使用pkg_uninstaller来卸载pkg安装的软件"></a>使用<code>pkg_uninstaller</code>来卸载<code>pkg</code>安装的软件</h5><ol><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">[sudo] bash &lt; &lt;(curl -sL https://raw.github.com/mpapis/pkg_uninstaller/master/pkg-install)</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>加入到环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'PATH=$PATH:$HOME/.pkg_uninstaller'</span> &gt;&gt; <span class="variable">$HOME</span>/.bash_profile</span><br></pre></td></tr></table></figure></li><li><p>列出包含某字符串的包名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pkg-list [name]</span><br><span class="line">pkgutil --pkgs | grep -i [name]</span><br></pre></td></tr></table></figure></li><li><p>列出<code>pkg</code>软件的所有安装文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg-util --files [pkg_name]</span><br></pre></td></tr></table></figure></li><li><p>卸载<code>pkg</code>软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[sudo] pkg-uninstall [pkg_name]</span><br></pre></td></tr></table></figure><p> 不论是手动还是使用命令全自动删除，最终你还得告诉系统你删了这个包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[sudo] pkgutil --forget [pkg_name]</span><br></pre></td></tr></table></figure></li></ol><h5 id="使用pkg管理软件来卸载"><a href="#使用pkg管理软件来卸载" class="headerlink" title="使用pkg管理软件来卸载"></a>使用<code>pkg</code>管理软件来卸载</h5><ol><li>下载地址<br><a href="https://pan.baidu.com/s/1hsxMhHM" target="_blank" rel="noopener">破解版地址</a><br><a href="https://www.corecode.io/uninstallpkg/" target="_blank" rel="noopener">官网地址</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;使用pkg-uninstaller来卸载pkg安装的软件&quot;&gt;&lt;a href=&quot;#使用pkg-uninstaller来卸载pkg安装的软件&quot; class=&quot;headerlink&quot; title=&quot;使用pkg_uninstaller来卸载pkg安装的软件&quot;&gt;&lt;/a&gt;使用&lt;code&gt;pkg_uninstaller&lt;/code&gt;来卸载&lt;code&gt;pkg&lt;/code&gt;安装的软件&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ~&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[sudo] bash &amp;lt; &amp;lt;(curl -sL https://raw.github.com/mpapis/pkg_uninstaller/master/pkg-install)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Tips" scheme="http://shadow000902.space/categories/Tips/"/>
    
    
      <category term="mac" scheme="http://shadow000902.space/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins中slave的设置</title>
    <link href="http://shadow000902.space/2017/06/24/Jenkins%E4%B8%ADslave%E7%9A%84%E8%AE%BE%E7%BD%AE/"/>
    <id>http://shadow000902.space/2017/06/24/Jenkins中slave的设置/</id>
    <published>2017-06-24T05:02:12.000Z</published>
    <updated>2017-12-11T05:27:19.380Z</updated>
    
    <content type="html"><![CDATA[<h5 id="在Jenkins中配置从节点"><a href="#在Jenkins中配置从节点" class="headerlink" title="在Jenkins中配置从节点"></a>在Jenkins中配置从节点</h5><img src="/2017/06/24/Jenkins中slave的设置/配置从节点.png" title="配置从节点"><p>增加节点后，实际并没有直接连上，还需要在节点服务器上进行相应的配置</p>  <a id="more"></a><h5 id="在从节点服务器的host中的加入配置"><a href="#在从节点服务器的host中的加入配置" class="headerlink" title="在从节点服务器的host中的加入配置"></a>在从节点服务器的host中的加入配置</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/hosts</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">111.111.111.111 jenkins.shadow.com<span class="comment"># 前部分IP为Jenkins的内网地址，后部分为Jenkins的对外访问域名</span></span><br></pre></td></tr></table></figure><h5 id="从节点服务器上配置Jenkins节点配置"><a href="#从节点服务器上配置Jenkins节点配置" class="headerlink" title="从节点服务器上配置Jenkins节点配置"></a>从节点服务器上配置Jenkins节点配置</h5><img src="/2017/06/24/Jenkins中slave的设置/从节点配置要点.png" title="从节点配置要点"><p>点击上图中的<code>slave.jar</code>的链接，下载该文件，放在上方指定的<code>Jenkins</code>工作目录下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span>@<span class="built_in">test</span>-devtesting-00001:~/jenkins$ ll</span><br><span class="line">total 760</span><br><span class="line">drwxrwxr-x  3 <span class="built_in">test</span> <span class="built_in">test</span>   4096 Jun 23 16:04 ./</span><br><span class="line">drwx------ 18 <span class="built_in">test</span> <span class="built_in">test</span>   4096 Jun 24 13:47 ../</span><br><span class="line">-rw-rw-r--  1 <span class="built_in">test</span> <span class="built_in">test</span>   7623 Jun 23 16:04 maven33-agent.jar</span><br><span class="line">-rw-rw-r--  1 <span class="built_in">test</span> <span class="built_in">test</span>  19971 Jun 23 16:04 maven33-interceptor.jar</span><br><span class="line">-rw-rw-r--  1 <span class="built_in">test</span> <span class="built_in">test</span>   6764 Jun 23 16:04 maven3-interceptor-commons.jar</span><br><span class="line">-rw-rw-r--  1 <span class="built_in">test</span> <span class="built_in">test</span>    738 Jun  8 16:52 slave-agent.jnlp</span><br><span class="line">-rw-rw-r--  1 <span class="built_in">test</span> <span class="built_in">test</span> 717563 May  2 17:29 slave.jar<span class="comment"># 上方下载的slave.jar文件</span></span><br><span class="line">-rwxrwxr-x  1 <span class="built_in">test</span> <span class="built_in">test</span>    114 Jun  6 19:28 start_jenkins.sh*<span class="comment"># 启动Jenkinsslave的脚本</span></span><br><span class="line">drwxrwxr-x 14 <span class="built_in">test</span> <span class="built_in">test</span>   4096 Jun 24 12:43 workspace/<span class="comment"># Jenkins项目的工作目录</span></span><br></pre></td></tr></table></figure></p><p>将提示中的启动<code>Jenkins</code>的脚本写入文件<code>start_jenkins.sh</code>中<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar slave.jar -jnlpUrl http://jenkins.shadow.com/computer/test-devtesting-00001/slave-agent.jnlp 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></p><p>赋予<code>start_jenkins.sh</code>执行权限<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x start_jenkins.sh</span><br></pre></td></tr></table></figure></p><p>启动slave<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./start_jenkins.sh</span><br></pre></td></tr></table></figure></p><p>回到Jenkins节点列表，查看添加的节点，状态如图就说明启动成功了。<br><img src="/2017/06/24/Jenkins中slave的设置/节点列表.png" title="节点列表"></p><p>至此，slave节点就配置并启动完毕了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;在Jenkins中配置从节点&quot;&gt;&lt;a href=&quot;#在Jenkins中配置从节点&quot; class=&quot;headerlink&quot; title=&quot;在Jenkins中配置从节点&quot;&gt;&lt;/a&gt;在Jenkins中配置从节点&lt;/h5&gt;&lt;img src=&quot;/2017/06/24/Jenkins中slave的设置/配置从节点.png&quot; title=&quot;配置从节点&quot;&gt;
&lt;p&gt;增加节点后，实际并没有直接连上，还需要在节点服务器上进行相应的配置&lt;/p&gt;
    
    </summary>
    
      <category term="Jenkins" scheme="http://shadow000902.space/categories/Jenkins/"/>
    
    
      <category term="jenkins" scheme="http://shadow000902.space/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Maven-Web实例从服务器部署到Jenkins集成</title>
    <link href="http://shadow000902.space/2017/06/24/Maven-Web%E5%AE%9E%E4%BE%8B%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%E5%88%B0Jenkins%E9%9B%86%E6%88%90/"/>
    <id>http://shadow000902.space/2017/06/24/Maven-Web实例从服务器部署到Jenkins集成/</id>
    <published>2017-06-24T04:48:41.000Z</published>
    <updated>2017-12-11T05:27:19.390Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Jenkins环境准备"><a href="#Jenkins环境准备" class="headerlink" title="Jenkins环境准备"></a>Jenkins环境准备</h5><ol><li>Jenkins安装，这个就不说了</li><li><p>Jenkins环境配置</p><p> 进入 系统管理-Global Tool Configuration<br> 配置JDK：建议放到用户可操作的目录下，如：/home/test/devtool/jdk1.8.0_91<br> 配置MVN：建议放到用户可操作的目录下，如：/home/test/devtool/apache-maven-3.3.9</p><a id="more"></a></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span>@<span class="built_in">test</span>-devtesting-00001:~/devtool$ ll</span><br><span class="line">total 8308</span><br><span class="line">drwxrwxr-x  3 <span class="built_in">test</span> <span class="built_in">test</span>    4096 Jun 23 16:18 ./</span><br><span class="line">drwx------ 18 <span class="built_in">test</span> <span class="built_in">test</span>    4096 Jun 24 12:43 ../</span><br><span class="line">drwxrwxr-x  6 <span class="built_in">test</span> <span class="built_in">test</span>    4096 Jun  6 21:39 apache-maven-3.3.9/</span><br><span class="line">lrwxrwxrwx  1 <span class="built_in">test</span> <span class="built_in">test</span>      25 Jun 23 16:18 jdk1.8.0_91/</span><br></pre></td></tr></table></figure><h5 id="服务器环境准备"><a href="#服务器环境准备" class="headerlink" title="服务器环境准备"></a>服务器环境准备</h5><ol><li>首先需要把服务器加入到Jenkins的slave中，即配置Jenkins的从节点</li><li>服务器环境配置：建议<strong>配置完全同Jenkins中的环境配置</strong>，包括JDK和MVN，不然会有很多让人头痛无法解决的问题</li></ol><h5 id="服务器部署WEB实例"><a href="#服务器部署WEB实例" class="headerlink" title="服务器部署WEB实例"></a>服务器部署WEB实例</h5><ol><li><p>在用户目录下新建两个目录，一个用来存放源代码，一个用来存放Web实例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span>@<span class="built_in">test</span>-devtesting-00001:~$ ll</span><br><span class="line">total 144</span><br><span class="line">drwx------ 18 <span class="built_in">test</span> <span class="built_in">test</span>  4096 Jun 24 12:43 ./</span><br><span class="line">drwxr-xr-x  7 root root  4096 May 24 17:55 ../</span><br><span class="line">drwxrwxr-x  3 <span class="built_in">test</span> <span class="built_in">test</span>  4096 Jun 23 16:18 devtool/<span class="comment"># 环境配置</span></span><br><span class="line">drwxrwxr-x  3 <span class="built_in">test</span> <span class="built_in">test</span>  4096 Jun 23 16:04 jenkins/<span class="comment"># Jenkins工作目录</span></span><br><span class="line">drwxr-xr-x 12 <span class="built_in">test</span> <span class="built_in">test</span>  4096 Jun 20 10:58 projects/<span class="comment"># 源代码目录</span></span><br><span class="line">drwxrwxr-x 16 <span class="built_in">test</span> <span class="built_in">test</span>  4096 Jun 23 14:52 tomcats/<span class="comment"># Web实例目录</span></span><br></pre></td></tr></table></figure><p> 在projects目录下，每个项目会有一个源代码的git目录；每个源代码的git目录会对应一个Web实例地址，即一个tomcat实例</p></li><li><p>使用<code>git clone git-address</code>命令拉取源代码到<code>projects</code>目录下</p></li><li>在<code>tomcats</code>目录下新建一个tomcat实例，命名为自己需要的名称，最好从名称就比较好辨识</li><li><p>修改<code>tomcat</code>目录下的<code>conf</code>目录下的<code>server.xml</code>文件，修改本地和远程端口映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">"22221"</span> <span class="attr">shutdown</span>=<span class="string">"SHUTDOWN"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--该port也需要修改，不可重复--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.startup.VersionLoggerListener"</span> /&gt;</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"10021"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line">    &lt;!--这里的port对应服务器上的端口，不可重复，否知会引起冲突，无法部署成功--&gt;</span><br><span class="line">               connectionTimeout="20000"</span><br><span class="line">               redirectPort="11121" URIEncoding="utf-8"</span><br><span class="line">               <span class="comment">&lt;!--这里的redirectPort也需要修改，不可重复--&gt;</span></span><br><span class="line">               maxPostSize="0" maxHttpHeaderSize="81920"/&gt;</span><br></pre></td></tr></table></figure><p> 如果只是部署在本地，也需要确保端口不冲突</p></li><li><p>编写部署的脚本<code>deploy.sh</code>，放到<code>tomcat</code>目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">set</span> -m</span><br><span class="line"><span class="comment">#set var</span></span><br><span class="line">dir_src=<span class="string">"/home/test/projects/git-file"</span></span><br><span class="line">dir_tomcat_home=<span class="string">"/home/test/tomcats/test-tomcat"</span></span><br><span class="line">file_war=<span class="string">"ROOT.war"</span></span><br><span class="line">file_catalina_out=<span class="variable">$dir_tomcat_home</span><span class="string">"/logs/catalina.out"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----update code from git begin"</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$dir_src</span><span class="comment"># 进入源代码目录</span></span><br><span class="line">git checkout develop<span class="comment"># checkout需要的分支</span></span><br><span class="line"><span class="comment">#git checkout master</span></span><br><span class="line">git pull</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----update code from git end"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----build project begin"</span></span><br><span class="line">mvn clean install -U -DskipTests=<span class="literal">true</span><span class="comment"># maven编译war包</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----build project end"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----shutdown tomcat"</span></span><br><span class="line">ps -ef | grep <span class="variable">$dir_tomcat_home</span> | awk <span class="string">'&#123; print $2 &#125;'</span> | xargs <span class="built_in">kill</span> -9<span class="comment"># kill当前tomcat进程</span></span><br><span class="line">sleep 1s</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----reset war file"</span></span><br><span class="line">rm -r <span class="variable">$dir_tomcat_home</span>/webapps/ROOT</span><br><span class="line">cp -r <span class="variable">$dir_src</span>/module-name/target/<span class="variable">$file_war</span> <span class="variable">$dir_tomcat_home</span>/webapps/ROOT.war<span class="comment"># 拷贝新的war包到$dir_tomcat_home/webapps目录下，并命名为ROOT.war</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----start tomcat "</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$dir_tomcat_home</span></span><br><span class="line">touch logs/catalina.out</span><br><span class="line">sh bin/startup.sh &amp;<span class="comment"># 启动tomcat，并自动部署war包</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----show pid"</span></span><br><span class="line">tail -f logs/catalina.out<span class="comment"># 实时日志输出</span></span><br></pre></td></tr></table></figure></li><li><p>部署服务<br> 进入<code>tomcat</code>目录下<br> 赋予脚本可执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x deploy.sh</span><br></pre></td></tr></table></figure><p> 执行脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./deploy.sh</span><br></pre></td></tr></table></figure><p> 至此，即可完成在服务器上的Web实例部署。</p></li></ol><h5 id="Jenkins集成Web实例部署"><a href="#Jenkins集成Web实例部署" class="headerlink" title="Jenkins集成Web实例部署"></a>Jenkins集成Web实例部署</h5><ol><li>新建一个<code>Jenkins</code>项目<br> 因为我们的Web项目是从maven进行编译的，所以在新建项目时，选择<code>构建一个maven项目</code></li><li><p><code>Jenkins</code>项目配置<br> 勾选<code>参数化构建过程</code></p><img src="/2017/06/24/Maven-Web实例从服务器部署到Jenkins集成/参数化构建过程.png" title="参数化构建过程"><p> 指定服务器</p><img src="/2017/06/24/Maven-Web实例从服务器部署到Jenkins集成/指定slave.png" title="指定slave"><p> 配置源代码地址，设置分支变量获取</p><img src="/2017/06/24/Maven-Web实例从服务器部署到Jenkins集成/配置git地址.png" title="配置git地址"><p> 配置项目构建名称<code>构建次数-分支名</code></p><img src="/2017/06/24/Maven-Web实例从服务器部署到Jenkins集成/设置项目构建名称.png" title="设置项目构建名称"><p> Maven编译配置，有些git项目可能<code>pom.xml</code>文件并不在项目根目录下，需要手动指定，且是相对路径</p><img src="/2017/06/24/Maven-Web实例从服务器部署到Jenkins集成/maven编译配置.png" title="maven编译配置"><p> 最后增加<code>Execute shell</code>，完成war包部署</p><img src="/2017/06/24/Maven-Web实例从服务器部署到Jenkins集成/部署代码配置.png" title="部署代码配置"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -o errexit</span><br><span class="line"><span class="built_in">set</span> -o xtrace</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> BUILD_ID=pleaseDontKillMe<span class="comment"># 该项设置，可以避免Jenkins部署实例的时候，部署结束，进程就被kill</span></span><br><span class="line"></span><br><span class="line">dir_tomcat_home=<span class="string">"/home/test/tomcats/test-tomcat"</span><span class="comment"># 设置tomcat实例变量</span></span><br><span class="line">file_war=<span class="string">"ROOT.war"</span><span class="comment"># 代码打出的war包名称，需要自己先手动打包一次知道名称后再指定</span></span><br><span class="line">file_catalina_out=<span class="variable">$&#123;dir_tomcat_home&#125;</span><span class="string">"/logs/catalina.out"</span><span class="comment"># 设置实时日志输出目录变量</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----shutdown tomcat"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ps -ef | grep $&#123;dir_tomcat_home&#125; | awk '&#123; print $2 &#125;' | xargs kill -9</span></span><br><span class="line">ps auxwww | grep java | grep <span class="variable">$&#123;dir_tomcat_home&#125;</span> | awk <span class="string">'&#123;print $2&#125;'</span> | xargs <span class="built_in">kill</span> -9 2&gt;/dev/null;<span class="comment"># 获取并kill当前tomcat进程，如果当前进程存在的话</span></span><br><span class="line">sleep 1s</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----reset war file"</span></span><br><span class="line">rm -rf <span class="variable">$&#123;dir_tomcat_home&#125;</span>/webapps/ROOT;<span class="comment"># 移除war包解压后的目录</span></span><br><span class="line">rm -rf <span class="variable">$&#123;dir_tomcat_home&#125;</span>/webapps/ROOT.war;<span class="comment"># 移除前一次部署的war包</span></span><br><span class="line">cp -r <span class="variable">$&#123;WORKSPACE&#125;</span>/module-name/target/<span class="variable">$file_war</span> <span class="variable">$&#123;dir_tomcat_home&#125;</span>/webapps/ROOT.war<span class="comment"># 拷贝新的war包到$&#123;dir_tomcat_home&#125;/webapps目录下，并命名为ROOT.war</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----start tomcat"</span></span><br><span class="line">sh <span class="variable">$&#123;dir_tomcat_home&#125;</span>/bin/startup.sh;<span class="comment"># 启动tomcat，自动部署war包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#echo "----show pid"</span></span><br><span class="line"><span class="comment">#tail -f $&#123;dir_tomcat_home&#125;/logs/catalina.out</span></span><br></pre></td></tr></table></figure><p> BUID_ID是jenkins的一个特殊的运行时变量，之所以这么做，原因就是直接使用shell启动tomcat是不行的，因为jenkins进程退出后其创建的、包括其调用的脚本创建的进程都将被一起销毁<br> 至此<code>Jenkins</code>项目配置完成，保存即可。</p><p> 附带另一个部署脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh  </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Tomcat:<span class="variable">$1</span>"</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Module:<span class="variable">$2</span>"</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"++++++++++++++++++++++++++++++++"</span>  </span><br><span class="line">pid=$(jps -v |grep <span class="variable">$1</span> | grep -v <span class="string">'grep $1'</span> | awk <span class="string">'&#123;print $1&#125;'</span>)  </span><br><span class="line"><span class="comment">#if instance is running,shutdown it!  </span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$pid</span>"</span> ];<span class="keyword">then</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Current instance is running,pid:<span class="variable">$pid</span>"</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Shutdown now!"</span>  </span><br><span class="line">    <span class="built_in">cd</span> <span class="variable">$1</span>/bin  </span><br><span class="line">    ./shutdown.sh  </span><br><span class="line">    sleep 3s  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line"><span class="comment">#but somethimes,shutdown operation will be failure!  </span></span><br><span class="line"><span class="comment">#check status for 10 times  </span></span><br><span class="line">i=0  </span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -lt 10 ]  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">    pid=$(jps -v |grep <span class="variable">$1</span> | grep -v <span class="string">'grep $1'</span> | awk <span class="string">'&#123;print $1&#125;'</span>)  </span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$pid</span>"</span> ];<span class="keyword">then</span>  </span><br><span class="line">        sleep 1s  </span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$i</span> -ge 10 ]  </span><br><span class="line">        <span class="keyword">then</span>  </span><br><span class="line">            <span class="built_in">kill</span> -9 <span class="variable">$pid</span>  </span><br><span class="line">            <span class="built_in">break</span>  </span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">            ((i++))  </span><br><span class="line">        <span class="keyword">fi</span>  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">        <span class="built_in">break</span>  </span><br><span class="line">    <span class="keyword">fi</span>  </span><br><span class="line"><span class="keyword">done</span>  </span><br><span class="line"><span class="comment">#remove current application files  </span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$1</span>/webapps  </span><br><span class="line">rm -r -f ROOT  </span><br><span class="line">rm -f ROOT.war  </span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$1</span>/bin  </span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$WORKSPACE</span>/<span class="variable">$2</span>/target  </span><br><span class="line">cp ROOT.war <span class="variable">$1</span>/webapps  </span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$1</span>/bin  </span><br><span class="line">./startup.sh  </span><br><span class="line">sleep 3s  </span><br><span class="line">pid=$(jps -v |grep <span class="variable">$1</span> | grep -v <span class="string">'grep $1'</span> | awk <span class="string">'&#123;print $1&#125;'</span>)  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"restart ok!"</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"pid:<span class="variable">$pid</span>"</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"++++++++++++++++++++++++++++++++"</span></span><br></pre></td></tr></table></figure><p> 脚本使用的脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BUILD_ID=dontKillMe /home/deploy.sh <span class="string">"&lt;tomcat_home&gt;"</span> <span class="string">"&lt;module_name&gt;"</span></span><br></pre></td></tr></table></figure><p> 这个脚本，就是执行“关闭tomcat”、“删除文件”、“复制文件”、“重启tomcat”过程；脚本中可以引用jenkins的一些系统变量，比如“$WORKSPACE”表示当前build项目的工作空间；此脚本接收2个参数，我们约定，第一个参数表示“tomcat home路径”，第二个参数表示“项目module名称”用于告知需要部署那个web项目（这在多modules项目中有用）。</p></li><li><p>执行构建</p><img src="/2017/06/24/Maven-Web实例从服务器部署到Jenkins集成/分支构建.png" title="分支构建"></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;Jenkins环境准备&quot;&gt;&lt;a href=&quot;#Jenkins环境准备&quot; class=&quot;headerlink&quot; title=&quot;Jenkins环境准备&quot;&gt;&lt;/a&gt;Jenkins环境准备&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;Jenkins安装，这个就不说了&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jenkins环境配置&lt;/p&gt;
&lt;p&gt; 进入 系统管理-Global Tool Configuration&lt;br&gt; 配置JDK：建议放到用户可操作的目录下，如：/home/test/devtool/jdk1.8.0_91&lt;br&gt; 配置MVN：建议放到用户可操作的目录下，如：/home/test/devtool/apache-maven-3.3.9&lt;/p&gt;
    
    </summary>
    
      <category term="Jenkins" scheme="http://shadow000902.space/categories/Jenkins/"/>
    
    
      <category term="jenkins" scheme="http://shadow000902.space/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Mac下Redis环境搭建</title>
    <link href="http://shadow000902.space/2017/06/18/Mac%E4%B8%8BRedis%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://shadow000902.space/2017/06/18/Mac下Redis环境搭建/</id>
    <published>2017-06-18T10:08:44.000Z</published>
    <updated>2017-12-11T05:27:19.307Z</updated>
    
    <content type="html"><![CDATA[<h5 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h5><p>下载稳定版本的安装包<a href="http://download.redis.io/redis-stable.tar.gz" target="_blank" rel="noopener">redis-stable</a></p><h5 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf redis-stable.tar.gz</span><br><span class="line">cp ./redis-stable /opt/</span><br><span class="line"><span class="built_in">cd</span> /opt/redis-stable</span><br><span class="line">sudo make <span class="built_in">test</span></span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>  <a id="more"></a><h5 id="配置Redis"><a href="#配置Redis" class="headerlink" title="配置Redis"></a>配置Redis</h5><ol><li><p>创建需要的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir bin</span><br><span class="line">mkdir etc</span><br><span class="line">mkdir db</span><br></pre></td></tr></table></figure></li><li><p>拷贝安装好的<code>redis</code>文件到创建的<code>bin</code>目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/bin/redis-* /opt/redis-stable/bin/</span><br></pre></td></tr></table></figure><p> 结果<code>/opt/redis-stable/bin/</code>目录下的内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">╭─taoyi at TaoYi-Mac <span class="keyword">in</span> /opt/redis-stable/bin using ‹› 17-06-18 - 18:06:48</span><br><span class="line">╰─○ ll</span><br><span class="line">total 6648</span><br><span class="line">-rwxr-xr-x  1 taoyi  staff    98K  6 18 18:06 redis-benchmark</span><br><span class="line">-rwxr-xr-x  1 taoyi  staff    14K  6 18 18:06 redis-check-aof</span><br><span class="line">-rwxr-xr-x  1 taoyi  staff   1.0M  6 18 18:06 redis-check-rdb</span><br><span class="line">-rwxr-xr-x  1 taoyi  staff   159K  6 18 18:06 redis-cli</span><br><span class="line">-rwxr-xr-x  1 taoyi  staff   1.0M  6 18 18:06 redis-sentinel</span><br><span class="line">-rwxr-xr-x  1 taoyi  staff   1.0M  6 18 18:06 redis-server</span><br></pre></td></tr></table></figure></li><li><p>拷贝安装目录<code>src</code>目录下的<code>mkreleasehdr.sh</code>到安装目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /opt/redis-stable/src/mkreleasehdr.sh /opt/redis-stable/</span><br></pre></td></tr></table></figure></li><li><p>拷贝安装目录下的<code>redis.conf</code>到创建的<code>etc</code>目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /opt/redis-stable/redis.conf /opt/redis-stable/etc/</span><br></pre></td></tr></table></figure></li><li><p>修改<code>redis.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改为守护模式</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="comment">#设置进程锁文件</span></span><br><span class="line">pidfile /opt/redis-stable/redis.pid</span><br><span class="line"><span class="comment">#端口</span></span><br><span class="line">port 6379</span><br><span class="line"><span class="comment">#客户端超时时间</span></span><br><span class="line">timeout 300</span><br><span class="line"><span class="comment">#日志级别</span></span><br><span class="line">loglevel debug</span><br><span class="line"><span class="comment">#日志文件位置</span></span><br><span class="line">logfile /opt/redis-stable/<span class="built_in">log</span>-redis.log</span><br><span class="line"><span class="comment">#设置数据库的数量，默认数据库为0，可以使用SELECT &lt;dbid&gt;命令在连接上指定数据库id</span></span><br><span class="line">databases 8</span><br><span class="line"><span class="comment">##指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</span></span><br><span class="line"><span class="comment">#save &lt;seconds&gt; &lt;changes&gt;</span></span><br><span class="line"><span class="comment">#Redis默认配置文件中提供了三个条件：</span></span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"><span class="comment">#指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，</span></span><br><span class="line"><span class="comment">#可以关闭该#选项，但会导致数据库文件变的巨大</span></span><br><span class="line">rdbcompression yes</span><br><span class="line"><span class="comment">#指定本地数据库文件名</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"><span class="comment">#指定本地数据库路径</span></span><br><span class="line">dir /opt/redis-stable/db/</span><br><span class="line"><span class="comment">#指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能</span></span><br><span class="line"><span class="comment">#会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有</span></span><br><span class="line"><span class="comment">#的数据会在一段时间内只存在于内存中</span></span><br><span class="line">appendonly no</span><br><span class="line"><span class="comment">#指定更新日志条件，共有3个可选值：</span></span><br><span class="line"><span class="comment">#no：表示等操作系统进行数据缓存同步到磁盘（快）</span></span><br><span class="line"><span class="comment">#always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）</span></span><br><span class="line"><span class="comment">#everysec：表示每秒同步一次（折衷，默认值）</span></span><br><span class="line">appendfsync everysec</span><br></pre></td></tr></table></figure></li><li><p>修改<code>redis</code>目录的所有者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R taoyi /opt/redis-stable</span><br></pre></td></tr></table></figure></li></ol><h5 id="启动Redis服务"><a href="#启动Redis服务" class="headerlink" title="启动Redis服务"></a>启动Redis服务</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./opt/redis-stable/bin/redis-server ./opt/redis-stable/etc/redis.conf</span><br></pre></td></tr></table></figure><h5 id="访问Redis服务"><a href="#访问Redis服务" class="headerlink" title="访问Redis服务"></a>访问Redis服务</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./opt/redis-stable/bin/redis-cli</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;下载安装包&quot;&gt;&lt;a href=&quot;#下载安装包&quot; class=&quot;headerlink&quot; title=&quot;下载安装包&quot;&gt;&lt;/a&gt;下载安装包&lt;/h5&gt;&lt;p&gt;下载稳定版本的安装包&lt;a href=&quot;http://download.redis.io/redis-stable.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;redis-stable&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;安装Redis&quot;&gt;&lt;a href=&quot;#安装Redis&quot; class=&quot;headerlink&quot; title=&quot;安装Redis&quot;&gt;&lt;/a&gt;安装Redis&lt;/h5&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tar -xvf redis-stable.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cp ./redis-stable /opt/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; /opt/redis-stable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo make &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo make install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://shadow000902.space/categories/Tools/"/>
    
    
      <category term="redis" scheme="http://shadow000902.space/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Mac上MySQL的简单使用</title>
    <link href="http://shadow000902.space/2017/06/03/Mac%E4%B8%8AMySQL%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://shadow000902.space/2017/06/03/Mac上MySQL的简单使用/</id>
    <published>2017-06-03T09:20:13.000Z</published>
    <updated>2017-12-11T05:27:19.443Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>启动、停止、重启MySQL服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/local/MySQL/support-files/mysql.server start</span><br><span class="line">sudo /usr/local/mysql/support-files/mysql.server stop</span><br><span class="line">sudo /usr/local/mysql/support-files/mysql.server restart</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>登录MySQL数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h 地址 -P 端口 -u 用户名 -p 密码</span><br></pre></td></tr></table></figure></li><li><p>查看数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure></li><li><p>查看当前库的所有表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure></li><li><p>字符匹配查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from database where Attributes like &quot;%SQL%&quot;;# 查询 Attributes 中包含 SQL 字符的数据</span><br><span class="line">select * from database where Attributes like &quot;a%b&quot;;# 查询 Attributes 中以 a 开头以 b 结尾的字符串数据</span><br><span class="line">select * from database where Attributes like &quot;m_n&quot;;# 查询 Attributes 中以 m 开头以 n 结尾的3个字符的数据，中间 _ 只能代表一个字符</span><br></pre></td></tr></table></figure></li><li><p>多条件查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from database where Attributes1=a and Attributes2 like &quot;My_SQL&quot;;</span><br><span class="line">select * from database where Attributes1=a or Attributes2 like &quot;My_SQL&quot;;</span><br></pre></td></tr></table></figure></li><li><p>去除结果中的重复行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select distinct Attributes from database;</span><br></pre></td></tr></table></figure></li><li><p>对查询结果进行排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from database orderby id desc;# 倒叙排列</span><br><span class="line">select * from database orderby id asc;# 正序排列</span><br></pre></td></tr></table></figure></li><li><p>分组查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select name,id from database GROUP BY id;</span><br><span class="line">select name,id from database GROUP BY name,id;# 当id字段的值相等时，再按照name字段分组</span><br></pre></td></tr></table></figure></li><li><p>限制查询结果的数量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from database orderby id asc limit 2,3;# 取两条数据，正序，从第三条开始</span><br><span class="line">select * from database orderby id desc limit 2,3;# 取两条数据，倒序，从倒数第三条结束，只显示倒数前两条</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;启动、停止、重启MySQL服务&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo /usr/local/MySQL/support-files/mysql.server start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo /usr/local/mysql/support-files/mysql.server stop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo /usr/local/mysql/support-files/mysql.server restart&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Database" scheme="http://shadow000902.space/categories/Database/"/>
    
    
      <category term="mysql" scheme="http://shadow000902.space/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mac切换Terminal为zsh</title>
    <link href="http://shadow000902.space/2017/05/18/Mac%E5%88%87%E6%8D%A2Terminal%E4%B8%BAzsh/"/>
    <id>http://shadow000902.space/2017/05/18/Mac切换Terminal为zsh/</id>
    <published>2017-05-18T09:17:39.000Z</published>
    <updated>2017-12-11T05:27:19.358Z</updated>
    
    <content type="html"><![CDATA[<h5 id="下载一个-oh-my-zsh-配置"><a href="#下载一个-oh-my-zsh-配置" class="headerlink" title="下载一个 .oh-my-zsh 配置"></a>下载一个 .oh-my-zsh 配置</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br></pre></td></tr></table></figure>  <a id="more"></a><h5 id="创建新的配置"><a href="#创建新的配置" class="headerlink" title="创建新的配置"></a>创建新的配置</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp ~/.zshrc ~/.zshrc.orig                                   <span class="comment"># 如果已经有一个 .zshrc 文件，备份一下</span></span><br><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br></pre></td></tr></table></figure><h5 id="更新新的配置文件"><a href="#更新新的配置文件" class="headerlink" title="更新新的配置文件"></a>更新新的配置文件</h5><p>如果有些环境变量配置在<code>~/.bash_profile</code>的话，需要在新的配置里进行刷新<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">export</span> ZSH=~/.oh-my-zsh/</span><br><span class="line">...</span><br><span class="line">ZSH_THEME=<span class="string">"fino-time"</span>                   <span class="comment"># 设置选择的主题。默认是robbyrussell</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="built_in">source</span> <span class="variable">$ZSH</span>/oh-my-zsh.sh</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h5 id="优化-terminal-样式"><a href="#优化-terminal-样式" class="headerlink" title="优化 terminal 样式"></a>优化 terminal 样式</h5><img src="/2017/05/18/Mac切换Terminal为zsh/终端样式修改.png" title="终端样式修改"><h5 id="切换-Terminal-到-zsh"><a href="#切换-Terminal-到-zsh" class="headerlink" title="切换 Terminal 到 zsh"></a>切换 Terminal 到 zsh</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><p>重启一下 Terminal 之后，就生效了。</p><h5 id="效果如图"><a href="#效果如图" class="headerlink" title="效果如图"></a>效果如图</h5><img src="/2017/05/18/Mac切换Terminal为zsh/Terminal效果图.png" title="Terminal效果图"><h5 id="如果使用-fino-time-主题"><a href="#如果使用-fino-time-主题" class="headerlink" title="如果使用 fino-time 主题"></a>如果使用 fino-time 主题</h5><p>如果使用该主题的话，会遇到一个错误：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zsh: <span class="built_in">command</span> not found: rvm-prompt</span><br><span class="line">╭─taoyi at TaoYi-Mac <span class="keyword">in</span> ~ using ‹› 17-05-18 - 20:44:28</span><br><span class="line">╰─○</span><br></pre></td></tr></table></figure></p><p>每次一条命令前都会有这条报错。<br>主要原因就是该主题依赖于<code>rvm-prompt</code>，这样的话，就需要安装上该组件。<br>安装步骤：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install gnupg gnupg2</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3</span><br><span class="line">\curl -sSL https://get.rvm.io | bash -s stable</span><br></pre></td></tr></table></figure><p>在<code>~/.zshrc</code>文件中加入支持：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> rvm-prompt=<span class="variable">$HOME</span>/.rvm/bin/rvm-prompt</span><br></pre></td></tr></table></figure></p><p>这样后，就完美了，不会再有这个报错了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;下载一个-oh-my-zsh-配置&quot;&gt;&lt;a href=&quot;#下载一个-oh-my-zsh-配置&quot; class=&quot;headerlink&quot; title=&quot;下载一个 .oh-my-zsh 配置&quot;&gt;&lt;/a&gt;下载一个 .oh-my-zsh 配置&lt;/h5&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Tips" scheme="http://shadow000902.space/categories/Tips/"/>
    
    
      <category term="terminal" scheme="http://shadow000902.space/tags/terminal/"/>
    
  </entry>
  
  <entry>
    <title>Robot-Framework踩坑总结</title>
    <link href="http://shadow000902.space/2017/05/15/Robot-Framework%E8%B8%A9%E5%9D%91%E6%80%BB%E7%BB%93/"/>
    <id>http://shadow000902.space/2017/05/15/Robot-Framework踩坑总结/</id>
    <published>2017-05-15T12:16:55.000Z</published>
    <updated>2018-01-10T07:34:05.998Z</updated>
    
    <content type="html"><![CDATA[<h5 id="List中的字典循环"><a href="#List中的字典循环" class="headerlink" title="List中的字典循环"></a>List中的字典循环</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">*** Test Cases ***</span><br><span class="line">takeValueFromCircle</span><br><span class="line"># 从返回结果中提取出List</span><br><span class="line">@&#123;items&#125;=    set variable    $&#123;json[&quot;data&quot;][&quot;items&quot;]&#125;</span><br><span class="line"># 循环List中的item</span><br><span class="line">: FOR    $&#123;params&#125;    IN    @&#123;items&#125;</span><br><span class="line"># 把item中的一个参数（每个参数都是一个字典）转化为Str格式，顺便去除 &quot;u&quot; 标识</span><br><span class="line">\    $&#123;params&#125;    Dumps    $&#123;params&#125;</span><br><span class="line"># 把字典转化为json</span><br><span class="line">\    $&#123;params&#125;    to json    $&#123;params&#125;</span><br><span class="line">#\    Log    $&#123;params[&quot;carId&quot;]&#125;</span><br><span class="line"># 对每个item取出来的字典中的某个字段进行判断，如果是需要的值，就把另一个需要的值取出来，并打印出来</span><br><span class="line">\    RUN KEYWORD IF    &quot;$&#123;params[&quot;carInfo&quot;][&quot;status&quot;]&#125;&quot;==&quot;评估中&quot;    Log    $&#123;params[&quot;carId&quot;]&#125;</span><br></pre></td></tr></table></figure>  <a id="more"></a><h5 id="wait-until-keyword-succeeds关键字使用"><a href="#wait-until-keyword-succeeds关键字使用" class="headerlink" title="wait until keyword succeeds关键字使用"></a>wait until keyword succeeds关键字使用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">*** Test Cases ***</span><br><span class="line">&quot;Wait until ...&quot; with normal error</span><br><span class="line">    # Keyword is run multiple times, until timeout. Each run gives an exception</span><br><span class="line">    # traceback.</span><br><span class="line">    Wait Until Keyword Succeeds    1 sec    0.5    Keyword With Normal Error</span><br><span class="line"></span><br><span class="line">&quot;Wait until ...&quot; with AttributeError</span><br><span class="line">    # Keyword is run only once, even if there is time left until the timeout.</span><br><span class="line">    # There is no exception traceback like above.</span><br><span class="line">    Wait Until Keyword Succeeds    1 sec    0.5    Keyword With AttributeError</span><br><span class="line"></span><br><span class="line">*** Keywords ***</span><br><span class="line">Keyword With Normal Error</span><br><span class="line">    $&#123;obj&#125; =    Evaluate    &quot;foo&quot;</span><br><span class="line">    Should Be Equal As Strings    $&#123;obj&#125;    &quot;bar&quot;</span><br><span class="line"></span><br><span class="line">Keyword With AttributeError</span><br><span class="line">    # In real life, this would get an object and use some of its (valid) attributes.</span><br><span class="line">    # In case of an error, and in Teardown context (continue-on-failure), a None object</span><br><span class="line">    # is returned instead causing the next keyword to create an AttributeError.</span><br><span class="line">    $&#123;obj&#125; =    Evaluate    &quot;foo&quot;</span><br><span class="line">    Should Be Equal As Strings    $&#123;obj.bad_attr&#125;    &quot;foo&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">*** Test Cases ***</span><br><span class="line">003.导出进度-/pc/export/taizhangaction/progress.json</span><br><span class="line">    wait until keyword succeeds    3 min    5 sec    导出进度-/pc/export/taizhangaction/progress.json</span><br><span class="line">    </span><br><span class="line">*** Keywords ***</span><br><span class="line">导出进度-/pc/export/taizhangaction/progress.json</span><br><span class="line">    $&#123;params&#125;=    Create Dictionary    jobId=$&#123;jobId&#125;</span><br><span class="line">    &amp;&#123;json&#125;=    Rest.Post    /pc/export/taizhangaction/progress.json    $&#123;params&#125;    form    $&#123;hosts[&quot;erp-online&quot;]&#125;</span><br><span class="line">    Should Be True    $&#123;json[&quot;success&quot;]&#125;</span><br><span class="line">should be equal as strings    $&#123;json[&quot;data&quot;][&quot;progress&quot;]&#125;    100</span><br><span class="line">$&#123;URL&#125;=    set variable    $&#123;json[&quot;data&quot;][&quot;url&quot;]&#125;</span><br></pre></td></tr></table></figure><p>5秒执行一次关键字，如果<code>${json[&quot;data&quot;][&quot;progress&quot;]}!=100</code>，执行一次关键字，直到相等时，执行一次关键字中的最后一行代码。</p><h5 id="一个完整的独立case"><a href="#一个完整的独立case" class="headerlink" title="一个完整的独立case"></a>一个完整的独立case</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">*** Test Cases ***</span><br><span class="line">登录</span><br><span class="line">    $&#123;dict&#125;=    Create Dictionary    Content-Type=application/x-www-form-urlencoded</span><br><span class="line">    Create Session    _session    http://dfc.souche.com    $&#123;dict&#125;</span><br><span class="line">    $&#123;params&#125;=    Create Dictionary    loginName=15558135526    password=souche2015    jPushId=jpushid001</span><br><span class="line">    $&#123;response&#125;=    Post Request    _session    /rest/account/login    params=$&#123;params&#125;    headers=$&#123;dict&#125;</span><br><span class="line">    Should Be Equal As Strings    $&#123;response.status_code&#125;    200</span><br><span class="line">    &amp;&#123;json&#125;=    Set Variable    $&#123;response.json()&#125;</span><br><span class="line">    Should Be True    &amp;&#123;json&#125;[success]</span><br><span class="line">    Log    &amp;&#123;json&#125;[success]</span><br></pre></td></tr></table></figure><h5 id="对请求proxy、tag、headers、session、response的整体封装"><a href="#对请求proxy、tag、headers、session、response的整体封装" class="headerlink" title="对请求proxy、tag、headers、session、response的整体封装"></a>对请求proxy、tag、headers、session、response的整体封装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">*** Keywords ***</span><br><span class="line">Rest.Post</span><br><span class="line">    [Arguments]    $&#123;uri&#125;    $&#123;params&#125;    $&#123;type&#125;=form    $&#123;cur_host&#125;=$&#123;EMPTY&#125;</span><br><span class="line">    #设置代理服务器，这样方便调试代码</span><br><span class="line">    &amp;&#123;proxy&#125;=    Create Dictionary    http=http://127.0.0.1:8888</span><br><span class="line">    #根据tag来区分请求应使用哪个host</span><br><span class="line">    $&#123;host&#125;=    Set Variable    \ \ $&#123;EMPTY&#125;</span><br><span class="line">    : FOR    $&#123;tag&#125;    IN    @&#123;TEST TAGS&#125;</span><br><span class="line">    \    $&#123;host&#125;=    Evaluate    $hosts.get($tag,&quot;&quot;)</span><br><span class="line">    \    Run Keyword If    &quot;$&#123;host&#125;&quot;!=&quot;&quot;    Exit For Loop</span><br><span class="line">    #创建session,跨域模式，不需要维护Session</span><br><span class="line">    Run Keyword If    &quot;$&#123;cur_host&#125;&quot;!=&quot;&quot;    Create Session    _session    $&#123;cur_host&#125;    proxies=$&#123;proxy&#125;</span><br><span class="line">    ...    ELSE    Create Session    _session    $&#123;host&#125;    proxies=$&#123;proxy&#125;</span><br><span class="line">    #已登录的用户在请求中带上token</span><br><span class="line">    Run Keyword If    &quot;$&#123;token&#125;&quot;!=&quot;&quot;    Set To Dictionary    $&#123;params&#125;    token=$&#123;token&#125;</span><br><span class="line">    Log    $&#123;token&#125;</span><br><span class="line">    #根据请求数据的类型设置header</span><br><span class="line">    &amp;&#123;headers&#125;=    Run Keyword If    &quot;$&#123;type&#125;&quot;==&quot;form&quot;    Create Dictionary    Content-Type=application/x-www-form-urlencoded    TT=$&#123;token&#125;</span><br><span class="line">    ...    ELSE IF    &quot;$&#123;type&#125;&quot;==&quot;json&quot;    Create Dictionary    Content-Type=application/json    TT=$&#123;token&#125;</span><br><span class="line">    $&#123;response&#125;=    Post Request    _session    $&#123;uri&#125;    $&#123;params&#125;    headers=&amp;&#123;headers&#125;</span><br><span class="line">    Should Be Equal As Strings    $&#123;response.status_code&#125;    200</span><br><span class="line">    &amp;&#123;json&#125;=    Set Variable    $&#123;response.json()&#125;</span><br><span class="line">    [Return]    &amp;&#123;json&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;List中的字典循环&quot;&gt;&lt;a href=&quot;#List中的字典循环&quot; class=&quot;headerlink&quot; title=&quot;List中的字典循环&quot;&gt;&lt;/a&gt;List中的字典循环&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;*** Test Cases ***&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;takeValueFromCircle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	# 从返回结果中提取出List&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@&amp;#123;items&amp;#125;=    set variable    $&amp;#123;json[&amp;quot;data&amp;quot;][&amp;quot;items&amp;quot;]&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	# 循环List中的item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	: FOR    $&amp;#123;params&amp;#125;    IN    @&amp;#123;items&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	# 把item中的一个参数（每个参数都是一个字典）转化为Str格式，顺便去除 &amp;quot;u&amp;quot; 标识&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	\    $&amp;#123;params&amp;#125;    Dumps    $&amp;#123;params&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	# 把字典转化为json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	\    $&amp;#123;params&amp;#125;    to json    $&amp;#123;params&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	#\    Log    $&amp;#123;params[&amp;quot;carId&amp;quot;]&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	# 对每个item取出来的字典中的某个字段进行判断，如果是需要的值，就把另一个需要的值取出来，并打印出来&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	\    RUN KEYWORD IF    &amp;quot;$&amp;#123;params[&amp;quot;carInfo&amp;quot;][&amp;quot;status&amp;quot;]&amp;#125;&amp;quot;==&amp;quot;评估中&amp;quot;    Log    $&amp;#123;params[&amp;quot;carId&amp;quot;]&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="RobotFramework" scheme="http://shadow000902.space/categories/RobotFramework/"/>
    
    
      <category term="robot-framework" scheme="http://shadow000902.space/tags/robot-framework/"/>
    
  </entry>
  
  <entry>
    <title>Charles常用的九大功能</title>
    <link href="http://shadow000902.space/2017/04/25/Charles%E5%B8%B8%E7%94%A8%E7%9A%84%E4%B9%9D%E5%A4%A7%E5%8A%9F%E8%83%BD/"/>
    <id>http://shadow000902.space/2017/04/25/Charles常用的九大功能/</id>
    <published>2017-04-25T09:57:15.000Z</published>
    <updated>2017-12-11T05:27:19.457Z</updated>
    
    <content type="html"><![CDATA[<h5 id="过滤网络请求"><a href="#过滤网络请求" class="headerlink" title="过滤网络请求"></a>过滤网络请求</h5><h6 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h6><p>在主界面的中部的 Filter 栏中填入需要过滤出来的关键字。</p><h6 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h6><p>在 Charles 的菜单栏选择 <code>“Proxy”-&gt;”Recording Settings”</code>，然后选择 Include 栏，选择添加一个项目，然后填入需要监控的协议，主机地址，端口号。这样就可以只截取目标网站的封包了。</p>  <a id="more"></a><img src="/2017/04/25/Charles常用的九大功能/过滤网络请求.png" title="过滤网络请求"><p>通常情况下，我们使用方法一做一些临时性的封包过滤，使用方法二做一些经常性的封包过滤。</p><h6 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h6><p>在想过滤的网络请求上右击，选择 “Focus”，之后在 Filter 一栏勾选上 Focussed 一项，这种方式可以临时性的，快速地过滤出一些没有通过关键字的一类网络请求。</p><h5 id="截取客户端上的网络请求"><a href="#截取客户端上的网络请求" class="headerlink" title="截取客户端上的网络请求"></a>截取客户端上的网络请求</h5><h6 id="Charles上的设置"><a href="#Charles上的设置" class="headerlink" title="Charles上的设置"></a>Charles上的设置</h6><p>打开Charles代理功能。在 Charles 的菜单栏上选择 “Proxy”-&gt;”Proxy Settings”，填入代理端口 8888，并且勾上 “Enable transparent HTTP proxying” 就完成了在 Charles 上的设置<br><img src="/2017/04/25/Charles常用的九大功能/打开Charles代理功能.png" title="打开Charles代理功能"></p><h6 id="客户端上设置网络代理"><a href="#客户端上设置网络代理" class="headerlink" title="客户端上设置网络代理"></a>客户端上设置网络代理</h6><img src="/2017/04/25/Charles常用的九大功能/客户端上代理设置.png" title="客户端上代理设置"><p>设置好之后，我们打开 客户端 上的任意需要网络通讯的程序，就可以看到 Charles 弹出 客户端 请求连接的确认菜单（如下图所示），点击 “Allow” 即可完成设置。<br><img src="/2017/04/25/Charles常用的九大功能/同意请求.png" title="同意请求"></p><h5 id="抓取-Https-请求"><a href="#抓取-Https-请求" class="headerlink" title="抓取 Https 请求"></a>抓取 Https 请求</h5><h6 id="客户端安装证书"><a href="#客户端安装证书" class="headerlink" title="客户端安装证书"></a>客户端安装证书</h6><p>点击 Charles 的顶部菜单，选择 “Help” -&gt; “SSL Proxying” -&gt; “Install Charles Root Certificate on a Mobile Device or Remote Browser”<br><img src="/2017/04/25/Charles常用的九大功能/安装证书链接.png" title="安装证书链接"><br>按照我们之前说的教程，在设备上设置好 Charles 为代理后，在手机浏览器中访问地址：chls.pro/ssl，即可打开证书安装的界面，安装完证书后，就可以截取手机上的 Https 通讯内容了。不过同样需要注意，默认情况下 Charles 并不做截取，你还需要在要截取的网络请求上右击，选择 SSL proxy 菜单项。<br><img src="/2017/04/25/Charles常用的九大功能/要抓取HTTPS请求的域名.png" title="要抓取HTTPS请求的域名"><br>还可以直接在对应的 HTTPS 请求上右键，选择<code>Enable SSL Proxying</code>。</p><h5 id="模拟慢速网络"><a href="#模拟慢速网络" class="headerlink" title="模拟慢速网络"></a>模拟慢速网络</h5><p>在做移动开发的时候，我们常常需要模拟慢速网络或者高延迟的网络，以测试在移动网络下，应用的表现是否正常。Charles 对此需求提供了很好的支持。<br>在 Charles 的菜单上，选择 “Proxy”-&gt;”Throttle Setting” 项，在之后弹出的对话框中，我们可以勾选上 “Enable Throttling”，并且可以设置 Throttle Preset 的类型。如下图所示：<br><img src="/2017/04/25/Charles常用的九大功能/慢速网络设置.png" title="慢速网络设置"><br>如果我们只想模拟指定网站的慢速网络，可以再勾选上图中的 “Only for selected hosts” 项，然后在对话框的下半部分设置中增加指定的 hosts 项即可。</p><h5 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h5><p>我们可以使用 Charles 的 Repeat 功能来简单地测试服务器的并发处理能力，方法如下。<br>我们在想打压的网络请求上（POST 或 GET 请求均可）右击，然后选择 「Repeat Advanced」菜单项，接着我们就可以在弹出的对话框中，选择打压的并发线程数以及打压次数，确定之后，即可开始打压。<br><img src="/2017/04/25/Charles常用的九大功能/压力测试.png" title="压力测试"></p><h5 id="修改服务器返回内容"><a href="#修改服务器返回内容" class="headerlink" title="修改服务器返回内容"></a>修改服务器返回内容</h5><p>有些时候我们想让服务器返回一些指定的内容，方便我们调试一些特殊情况。例如列表页面为空的情况，数据异常的情况，部分耗时的网络请求超时的情况等。如果没有 Charles，要服务器配合构造相应的数据显得会比较麻烦。这个时候，使用 Charles 相关的功能就可以满足我们的需求。<br>根据具体的需求，Charles 提供了 Map 功能、 Rewrite 功能以及 Breakpoints 功能，都可以达到修改服务器返回内容的目的。这三者在功能上的差异是：<br>Map 功能适合长期地将某一些请求重定向到另一个网络地址或本地文件。<br>Rewrite 功能适合对网络请求进行一些正则替换。<br>Breakpoints 功能适合做一些临时性的修改。</p><h5 id="Map-重定向功能"><a href="#Map-重定向功能" class="headerlink" title="Map 重定向功能"></a>Map 重定向功能</h5><p>Charles 的 Map 功能分 Map Remote 和 Map Local 两种，顾名思义，Map Remote 是将指定的网络请求重定向到另一个网址请求地址，Map Local 是将指定的网络请求重定向到本地文件。<br>在 Charles 的菜单中，选择 “Tools”-&gt;”Map Remote” 或 “Map Local” 即可进入到相应功能的设置页面。</p><h6 id="Map-Remote"><a href="#Map-Remote" class="headerlink" title="Map Remote"></a>Map Remote</h6><p>对于 Map Remote 功能，我们需要分别填写网络重定向的源地址和目的地址，对于不需要限制的条件，可以留空。<br><img src="/2017/04/25/Charles常用的九大功能/MapRemote.png" title="MapRemote"></p><h6 id="Map-Local"><a href="#Map-Local" class="headerlink" title="Map Local"></a>Map Local</h6><p>对于 Map Local 功能，我们需要填写的重定向的源地址和本地的目标文件。对于有一些复杂的网络请求结果，我们可以先使用 Charles 提供的 “Save Response…” 功能，将请求结果保存到本地（如下图所示），然后稍加修改，成为我们的目标映射文件。</p><h5 id="Rewrite-功能"><a href="#Rewrite-功能" class="headerlink" title="Rewrite 功能"></a>Rewrite 功能</h5><p>Rewrite 功能功能适合对某一类网络请求进行一些正则替换，以达到修改结果的目的。<br><img src="/2017/04/25/Charles常用的九大功能/RewriteRule.png" title="RewriteRule"><br>设置完后，每次请求到对应的值就会被替代。</p><h5 id="Breakpoints-功能"><a href="#Breakpoints-功能" class="headerlink" title="Breakpoints 功能"></a>Breakpoints 功能</h5><p>上面提供的 Rewrite 功能最适合做批量和长期的替换，但是很多时候，我们只是想临时修改一次网络请求结果，这个时候，使用 Rewrite 功能虽然也可以达到目的，但是过于麻烦，对于临时性的修改，我们最好使用 Breakpoints 功能。<br>Breakpoints 功能类似我们在 Xcode 中设置的断点一样，当指定的网络请求发生时，Charles 会截获该请求，这个时候，我们可以在 Charles 中临时修改网络请求的返回内容。</p><h6 id="breakpoints⭐️-方法实践过程"><a href="#breakpoints⭐️-方法实践过程" class="headerlink" title="breakpoints⭐️ 方法实践过程"></a>breakpoints⭐️ 方法实践过程</h6><p>在charless上要mock数据的url上右点击，弹出的列表选中breakpoint，要点击两次 Excute 才能完成一次 HTTP 请求，原因是，Charles 的断点功能分别提供了修改 HTTP Request 和 Response 的机会映射本地文件。<br><img src="/2017/04/25/Charles常用的九大功能/EditRequest.png" title="EditRequest"><br><img src="/2017/04/25/Charles常用的九大功能/EditResponse.png" title="EditResponse"><br>通过修改 response 就可以修改请求的结果成为自己想要的结果，从而在客户端上查看效果。</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;过滤网络请求&quot;&gt;&lt;a href=&quot;#过滤网络请求&quot; class=&quot;headerlink&quot; title=&quot;过滤网络请求&quot;&gt;&lt;/a&gt;过滤网络请求&lt;/h5&gt;&lt;h6 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一&quot;&gt;&lt;/a&gt;方法一&lt;/h6&gt;&lt;p&gt;在主界面的中部的 Filter 栏中填入需要过滤出来的关键字。&lt;/p&gt;
&lt;h6 id=&quot;方法二&quot;&gt;&lt;a href=&quot;#方法二&quot; class=&quot;headerlink&quot; title=&quot;方法二&quot;&gt;&lt;/a&gt;方法二&lt;/h6&gt;&lt;p&gt;在 Charles 的菜单栏选择 &lt;code&gt;“Proxy”-&amp;gt;”Recording Settings”&lt;/code&gt;，然后选择 Include 栏，选择添加一个项目，然后填入需要监控的协议，主机地址，端口号。这样就可以只截取目标网站的封包了。&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://shadow000902.space/categories/Tools/"/>
    
    
      <category term="charles" scheme="http://shadow000902.space/tags/charles/"/>
    
  </entry>
  
</feed>
