<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shadow&#39;S Site</title>
  <icon>https://www.gravatar.com/avatar/7b03ab113f2f8c26715b5f45cee6f38f</icon>
  <subtitle>谁当声震人间，必长久深自缄默。谁当划破闪电，必长久如云漂泊。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://shadow000902.space/"/>
  <updated>2018-04-28T18:30:25.123Z</updated>
  <id>http://shadow000902.space/</id>
  
  <author>
    <name>shadow</name>
    <email>shadow000902@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>测试用例设计思路总结</title>
    <link href="http://shadow000902.space/2018/04/29/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF%E6%80%BB%E7%BB%93/"/>
    <id>http://shadow000902.space/2018/04/29/测试用例设计思路总结/</id>
    <published>2018-04-28T18:21:42.000Z</published>
    <updated>2018-04-28T18:30:25.123Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>模块的层级不能太多，有必要的话可通过“2级模块1-3级模块1”的形式，减少模块的层级</p></li><li><p>模块下，分“字段校验”和“功能校验”，划分依据呢？</p></li></ol><p>建议：把可执行一个完整功能、业务功能的用例放在“功能校验”下，否则放在“字段校验”下，比如上面，添加帐号是一个需要实现的功能，而添加帐号页面中的姓名则只是实现该功能的需要的一个元素，如果只给定这个元素是无法完成添加操作的。这个划分可能需要多写用例才能拿捏得比较准。</p><ol><li>这样划分的好处是，比较能突出重点，特别是时间来不及的情况下，可能只执行“功能校验”的用例，当然也视情况而定，有些字段校验也很重要，属于重点测试内容。</li></ol><p>对于增加或修改，还有几个检查点：<br>1.打开这个弹出框的默认值检查；<br>2.连续点击确定按钮，看是否会重复生成记录；<br>3.取消功能测试；<br>4.账号的唯一性检查。还要注意并发操作；<br>5.多增加一些记录，覆盖不同字段的有效等价类；<br>6.session超时后，增加或修改；<br>7.填写内容与存入数据库实际值比较（可能数据库支持字符集与前端输入字符集不同导致问题）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;模块的层级不能太多，有必要的话可通过“2级模块1-3级模块1”的形式，减少模块的层级&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;模块下，分“字段校验”和“功能校验”，划分依据呢？&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;建议：把可执行一个完整功能、业务功能的用例放在
      
    
    </summary>
    
      <category term="TestTheory" scheme="http://shadow000902.space/categories/TestTheory/"/>
    
    
      <category term="测试用例" scheme="http://shadow000902.space/tags/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>接口测试用例设计总结</title>
    <link href="http://shadow000902.space/2018/04/23/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93/"/>
    <id>http://shadow000902.space/2018/04/23/接口测试用例设计总结/</id>
    <published>2018-04-23T12:09:10.000Z</published>
    <updated>2018-05-03T10:04:37.161Z</updated>
    
    <content type="html"><![CDATA[<h4 id="接口测试定义"><a href="#接口测试定义" class="headerlink" title="接口测试定义"></a>接口测试定义</h4><h4 id="接口测试主要验证点"><a href="#接口测试主要验证点" class="headerlink" title="接口测试主要验证点"></a>接口测试主要验证点</h4><ul><li>针对输入，可按照参数类型进行设计；</li><li>针对接口处理，可按照逻辑进行设计；</li><li><p>针对输出，可根据结果进行分析设计。</p><a id="more"></a></li></ul><h4 id="接口测试用例设计"><a href="#接口测试用例设计" class="headerlink" title="接口测试用例设计"></a>接口测试用例设计</h4><h5 id="针对输入设计"><a href="#针对输入设计" class="headerlink" title="针对输入设计"></a>针对输入设计</h5><ol><li>数值型（int, long, float, double等）<ul><li>如果参数规定了值的范围，则需要考虑等价类取值范围内、取值范围外，取值的边界，如有需要，可能会遍历取值范围内的各个值。</li><li>参数数据类型限制；<ul><li>逆向用例：针对每个参数都设计1条参数值类型不符的逆向用例</li></ul></li><li>参数数据类型自身的数据范围值限制<ul><li>正向用例：针对所有参数，设计1条每个参数的参数值在数据范围内为最大值的正向用例</li><li>逆向用例：针对每个参数(假设n个)，设计n条每个参数的参数值都超出数据范围最大值的逆向用例</li><li>逆向用例：针对每个参数(假设n个)，设计n条每个参数的参数值都小于数据范围最小值的逆向用例<br>常见问题和风险：</li></ul></li><li>特殊值处理不当导致程序异常退出；</li><li>类型边界溢出；</li><li>取值范围外值未返回正确的错误信息等</li></ul></li><li>字符串类型<ul><li>边界值：string的最大长度；</li><li>特殊值：空字符；</li><li>字符串内容可考虑类型：数字，非数字；</li><li>特殊字符</li><li>如果是用户输入且其他用户不可见的内容，则还需要考虑敏感字是否被正常过滤<br>可能出现的问题和风险：</li><li>传入非特定类型程序异常退出；</li><li>超长字符未进行处理，导致存储、显示等异常；</li><li>其他用户可见设置的敏感字</li></ul></li><li>数组或链表<ul><li>正常取值、范围外；</li><li>边界值；</li><li>特殊值：0个；</li><li>合法ID和不合法的；</li><li>重复的ID等<br>可能存在的问题和风险：</li><li>0个item时程序异常退出；</li><li>重复的item处理时未去重导致结果异常等</li></ul></li><li><p>结构体</p><ul><li>结构体(struct)是一些元素的结合，元素实际也是数值型，字符串型，数组或链表。</li></ul></li><li><p>是否满足前提条件</p><ul><li>有些接口需要满足前置条件，才可成功获取数据。常见的，需要登陆Token。<br>逆向用例：</li><li>针对是否满足前置条件(假设为n个条件)，设计0~n条用例</li></ul></li><li>是否携带默认值参数<ul><li>带默认值的参数都不填写、不传参，必填参数都填写正确且存在的“常规”值，其它不填写，设计1条用例；</li></ul></li><li>业务规则、功能需求<ul><li>这里根据实际情况，结合接口参数说明，可能需要设计n条正向用例和逆向用例</li></ul></li><li>参数是否必填<br>逆向用例：<ul><li>针对每个必填参数，都设计1条参数值为空的逆向用例</li></ul></li><li>参数之间是否存在关联<ul><li>有些参数彼此之间存在相互制约的关系<br>逆向用例：</li><li>根据实际情况，可能需要设计0~n条用例</li></ul></li></ol><p>以上几个方面考虑全的话，基本可以做到如下几个方面的覆盖：</p><ul><li>主流程测试用例：正常的主流程功能校验；</li><li>分支流测试用例：正常的分支流功能校验；</li><li>异常流测试用例：异常容错校验</li></ul><h5 id="针对逻辑设计"><a href="#针对逻辑设计" class="headerlink" title="针对逻辑设计"></a>针对逻辑设计</h5><ol><li>约束条件分析<ul><li>数值限制：</li><li>状态限制：登录状态等</li><li>关系限制：绑定的关系，好友关系等。<ul><li>例如，应该只能查询有关联关系的账号的信息。</li></ul></li><li>权限限制：需要对应权限才能操作对应的功能<br>用户进行操作时，在该操作的前端可以已经进行了约束条件的限制，故用户无法直接触发请求该接口。但是实际上，如果有其他手段：例如UI有bug或者通过技术手段直接调用接口，那么接口是否针对这些条件进行了限制就尤为重要。<br>常见的问题和风险：</li><li>约束条件判断不足，导致用户可通过特殊手段获取利益</li></ul></li><li>操作对象分析<ul><li>对象之间存在隔离，不能串<br>常见的问题和风险：</li><li>用户可访问非权限内的其他用户信息、敏感信息，从而利用这些信息谋取利益。</li></ul></li><li>状态转换分析<ul><li>状态之间转换存在严格定义，不能随意变换<br>常见的问题和风险：</li><li>可通过特殊手段达到原本不能的状态，从而谋取利益。</li></ul></li><li>时序分析<ul><li>客户端与服务端的交互用户可见的只有一次，期间存在着用户不可见的内部多次按顺序执行的调用逻辑，实际就是发起了一个有序的动作流，只有按照正确的顺序，才能得到正确的结果。<br>常见的问题和风险：</li><li>非顺序执行后，数据出现异常，可能还会出现程序其他异常</li><li>通过打乱顺序获取利益</li></ul></li></ol><h5 id="针对输出设计"><a href="#针对输出设计" class="headerlink" title="针对输出设计"></a>针对输出设计</h5><ol><li>针对输出结果<br>接口处理正确的结果可能只有一个，但是错误异常返回结果有很多情况很多值。如果知道返回结果有很多种，就可以针对不同结果设计用例。例如提交积分任务的时候我们通常能想到的是返回正确和错误，错误可能想到：无效任务，无效登录态，但是不一定能否完全覆盖所有错误码，而接口返回定义的返回码可以设计更多用例。<br>覆盖返回码也是用例设计的一种思路。<br>常见问题和风险：<ul><li>错误前端处理不足，导致前端异常；</li><li>错误提示处理不当，导致用户看到晦涩的错误码；</li><li>错误提示不当，导致用户不知道哪里出了问题，如何解决。</li></ul></li><li>接口超时<br>接口正常情况下是有返回的，那么如果接口不返回呢？也就是说接口超时后的处理也是测试需要考虑的部分。<br>常见的问题及风险：<ul><li>未进行超时处理，导致整个流程阻塞</li><li>超时后又收到接口返回，导致逻辑出现错乱</li></ul></li></ol><h4 id="其他测试设计"><a href="#其他测试设计" class="headerlink" title="其他测试设计"></a>其他测试设计</h4><h5 id="已废弃接口处理"><a href="#已废弃接口处理" class="headerlink" title="已废弃接口处理"></a>已废弃接口处理</h5><p>  已废弃协议，是指之前有定义，但是因为需求变更或其他原因，目前版本不用。这些接口虽然不再使用，但有可能代码并没有及时删除。如果利用技术手段调用这些接口，可能获取额外利益。<br>  新版本在考虑兼容旧版本的同时，还应做好相关废弃接口的检查，避免用户获得额外利益。</p><h5 id="接口设计合理性分析"><a href="#接口设计合理性分析" class="headerlink" title="接口设计合理性分析"></a>接口设计合理性分析</h5><ul><li>接口字段是否冗余；</li><li>接口是否冗余；</li><li>接口是否返回了调用方期望得到的信息；</li><li>接口定义是否可满足所有调用需求；</li><li>接口定义调用是否方便。</li></ul><h4 id="接口用例设计精简和优化"><a href="#接口用例设计精简和优化" class="headerlink" title="接口用例设计精简和优化"></a>接口用例设计精简和优化</h4><p>  在接口参数较多的情况下，如果每个参数都进行完整校验，将会是非常大的工作量，所以需要对接口用例进行精简和优化：<br>    ① 根据接口的使用对象(外部，系统内部)，有选择的去、留部分用例</p><pre><code>  - 如果开发于系统内部调用的，开发过程中，开发者肯定需要调用这些接口，如果类型错了，他们也就获取不到预期的数据，这些错误，他们肯定可以发现，所以，他们传递的参数值一般能保证类型正确。  - 内部调用，参数值不是外部手动输入的，输入数据长度、值大小可控，当然如果数据一直增长，那再大的类型可能都无法保证不超出，比如自动增长的商铺id② 根据接口的是否核心接口，有选择的去、留部分用例  - 核心接口，每个字段都需要验证  - 非核心接口，接口核心字段验证完成就可以③ 根据参数说明，及实际情况，有选择的去、留部分用例  - 部分参数的参数值是自定义的，比如 订单时间类型，就那几种，除非传错了，不然不可能超出范围④ 尽量在一个用例中验证尽量多的参数形式，但又得想办法尽量让验证范围最大化</code></pre><p>转载与：<a href="https://cloud.tencent.com/developer/article/1022322" target="_blank" rel="noopener">接口测试用例设计</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;接口测试定义&quot;&gt;&lt;a href=&quot;#接口测试定义&quot; class=&quot;headerlink&quot; title=&quot;接口测试定义&quot;&gt;&lt;/a&gt;接口测试定义&lt;/h4&gt;&lt;h4 id=&quot;接口测试主要验证点&quot;&gt;&lt;a href=&quot;#接口测试主要验证点&quot; class=&quot;headerlink&quot; title=&quot;接口测试主要验证点&quot;&gt;&lt;/a&gt;接口测试主要验证点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;针对输入，可按照参数类型进行设计；&lt;/li&gt;
&lt;li&gt;针对接口处理，可按照逻辑进行设计；&lt;/li&gt;
&lt;li&gt;&lt;p&gt;针对输出，可根据结果进行分析设计。&lt;/p&gt;
    
    </summary>
    
      <category term="TestTheory" scheme="http://shadow000902.space/categories/TestTheory/"/>
    
    
      <category term="接口" scheme="http://shadow000902.space/tags/%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>Python版本管理工具pyenv使用小结</title>
    <link href="http://shadow000902.space/2018/04/10/Python%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7pyenv%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/"/>
    <id>http://shadow000902.space/2018/04/10/Python版本管理工具pyenv使用小结/</id>
    <published>2018-04-10T12:31:28.000Z</published>
    <updated>2018-04-16T11:35:14.587Z</updated>
    
    <content type="html"><![CDATA[<h5 id="安装brew"><a href="#安装brew" class="headerlink" title="安装brew"></a>安装<code>brew</code></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure><h5 id="安装pyenv"><a href="#安装pyenv" class="headerlink" title="安装pyenv"></a>安装<code>pyenv</code></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install pyenv</span><br></pre></td></tr></table></figure><h5 id="把pyenv加入环境变量"><a href="#把pyenv加入环境变量" class="headerlink" title="把pyenv加入环境变量"></a>把<code>pyenv</code>加入环境变量</h5><p>如果使用的终端是<code>bash</code>，则编辑<code>~/.bashrc</code>，如果使用的终端是<code>zsh</code>，则编辑<code>~/.zshrc</code>，在该文件的最开头加入语句：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv init -)</span>"</span></span><br></pre></td></tr></table></figure></p><h5 id="pyenv常用基本命令"><a href="#pyenv常用基本命令" class="headerlink" title="pyenv常用基本命令"></a><code>pyenv</code>常用基本命令</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pyenv install --list                            <span class="comment"># List all available versions</span></span><br><span class="line">pyenv install &lt;version&gt;                         <span class="comment"># install python</span></span><br><span class="line">pyenv global &lt;version&gt;                          <span class="comment"># 全局设置python版本为指定版本</span></span><br><span class="line">pyenv global 2.7.14 3.6.4                       <span class="comment"># 指定多个python版本为全局版本，有顺序</span></span><br><span class="line">pyenv <span class="built_in">local</span> &lt;version&gt;                           <span class="comment"># 设置当前路径下python版本为指定版本</span></span><br><span class="line">pyenv shell &lt;version&gt;                           <span class="comment"># 设置当前shell窗口使用的python版本为指定版本</span></span><br><span class="line">pyenv versions                                  <span class="comment"># 列举所有版本的python，打``*``的为当前指定的全局版本</span></span><br><span class="line">pyenv version                                   <span class="comment"># 列举已经安装的版本</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;安装brew&quot;&gt;&lt;a href=&quot;#安装brew&quot; class=&quot;headerlink&quot; title=&quot;安装brew&quot;&gt;&lt;/a&gt;安装&lt;code&gt;brew&lt;/code&gt;&lt;/h5&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
      <category term="Python" scheme="http://shadow000902.space/categories/Python/"/>
    
    
      <category term="pyenv" scheme="http://shadow000902.space/tags/pyenv/"/>
    
  </entry>
  
  <entry>
    <title>Python小技巧</title>
    <link href="http://shadow000902.space/2018/03/06/Python%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://shadow000902.space/2018/03/06/Python小技巧/</id>
    <published>2018-03-06T13:08:43.000Z</published>
    <updated>2018-04-23T11:51:33.971Z</updated>
    
    <content type="html"><![CDATA[<h5 id="安装指定版本的第三方库"><a href="#安装指定版本的第三方库" class="headerlink" title="安装指定版本的第三方库"></a>安装指定版本的第三方库</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install robotframework==2.8.7</span><br></pre></td></tr></table></figure><p>要用<code>pip</code>安装指定版本的<code>Python</code>包，只需通过<code>==</code>操作符指定即可。</p>  <a id="more"></a><h5 id="在指定位置安装第三方"><a href="#在指定位置安装第三方" class="headerlink" title="在指定位置安装第三方"></a>在指定位置安装第三方</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -t /Users/taoyi/.pyenv/versions/2.7.14/lib/python2.7/site-packages lxml</span><br></pre></td></tr></table></figure><p><code>pip</code>安装的包不一定是用户想要的位置，此时可以用<code>-t</code>选项来指定位置。</p><h5 id="通过requirement-txt文件来管理pip的第三方库"><a href="#通过requirement-txt文件来管理pip的第三方库" class="headerlink" title="通过requirement.txt文件来管理pip的第三方库"></a>通过requirement.txt文件来管理pip的第三方库</h5><p>文件内容如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">robotframework==3.0.2</span><br><span class="line">robotframework-ride==1.5.2</span><br><span class="line">robotframework-appiumlibrary==1.4.6</span><br><span class="line">robotframework-DatabaseLibrary==1.0.1</span><br><span class="line">robotframework-Selenium2Library==3.0.0</span><br><span class="line">robotframework-requests==0.4.7</span><br><span class="line">robotframework-sshlibrary==2.1.3</span><br><span class="line">robotframework-HttpLibrary==0.4.2</span><br><span class="line">requests==2.18.4</span><br><span class="line">PyMySQL==0.8.0</span><br><span class="line">MySQL-python==1.2.5</span><br></pre></td></tr></table></figure></p><p>然后通过以下命令来批量安装第三方库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirement.txt</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;安装指定版本的第三方库&quot;&gt;&lt;a href=&quot;#安装指定版本的第三方库&quot; class=&quot;headerlink&quot; title=&quot;安装指定版本的第三方库&quot;&gt;&lt;/a&gt;安装指定版本的第三方库&lt;/h5&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install robotframework==2.8.7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;要用&lt;code&gt;pip&lt;/code&gt;安装指定版本的&lt;code&gt;Python&lt;/code&gt;包，只需通过&lt;code&gt;==&lt;/code&gt;操作符指定即可。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://shadow000902.space/categories/Python/"/>
    
    
      <category term="python" scheme="http://shadow000902.space/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>《SQL必知必会》学习笔记</title>
    <link href="http://shadow000902.space/2018/02/26/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://shadow000902.space/2018/02/26/《SQL必知必会》学习笔记/</id>
    <published>2018-02-26T11:56:50.000Z</published>
    <updated>2018-02-26T12:07:33.874Z</updated>
    
    <content type="html"><![CDATA[<h4 id="数据库基础"><a href="#数据库基础" class="headerlink" title="数据库基础"></a>数据库基础</h4><p>DBMS：数据库管理系统。是一个数据库软件。<br>database：数据库。通过DBMS创建和操作的保存有组织的数据的容器（通常是一个文件或一组文件）。<br>table：表。某种特定类型数据的结构化清单。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;数据库基础&quot;&gt;&lt;a href=&quot;#数据库基础&quot; class=&quot;headerlink&quot; title=&quot;数据库基础&quot;&gt;&lt;/a&gt;数据库基础&lt;/h4&gt;&lt;p&gt;DBMS：数据库管理系统。是一个数据库软件。&lt;br&gt;database：数据库。通过DBMS创建和操作的保存有组织的数
      
    
    </summary>
    
      <category term="SQL" scheme="http://shadow000902.space/categories/SQL/"/>
    
    
      <category term="mysql" scheme="http://shadow000902.space/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>MAC下微信备份文件管理</title>
    <link href="http://shadow000902.space/2018/02/21/MAC%E4%B8%8B%E5%BE%AE%E4%BF%A1%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    <id>http://shadow000902.space/2018/02/21/MAC下微信备份文件管理/</id>
    <published>2018-02-21T04:59:56.000Z</published>
    <updated>2018-02-26T10:45:30.828Z</updated>
    
    <content type="html"><![CDATA[<h4 id="备份文件位置"><a href="#备份文件位置" class="headerlink" title="备份文件位置"></a>备份文件位置</h4><img src="/2018/02/21/MAC下微信备份文件管理/备份与恢复.png" title="备份与恢复">  <a id="more"></a><p>默认情况下，手机端聊天记录在备份后，备份记录会被储存在如下目录：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Users/taoyi/Library/Containers/com.tencent.xinWeChat/Data/Library/Application\ Support/com.tencent.xinWeChat/2.0b4.0.9/Backup/</span><br></pre></td></tr></table></figure></p><p>后面首先会是一个随机目录，比如：<code>98042dacf91c160514728c899d359b0c</code>，这个算是备份文件的主目录。<br>然后是第二级的一个随机目录，比如：<code>1F28B05B-D186-483D-AC39-23F54CC80811</code>，这里面就存放着备份文件，目录如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r--@ 1 taoyi  staff   177M  2 21 12:42 BAK_0_MEDIA</span><br><span class="line">-rw-r--r--@ 1 taoyi  staff   5.0M  2 21 12:41 BAK_0_TEXT</span><br><span class="line">-rw-r--r--@ 1 taoyi  staff   804K  2 21 12:42 Backup.db</span><br></pre></td></tr></table></figure></p><p>微信备份只有这一份数据，还原也只能从这一份数据还原。</p><h4 id="同一微信账号，多个备份管理"><a href="#同一微信账号，多个备份管理" class="headerlink" title="同一微信账号，多个备份管理"></a>同一微信账号，多个备份管理</h4><p>比如首先我们备份了一个比较重要的人的聊天记录出来，这时就可以把这一份备份记录剪切出来，放起来，然后这样直接在恢复里就看不到。<br>如果需要恢复，可以通过把这一份备份文件重新放回<code>Backup</code>目录中对应的位置，然后就又可以在备份文件管理里找到了，这样就可以单独恢复一个人的聊天记录。</p><h4 id="不同微信账号"><a href="#不同微信账号" class="headerlink" title="不同微信账号"></a>不同微信账号</h4><p>猜想不同微信账号，会在<code>Backup</code>目录下多一个随机目录，用来区分不同微信账号的备份记录。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;备份文件位置&quot;&gt;&lt;a href=&quot;#备份文件位置&quot; class=&quot;headerlink&quot; title=&quot;备份文件位置&quot;&gt;&lt;/a&gt;备份文件位置&lt;/h4&gt;&lt;img src=&quot;/2018/02/21/MAC下微信备份文件管理/备份与恢复.png&quot; title=&quot;备份与恢复&quot;&gt;
    
    </summary>
    
      <category term="Tips" scheme="http://shadow000902.space/categories/Tips/"/>
    
    
      <category term="微信" scheme="http://shadow000902.space/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>Python基础知识整理</title>
    <link href="http://shadow000902.space/2018/02/14/Python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
    <id>http://shadow000902.space/2018/02/14/Python基础知识整理/</id>
    <published>2018-02-14T10:40:37.000Z</published>
    <updated>2018-03-21T12:42:41.898Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基础方法"><a href="#基础方法" class="headerlink" title="基础方法"></a>基础方法</h4><ol><li><p>字符串大小写转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首字母转大写</span></span><br><span class="line">text.title()</span><br><span class="line"><span class="comment"># 字符串转大写</span></span><br><span class="line">text.upper()</span><br><span class="line"><span class="comment"># 字符串转小写</span></span><br><span class="line">text.lower()</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>对list进行排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br><span class="line"><span class="comment"># 临时性字母正序排列</span></span><br><span class="line">print(sorted(cars))</span><br><span class="line"><span class="comment"># 临时性字母倒叙排列</span></span><br><span class="line">print(sorted(cars, reverse=<span class="keyword">True</span>)</span><br><span class="line"><span class="comment"># 永久性字母正序排列</span></span><br><span class="line">cars.sort()</span><br><span class="line"><span class="comment"># 永久性字母倒叙排列</span></span><br><span class="line">cars.sort(reverse=<span class="keyword">True</span>)</span><br><span class="line"><span class="comment"># 默认排序</span></span><br><span class="line">print(cars)</span><br></pre></td></tr></table></figure></li><li><p>访问list元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br><span class="line"><span class="comment"># 访问第一个元素</span></span><br><span class="line">print(cars[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># 访问倒数第一个元素，即list最后一个元素</span></span><br><span class="line"><span class="comment"># 当访问的list长度总是会变的情况下，可以使用这种方式访问list最后一个元素</span></span><br><span class="line">print(cars[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure></li><li><p>list中增删元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">'honda'</span>, <span class="string">'yamaha'</span>, <span class="string">'suzuki'</span>, <span class="string">'ducati'</span>]</span><br><span class="line"><span class="comment"># 根据值删除元素</span></span><br><span class="line">too_expensive = <span class="string">'ducati'</span></span><br><span class="line">motorcycles.remove(too_expensive)</span><br><span class="line"><span class="comment"># 增加元素，元素增加到末尾</span></span><br><span class="line">motorcycles.append(too_expensive)</span><br><span class="line"><span class="comment"># 指定位置插入元素</span></span><br><span class="line">motorcycles.insert(<span class="number">0</span>, too_expensive)</span><br><span class="line"><span class="comment"># 删除指定位置元素</span></span><br><span class="line"><span class="keyword">del</span> motorcycles[<span class="number">1</span>]</span><br><span class="line"><span class="comment"># 取出list中的最后一个元素</span></span><br><span class="line">motorcycles.pop()</span><br><span class="line">print(motorcycles)</span><br></pre></td></tr></table></figure></li><li><p>获取list长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">len(cars)</span><br></pre></td></tr></table></figure></li><li><p>复制list</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_foods = [<span class="string">'pizza'</span>, <span class="string">'falafel'</span>, <span class="string">'carrot cake'</span>] </span><br><span class="line"><span class="comment"># 复制整个列表以 [:] 来表示</span></span><br><span class="line">friend_foods = my_foods[:]</span><br></pre></td></tr></table></figure></li><li><p>检查特定值是否在list中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">banned_users = [<span class="string">'andrew'</span>, <span class="string">'carolina'</span>, <span class="string">'david'</span>]</span><br><span class="line">user1 = <span class="string">'andrew'</span></span><br><span class="line">user2 = <span class="string">'and'</span></span><br><span class="line"><span class="comment"># 返回true</span></span><br><span class="line">print(user1 <span class="keyword">in</span> banned_users)</span><br><span class="line">print(user2 <span class="keyword">not</span> <span class="keyword">in</span> banned_users)</span><br><span class="line"><span class="comment"># 返回false</span></span><br><span class="line">print(user1 <span class="keyword">not</span> <span class="keyword">in</span> banned_users)</span><br><span class="line">print(user2 <span class="keyword">in</span> banned_users)</span><br></pre></td></tr></table></figure></li><li><p><code>if</code>判断条件为<code>list</code>注意点<br>在判断条件为<code>list</code>时，如果<code>list</code>为空，即记过为<code>false</code>，只有在<code>list</code>有一个元素时，才为<code>true</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">requested_toppings = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> requested_toppings:</span><br><span class="line">    print(<span class="string">'requested_toppings not empty'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'requested_toppings is empty'</span>)</span><br></pre></td></tr></table></figure></li></ol><p>这里实际执行的就是<code>else</code>中的语句，因为<code>requested_toppings</code>是空的，返回的<code>false</code>。</p><ol><li><p>多个<code>list</code>判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">available_toppings = [<span class="string">'mushrooms'</span>, <span class="string">'olives'</span>, <span class="string">'green peppers'</span>, <span class="string">'pepperoni'</span>, <span class="string">'pineapple'</span>, <span class="string">'extra cheese'</span>]</span><br><span class="line">requested_toppings = [<span class="string">'mushrooms'</span>, <span class="string">'french fries'</span>, <span class="string">'extra cheese'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> requested_topping <span class="keyword">in</span> requested_toppings:</span><br><span class="line">    <span class="keyword">if</span> requested_topping <span class="keyword">in</span> available_toppings:</span><br><span class="line">        print(<span class="string">"Adding "</span> + requested_topping + <span class="string">"."</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"Sorry, we don't have "</span> + requested_topping + <span class="string">"."</span>)</span><br><span class="line">    print(<span class="string">"\nFinished making your pizza!"</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>tuple</code></p></li><li><p><code>dict</code></p></li><li><p>grades[‘’]</p></li><li><p>是否可迭代<code>Iterable</code></p></li><li><p>类似一个概念，实例才是可被CPU操作的，真实存在的东西。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">have_some_food</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Delicious!'</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hava_a_drink</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Thanks!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    me = People()</span><br><span class="line">    you = People()</span><br><span class="line">    me.have_some_food()</span><br><span class="line">    me.hava_a_drink()</span><br></pre></td></tr></table></figure><ol><li>封装  访问限制</li></ol><p>强制<strong>init</strong>(self, name, come_from)的属性不能被修改：<br>    <strong>name    </strong>come_from</p><ol><li><p>封装 将类的属性私有化</p></li><li><p>继承 </p></li><li><p>多态 多种状态，接口多种不同实现方式即为多态</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;基础方法&quot;&gt;&lt;a href=&quot;#基础方法&quot; class=&quot;headerlink&quot; title=&quot;基础方法&quot;&gt;&lt;/a&gt;基础方法&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;字符串大小写转换&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 首字母转大写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;text.title()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 字符串转大写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;text.upper()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 字符串转小写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;text.lower()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Python" scheme="http://shadow000902.space/categories/Python/"/>
    
    
      <category term="python" scheme="http://shadow000902.space/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python中正则表达式的应用</title>
    <link href="http://shadow000902.space/2018/01/11/Python%E4%B8%AD%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://shadow000902.space/2018/01/11/Python中正则表达式的应用/</id>
    <published>2018-01-11T09:36:53.000Z</published>
    <updated>2018-01-11T09:50:20.637Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简单字符串替换"><a href="#简单字符串替换" class="headerlink" title="简单字符串替换"></a>简单字符串替换</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re  </span><br><span class="line">urlp = <span class="string">"http://www.mypcera.com/star/mm/jiepaimeinv/942&#123;_page&#125;.html&amp;&#123;what&#125;&amp;&amp;&#123;come&#125;"</span></span><br><span class="line"><span class="comment"># 匹配出所有 &#123;.*?&#125; 的值，并取第一个匹配到的值</span></span><br><span class="line">pageParam = re.findall(<span class="string">'&#123;.*?&#125;'</span>, urlp)[<span class="number">0</span>]  </span><br><span class="line"><span class="comment"># 输出结果：&#123;_page&#125;</span></span><br><span class="line">print(pageParam)</span><br><span class="line"><span class="comment"># 匹配结果中的 page 替换为 3，并剔除匹配结果中的 &#123;&#125;</span></span><br><span class="line">pageParam = pageParam.replace(<span class="string">"page"</span>, <span class="string">"3"</span>).strip(<span class="string">"&#123;&#125;"</span>)  </span><br><span class="line"><span class="comment"># 输出结果：_3</span></span><br><span class="line">print(pageParam)  </span><br><span class="line"><span class="comment"># 对所有匹配到的结果进行替换操作</span></span><br><span class="line">result = re.sub(<span class="string">'&#123;.*?&#125;'</span>, pageParam, urlp)  </span><br><span class="line"><span class="comment"># 打印最后的结果：http://www.mypcera.com/star/mm/jiepaimeinv/942_3.html&amp;_3&amp;&amp;_3</span></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;简单字符串替换&quot;&gt;&lt;a href=&quot;#简单字符串替换&quot; class=&quot;headerlink&quot; title=&quot;简单字符串替换&quot;&gt;&lt;/a&gt;简单字符串替换&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
      <category term="Python" scheme="http://shadow000902.space/categories/Python/"/>
    
    
      <category term="正则表达式" scheme="http://shadow000902.space/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Python对文件内容的简单操作</title>
    <link href="http://shadow000902.space/2018/01/11/Python%E5%AF%B9%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/"/>
    <id>http://shadow000902.space/2018/01/11/Python对文件内容的简单操作/</id>
    <published>2018-01-10T16:08:41.000Z</published>
    <updated>2018-02-26T10:45:30.799Z</updated>
    
    <content type="html"><![CDATA[<h4 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打开文件    w会新建文件，有写的权限   r读   r+读写  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#fo =open("file1.txt","w")  </span></span><br><span class="line">fo =open(<span class="string">"file1.txt"</span>,<span class="string">"r+"</span>)  </span><br><span class="line">print(fo)  </span><br><span class="line">print(fo.read)  </span><br><span class="line">  </span><br><span class="line">fo.write(<span class="string">"bbbbbbbbbbbbbb"</span>)  </span><br><span class="line">  </span><br><span class="line">print(open(<span class="string">"file1.txt"</span>))  </span><br><span class="line">fo.close() <span class="comment">#关闭之后数据才写到文件 中</span></span><br></pre></td></tr></table></figure>  <a id="more"></a><h4 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##读文件  </span></span><br><span class="line">  </span><br><span class="line">f1=open(<span class="string">"file1.txt"</span>)  </span><br><span class="line"><span class="comment">#txt=f1.read();  </span></span><br><span class="line"><span class="comment">#print(txt)  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#读取所有行 []  </span></span><br><span class="line"><span class="comment"># print(f1.readlines());  </span></span><br><span class="line"><span class="comment">#读取一行    超出 会读空  </span></span><br><span class="line">line=f1.readline();  </span><br><span class="line">print(line);  </span><br><span class="line">print(f1.readline());  </span><br><span class="line">print(f1.readline());  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#f1.next() 超出范围会停止</span></span><br></pre></td></tr></table></figure><h4 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###写文件  </span></span><br><span class="line">l=[<span class="string">"one\n"</span>,<span class="string">"two\n"</span>,<span class="string">"three\n"</span>,<span class="string">"four\n"</span>]  </span><br><span class="line"><span class="comment">#f2=open("file2.txt","a")  </span></span><br><span class="line"><span class="comment">#f2.writelines(l) #换行的形式写到文件后面  </span></span><br><span class="line"><span class="comment">#f2.close();  </span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">f2=open(<span class="string">"file2.txt"</span>,<span class="string">"r+"</span>) <span class="comment">#是以指针的形式  </span></span><br><span class="line"><span class="comment">#f2.read() #先读出 在写 不会被覆盖  </span></span><br><span class="line"><span class="comment">#f2.writelines(l) #换行的形式写到文件后面  </span></span><br><span class="line"><span class="comment">#f2.close();  </span></span><br><span class="line">  </span><br><span class="line">print(<span class="string">"1:"</span>,f2.read())  </span><br><span class="line">print(<span class="string">"2:"</span>,f2.read()) <span class="comment">#读完后 指针移到尾部了 就读不出来了 可以移动指针  </span></span><br><span class="line">f2.seek(<span class="number">0</span>,<span class="number">0</span>) <span class="comment">##指针移动   0=头部  1=向后移动  </span></span><br><span class="line">print(<span class="string">"3:"</span>,f2.read())  </span><br><span class="line">f2.seek(<span class="number">0</span>,<span class="number">0</span>)   </span><br><span class="line">f2.seek(<span class="number">0</span>,<span class="number">2</span>) <span class="comment">##指针移动  结尾  可以在结尾追加数据  </span></span><br><span class="line">print(<span class="string">"4:"</span>,f2.read())  </span><br><span class="line">  </span><br><span class="line">f2.writelines(l) <span class="comment">#在写一次 不关闭是不保存的  </span></span><br><span class="line">f2.flush() <span class="comment">#提交更新  没关闭 先把写入的数据保存</span></span><br></pre></td></tr></table></figure><h4 id="查找文件中的内容"><a href="#查找文件中的内容" class="headerlink" title="查找文件中的内容"></a>查找文件中的内容</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re  </span><br><span class="line"><span class="comment">#查找文件中有多少个hello  </span></span><br><span class="line">  </span><br><span class="line">fp=open(<span class="string">"file3.txt"</span>,<span class="string">"r"</span>)  </span><br><span class="line">count=<span class="number">0</span>;  </span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> fp.readlines():  </span><br><span class="line">    li=re.findall(<span class="string">"hello"</span>, s)  </span><br><span class="line">    <span class="keyword">if</span> len(li)&gt;<span class="number">0</span>:  </span><br><span class="line">        count=count+len(li)  </span><br><span class="line">print(<span class="string">"search:"</span>,count,<span class="string">"&gt;&gt;&gt;hello"</span>)  </span><br><span class="line">fp.close()</span><br></pre></td></tr></table></figure><h4 id="替换文件内容"><a href="#替换文件内容" class="headerlink" title="替换文件内容"></a>替换文件内容</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#把文件内容替换  </span></span><br><span class="line"><span class="comment">#把file3.txt 的 hello 替换为 good,并保存到file3Back.txt  </span></span><br><span class="line"><span class="keyword">import</span> re  </span><br><span class="line">  </span><br><span class="line">fp3=open(<span class="string">"file3.txt"</span>,<span class="string">"r"</span>)  </span><br><span class="line">fp4=open(<span class="string">"file4.txt"</span>,<span class="string">"w"</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> fp3.readlines():<span class="comment">#先读出来     </span></span><br><span class="line">    fp4.write(s.replace(<span class="string">"hello"</span>,<span class="string">"goood"</span>)) <span class="comment">#替换 并写入  </span></span><br><span class="line">      </span><br><span class="line">fp3.close()  </span><br><span class="line">fp4.close()</span><br></pre></td></tr></table></figure><h4 id="在原文件中替换文件内容"><a href="#在原文件中替换文件内容" class="headerlink" title="在原文件中替换文件内容"></a>在原文件中替换文件内容</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#写在原文件中  </span></span><br><span class="line">fp3=open(<span class="string">"file3.txt"</span>,<span class="string">"r+"</span>) <span class="comment">#不用w w会清空数据  </span></span><br><span class="line">s=fp3.read()<span class="comment">#读出   </span></span><br><span class="line">fp3.seek(<span class="number">0</span>,<span class="number">0</span>) <span class="comment">#指针移到头  原来的数据还在 是替换 会存在一个问题 如果少   会替换不了全部数据，自已思考解决!!!  </span></span><br><span class="line"><span class="comment">#从头写入  </span></span><br><span class="line">fp3.write(s.replace(<span class="string">"hello"</span>,<span class="string">"good"</span>))  </span><br><span class="line">fp3.close()</span><br></pre></td></tr></table></figure><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>r</td><td>以读方式打开文件，可读取文件信息。</td></tr><tr><td>w</td><td>以写方式打开文件，可向文件写入信息。如文件存在，则清空该文件，再写入新内容</td></tr><tr><td>a</td><td>以追加模式打开文件（即一打开文件，文件指针自动移到文件末尾），如果文件不存在则创建</td></tr><tr><td>r+</td><td>以读写方式打开文件，可对文件进行读和写操作。</td></tr><tr><td>w+</td><td>消除文件内容，然后以读写方式打开文件。</td></tr><tr><td>a+</td><td>以读写方式打开文件，并把文件指针移到文件尾。</td></tr><tr><td>b</td><td>以二进制模式打开文件，而不是以文本模式。该模式只对Windows或Dos有效，类Unix的文件是用二进制模式进行操作的。</td></tr></tbody></table><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>f.close()</td><td>关闭文件，记住用open()打开文件后一定要记得关闭它，否则会占用系统的可打开文件句柄数。</td></tr><tr><td>f.fileno()</td><td>获得文件描述符，是一个数字</td></tr><tr><td>f.flush()</td><td>刷新输出缓存</td></tr><tr><td>f.isatty()</td><td>如果文件是一个交互终端，则返回True，否则返回False。</td></tr><tr><td>f.read([count])</td><td>读出文件，如果有count，则读出count个字节。</td></tr><tr><td>f.readline()</td><td>读出一行信息。</td></tr><tr><td>f.readlines()</td><td>读出所有行，也就是读出整个文件的信息。</td></tr><tr><td>f.seek(offset[,where])</td><td>把文件指针移动到相对于where的offset位置。where为0表示文件开始处，这是默认值 ；1表示当前位置；2表示文件结尾。</td></tr><tr><td>f.tell()</td><td>获得文件指针位置。</td></tr><tr><td>f.truncate([size])</td><td>截取文件，使文件的大小为size。</td></tr><tr><td>f.write(string)</td><td>把string字符串写入文件。</td></tr><tr><td>f.writelines(list)</td><td>把list中的字符串一行一行地写入文件，是连续写入文件，没有换行。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;打开文件&quot;&gt;&lt;a href=&quot;#打开文件&quot; class=&quot;headerlink&quot; title=&quot;打开文件&quot;&gt;&lt;/a&gt;打开文件&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#打开文件    w会新建文件，有写的权限   r读   r+读写  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#fo =open(&quot;file1.txt&quot;,&quot;w&quot;)  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fo =open(&lt;span class=&quot;string&quot;&gt;&quot;file1.txt&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;r+&quot;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(fo)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(fo.read)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fo.write(&lt;span class=&quot;string&quot;&gt;&quot;bbbbbbbbbbbbbb&quot;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(open(&lt;span class=&quot;string&quot;&gt;&quot;file1.txt&quot;&lt;/span&gt;))  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fo.close() &lt;span class=&quot;comment&quot;&gt;#关闭之后数据才写到文件 中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Python" scheme="http://shadow000902.space/categories/Python/"/>
    
    
      <category term="python" scheme="http://shadow000902.space/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Brew命令报错问题解决</title>
    <link href="http://shadow000902.space/2018/01/10/Brew%E5%91%BD%E4%BB%A4%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <id>http://shadow000902.space/2018/01/10/Brew命令报错问题解决/</id>
    <published>2018-01-10T07:33:52.000Z</published>
    <updated>2018-02-26T10:45:30.822Z</updated>
    
    <content type="html"><![CDATA[<h5 id="运行任何brew命令，都提示错误"><a href="#运行任何brew命令，都提示错误" class="headerlink" title="运行任何brew命令，都提示错误"></a>运行任何<code>brew</code>命令，都提示错误</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git: error: unable to find utility <span class="string">"git"</span>, not a developer tool or <span class="keyword">in</span> PATH</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang: error: unable to find utility <span class="string">"clang"</span>, not a developer tool or <span class="keyword">in</span> PATH</span><br></pre></td></tr></table></figure>  <a id="more"></a><p>原因主要是因为<code>xcode-select</code>的位置错误，需要修改指向的位置：<br>原来的位置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TaoYi-Mac in ~/Desktop/MySQL-python-1.2.5 [13:27:05] C:72</span></span><br><span class="line">$ xcode-select --<span class="built_in">print</span>-path</span><br><span class="line">/Applications/Xcode.app/Contents/Developer</span><br></pre></td></tr></table></figure></p><p>修改到另一个位置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TaoYi-Mac in /Applications/Xcode.app/Contents/Developer [13:33:33] C:1</span></span><br><span class="line">$ sudo xcode-select --switch /Library/Developer/CommandLineTools</span><br><span class="line">Password:</span><br><span class="line"></span><br><span class="line"><span class="comment"># taoyi @ TaoYi-Mac in /Applications/Xcode.app/Contents/Developer [13:33:52] </span></span><br><span class="line">$ xcode-select --<span class="built_in">print</span>-path                                     </span><br><span class="line">/Library/Developer/CommandLineTools</span><br></pre></td></tr></table></figure></p><p>如此操作之后，再执行brew命令，就不会再报上面的错了</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;运行任何brew命令，都提示错误&quot;&gt;&lt;a href=&quot;#运行任何brew命令，都提示错误&quot; class=&quot;headerlink&quot; title=&quot;运行任何brew命令，都提示错误&quot;&gt;&lt;/a&gt;运行任何&lt;code&gt;brew&lt;/code&gt;命令，都提示错误&lt;/h5&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git: error: unable to find utility &lt;span class=&quot;string&quot;&gt;&quot;git&quot;&lt;/span&gt;, not a developer tool or &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; PATH&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;clang: error: unable to find utility &lt;span class=&quot;string&quot;&gt;&quot;clang&quot;&lt;/span&gt;, not a developer tool or &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; PATH&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="SolveProblem" scheme="http://shadow000902.space/categories/SolveProblem/"/>
    
    
      <category term="brew" scheme="http://shadow000902.space/tags/brew/"/>
    
  </entry>
  
  <entry>
    <title>Python通过SSH隧道连接MySQL数据库</title>
    <link href="http://shadow000902.space/2018/01/10/Python%E9%80%9A%E8%BF%87SSH%E9%9A%A7%E9%81%93%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://shadow000902.space/2018/01/10/Python通过SSH隧道连接MySQL数据库/</id>
    <published>2018-01-10T01:56:03.000Z</published>
    <updated>2018-02-26T10:45:30.833Z</updated>
    
    <content type="html"><![CDATA[<h4 id="方式一：通过MySQLdb模块"><a href="#方式一：通过MySQLdb模块" class="headerlink" title="方式一：通过MySQLdb模块"></a>方式一：通过<code>MySQLdb</code>模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">con_sshDb</span><span class="params">(self, sql)</span>:</span></span><br><span class="line"><span class="comment"># ssh的地址，端口，用户名，密码</span></span><br><span class="line"><span class="keyword">from</span> sshtunnel <span class="keyword">import</span> SSHTunnelForwarder</span><br><span class="line"><span class="keyword">with</span> SSHTunnelForwarder(</span><br><span class="line">(<span class="string">'XXX.XXX.XXX.XXX'</span>, <span class="number">22</span>),</span><br><span class="line">ssh_password=<span class="string">"XXXXXX"</span>,</span><br><span class="line">ssh_username=<span class="string">"XXXXXX"</span>,</span><br><span class="line">remote_bind_address=(<span class="string">'XXX.XXX'</span>, <span class="number">3306</span>)</span><br><span class="line">) <span class="keyword">as</span> server:</span><br><span class="line"><span class="comment"># 此处必须是是127.0.0.1</span></span><br><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line">conn = MySQLdb.connect(host=<span class="string">'127.0.0.1'</span>,</span><br><span class="line">   port=server.local_bind_port,</span><br><span class="line">   <span class="comment"># Navicat常规处的链接用户名和密码，以及连接数据库名称</span></span><br><span class="line">   user=<span class="string">'XXXXXX'</span>,</span><br><span class="line">   passwd=<span class="string">'XXXXXX'</span>,</span><br><span class="line">   db=<span class="string">'XXXXXX'</span>)</span><br><span class="line"><span class="comment"># .cursor()用来获得python执行Mysql命令的方法</span></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">select = sql</span><br><span class="line"><span class="comment"># .execute()执行mysql语句</span></span><br><span class="line">cursor.execute(select)</span><br><span class="line"><span class="comment"># fetchall()则是接收全部的返回结果行</span></span><br><span class="line">data = cursor.fetchall()</span><br><span class="line"><span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>  <a id="more"></a><h4 id="方式二：通过paramiko模块"><a href="#方式二：通过paramiko模块" class="headerlink" title="方式二：通过paramiko模块"></a>方式二：通过<code>paramiko</code>模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">con_sshDb</span><span class="params">(self, sql)</span>:</span></span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line">ssh = paramiko.SSHClient()</span><br><span class="line">ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">ssh.connect(<span class="string">"XXX.XXX.XXX.XXX"</span>, <span class="number">22</span>, <span class="string">"ssh_username"</span>, <span class="string">"ssh_password"</span>)</span><br><span class="line">       select = sql</span><br><span class="line">stdin, stdout, stderr = ssh.exec_command(<span class="string">"mysql -u user -p passwd -D mysql -e 'select'"</span>)</span><br><span class="line"><span class="keyword">print</span> stdout.readlines()</span><br><span class="line">ssh.close()</span><br></pre></td></tr></table></figure><h4 id="方式二：通过sqlalchemy模块"><a href="#方式二：通过sqlalchemy模块" class="headerlink" title="方式二：通过sqlalchemy模块"></a>方式二：通过<code>sqlalchemy</code>模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">con_sshDb</span><span class="params">(self, sql)</span>:</span></span><br><span class="line"><span class="keyword">from</span> sshtunnel <span class="keyword">import</span> SSHTunnelForwarder</span><br><span class="line"><span class="keyword">with</span> SSHTunnelForwarder(</span><br><span class="line">(<span class="string">'XXX.XXX.XXX.XXX'</span>, <span class="number">22</span>),</span><br><span class="line">ssh_password=<span class="string">"XXXXXX"</span>,</span><br><span class="line">ssh_username=<span class="string">"XXXXXX"</span>,</span><br><span class="line">remote_bind_address=(<span class="string">'XXX.XXX'</span>, <span class="number">3306</span>)</span><br><span class="line">) <span class="keyword">as</span> server:</span><br><span class="line">server.start()  <span class="comment"># start ssh sever</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Server connected via SSH'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># connect to PostgreSQL</span></span><br><span class="line">local_port = str(server.local_bind_port)</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line">engine = create_engine(<span class="string">'postgresql://&lt;db_user&gt;:&lt;db_pwd&gt;@127.0.0.1:'</span> + local_port +<span class="string">'/&lt;db_name&gt;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line">Session = sessionmaker(bind=engine)</span><br><span class="line">session = Session()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Database session created'</span></span><br><span class="line"></span><br><span class="line">select = sql</span><br><span class="line">data = session.execute(select)</span><br><span class="line"><span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;方式一：通过MySQLdb模块&quot;&gt;&lt;a href=&quot;#方式一：通过MySQLdb模块&quot; class=&quot;headerlink&quot; title=&quot;方式一：通过MySQLdb模块&quot;&gt;&lt;/a&gt;方式一：通过&lt;code&gt;MySQLdb&lt;/code&gt;模块&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;con_sshDb&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, sql)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;# ssh的地址，端口，用户名，密码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; sshtunnel &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; SSHTunnelForwarder&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; SSHTunnelForwarder(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			(&lt;span class=&quot;string&quot;&gt;&#39;XXX.XXX.XXX.XXX&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ssh_password=&lt;span class=&quot;string&quot;&gt;&quot;XXXXXX&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ssh_username=&lt;span class=&quot;string&quot;&gt;&quot;XXXXXX&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			remote_bind_address=(&lt;span class=&quot;string&quot;&gt;&#39;XXX.XXX&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3306&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; server:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;# 此处必须是是127.0.0.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; MySQLdb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		conn = MySQLdb.connect(host=&lt;span class=&quot;string&quot;&gt;&#39;127.0.0.1&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;							   port=server.local_bind_port,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;							   &lt;span class=&quot;comment&quot;&gt;# Navicat常规处的链接用户名和密码，以及连接数据库名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;							   user=&lt;span class=&quot;string&quot;&gt;&#39;XXXXXX&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;							   passwd=&lt;span class=&quot;string&quot;&gt;&#39;XXXXXX&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;							   db=&lt;span class=&quot;string&quot;&gt;&#39;XXXXXX&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;# .cursor()用来获得python执行Mysql命令的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cursor = conn.cursor()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		select = sql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;# .execute()执行mysql语句&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cursor.execute(select)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;# fetchall()则是接收全部的返回结果行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		data = cursor.fetchall()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; data&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="python" scheme="http://shadow000902.space/categories/python/"/>
    
    
      <category term="ssh" scheme="http://shadow000902.space/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Robot-Framework的几点总结</title>
    <link href="http://shadow000902.space/2017/12/16/Robot-Framework%E7%9A%84%E5%87%A0%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://shadow000902.space/2017/12/16/Robot-Framework的几点总结/</id>
    <published>2017-12-16T13:59:38.000Z</published>
    <updated>2017-12-18T13:06:34.409Z</updated>
    
    <content type="html"><![CDATA[<h5 id="命令行执行RF用例"><a href="#命令行执行RF用例" class="headerlink" title="命令行执行RF用例"></a>命令行执行RF用例</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行整个项目下的所有用例</span></span><br><span class="line">pybot /opt/robotframework/</span><br><span class="line"><span class="comment"># 执行某个suite中的所有用例</span></span><br><span class="line">pybot /opt/robotframework/rf.robot</span><br><span class="line"><span class="comment"># 执行具体的某个用例</span></span><br><span class="line">pybot --<span class="built_in">test</span> case_1 /opt/robotframework/rf.robot</span><br><span class="line"><span class="comment"># 执行项目中指定标签的用例</span></span><br><span class="line">pybot --include tagName /opt/robotframework/</span><br></pre></td></tr></table></figure>  <a id="more"></a><h5 id="IDE设置命令行执行RF用例"><a href="#IDE设置命令行执行RF用例" class="headerlink" title="IDE设置命令行执行RF用例"></a>IDE设置命令行执行RF用例</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行单条用例</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/pybot -d results -t testcase001 ./</span><br></pre></td></tr></table></figure><img src="/2017/12/16/Robot-Framework的几点总结/SingleTestCase.png" title="SingleTestCase"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行单个suite</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/pybot -d results testsuite001.robot</span><br></pre></td></tr></table></figure><img src="/2017/12/16/Robot-Framework的几点总结/TestSuite.png" title="TestSuite"><h5 id="指定RF用例执行后日志的保存位置"><a href="#指定RF用例执行后日志的保存位置" class="headerlink" title="指定RF用例执行后日志的保存位置"></a>指定RF用例执行后日志的保存位置</h5><p>其实上面的<code>-d</code>参数就是用来指定Log的保存位置的，默认<code>-d results</code>指定日志保存在运行命令的目录的<code>results</code>文件夹下。<br>在<code>ride</code>中的<code>run</code>标签下，<code>Arguments</code>中填入<code>-d results</code>也能达到同样的效果。</p><h5 id="重新运行上一轮Fail的Case"><a href="#重新运行上一轮Fail的Case" class="headerlink" title="重新运行上一轮Fail的Case"></a>重新运行上一轮<code>Fail</code>的<code>Case</code></h5><p>使用<code>-R</code>参数，同<code>--rerunfailed output</code>，后面跟前次执行生成的<code>results/output.xml</code>，这样就只会运行上次失败了的Case。</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;命令行执行RF用例&quot;&gt;&lt;a href=&quot;#命令行执行RF用例&quot; class=&quot;headerlink&quot; title=&quot;命令行执行RF用例&quot;&gt;&lt;/a&gt;命令行执行RF用例&lt;/h5&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 执行整个项目下的所有用例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pybot /opt/robotframework/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 执行某个suite中的所有用例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pybot /opt/robotframework/rf.robot&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 执行具体的某个用例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pybot --&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; case_1 /opt/robotframework/rf.robot&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 执行项目中指定标签的用例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pybot --include tagName /opt/robotframework/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="RobotFramework" scheme="http://shadow000902.space/categories/RobotFramework/"/>
    
    
      <category term="robotframework" scheme="http://shadow000902.space/tags/robotframework/"/>
    
  </entry>
  
  <entry>
    <title>账号体系测试总结</title>
    <link href="http://shadow000902.space/2017/12/11/%E8%B4%A6%E5%8F%B7%E4%BD%93%E7%B3%BB%E6%B5%8B%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    <id>http://shadow000902.space/2017/12/11/账号体系测试总结/</id>
    <published>2017-12-11T05:15:18.000Z</published>
    <updated>2017-12-23T16:43:18.509Z</updated>
    
    <content type="html"><![CDATA[<h4 id="管理后台账号"><a href="#管理后台账号" class="headerlink" title="管理后台账号"></a>管理后台账号</h4><h4 id="客户端账号"><a href="#客户端账号" class="headerlink" title="客户端账号"></a>客户端账号</h4><h4 id="客户端账号需要登录后台管理"><a href="#客户端账号需要登录后台管理" class="headerlink" title="客户端账号需要登录后台管理"></a>客户端账号需要登录后台管理</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;管理后台账号&quot;&gt;&lt;a href=&quot;#管理后台账号&quot; class=&quot;headerlink&quot; title=&quot;管理后台账号&quot;&gt;&lt;/a&gt;管理后台账号&lt;/h4&gt;&lt;h4 id=&quot;客户端账号&quot;&gt;&lt;a href=&quot;#客户端账号&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="WorkSummary" scheme="http://shadow000902.space/categories/WorkSummary/"/>
    
    
      <category term="worksummary" scheme="http://shadow000902.space/tags/worksummary/"/>
    
  </entry>
  
  <entry>
    <title>TESTER面试官</title>
    <link href="http://shadow000902.space/2017/12/10/TESTER%E9%9D%A2%E8%AF%95%E5%AE%98/"/>
    <id>http://shadow000902.space/2017/12/10/TESTER面试官/</id>
    <published>2017-12-09T16:42:50.000Z</published>
    <updated>2017-12-11T05:27:19.286Z</updated>
    
    <content type="html"><![CDATA[<h5 id="筛选简历"><a href="#筛选简历" class="headerlink" title="筛选简历"></a>筛选简历</h5><ol><li>首先看学历和专业，这样就可以pass掉好多简历了。</li><li>再看工作岗位，项目经验。项目经验则需要和简历上的工作技能结合着一起看。一般项目经验里有的才是真实使用的。没有的话，就需要在面试时沟通，看是自学的，还是掺水了。</li><li><p>如果工作经验符合要求，技能和项目经验过关就可以约面了。</p><a id="more"></a></li></ol><h5 id="面试问题"><a href="#面试问题" class="headerlink" title="面试问题"></a>面试问题</h5><ol><li>项目介绍，工作内容介绍，说的条理清楚的，说明工作中用心总结了，第一印象比较重要。</li><li>简历上写的技能，工作中是怎么使用的？</li><li>工作中遇到困难，怎么处理的？遇到难复现的bug？与开发沟通不畅？项目紧急无法推动等等？这个主要是看面试者平时工作中解决问题的能力和沟通能力。</li><li>上份工作有哪些成长，优势有哪些？</li><li>除了工作中用到的，平时有没有其他方面的学习？这个是考察自主学习能力的。</li><li>离职原因？主要是看面试者的稳定性如何</li><li>觉得自己目前的能力与在这个工作年限应该具备的能力相符么？</li></ol><h5 id="对项目经验描述的建议"><a href="#对项目经验描述的建议" class="headerlink" title="对项目经验描述的建议"></a>对项目经验描述的建议</h5><ol><li>什么类型项目，解决什么问题，针对的用户群，用户量级，项目业务流概述等。</li><li>主要负责什么内容，有哪些技术手段去保证质量。</li><li>什么语言，什么部署环境。</li><li>项目团队成员结构、人员占比等。</li></ol><h5 id="简历意见"><a href="#简历意见" class="headerlink" title="简历意见"></a>简历意见</h5><ol><li>基本信息中，添加关键字，简单、直接的提炼出自己的核心能力和技能。</li><li>自我评价中，尽可能的提炼自己掌握的测试相关技能，简单、直接，<code>不写自己不熟悉的技能，不要给自己挖坑</code>。后面加上几段话，用精炼的语句描述自己的核心价值，也可简要说明在上架公司的核心职责。</li><li>工作经验，不要拖沓写一堆，要用精炼的语言描述清楚产品的情况，然后分点说明自己的具体职责。</li><li>简历一般两页就够了，排版要干练清爽，不要花哨。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;筛选简历&quot;&gt;&lt;a href=&quot;#筛选简历&quot; class=&quot;headerlink&quot; title=&quot;筛选简历&quot;&gt;&lt;/a&gt;筛选简历&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;首先看学历和专业，这样就可以pass掉好多简历了。&lt;/li&gt;
&lt;li&gt;再看工作岗位，项目经验。项目经验则需要和简历上的工作技能结合着一起看。一般项目经验里有的才是真实使用的。没有的话，就需要在面试时沟通，看是自学的，还是掺水了。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果工作经验符合要求，技能和项目经验过关就可以约面了。&lt;/p&gt;
    
    </summary>
    
      <category term="TestTheory" scheme="http://shadow000902.space/categories/TestTheory/"/>
    
    
  </entry>
  
  <entry>
    <title>TESTER的核心价值</title>
    <link href="http://shadow000902.space/2017/12/08/TESTER%E7%9A%84%E6%A0%B8%E5%BF%83%E4%BB%B7%E5%80%BC/"/>
    <id>http://shadow000902.space/2017/12/08/TESTER的核心价值/</id>
    <published>2017-12-08T12:04:50.000Z</published>
    <updated>2017-12-11T05:27:19.230Z</updated>
    
    <content type="html"><![CDATA[<p>我认为当前测试人员的核心价值是加速整个项目的反馈以及对产品的快速验证。</p><p>这两项价值中又各自有三项主要工作：</p>  <a id="more"></a><img src="/2017/12/08/TESTER的核心价值/TESTER的核心价值.png" title="TESTER的核心价值"><h5 id="加速反馈"><a href="#加速反馈" class="headerlink" title="加速反馈"></a>加速反馈</h5><ol><li><p>促进沟通<br>测试人员在整个交付团队里至关重要的工作就是促进整个项目的沟通，需要和产品团队一起工作做需求的定义，和开发团队一起工作写自动化的验证，保障项目组之间对于目标和实现都能够达成一致。<br>在这项工作中，最重要的能力是热情，看起来很虚，但是只有充满热情的人员才可能实现足够的沟通，同时高效的沟通能力也是非常重要的能力，这方面需要一些思维和沟通的工具和训练。<br>还有一个重要的能力就是能够想到一些促进项目组沟通的办法（例如交换三色卡片），这个算是一种灵气吧，但相信也和热情有很大关系。</p></li><li><p>持续交付基础设施的搭建<br>测试人员应该主持团队持续交付基础设施的搭建，从集成开始到环境自动部署，提交测试验收测试的自动触发，运行，结构展示等等，总之就是持续交付整套基础设施。<br>本着不重复造轮子的原则，这项工作的主要能力就是对业界相关工具的掌握和使用的能力，当然整合可能涉及到一些二次开发或者自己搭个WEB。并且能够像一个产品经理对产品负责一样，能够及时看到项目组使用这套基础设施的实际需求和问题并能够持续改进。<br>这里面的主要需要的能力是技术视野、工具使用的能力，以及英文文档的阅档（基本上能看的说明文档都是英文的官方文档）和平台搭建的能力。</p></li><li><p>全流程反馈规则的制定<br>除了基础设施和高效的沟通，在整个团队工作过程中还是需要制定很多各种有益的规则来促进反馈（例如对产品需求的要求，单元测试覆盖的要求，代码规范的要求等等等等）。<br>规则应该和项目组的实际情况相结合，而且很多规则并不是所有人都一开始能欣然接受，所以一方面要能够看到目前的问题和瓶颈来制定相关规则来改善更重要的是能够说服项目组的能力（当然这个能力不是说舌战群儒的说话术，更多是技术上能够说得明白，自己能够先做一些实践来证明有效等）</p></li></ol><h5 id="快速验证"><a href="#快速验证" class="headerlink" title="快速验证"></a>快速验证</h5><ol><li><p>整体角度考虑对其他部分的影响<br>测试人员的工作效率取决于他对软件和项目的理解，而不是他掌握的测试技术。（理解产品、理解用户期望、理解产品架构、了解产品元素，项目团队）在迭代中开发更关注当前功能，而测试需要做的是实时考虑对系统其它部分、相关系统的影响。<br>因此测试最应该维护的是系统当前的全貌、架构、模块调用以及核心用例。因此对项目整体的熟悉程度是测试人员不变的核心能力之一。</p></li><li><p>风险，优先级选择<br>这一项其实算是测试人员的看家本领。整个测试分析体系的知识中，最重要的基础之一就是“取舍”，选择更高优先级，更有代表性的case来减少整体case的执行数量，这个技能之于测试相当于算法的掌握之于开发。<br>在快速迭代的过程中对于优先级的选择重要性更高，因为很多时候要承担更多风险来追求交付速度，风险和速度之间的平衡才是最见功力的。这里主要是测试分析能力，RBT测试的掌握等等这些基本能力。<br>测试人员应该积累多种测试技术，综合应用它们，把一个“网”织的更密的性价比远低于用各种不同的“网”来防护。</p></li><li><p>自动化回归<br>自动化回归作为整个持续交付中的核心，重要性不用多说，怎么做好自动化回归是个很大的话题，另外找机会总结。这里只提我的一个观点。要做好和维护好一个真正有效的自动化回归，对于case和数据的设计&gt;自动化的架构&gt;编码能力。所以坚决反对不是本团队的人，不了解整个产品的人来做，也坚决反对简单按模块分解给不同的人，用case堆砌的模式做。<br>同核心用例一样，要以整体视角来做你的自动化回归，好的实践有狠多，还是另找机会总结。</p></li></ol><p>结论：<br>在持续交付的团队中，测试人员最重要的能力是对项目整体的掌握程度，技术视野以及热情。然后厚实的编码能力和测试分析能力也是必不可少的基础。反省一下，之前在招人过程中只注意了后面两项，最重要的能力项没有设计很好的题目和方法来考察。不过感觉前面的能力不光和人本身有关，团队氛围也是能够影响前面能力表达的重要因素。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我认为当前测试人员的核心价值是加速整个项目的反馈以及对产品的快速验证。&lt;/p&gt;
&lt;p&gt;这两项价值中又各自有三项主要工作：&lt;/p&gt;
    
    </summary>
    
      <category term="TestTheory" scheme="http://shadow000902.space/categories/TestTheory/"/>
    
    
  </entry>
  
  <entry>
    <title>如何做好一个执行者</title>
    <link href="http://shadow000902.space/2017/12/04/%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E5%9F%BA%E7%A1%80%E7%9A%84%E6%89%A7%E8%A1%8C%E8%80%85/"/>
    <id>http://shadow000902.space/2017/12/04/如何做好基础的执行者/</id>
    <published>2017-12-03T16:28:42.000Z</published>
    <updated>2017-12-11T05:27:19.291Z</updated>
    
    <content type="html"><![CDATA[<h5 id="如何做好基础的执行者"><a href="#如何做好基础的执行者" class="headerlink" title="如何做好基础的执行者"></a>如何做好基础的执行者</h5><ol><li>对于安排的任务，及时跟进，及时了解，及时产出结果，主动同步结果给leader。</li><li>有好的工作习惯，每天工作结束，对于项目情况有一个简单的总结，并能主动同步给leader。</li><li><p>遇到阻塞流程的问题，能够及时寻找帮助，寻找解决问题的办法。</p><a id="more"></a><p>如果遇到问题只知道自己琢磨，那就会浪费很多时间，导致项目延期；<br>如果不能及时沟通，遇到项目临时出现变故，需要紧急协调资源，你只会束手无策，不知所以；<br>职场是一个需要与人沟通的环境，如果只是单纯的基础执行者，独立模块的功能你也许能够很好的解决，对于多方合作的项目你将束手无策，当然也就不会混的太好。<br>所以有问题，主动沟通，不用怕，不用担心，不用害羞，迈出了第一步，才会有第二步。<br>做到如上，很简单，只要把心思放在工作上，任何人都可以搞定。</p></li></ol><h5 id="如何晋级为一个优秀的执行者"><a href="#如何晋级为一个优秀的执行者" class="headerlink" title="如何晋级为一个优秀的执行者"></a>如何晋级为一个优秀的执行者</h5><ol><li>工作中，能够主动思考，更好的解决方案，并善于总结。</li><li>对于工作中遇到的棘手问题解决后，能够梳理成自己的方法论，并分享给同事，共同进步。</li><li>时刻思考着，如何去通过改善流程，或者去引入小的工具，提高工作效率，更高效的执行，节省资源。<br>如上，一样可以轻松胜任，不需要什么核心技术，只要你想，都可以做到。</li></ol><h5 id="基础执行者的核心竞争力"><a href="#基础执行者的核心竞争力" class="headerlink" title="基础执行者的核心竞争力"></a>基础执行者的核心竞争力</h5><ol><li>养成好的工作习惯，善于总结，建立自己的知识体系。<br>如果单纯只是不断的执行，没有积累总结，那永远只是一个执行者，不求上进，也就只能是低级的执行者（都不能算初级执行者，初级是满足职位要求，低级连岗位需求都做不好），久而久之，只能被淘汰。</li><li>对于交代的任务，能够主动沟通，主要推进，促使任务顺畅完成。</li><li>能够不骄不躁，把简单的事情，做到极致。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;如何做好基础的执行者&quot;&gt;&lt;a href=&quot;#如何做好基础的执行者&quot; class=&quot;headerlink&quot; title=&quot;如何做好基础的执行者&quot;&gt;&lt;/a&gt;如何做好基础的执行者&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;对于安排的任务，及时跟进，及时了解，及时产出结果，主动同步结果给leader。&lt;/li&gt;
&lt;li&gt;有好的工作习惯，每天工作结束，对于项目情况有一个简单的总结，并能主动同步给leader。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;遇到阻塞流程的问题，能够及时寻找帮助，寻找解决问题的办法。&lt;/p&gt;
    
    </summary>
    
      <category term="TestTheory" scheme="http://shadow000902.space/categories/TestTheory/"/>
    
    
  </entry>
  
  <entry>
    <title>测试人员需要的数据库知识</title>
    <link href="http://shadow000902.space/2017/12/03/%E6%B5%8B%E8%AF%95%E4%BA%BA%E5%91%98%E9%9C%80%E8%A6%81%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9F%A5%E8%AF%86/"/>
    <id>http://shadow000902.space/2017/12/03/测试人员需要的数据库知识/</id>
    <published>2017-12-03T14:28:34.000Z</published>
    <updated>2017-12-11T05:27:19.272Z</updated>
    
    <content type="html"><![CDATA[<h5 id="第一阶段、基础需求"><a href="#第一阶段、基础需求" class="headerlink" title="第一阶段、基础需求"></a>第一阶段、基础需求</h5><ol><li><p>知道常用的数据库类型<br>MySQL、MSSQL、Oracle、Memcached、Redis、MongoDB</p></li><li><p>数据库的安装、部署，基础使用<br>至少得会自己在服务器或自己电脑上安装个数据库</p><a id="more"></a></li><li><p>常用的数据库连接工具<br>WorkBench、Navicat、Sequel Pro等</p></li><li><p>数据库的基本配置<br>修改密码，添加用户等</p></li><li><p>库/表操作<br>创建库/表，删除库/表，查看库/表</p></li><li><p>基本命令<br>基本的增删改查语句</p></li></ol><h5 id="第二阶段、一些对数据有强需求的业务测试"><a href="#第二阶段、一些对数据有强需求的业务测试" class="headerlink" title="第二阶段、一些对数据有强需求的业务测试"></a>第二阶段、一些对数据有强需求的业务测试</h5><ol><li><p>备份、还原数据库</p></li><li><p>稍微复杂点的SQL<br>多表查询、子查询 等等</p></li><li><p>存储过程 、视图 等</p></li><li><p>数据导入、导出数据 等</p></li><li><p>造数据<br>实际测试过程中，经常需要通过数据库造一些测试数据</p></li></ol><h5 id="第三阶段、数据库的一些优化知识安全知识"><a href="#第三阶段、数据库的一些优化知识安全知识" class="headerlink" title="第三阶段、数据库的一些优化知识安全知识"></a>第三阶段、数据库的一些优化知识安全知识</h5><p>如慢sql 、sql优化、使用规范等，主要是方便定位问题、性能优化 等</p><p>待补充~</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;第一阶段、基础需求&quot;&gt;&lt;a href=&quot;#第一阶段、基础需求&quot; class=&quot;headerlink&quot; title=&quot;第一阶段、基础需求&quot;&gt;&lt;/a&gt;第一阶段、基础需求&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;知道常用的数据库类型&lt;br&gt;MySQL、MSSQL、Oracle、Memcached、Redis、MongoDB&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据库的安装、部署，基础使用&lt;br&gt;至少得会自己在服务器或自己电脑上安装个数据库&lt;/p&gt;
    
    </summary>
    
      <category term="TestTheory" scheme="http://shadow000902.space/categories/TestTheory/"/>
    
    
  </entry>
  
  <entry>
    <title>安卓无线ADB连接</title>
    <link href="http://shadow000902.space/2017/11/04/%E5%AE%89%E5%8D%93%E6%97%A0%E7%BA%BFADB%E8%BF%9E%E6%8E%A5/"/>
    <id>http://shadow000902.space/2017/11/04/安卓无线ADB连接/</id>
    <published>2017-11-04T14:00:31.000Z</published>
    <updated>2017-12-11T05:18:23.498Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>在手机上安装<code>QPython</code><br>GitHub上的<a href="https://github.com/qpython-android/qpython/releases" target="_blank" rel="noopener">下载链接</a></p></li><li><p>在手机上打开<code>QPython</code>软件的<code>Terminal</code>，安装<code>uiautomator2</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Since uiautomator2 is still developing, you have to add --pre to install development version</span></span><br><span class="line">pip install --pre uiautomator2</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>在手机上安装<code>app-uiautomator.apk</code><br>最新版<a href="https://github.com/openatx/android-uiautomator-server/releases" target="_blank" rel="noopener">下载链接</a></p></li><li><p>导入最新版的<code>atx-agent</code>到手机中<br>最新版<a href="https://github.com/openatx/atx-agent/releases" target="_blank" rel="noopener">下载地址</a><br>下载以<code>linux_armv7.tar.gz</code>结尾的二进制包。绝大部分手机都是linux-arm架构的。<br>解压出<code>atx-agent</code>文件，导入到手机中并启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb push atx-agent /data/<span class="built_in">local</span>/tmp</span><br><span class="line">adb shell chmod 755 /data/<span class="built_in">local</span>/tmp/atx-agent</span><br><span class="line"><span class="comment"># launch atx-agent in daemon mode</span></span><br><span class="line">adb shell /data/<span class="built_in">local</span>/tmp/atx-agent -d</span><br><span class="line"><span class="comment"># example: server started, listening on 192.168.28.230:7912</span></span><br></pre></td></tr></table></figure></li></ol><p>假设手机的地址是<code>$DEVICE_URL</code>(eg: <code>http://192.168.28.230:7912</code>)</p><ol><li><p>无线访问手机系统</p><ol><li><p>获取当前程序版本</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="variable">$DEVICE_URL</span>/version</span><br><span class="line"><span class="comment"># expect example: 0.0.7</span></span><br></pre></td></tr></table></figure></li><li><p>安装应用</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -d url=<span class="string">"http://some-host/some.apk"</span> <span class="variable">$DEVICE_URL</span>/install</span><br><span class="line"><span class="comment"># expect example: install id</span></span><br></pre></td></tr></table></figure> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get install progress</span></span><br><span class="line">curl -X GET <span class="variable">$DEVICE_URL</span>/install/1</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"1"</span>,<span class="string">"totalSize"</span>:985435,<span class="string">"copiedSize"</span>:16951,<span class="string">"message"</span>:<span class="string">"downloading"</span>&#125;</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"1"</span>,<span class="string">"totalSize"</span>:985435,<span class="string">"copiedSize"</span>:985435,<span class="string">"message"</span>:<span class="string">"success installed"</span>&#125;</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"1"</span>,<span class="string">"totalSize"</span>:985435,<span class="string">"copiedSize"</span>:342641,<span class="string">"message"</span>:<span class="string">"error install"</span>,<span class="string">"error"</span>:<span class="string">"exit status 1"</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>上传文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上传到/sdcard目录下 (url以/结尾)</span></span><br><span class="line">curl -F <span class="string">"file=@somefile.txt"</span> <span class="variable">$DEVICE_URL</span>/upload/sdcard/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传到/sdcard/tmp.txt</span></span><br><span class="line">curl -F <span class="string">"file=@somefile.txt"</span> <span class="variable">$DEVICE_URL</span>/upload/sdcard/tmp.txt</span><br></pre></td></tr></table></figure></li><li><p>程序自升级<br> 升级程序从gihub releases里面直接下载，升级完后自动重启</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 升级到最新版</span></span><br><span class="line">curl 10.0.0.1:7912/upgrade</span><br></pre></td></tr></table></figure> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定升级的版本</span></span><br><span class="line">curl <span class="string">"<span class="variable">$DEVICE_URL</span>/upgrade?version=0.0.7"</span></span><br></pre></td></tr></table></figure></li><li><p><code>ATX Log Path</code></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sdcard/atx-agent.log</span><br></pre></td></tr></table></figure></li></ol></li></ol><p>RESOURCE:<br>    <a href="https://testerhome.com/topics/10361" target="_blank" rel="noopener">testerhome_10361</a><br>    <a href="https://testerhome.com/topics/10298" target="_blank" rel="noopener">testerhome_10298</a><br>    <a href="https://github.com/openatx/uiautomator2" target="_blank" rel="noopener">github_uiautomator2</a><br>    <a href="https://github.com/openatx/android-uiautomator-server" target="_blank" rel="noopener">github_android-uiautomator-server</a><br>    <a href="https://github.com/openatx/atx-agent" target="_blank" rel="noopener">github_atx-agent</a><br>    <a href="https://github.com/qpython-android/qpython" target="_blank" rel="noopener">github_qpython</a></p>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;在手机上安装&lt;code&gt;QPython&lt;/code&gt;&lt;br&gt;GitHub上的&lt;a href=&quot;https://github.com/qpython-android/qpython/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载链接&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在手机上打开&lt;code&gt;QPython&lt;/code&gt;软件的&lt;code&gt;Terminal&lt;/code&gt;，安装&lt;code&gt;uiautomator2&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Since uiautomator2 is still developing, you have to add --pre to install development version&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip install --pre uiautomator2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="http://shadow000902.space/categories/Android/"/>
    
    
      <category term="adb" scheme="http://shadow000902.space/tags/adb/"/>
    
  </entry>
  
  <entry>
    <title>Shell小脚本</title>
    <link href="http://shadow000902.space/2017/11/04/Shell%E5%B0%8F%E8%84%9A%E6%9C%AC/"/>
    <id>http://shadow000902.space/2017/11/04/Shell小脚本/</id>
    <published>2017-11-04T07:51:48.000Z</published>
    <updated>2018-02-26T10:45:30.803Z</updated>
    
    <content type="html"><![CDATA[<h5 id="删除目录下的除今天外的所有文件夹"><a href="#删除目录下的除今天外的所有文件夹" class="headerlink" title="删除目录下的除今天外的所有文件夹"></a>删除目录下的除今天外的所有文件夹</h5><ol><li><p>目录下的文件夹规律【年月日时分秒】</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TaoYi-Mac in ~/Desktop/test0001 [15:54:29] </span></span><br><span class="line">$ ll</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x  2 taoyi  staff    68B 11  3 18:29 20171027121219</span><br><span class="line">drwxr-xr-x  3 taoyi  staff   102B 11  3 18:30 20171101124273</span><br><span class="line">drwxr-xr-x  3 taoyi  staff   102B 11  3 18:29 20171102124212</span><br><span class="line">drwxr-xr-x  2 taoyi  staff    68B 11  3 18:29 20171103121216</span><br><span class="line">drwxr-xr-x  3 taoyi  staff   102B 11  3 18:29 20171103124211</span><br><span class="line">drwxr-xr-x  2 taoyi  staff    68B 11  3 18:29 20171103124216</span><br><span class="line">drwxr-xr-x  2 taoyi  staff    68B 11  3 18:29 20171104124212</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>shell脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 目录下的所有文件夹名称写入文件``dir``</span></span><br><span class="line">ls -l /Users/taoyi/Desktop/test0001/ | awk <span class="string">'/^d/ &#123;print $NF&#125;'</span> &gt; /Users/taoyi/Desktop/test0001/dir</span><br><span class="line"></span><br><span class="line"><span class="comment"># `date +%Y%m%d`，获取当天的年月日</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(grep -v `date +%Y%m%d` /Users/taoyi/Desktop/test0001/dir)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="comment"># 删除目录下的文件夹</span></span><br><span class="line">    rm -rf /Users/taoyi/Desktop/test0001/<span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除零时写入的文件``dir``</span></span><br><span class="line">rm -rf /Users/taoyi/Desktop/test0001/dir</span><br></pre></td></tr></table></figure></li></ol><h5 id="kill指定name的pid"><a href="#kill指定name的pid" class="headerlink" title="kill指定name的pid"></a>kill指定name的pid</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kill指定name的pid</span></span><br><span class="line"><span class="comment"># 示例："./kill_pidname.sh jhost"</span></span><br><span class="line"></span><br><span class="line">pid_name=<span class="variable">$1</span></span><br><span class="line">ps -ef | grep -v grep | grep <span class="variable">$pid_name</span> | <span class="keyword">while</span> <span class="built_in">read</span> username pid other</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">kill</span> -9 <span class="variable">$pid</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h5 id="adb截图导出并展示"><a href="#adb截图导出并展示" class="headerlink" title="adb截图导出并展示"></a>adb截图导出并展示</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调用安卓系统内部截图命令screencap截图保存</span></span><br><span class="line">adb shell /system/bin/screencap -p /sdcard/screenshot.jpg</span><br><span class="line"><span class="comment"># 导出图片到本地目录</span></span><br><span class="line">adb pull /sdcard/screenshot.jpg ~/shell-tools/ScreenShots/</span><br><span class="line"><span class="comment"># 打开图片</span></span><br><span class="line">open ~/shell-tools/ScreenShots/screenshot.jpg</span><br></pre></td></tr></table></figure><h5 id="android打包并安装"><a href="#android打包并安装" class="headerlink" title="android打包并安装"></a>android打包并安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /Users/taoyi/git_projects/Gitlab/androidclientnative/</span><br><span class="line">git checkout develop</span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line">rm -rf /Users/taoyi/git_projects/Gitlab/androidclientnative/app/build/</span><br><span class="line">rm -rf /Users/taoyi/shell-tools/APK/*.apk</span><br><span class="line"></span><br><span class="line">gradle clean assembleFengcheBeta</span><br><span class="line"><span class="comment"># gradle clean assembleFengchePreview</span></span><br><span class="line"><span class="comment"># gradle clean assembleFengcheRelease</span></span><br><span class="line"></span><br><span class="line">cp -rf /Users/taoyi/git_projects/Gitlab/androidclientnative/app/build/outputs/apk/beta/*.apk /Users/taoyi/shell-tools/APK/</span><br><span class="line">adb uninstall com.souche.fengche</span><br><span class="line">adb install /Users/taoyi/shell-tools/APK/*.apk</span><br></pre></td></tr></table></figure><h5 id="Shell脚本解析xml文件字段"><a href="#Shell脚本解析xml文件字段" class="headerlink" title="Shell脚本解析xml文件字段"></a>Shell脚本解析xml文件字段</h5><p>示例文件内容<code>build.xml</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parameters</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hudson.model.StringParameterValue</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>SCHEME<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>scheme configuration of this project StoreCI<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>Coding_iOS<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">hudson.model.StringParameterValue</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hudson.model.StringParameterValue</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>CONFIGURATION<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>configuration of packing, Release/Debug<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>Release<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">hudson.model.StringParameterValue</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hudson.model.StringParameterValue</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>OUTPUT_FOLDER<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>output folder for build artifacts, it is located in workspace/project root dir.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>build_outputs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">hudson.model.StringParameterValue</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hudson.model.StringParameterValue</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>BRANCH<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>git repository branch<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>master<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">hudson.model.StringParameterValue</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parameters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">causeBag</span> <span class="attr">class</span>=<span class="string">"linked-hash-map"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hudson.model.Cause_-UserIdCause</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">userId</span>&gt;</span>shadow<span class="tag">&lt;/<span class="name">userId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">hudson.model.Cause_-UserIdCause</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">int</span>&gt;</span>1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">causeBag</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取&lt;userId&gt;shadow&lt;/userId&gt;中的shadow</span></span><br><span class="line">sed -n <span class="string">'s/.*&gt;\(.*\)&lt;\/userId&gt;/\1/p'</span> <span class="variable">$JENKINS_HOME</span>/<span class="built_in">jobs</span>/<span class="variable">$JOB_NAME</span>/builds/<span class="variable">$BUILD_NUMBER</span>/build.xml</span><br><span class="line"><span class="comment"># 获取&lt;userId&gt;shadow&lt;/userId&gt;中的shadow，赋值给userId</span></span><br><span class="line"><span class="comment"># 使用位置：Jenkins获取构建人</span></span><br><span class="line">userId=(`sed -n <span class="string">'s/.*&gt;\(.*\)&lt;\/userId&gt;/\1/p'</span> <span class="variable">$JENKINS_HOME</span>/<span class="built_in">jobs</span>/<span class="variable">$JOB_NAME</span>/builds/<span class="variable">$BUILD_NUMBER</span>/build.xml`)</span><br></pre></td></tr></table></figure><h5 id="Shell脚本获取文本特定字段"><a href="#Shell脚本获取文本特定字段" class="headerlink" title="Shell脚本获取文本特定字段"></a>Shell脚本获取文本特定字段</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取log文件第一行中，``[0m``字符后面的所有字符</span></span><br><span class="line">head -1 <span class="variable">$JENKINS_HOME</span>/<span class="built_in">jobs</span>/<span class="variable">$JOB_NAME</span>/builds/<span class="variable">$BUILD_NUMBER</span>/<span class="built_in">log</span> | awk -F <span class="string">'\\[0m'</span> <span class="string">'&#123;print $NF&#125;'</span></span><br></pre></td></tr></table></figure><h5 id="Jenkins获取构建人，并赋值到变量并使用"><a href="#Jenkins获取构建人，并赋值到变量并使用" class="headerlink" title="Jenkins获取构建人，并赋值到变量并使用"></a>Jenkins获取构建人，并赋值到变量并使用</h5><p>取值<code>shell</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">head -1 <span class="variable">$JENKINS_HOME</span>/<span class="built_in">jobs</span>/<span class="variable">$JOB_NAME</span>/builds/<span class="variable">$BUILD_NUMBER</span>/<span class="built_in">log</span> | awk -F <span class="string">'\\[0m'</span> <span class="string">'&#123;print $NF&#125;'</span> &gt; userId</span><br><span class="line"><span class="built_in">read</span> userId &lt; userId</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"userId=<span class="variable">$&#123;userId&#125;</span>"</span> &gt; userId.txt</span><br></pre></td></tr></table></figure></p><p><code>set Build Name</code>中加入构建人<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;PROPFILE,file="userId.txt",property="userId"&#125;</span></span><br></pre></td></tr></table></figure></p><h5 id="Jenkins获取安卓APP版本号并赋值给变量并使用"><a href="#Jenkins获取安卓APP版本号并赋值给变量并使用" class="headerlink" title="Jenkins获取安卓APP版本号并赋值给变量并使用"></a>Jenkins获取安卓APP版本号并赋值给变量并使用</h5><p>取值<code>shell</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">versionName=`cat app/gradle.properties | grep <span class="string">'VERSION_NAME'</span> | cut -d <span class="string">'='</span> -f 2 `</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"versionName=<span class="variable">$&#123;versionName&#125;</span>"</span> &gt; versionName.txt</span><br></pre></td></tr></table></figure></p><p><code>set Build Name</code>中加入安卓APP版本号<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;PROPFILE,file="versionName.txt",property="versionName"&#125;</span></span><br></pre></td></tr></table></figure></p><h5 id="获取目录的所有csv文件并合并为一个csv文件"><a href="#获取目录的所有csv文件并合并为一个csv文件" class="headerlink" title="获取目录的所有csv文件并合并为一个csv文件"></a>获取目录的所有csv文件并合并为一个csv文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">interface=<span class="variable">$1</span></span><br><span class="line"><span class="comment"># 进入脚本所在的位置</span></span><br><span class="line"><span class="built_in">cd</span> /Users/taoyi/git_projects/Gitlab/RF_InterfaceTest/Library/处理接口文档</span><br><span class="line"><span class="comment"># 获取./output/api-docs/souche/*/*.csv文件并移动到./CSV目录下</span></span><br><span class="line">mv -f ./*/*/*/*/*.csv ./CSV/</span><br><span class="line"><span class="comment"># 把所有的csv文件合并为一个together.csv文件</span></span><br><span class="line">cat ./CSV/*.csv &gt; ./<span class="variable">$interface</span>.csv</span><br><span class="line"><span class="comment"># 删除中间的处理文件</span></span><br><span class="line">rm -rf ./output</span><br><span class="line">rm -rf ./CSV/*.csv</span><br><span class="line"><span class="comment"># 在第一行下加入表头行</span></span><br><span class="line"><span class="comment">#sed -ig "" '1i\属于哪个服务,属于哪个suite,对应RF接口名称\n' ./together.csv</span></span><br></pre></td></tr></table></figure><h5 id="Json中的字典转化成Robot-Framework的参数格式"><a href="#Json中的字典转化成Robot-Framework的参数格式" class="headerlink" title="Json中的字典转化成Robot-Framework的参数格式"></a><code>Json</code>中的字典转化成<code>Robot-Framework</code>的参数格式</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ``Json``中的字典转化成``Robot-Framework``的参数格式</span></span><br><span class="line"><span class="comment"># 先把需要修改的json文本写入文件，再对该文件进行操作</span></span><br><span class="line"><span class="comment"># 示例："./change_Dict.sh pice"</span></span><br><span class="line"></span><br><span class="line">file_name=<span class="variable">$1</span></span><br><span class="line">sed -ig <span class="string">'s/":/=/g'</span> <span class="variable">$file_name</span></span><br><span class="line">sed -ig <span class="string">'s/"//g'</span> <span class="variable">$file_name</span></span><br><span class="line">sed -ig <span class="string">'s/,/    /g'</span> <span class="variable">$file_name</span></span><br></pre></td></tr></table></figure><h5 id="简单的服务器部署脚本"><a href="#简单的服务器部署脚本" class="headerlink" title="简单的服务器部署脚本"></a>简单的服务器部署脚本</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -o errexit</span><br><span class="line"><span class="built_in">set</span> -o xtrace</span><br><span class="line"></span><br><span class="line">dir_project_home=<span class="string">"/home/souche/projects/topgear"</span></span><br><span class="line">dir_tomcat_home=<span class="string">"/home/souche/tomcats/12001_topgear-test"</span></span><br><span class="line">file_war=<span class="string">"*.war"</span></span><br><span class="line">file_catalina_out=<span class="variable">$&#123;dir_tomcat_home&#125;</span><span class="string">"/logs/catalina.out"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----update code from git begin"</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;dir_project_home&#125;</span></span><br><span class="line">git reset --hard</span><br><span class="line">git pull</span><br><span class="line">branch=<span class="variable">$1</span></span><br><span class="line"><span class="keyword">if</span> [ ! -n <span class="string">"<span class="variable">$branch</span>"</span> ];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    git checkout master</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    git checkout <span class="variable">$branch</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----update code from git end"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----build project begin"</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;dir_project_home&#125;</span></span><br><span class="line"><span class="comment"># mvn config:load -Denv=DEV-STABLE -Dtoken=O6eq7WSKlC</span></span><br><span class="line">mvn clean install  -DskipTests=<span class="literal">true</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----build project end"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----shutdown tomcat"</span></span><br><span class="line">ps auxwww | grep java | grep <span class="variable">$&#123;dir_tomcat_home&#125;</span> | awk <span class="string">'&#123;print $2&#125;'</span> | xargs <span class="built_in">kill</span> -9 2&gt;/dev/null;</span><br><span class="line">sleep 1s</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----reset war file"</span></span><br><span class="line">rm -rf <span class="variable">$&#123;dir_tomcat_home&#125;</span>/webapps/ROOT;</span><br><span class="line">rm -rf <span class="variable">$&#123;dir_tomcat_home&#125;</span>/webapps/ROOT.war;</span><br><span class="line">cp -r <span class="variable">$&#123;dir_project_home&#125;</span>/topgear-web/target/<span class="variable">$file_war</span> <span class="variable">$&#123;dir_tomcat_home&#125;</span>/webapps/ROOT.war</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----start tomcat"</span></span><br><span class="line">sh <span class="variable">$&#123;dir_tomcat_home&#125;</span>/bin/startup.sh;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;dir_tomcat_home&#125;</span>/logs</span><br><span class="line">tail -f catalina.out</span><br></pre></td></tr></table></figure><h5 id="自动部署服务器应用"><a href="#自动部署服务器应用" class="headerlink" title="自动部署服务器应用"></a><strong>自动部署服务器应用</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行脚本：</span></span><br><span class="line"><span class="comment"># ./new_server.sh server_tomcat git_repo nu</span></span><br><span class="line"></span><br><span class="line">server_tomcat=<span class="variable">$1</span>    <span class="comment"># server_tomcat 比如：12001_topgear-test</span></span><br><span class="line">git_repo=<span class="variable">$2</span>         <span class="comment"># git_repo 比如：topgear</span></span><br><span class="line">nu=<span class="variable">$3</span>               <span class="comment"># nu 比如：01</span></span><br><span class="line"></span><br><span class="line">tar -xvf apache-tomcat-9.0.4.tar.gz</span><br><span class="line">mv apache-tomcat-9.0.4 <span class="variable">$&#123;server_tomcat&#125;</span></span><br><span class="line">cp 12001_topgear-test/deploy.sh <span class="variable">$&#123;server_tomcat&#125;</span></span><br><span class="line">cp 12001_topgear-test/conf/server.xml <span class="variable">$&#123;server_tomcat&#125;</span>/conf/server.xml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用sed命令时，如果</span></span><br><span class="line">sed -ig <span class="string">"s/11001/110<span class="variable">$&#123;nu&#125;</span>/g"</span> ./<span class="variable">$&#123;server_tomcat&#125;</span>/conf/server.xml</span><br><span class="line">sed -ig <span class="string">"s/12001/120<span class="variable">$&#123;nu&#125;</span>/g"</span> ./<span class="variable">$&#123;server_tomcat&#125;</span>/conf/server.xml</span><br><span class="line">sed -ig <span class="string">"s/13001/130<span class="variable">$&#123;nu&#125;</span>/g"</span> ./<span class="variable">$&#123;server_tomcat&#125;</span>/conf/server.xml</span><br><span class="line">sed -ig <span class="string">"s/14001/140<span class="variable">$&#123;nu&#125;</span>/g"</span> ./<span class="variable">$&#123;server_tomcat&#125;</span>/conf/server.xml</span><br><span class="line">sed -ig <span class="string">"s/15001/150<span class="variable">$&#123;nu&#125;</span>/g"</span> ./<span class="variable">$&#123;server_tomcat&#125;</span>/conf/server.xml</span><br><span class="line"></span><br><span class="line">sed -ig <span class="string">"s/topgear\"/<span class="variable">$&#123;git_repo&#125;</span>\"/g"</span> ./<span class="variable">$&#123;server_tomcat&#125;</span>/deploy.sh</span><br><span class="line">sed -ig <span class="string">"s/12001_topgear-test/<span class="variable">$&#123;server_tomcat&#125;</span>/g"</span> ./<span class="variable">$&#123;server_tomcat&#125;</span>/deploy.sh</span><br><span class="line">sed -ig <span class="string">"s/topgear-web/<span class="variable">$&#123;git_repo&#125;</span>-web/g"</span> ./<span class="variable">$&#123;server_tomcat&#125;</span>/deploy.sh</span><br><span class="line">sed -ig <span class="string">'s/mvn config:load/# mvn config:load/g'</span> ./<span class="variable">$&#123;server_tomcat&#125;</span>/deploy.sh</span><br></pre></td></tr></table></figure><p>Sed后面的表达式一般用单引号引起来<code>&#39;</code>，当需要使用<strong>变量</strong>时就换用双引号<code>&quot;</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;删除目录下的除今天外的所有文件夹&quot;&gt;&lt;a href=&quot;#删除目录下的除今天外的所有文件夹&quot; class=&quot;headerlink&quot; title=&quot;删除目录下的除今天外的所有文件夹&quot;&gt;&lt;/a&gt;删除目录下的除今天外的所有文件夹&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;目录下的文件夹规律【年月日时分秒】&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# taoyi @ TaoYi-Mac in ~/Desktop/test0001 [15:54:29] &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;total 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drwxr-xr-x  2 taoyi  staff    68B 11  3 18:29 20171027121219&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drwxr-xr-x  3 taoyi  staff   102B 11  3 18:30 20171101124273&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drwxr-xr-x  3 taoyi  staff   102B 11  3 18:29 20171102124212&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drwxr-xr-x  2 taoyi  staff    68B 11  3 18:29 20171103121216&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drwxr-xr-x  3 taoyi  staff   102B 11  3 18:29 20171103124211&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drwxr-xr-x  2 taoyi  staff    68B 11  3 18:29 20171103124216&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drwxr-xr-x  2 taoyi  staff    68B 11  3 18:29 20171104124212&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Tips" scheme="http://shadow000902.space/categories/Tips/"/>
    
    
      <category term="shell" scheme="http://shadow000902.space/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Robot-Framework框架系统关键字之断言</title>
    <link href="http://shadow000902.space/2017/08/28/Robot-Framework%E6%A1%86%E6%9E%B6%E7%B3%BB%E7%BB%9F%E5%85%B3%E9%94%AE%E5%AD%97%E4%B9%8B%E6%96%AD%E8%A8%80/"/>
    <id>http://shadow000902.space/2017/08/28/Robot-Framework框架系统关键字之断言/</id>
    <published>2017-08-27T17:07:24.000Z</published>
    <updated>2017-12-11T05:27:19.196Z</updated>
    
    <content type="html"><![CDATA[<h5 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 三个list变量：list_a、list_b、list_c；</span></span><br><span class="line">@&#123;list_a&#125;    create list    1    a    <span class="variable">$&#123;21&#125;</span>    21    12</span><br><span class="line">@&#123;list_b&#125;    <span class="built_in">set</span> variable    1.0    a    <span class="variable">$&#123;21&#125;</span>    21    21</span><br><span class="line">@&#123;list_c&#125;    create list</span><br><span class="line"><span class="comment"># 两个scalar变量：string和name</span></span><br><span class="line"><span class="variable">$&#123;string&#125;</span>    <span class="built_in">set</span> variable    taoyi is <span class="keyword">in</span> hangzhou</span><br><span class="line"><span class="variable">$&#123;name&#125;</span>    <span class="built_in">set</span> variable    ty</span><br></pre></td></tr></table></figure>  <a id="more"></a><h5 id="断言实例"><a href="#断言实例" class="headerlink" title="断言实例"></a>断言实例</h5><ol><li><p><code>should contain</code>、<code>should not contain</code>、<code>should contain x times</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">should contain    <span class="variable">$&#123;list_b&#125;</span>    1.0</span><br><span class="line">should not contain    <span class="variable">$&#123;list_b&#125;</span>    1</span><br><span class="line">should contain x <span class="built_in">times</span>    <span class="variable">$&#123;list_b&#125;</span>    21    2</span><br><span class="line"><span class="comment"># 变量$&#123;list_b&#125;包含对象1.0而不包含对象1，且对象21在变量$&#123;lst_b&#125;出现了两次</span></span><br></pre></td></tr></table></figure></li><li><p><code>should be empty</code>、<code>should not be empty</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">should be empty    <span class="variable">$&#123;list_c&#125;</span></span><br><span class="line">should not be empty    <span class="variable">$&#123;list_a&#125;</span></span><br><span class="line"><span class="comment"># 变量$&#123;list_c&#125;没有赋值，所以为空；相反，变量$&#123;list_a&#125;有赋初始值，故为非空</span></span><br></pre></td></tr></table></figure></li><li><p><code>should be equal</code>、<code>should not be equal</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">should be equal    <span class="variable">$&#123;list_a[1]&#125;</span>    <span class="variable">$&#123;list_b[1]&#125;</span></span><br><span class="line">should not be equal    <span class="variable">$&#123;list_a&#125;</span>    <span class="variable">$&#123;list_b&#125;</span></span><br><span class="line"><span class="comment"># $&#123;list_a[1]&#125;=a，$&#123;list_b[1]&#125;=a故两个对象相等;而$&#123;list_a&#125;和$&#123;list_b&#125;有元素不一致，这两个对象不相等</span></span><br></pre></td></tr></table></figure></li><li><p><code>should be equal as numbers</code>、<code>should not be equal as numbers</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">should be equal as numbers    <span class="variable">$&#123;list_b[0]&#125;</span>    1.0000</span><br><span class="line">should not be equal as number    <span class="variable">$&#123;list_b[0]&#125;</span>    1.1</span><br><span class="line"><span class="comment"># $&#123;list_b[0]&#125;=1，忽略精度，故与1.0000相等；而即使是忽略精度，1与1.1还是不相等的</span></span><br></pre></td></tr></table></figure></li><li><p><code>should be equal as integers</code>、<code>should not be equal as integers</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">should be equal as integers    <span class="variable">$&#123;list_a[3]&#125;</span>    <span class="variable">$&#123;list_b[3]&#125;</span></span><br><span class="line">should not be equal as integers    <span class="variable">$&#123;list_a[4]&#125;</span>    <span class="variable">$&#123;list_b[4]&#125;</span></span><br><span class="line"><span class="comment"># $&#123;list_a[3]&#125;=21，$&#123;list_b[3]&#125;=21，而系统默认为字符串格式的“21”,故需要转化为整数类型，转化为整数后两个对象相等</span></span><br><span class="line"><span class="comment"># $&#123;list_a[4]&#125;=12，$&#123;list_b[4]&#125;=21，即使转化为整数后两个对象依旧是不相等</span></span><br></pre></td></tr></table></figure></li><li><p><code>should be equal as strings</code>、<code>should not be equal as strings</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">should be equal as strings    <span class="variable">$&#123;list_a[2]&#125;</span>    <span class="variable">$&#123;list_b[2]&#125;</span></span><br><span class="line">should not be equal as strings    <span class="variable">$&#123;list_a[0]&#125;</span>    <span class="variable">$&#123;list_b[0]&#125;</span></span><br><span class="line"><span class="comment"># $&#123;list_a[2]&#125;=$&#123;21&#125;，$&#123;list_b[2]&#125;=$&#123;21&#125;，而均为数值型的21,故需要转化为字符串类型，转化为字符串后两个对象相等</span></span><br></pre></td></tr></table></figure></li><li><p><code>should be true</code>、<code>should not be true</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">should be <span class="literal">true</span>    <span class="variable">$&#123;list_a[0]&#125;</span> &lt; 10</span><br><span class="line">should not be <span class="literal">true</span>    <span class="variable">$&#123;list_a[0]&#125;</span> &lt; 1</span><br><span class="line"><span class="comment"># $&#123;list_a[0]&#125;=1（字符串类型），其ASCII值比字符串10的ASCII值小</span></span><br></pre></td></tr></table></figure></li><li><p><code>should start with</code>、<code>should not start with</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">should start with    <span class="variable">$&#123;string&#125;</span>    tao</span><br><span class="line">should not start with    <span class="variable">$&#123;string&#125;</span>    h</span><br><span class="line"><span class="comment"># $&#123;string&#125;="taoyi is in hangzhou"是以sha开头，而非以h开头</span></span><br></pre></td></tr></table></figure></li><li><p><code>should end with</code>、<code>should not end with</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">should end with    <span class="variable">$&#123;string&#125;</span>    hangzhou</span><br><span class="line">should not end with    <span class="variable">$&#123;string&#125;</span>    taoyi</span><br><span class="line"><span class="comment"># $&#123;string&#125;="taoyi is in hangzhou"是以hangzhou结尾，而非以taoyi结尾</span></span><br></pre></td></tr></table></figure></li><li><p><code>should match</code>、<code>should not match</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">should match    <span class="variable">$&#123;name&#125;</span>    t?</span><br><span class="line">should not match    <span class="variable">$&#123;string&#125;</span>    h?*</span><br><span class="line"><span class="comment"># 模式匹配和shell中的通配符类似，它区分大小写，'*'匹配0~无穷多个字符，“？”单个字符</span></span><br><span class="line"><span class="comment"># $&#123;name&#125;=ty,由以t开头的两个字母组成</span></span><br></pre></td></tr></table></figure></li><li><p><code>should match regexp</code>、<code>should not match regexp</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">should match regexp    <span class="variable">$&#123;name&#125;</span>    ^\\w&#123;2&#125;$</span><br><span class="line">should not match regexp    <span class="variable">$&#123;name&#125;</span>    ^\\d&#123;2&#125;$</span><br><span class="line"><span class="comment"># 反斜杠在测试数据是转义字符，因此模式中要使用双重转义；'^'和'$'字符可以用来表示字符串的开头和结尾</span></span><br><span class="line"><span class="comment"># $&#123;name&#125;=ty，是有两个字母--w&#123;2&#125;组成，而不是由两个数字--d&#123;2&#125;组成</span></span><br></pre></td></tr></table></figure></li></ol><p><a href="http://blog.sina.com.cn/s/blog_7f66d4ea0101k3fl.html" target="_blank" rel="noopener">转载</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;准备数据&quot;&gt;&lt;a href=&quot;#准备数据&quot; class=&quot;headerlink&quot; title=&quot;准备数据&quot;&gt;&lt;/a&gt;准备数据&lt;/h5&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 三个list变量：list_a、list_b、list_c；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@&amp;#123;list_a&amp;#125;    create list    1    a    &lt;span class=&quot;variable&quot;&gt;$&amp;#123;21&amp;#125;&lt;/span&gt;    21    12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@&amp;#123;list_b&amp;#125;    &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; variable    1.0    a    &lt;span class=&quot;variable&quot;&gt;$&amp;#123;21&amp;#125;&lt;/span&gt;    21    21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@&amp;#123;list_c&amp;#125;    create list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 两个scalar变量：string和name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$&amp;#123;string&amp;#125;&lt;/span&gt;    &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; variable    taoyi is &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; hangzhou&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$&amp;#123;name&amp;#125;&lt;/span&gt;    &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; variable    ty&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="RobotFramework" scheme="http://shadow000902.space/categories/RobotFramework/"/>
    
    
      <category term="robot-framework" scheme="http://shadow000902.space/tags/robot-framework/"/>
    
  </entry>
  
</feed>
