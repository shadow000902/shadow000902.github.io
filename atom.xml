<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shadow&#39;S Site</title>
  <icon>https://www.gravatar.com/avatar/7b03ab113f2f8c26715b5f45cee6f38f</icon>
  <subtitle>谁当声震人间，必长久深自缄默。谁当划破闪电，必长久如云漂泊。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://shadow000902.space/"/>
  <updated>2018-05-20T17:01:38.415Z</updated>
  <id>http://shadow000902.space/</id>
  
  <author>
    <name>shadow</name>
    <email>shadow000902@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>提问的智慧</title>
    <link href="http://shadow000902.space/2018/05/21/%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7/"/>
    <id>http://shadow000902.space/2018/05/21/提问的智慧/</id>
    <published>2018-05-20T16:43:39.000Z</published>
    <updated>2018-05-20T17:01:38.415Z</updated>
    
    <content type="html"><![CDATA[<p><strong>How To Ask Questions The Smart Way</strong></p><p>Copyright © 2001,2006,2014 Eric S. Raymond, Rick Moen</p><p>本指南英文版版权为 Eric S. Raymond, Rick Moen 所有。</p><p>原文网址：<a href="http://www.catb.org/~esr/faqs/smart-questions.html" target="_blank" rel="noopener">http://www.catb.org/~esr/faqs/smart-questions.html</a></p><p>Copyleft 2001 by D.H.Grand(nOBODY/Ginux), 2010 by Gasolin, 2015 by Ryan Wu</p><p>本中文指南是基于原文 3.10 版以及 2010 年由 <a href="https://github.com/gasolin" target="_blank" rel="noopener">Gasolin</a> 所翻译版本的最新翻译；</p>  <a id="more"></a><p>协助指出翻译问题，<strong><strong>请<a href="https://github.com/ryanhanwu/smartquestions/issues/new" target="_blank" rel="noopener">发 Issue</a>，或直接<a href="https://github.com/ryanhanwu/smartquestions/compare/" target="_blank" rel="noopener">发 Pull Request</a> 给我。</strong></strong></p><p>本文另有<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README.md" target="_blank" rel="noopener">繁體中文版</a>。</p><h2 id="原文版本历史"><a href="#原文版本历史" class="headerlink" title="原文版本历史"></a><a href="https://github.com/ryanhanwu/smartquestions/blob/master/history.md" target="_blank" rel="noopener">原文版本历史</a></h2><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#声明">声明</a></li><li><a href="#简介">简介</a></li><li><a href="#在提问之前">在提问之前</a></li><li><a href="#当你提问时">当你提问时</a><ul><li><a href="#慎选提问的论坛">慎选提问的论坛</a></li><li><a href="#stack-overflow">Stack Overflow</a></li><li><a href="#网站和-irc-论坛">网站和 IRC 论坛</a></li><li><a href="#第二步使用项目邮件列表">第二步，使用项目邮件列表</a></li><li><a href="#使用有意义且描述明确的标题">使用有意义且描述明确的标题</a></li><li><a href="#使问题容易回复">使问题容易回复</a></li><li><a href="#用清晰正确精准并合法语法的语句">用清晰、正确、精准并合法语法的语句</a></li><li><a href="#使用易于读取且标准的文件格式发送问题">使用易于读取且标准的文件格式发送问题</a></li><li><a href="#精确的描述问题并言之有物">精确的描述问题并言之有物</a></li><li><a href="#话不在多而在精">话不在多而在精</a></li><li><a href="#别动辄声称找到-bug">别动辄声称找到 Bug</a></li><li><a href="#可以低声下气但还是要先做功课">可以低声下气，但还是要先做功课</a></li><li><a href="#描述问题症状而非猜测">描述问题症状而非猜测</a></li><li><a href="#按发生时间先后列出问题症状">按发生时间先后列出问题症状</a></li><li><a href="#描述目标而不是过程">描述目标而不是过程</a></li><li><a href="#别要求使用私人电邮回复">别要求使用私人电邮回复</a></li><li><a href="#清楚明确的表达你的问题以及需求">清楚明确的表达你的问题以及需求</a></li><li><a href="#询问有关代码的问题时">询问有关代码的问题时</a></li><li><a href="#别把自己家庭作业的问题贴上来">别把自己家庭作业的问题贴上来</a></li><li><a href="#去掉无意义的提问句">去掉无意义的提问句</a></li><li><a href="#即使你很急也不要在标题写紧急">即使你很急也不要在标题写紧急</a></li><li><a href="#礼多人不怪而且有时还很有帮助">礼多人不怪，而且有时还很有帮助</a></li><li><a href="#问题解决后加个简短的补充说明">问题解决后，加个简短的补充说明</a></li></ul></li><li><a href="#如何解读答案">如何解读答案</a><ul><li><a href="#rtfm-和-stfw如何知道你已完全搞砸了">RTFM 和 STFW：如何知道你已完全搞砸了</a></li><li><a href="#如果还是搞不懂">如果还是搞不懂</a></li><li><a href="#处理无礼的回应">处理无礼的回应</a></li></ul></li><li><a href="#如何避免扮演失败者">如何避免扮演失败者</a></li><li><a href="#不该问的问题">不该问的问题</a></li><li><a href="#好问题与蠢问题">好问题与蠢问题</a></li><li><a href="#如果得不到回答">如果得不到回答</a></li><li><a href="#如何更好地回答问题">如何更好地回答问题</a></li><li><a href="#相关资源">相关资源</a></li><li><a href="#鸣谢">鸣谢</a></li></ul><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>许多项目在他们的使用协助/说明网页中链接了本指南，这么做很好，我们也鼓励大家都这么做。但如果你是负责管理这个项目网页的人，请在超链接附近的显著位置上注明：</p><p><strong><strong>本指南不提供此项目的实际支持服务！</strong></strong></p><p>我们已经深刻领教到少了上述声明所带来的痛苦。因为少了这点声明，我们不停地被一些白痴纠缠。这些白痴认为既然我们发布了这本指南，那么我们就有责任解决世上所有的技术问题。</p><p>如果你是因为需要某些协助而正在阅读这本指南，并且最后离开是因为发现从本指南作者们身上得不到直接的协助，那么你就是我们所说的那些白痴之一。别问我们问题，我们只会忽略你。我们在这本指南中是教你如何从那些真正懂得你所遇到软件或硬件问题的人取得协助，而 99% 的情况下那不会是我们。除非你确定本指南的作者之一刚好是你所遇到的问题领域的专家，否则请不要打扰我们，这样大家都会开心一点。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在<a href="http://www.catb.org/~esr/faqs/hacker-howto.html" target="_blank" rel="noopener">黑客</a>的世界里，当你拋出一个技术问题时，最终是否能得到有用的回答，往往取决于你所提问和追问的方式。本指南将教你如何正确的提问以获得你满意的答案。</p><p>不只是黑客，现在开放源代码（Open Source）软件已经相当盛行，你常常也可以由其他有经验的使用者身上得到好答案，这是件<strong>好事</strong>；使用者比起黑客来，往往对那些新手常遇到的问题更宽容一些。然而，将有经验的使用者视为黑客，并采用本指南所提的方法与他们沟通，同样也是能从他们身上得到满意回答的最有效方式。</p><p>首先你应该明白，黑客们喜爱有挑战性的问题，或者能激发他们思维的好问题。如果我们并非如此，那我们也不会成为你想询问的对象。如果你给了我们一个值得反复咀嚼玩味的好问题，我们自会对你感激不尽。好问题是激励，是厚礼。好问题可以提高我们的理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，”好问题！”是诚挚的大力称赞。</p><p>尽管如此，黑客们有着蔑视或傲慢面对简单问题的坏名声，这有时让我们看起来对新手、无知者似乎较有敌意，但其实不是那样的。</p><p>我们不讳言我们对那些不愿思考、或者在发问前不做他们该做的事的人的蔑视。那些人是时间杀手 -– 他们只想索取，从不付出，消耗我们可用在更有趣的问题或更值得回答的人身上的时间。我们称这样的人为 <code>失败者（撸瑟）</code> （由于历史原因，我们有时把它拼作 <code>lusers</code>）。</p><p>我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，电脑只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做。我们了解这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。尽管如此，我们回答问题的风格是指向那些真正对此有兴趣并愿意主动参与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就是在降低做自己最擅长的事情上的效率。</p><p>我们（在很大程度上）是自愿的，从繁忙的生活中抽出时间来解答疑惑，而且时常被提问淹没。所以我们无情的滤掉一些话题，特别是拋弃那些看起来像失败者的家伙，以便更高效的利用时间来回答<code>赢家（winner）</code>的问题。</p><p>如果你厌恶我们的态度，高高在上，或过于傲慢，不妨也设身处地想想。我们并没有要求你向我们屈服 – 事实上，我们大多数人非常乐意与你平等地交流，只要你付出小小努力来满足基本要求，我们就会欢迎你加入我们的文化。但让我们帮助那些不愿意帮助自己的人是没有效率的。无知没有关系，但装白痴就是不行。</p><p>所以，你不必在技术上很在行才能吸引我们的注意，但你必须表现出能引导你变得在行的特质 – 机敏、有想法、善于观察、乐于主动参与解决问题。如果你做不到这些使你与众不同的事情，我们建议你花点钱找家商业公司签个技术支持服务合同，而不是要求黑客个人无偿地帮助你。</p><p>如果你决定向我们求助，当然你也不希望被视为失败者，更不愿成为失败者中的一员。能立刻得到快速并有效答案的最好方法，就是像赢家那样提问 – 聪明、自信、有解决问题的思路，只是偶尔在特定的问题上需要获得一点帮助。</p><p>（欢迎对本指南提出改进意见。你可以 email 你的建议至 <a href="esr@thyrsus.com">esr@thyrsus.com</a> 或 <a href="respond-auto@linuxmafia.com">respond-auto@linuxmafia.com</a>。然而请注意，本文并非<a href="http://www.ietf.org/rfc/rfc1855.txt" target="_blank" rel="noopener">网络礼节</a>的通用指南，而我们通常会拒绝无助于在技术论坛得到有用答案的建议）。</p><h2 id="在提问之前"><a href="#在提问之前" class="headerlink" title="在提问之前"></a>在提问之前</h2><p>在你准备要通过电子邮件、新闻群组或者聊天室提出技术问题前，请先做到以下事情：</p><ol><li>尝试在你准备提问的论坛的旧文章中搜索答案。</li><li>尝试上网搜索以找到答案。</li><li>尝试阅读手册以找到答案。</li><li>尝试阅读常见问题文件（FAQ）以找到答案。</li><li>尝试自己检查或试验以找到答案。</li><li>向你身边的强者朋友打听以找到答案。</li><li>如果你是程序开发者，请尝试阅读源代码以找到答案。</li></ol><p>当你提出问题的时候，请先表明你已经做了上述的努力；这将有助于树立你并不是一个不劳而获且浪费别人的时间的提问者。如果你能一并表达在做了上述努力的过程中所<strong>学到</strong>的东西会更好，因为我们更乐于回答那些表现出能从答案中学习的人的问题。</p><p>运用某些策略，比如先用 Google 搜索你所遇到的各种错误信息（既搜索 <a href="http://groups.google.com/" target="_blank" rel="noopener">Google 论坛</a>，也搜索网页），这样很可能直接就找到了能解决问题的文件或邮件列表线索。即使没有结果，在邮件列表或新闻组寻求帮助时加上一句 <code>我在 Google 中搜过下列句子但没有找到什么有用的东西</code> 也是件好事，即使它只是表明了搜索引擎不能提供哪些帮助。这么做（加上搜索过的字串）也让遇到相似问题的其他人能被搜索引擎引导到你的提问来。</p><p>别着急，不要指望几秒钟的 Google 搜索就能解决一个复杂的问题。在向专家求助之前，再阅读一下常见问题文件（FAQ）、放轻松、坐舒服一些，再花点时间思考一下这个问题。相信我们，他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑拋出，只因你的第一次搜索没有找到答案（或者找到太多答案）。</p><p>准备好你的问题，再将问题仔细的思考过一遍，因为草率的发问只能得到草率的回答，或者根本得不到任何答案。越是能表现出在寻求帮助前你为解决问题所付出的努力，你越有可能得到实质性的帮助。</p><p>小心别问错了问题。如果你的问题基于错误的假设，某个普通黑客（J. Random Hacker）多半会一边在心里想着<code>蠢问题…</code>， 一边用无意义的字面解释来答复你，希望着你会从问题的回答（而非你想得到的答案）中汲取教训。</p><p>绝不要自以为<strong>够格</strong>得到答案，你没有；你并没有。毕竟你没有为这种服务支付任何报酬。你将会是自己去<strong>挣到</strong>一个答案，靠提出有内涵的、有趣的、有思维激励作用的问题 –一个有潜力能贡献社区经验的问题，而不仅仅是被动的从他人处索取知识。</p><p>另一方面，表明你愿意在找答案的过程中做点什么是一个非常好的开端。<code>谁能给点提示？</code>、<code>我的这个例子里缺了什么？</code>以及<code>我应该检查什么地方</code>比<code>请把我需要的确切的过程贴出来</code>更容易得到答复。因为你表现出只要有人能指个正确方向，你就有完成它的能力和决心。</p><h2 id="当你提问时"><a href="#当你提问时" class="headerlink" title="当你提问时"></a>当你提问时</h2><h3 id="慎选提问的论坛"><a href="#慎选提问的论坛" class="headerlink" title="慎选提问的论坛"></a>慎选提问的论坛</h3><p>小心选择你要提问的场合。如果你做了下述的事情，你很可能被忽略掉或者被看作失败者：</p><ul><li>在与主题不合的论坛上贴出你的问题。</li><li>在探讨进阶技术问题的论坛张贴非常初级的问题；反之亦然。</li><li>在太多的不同新闻群组上重复转贴同样的问题（cross-post）。</li><li>向既非熟人也没有义务解决你问题的人发送私人电邮。</li></ul><p>黑客会剔除掉那些搞错场合的问题，以保护他们沟通的渠道不被无关的东西淹没。你不会想让这种事发生在自己身上的。</p><p>因此，第一步是找到对的论坛。再说一次，Google 和其它搜索引擎还是你的朋友，用它们来找到与你遭遇到困难的软硬件问题最相关的网站。通常那儿都有常见问题（FAQ）、邮件列表及相关说明文件的链接。如果你的努力（包括<strong>阅读</strong> FAQ）都没有结果，网站上也许还有报告 Bug（Bug-reporting）的流程或链接，如果是这样，链过去看看。</p><p>向陌生的人或论坛发送邮件最可能是风险最大的事情。举例来说，别假设一个提供丰富内容的网页的作者会想充当你的免费顾问。不要对你的问题是否会受到欢迎做太乐观的估计 – 如果你不确定，那就向别处发送，或者压根别发。</p><p>在选择论坛、新闻群组或邮件列表时，别太相信名字，先看看 FAQ 或者许可书以弄清楚你的问题是否切题。发文前先翻翻已有的话题，这样可以让你感受一下那里的文化。事实上，事先在新闻组或邮件列表的历史记录中搜索与你问题相关的关键词是个极好的主意，也许这样就找到答案了。即使没有，也能帮助你归纳出更好的问题。</p><p>别像机关枪似的一次”扫射”所有的帮助渠道，这就像大喊大叫一样会使人不快。要一个一个地来。</p><p>搞清楚你的主题！最典型的错误之一是在某种致力于跨平台可移植的语言、套件或工具的论坛中提关于 Unix 或 Windows 操作系统程序界面的问题。如果你不明白为什么这是大错，最好在搞清楚这之间差异之前什么也别问。</p><p>一般来说，在仔细挑选的公共论坛中提问，会比在私有论坛中提同样的问题更容易得到有用的回答。有几个理由可以支持这点，一是看潜在的回复者有多少，二是看观众有多少。黑客较愿意回答那些能帮助到许多人的问题。</p><p>可以理解的是，老练的黑客和一些热门软件的作者正在接受过多的错发信息。就像那根最后压垮骆驼背的稻草一样，你的加入也有可能使情况走向极端 – 已经好几次了，一些热门软件的作者从自己软件的支持中抽身出来，因为伴随而来涌入其私人邮箱的无用邮件变得无法忍受。</p><h3 id="Stack-Overflow"><a href="#Stack-Overflow" class="headerlink" title="Stack Overflow"></a>Stack Overflow</h3><p>搜索，<strong>然后</strong> 在 Stack Exchange 问。</p><p>近年来，Stack Exchange community 社区已经成为回答技术及其他问题的主要渠道，尤其是那些开放源码的项目。</p><p>因为 Google 索引是即时的，在看 Stack Exchange 之前先在 Google 搜索。有很高的机率某人已经问了一个类似的问题，而且 Stack Exchange 网站们往往会是搜索结果中最前面几个。如果你在 Google 上没有找到任何答案，你再到特定相关主题的网站去找。用标签（Tag）搜索能让你更缩小你的搜索结果。</p><p>Stack Exchange 已经成长到<a href="http://stackexchange.com/sites" target="_blank" rel="noopener">超过一百个网站</a>，以下是最常用的几个站：</p><ul><li>Super User 是问一些通用的电脑问题，如果你的问题跟代码或是写程序无关，只是一些网络连线之类的，请到这里。</li><li>Stack Overflow 是问写程序有关的问题。</li><li>Server Fault 是问服务器和网管相关的问题。</li></ul><h3 id="网站和-IRC-论坛"><a href="#网站和-IRC-论坛" class="headerlink" title="网站和 IRC 论坛"></a>网站和 IRC 论坛</h3><p>本地的使用者群组（user group），或者你所用的 Linux 发行版本也许正在宣传他们的网页论坛或 IRC 频道，并提供新手帮助（在一些非英语国家，新手论坛很可能还是邮件列表）， 这些地方是开始提问的好首选，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。有广告赞助的 IRC 频道是公开欢迎提问的地方，通常可以即时得到回应。</p><p>事实上，如果程序出的问题只发生在特定 Linux 发行版提供的版本（这很常见），最好先去该发行版的论坛或邮件列表中提问，再到程序本身的论坛或邮件列表提问。（否则）该项目的黑客可能仅仅回复 “用<strong>我们的</strong>版本”。</p><p>在任何论坛发文以前，先确认一下有没有搜索功能。如果有，就试着搜索一下问题的几个关键词，也许这会有帮助。如果在此之前你已做过通用的网页搜索（你也该这样做），还是再搜索一下论坛，搜索引擎有可能没来得及索引此论坛的全部内容。</p><p>通过论坛或 IRC 频道来提供使用者支持服务有增长的趋势，电子邮件则大多为项目开发者间的交流而保留。所以最好先在论坛或 IRC 中寻求与该项目相关的协助。</p><p>在使用 IRC 的时候，首先最好不要发布很长的问题描述，有些人称之为频道洪水。最好通过一句话的问题描述来开始聊天。</p><h3 id="第二步，使用项目邮件列表"><a href="#第二步，使用项目邮件列表" class="headerlink" title="第二步，使用项目邮件列表"></a>第二步，使用项目邮件列表</h3><p>当某个项目提供开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答你的问题。查一查项目的文件和首页，找到项目的邮件列表并使用它。有几个很好的理由支持我们采用这种办法：</p><ul><li>任何好到需要向个别开发者提出的问题，也将对整个项目群组有益。反之，如果你认为自己的问题对整个项目群组来说太愚蠢，也不能成为骚扰个别开发者的理由。</li><li>向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导人）也许太忙以至于没法回答你的问题。</li><li>大多数邮件列表都会被存档，那些被存档的内容将被搜索引擎索引。如果你向列表提问并得到解答，将来其它人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。</li><li>如果某些问题经常被问到，开发者可以利用此信息来改进说明文件或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。</li></ul><p>如果一个项目既有”使用者” 也有”开发者”（或”黑客”）邮件列表或论坛，而你又不会动到那些源代码，那么就向”使用者”列表或论坛提问。不要假设自己会在开发者列表中受到欢迎，那些人多半会将你的提问视为干扰他们开发的噪音。</p><p>然而，如果你<strong>确信</strong>你的问题很特别，而且在”使用者” 列表或论坛中几天都没有回复，可以试试前往”开发者”列表或论坛发问。建议你在张贴前最好先暗地里观察几天以了解那里的行事方式（事实上这是参与任何私有或半私有列表的好主意）</p><p>如果你找不到一个项目的邮件列表，而只能查到项目维护者的电子邮件地址，尽管向他发信。即使是在这种情况下，也别假设（项目）邮件列表不存在。在你的电子邮件中，请陈述你已经试过但没有找到合适的邮件列表，也提及你不反对将自己的邮件转发给他人（许多人认为，即使没什么秘密，私人电子邮件也不应该被公开。通过允许将你的电子邮件转发他人，你给了相应人员处置你邮件的选择）。</p><h3 id="使用有意义且描述明确的标题"><a href="#使用有意义且描述明确的标题" class="headerlink" title="使用有意义且描述明确的标题"></a>使用有意义且描述明确的标题</h3><p>在邮件列表、新闻群组或论坛中，大约 50 字以内的标题是抓住资深专家注意力的好机会。别用喋喋不休的<code>帮帮忙</code>、<code>跪求</code>、<code>急</code>（更别说<code>救命啊！！！！</code>这样让人反感的话，用这种标题会被条件反射式地忽略）来浪费这个机会。不要妄想用你的痛苦程度来打动我们，而应该是在这点空间中使用极简单扼要的描述方式来提出问题。</p><p>一个好标题范例是<code>目标 -- 差异</code>式的描述，许多技术支持组织就是这样做的。在<code>目标</code>部分指出是哪一个或哪一组东西有问题，在<code>差异</code>部分则描述与期望的行为不一致的地方。</p><blockquote><p>蠢问题：救命啊！我的笔记本电脑不能正常显示了！</p></blockquote><blockquote><p>聪明问题：X.org 6.8.1 的鼠标光标会变形，某牌显卡 MV1005 芯片组。</p></blockquote><blockquote><p>更聪明问题：X.org 6.8.1 的鼠标光标，在某牌显卡 MV1005 芯片组环境下 - 会变形。</p></blockquote><p>编写<code>目标 -- 差异</code> 式描述的过程有助于你组织对问题的细致思考。是什么被影响了？ 仅仅是鼠标光标或者还有其它图形？只在 X.org 的 X 版中出现？或只是出现在 6.8.1 版中？ 是针对某牌显卡芯片组？或者只是其中的 MV1005 型号？ 一个黑客只需瞄一眼就能够立即明白你的环境<strong>和</strong>你遇到的问题。</p><p>总而言之，请想像一下你正在一个只显示标题的存档讨论串（Thread）索引中查寻。让你的标题更好地反映问题，可使下一个搜索类似问题的人能够关注这个讨论串，而不用再次提问相同的问题。</p><p>如果你想在回复中提出问题，记得要修改内容标题，以表明你是在问一个问题， 一个看起来像 <code>Re: 测试</code> 或者 <code>Re: 新 bug</code> 的标题很难引起足够重视。另外，在不影响连贯性之下，适当引用并删减前文的内容，能给新来的读者留下线索。</p><p>对于讨论串，不要直接点击回复来开始一个全新的讨论串，这将限制你的观众。因为有些邮件阅读程序，比如 mutt ，允许使用者按讨论串排序并通过折叠讨论串来隐藏消息，这样做的人永远看不到你发的消息。</p><p>仅仅改变标题还不够。mutt 和其它一些邮件阅读程序还会检查邮件标题以外的其它信息，以便为其指定讨论串。所以宁可发一个全新的邮件。</p><p>在网页论坛上，好的提问方式稍有不同，因为讨论串与特定的信息紧密结合，并且通常在讨论串外就看不到里面的内容，故通过回复提问，而非改变标题是可接受的。不是所有论坛都允许在回复中出现分离的标题，而且这样做了基本上没有人会去看。不过，通过回复提问，这本身就是暧昧的做法，因为它们只会被正在查看该标题的人读到。所以，除非你<strong>只想</strong>在该讨论串当前活跃的人群中提问，不然还是另起炉灶比较好。</p><h3 id="使问题容易回复"><a href="#使问题容易回复" class="headerlink" title="使问题容易回复"></a>使问题容易回复</h3><p>以<code>请将你的回复寄到……</code>来结束你的问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟思考你的问题更麻烦。如果你的邮件程序不支持这样做，<a href="http://linuxmafia.com/faq/Mail/muas.html" target="_blank" rel="noopener">换个好点的</a>；如果是操作系统不支持这种邮件程序，也换个好点的。</p><p>在论坛，要求通过电子邮件回复是非常无礼的，除非你相信回复的信息可能比较敏感（而且有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复讨论串时得到电子邮件提醒，可以要求网页论坛发送给你。几乎所有论坛都支持诸如<code>追踪此讨论串</code>、<code>有回复时发送邮件提醒</code>等功能。</p><h3 id="用清晰、正确、精准并语法正确的语句"><a href="#用清晰、正确、精准并语法正确的语句" class="headerlink" title="用清晰、正确、精准并语法正确的语句"></a>用清晰、正确、精准并语法正确的语句</h3><p>我们从经验中发现，粗心的提问者通常也会粗心的写程序与思考（我敢打包票）。回答粗心大意者的问题很不值得，我们宁愿把时间耗在别处。</p><p>正确的拼写、标点符号和大小写是很重要的。一般来说，如果你觉得这样做很麻烦，不想在乎这些，那我们也觉得麻烦，不想在乎你的提问。花点额外的精力斟酌一下字句，用不着太僵硬与正式 – 事实上，黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它<strong>必须很</strong>准确，而且有迹象表明你是在思考和关注问题。</p><p>正确地拼写、使用标点和大小写，不要将<code>its</code>混淆为<code>it&#39;s</code>，<code>loose</code>搞成<code>lose</code>或者将<code>discrete</code>弄成<code>discreet</code>。不要<strong>全部用大写</strong>，这会被视为无礼的大声嚷嚷（全部小写也好不到哪去，因为不易阅读。<a href="http://en.wikipedia.org/wiki/Alan_Cox" target="_blank" rel="noopener">Alan Cox</a> 也许可以这样做，但你不行）。</p><p>更白话的说，如果你写得像是个半文盲[译注：<a href="http://zh.wikipedia.org/wiki/小白" target="_blank" rel="noopener">小白</a>]，那多半得不到理睬。也不要使用即时通信中的简写或<a href="http://zh.wikipedia.org/wiki/火星文" target="_blank" rel="noopener">火星文</a>，如将<code>的</code>简化为<code>d</code>会使你看起来像一个为了少打几个键而省字的小白。更糟的是，如果像个小孩似地鬼画符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。</p><p>如果在使用非母语的论坛提问，你可以犯点拼写和语法上的小错，但决不能在思考上马虎（没错，我们通常能弄清两者的分别）。同时，除非你知道回复者使用的语言，否则请使用英语书写。繁忙的黑客一般会直接删除用他们看不懂语言写的消息。在网络上英语是通用语言，用英语书写可以将你的问题在尚未被阅读就被直接删除的可能性降到最低。</p><p>如果英文是你的外语（Second language），提示潜在回复者你有潜在的语言困难是很好的：<br>[译注：以下附上原文以供使用]</p><blockquote><p>English is not my native language; please excuse typing errors.</p></blockquote><ul><li>英文不是我的母语，请原谅我的错字或语法。</li></ul><blockquote><p>If you speak $LANGUAGE, please email/PM me;<br>I may need assistance translating my question.</p></blockquote><ul><li>如果你说<strong>某语言</strong>，请寄信/私讯给我；我需要有人协助我翻译我的问题。</li></ul><blockquote><p>I am familiar with the technical terms,<br>but some slang expressions and idioms are difficult for me.</p></blockquote><ul><li>我对技术名词很熟悉，但对于俗语或是特别用法比较不甚了解。</li></ul><blockquote><p>I’ve posted my question in $LANGUAGE and English.<br>I’ll be glad to translate responses, if you only use one or the other.</p></blockquote><ul><li>我把我的问题用<strong>某语言</strong>和英文写出来，如果你只用一种语言回答，我会乐意将其翻译成另一种。</li></ul><h3 id="使用易于读取且标准的文件格式发送问题"><a href="#使用易于读取且标准的文件格式发送问题" class="headerlink" title="使用易于读取且标准的文件格式发送问题"></a>使用易于读取且标准的文件格式发送问题</h3><p>如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以：</p><ul><li>使用纯文字而不是 HTML (<a href="http://archive.birdhouse.org/etc/evilmail.html" target="_blank" rel="noopener">关闭 HTML</a> 并不难）。</li><li>使用 MIME 附件通常是可以的，前提是真正有内容（譬如附带的源代码或 patch），而不仅仅是邮件程序生成的模板（譬如只是信件内容的拷贝）。</li><li>不要发送一段文字只是一行句子但自动换行后会变成多行的邮件（这使得回复部分内容非常困难）。设想你的读者是在 80 个字符宽的终端机上阅读邮件，最好设置你的换行分割点小于 80 字。</li><li>但是，对一些特殊的文件<strong>不要</strong>设置固定宽度（譬如日志档案拷贝或会话记录）。数据应该原样包含，让回复者有信心他们看到的是和你看到的一样的东西。</li><li>在英语论坛中，不要使用<code>Quoted-Printable</code> MIME 编码发送消息。这种编码对于张贴非 ASCII 语言可能是必须的，但很多邮件程序并不支持这种编码。当它们处理换行时，那些文本中四处散布的<code>=20</code>符号既难看也分散注意力，甚至有可能破坏内容的语意。</li><li>绝对，<strong>永远</strong>不要指望黑客们阅读使用封闭格式编写的文档，像微软公司的 Word 或 Excel 文件等。大多数黑客对此的反应就像有人将还在冒热气的猪粪倒在你家门口时你的反应一样。即便他们能够处理，他们也很厌恶这么做。</li><li>如果你从使用 Windows 的电脑发送电子邮件，关闭微软愚蠢的<code>智能引号</code>功能 （从[选项] &gt; [校订] &gt; [自动校正选项]，勾选掉<code>智能引号</code>单选框），以免在你的邮件中到处散布垃圾字符。</li><li>在论坛，勿滥用<code>表情符号</code>和<code>HTML</code>功能（当它们提供时）。一两个表情符号通常没有问题，但花哨的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来像个傻笑的小姑娘。这通常不是个好主意，除非你只是对性而不是对答案感兴趣。</li></ul><p>如果你使用图形用户界面的邮件程序（如微软公司的 Outlook 或者其它类似的），注意它们的默认设置不一定满足这些要求。大多数这类程序有基于选单的<code>查看源代码</code>命令，用它来检查发送文件夹中的邮件，以确保发送的是纯文本文件同时没有一些奇怪的字符。</p><h3 id="精确的描述问题并言之有物"><a href="#精确的描述问题并言之有物" class="headerlink" title="精确的描述问题并言之有物"></a>精确的描述问题并言之有物</h3><ul><li>仔细、清楚地描述你的问题或 Bug 的症状。</li><li>描述问题发生的环境（机器配置、操作系统、应用程序、以及相关的信息），提供经销商的发行版和版本号（如：<code>Fedora Core 4</code>、<code>Slackware 9.1</code>等）。</li><li>描述在提问前你是怎样去研究和理解这个问题的。</li><li>描述在提问前为确定问题而采取的诊断步骤。</li><li>描述最近做过什么可能相关的硬件或软件变更。</li><li>尽可能的提供一个可以<code>重现这个问题的可控环境</code>的方法。</li></ul><p>尽量去揣测一个黑客会怎样反问你，在你提问之前预先将黑客们可能遇到的问题回答一遍。</p><p>以上几点中，当你报告的是你认为可能在代码中的问题时，给黑客一个可以重现你的问题的环境尤其重要。当你这么做时，你得到有效的回答的机会和速度都会大大的提升。</p><p><a href="http://www.chiark.greenend.org.uk/~sgtatham/" target="_blank" rel="noopener">Simon Tatham</a> 写过一篇名为《<a href="http://www.chiark.greenend.org.uk/~sgtatham/bugs-tw.html" target="_blank" rel="noopener">如何有效的报告 Bug</a>》的出色文章。强力推荐你也读一读。</p><h3 id="话不在多而在精"><a href="#话不在多而在精" class="headerlink" title="话不在多而在精"></a>话不在多而在精</h3><p>你需要提供精确有内容的信息。这并不是要求你简单的把成堆的出错代码或者资料完全转录到你的提问中。如果你有庞大而复杂的测试样例能重现程序挂掉的情境，尽量将它剪裁得越小越好。</p><p>这样做的用处至少有三点。<br>第一，表现出你为简化问题付出了努力，这可以使你得到回答的机会增加；<br>第二，简化问题使你更有可能得到<strong>有用</strong>的答案；<br>第三，在精炼你的 bug 报告的过程中，你很可能就自己找到了解决方法或权宜之计。</p><h3 id="别动辄声称找到-Bug"><a href="#别动辄声称找到-Bug" class="headerlink" title="别动辄声称找到 Bug"></a>别动辄声称找到 Bug</h3><p>当你在使用软件中遇到问题，除非你非常、<strong>非常</strong>的有根据，不要动辄声称找到了 Bug。提示：除非你能提供解决问题的源代码补丁，或者提供回归测试来表明前一版本中行为不正确，否则你都多半不够完全确信。这同样适用在网页和文件，如果你（声称）发现了文件的<code>Bug</code>，你应该能提供相应位置的修正或替代文件。</p><p>请记得，还有许多其它使用者没遇到你发现的问题，否则你在阅读文件或搜索网页时就应该发现了（你在抱怨前<a href="#在提问之前">已经做了这些，是吧</a>？）。这也意味着很有可能是你弄错了而不是软件本身有问题。</p><p>编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了 Bug，也就是在质疑他们的能力，即使你是对的，也有可能会冒犯到其中某部分人。当你在标题中嚷嚷着有<code>Bug</code>时，这尤其严重。</p><p>提问时，即使你私下非常确信已经发现一个真正的 Bug，最好写得像是<strong>你</strong>做错了什么。如果真的有 Bug，你会在回复中看到这点。这样做的话，如果真有 Bug，维护者就会向你道歉，这总比你惹恼别人然后欠别人一个道歉要好一点。</p><h3 id="低声下气不能代替你的功课"><a href="#低声下气不能代替你的功课" class="headerlink" title="低声下气不能代替你的功课"></a>低声下气不能代替你的功课</h3><p>有些人明白他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另一个极端 – 低声下气：<code>我知道我只是个可悲的新手，一个撸瑟，但...</code>。这既使人困扰，也没有用，尤其是伴随着与实际问题含糊不清的描述时更令人反感。</p><p>别用原始灵长类动物的把戏来浪费你我的时间。取而代之的是，尽可能清楚地描述背景条件和你的问题情况。这比低声下气更好地定位了你的位置。</p><p>有时网页论坛会设有专为新手提问的版面，如果你真的认为遇到了初学者的问题，到那去就是了，但一样别那么低声下气。</p><h3 id="描述问题症状而非你的猜测"><a href="#描述问题症状而非你的猜测" class="headerlink" title="描述问题症状而非你的猜测"></a>描述问题症状而非你的猜测</h3><p>告诉黑客们你认为问题是怎样造成的并没什么帮助。（如果你的推断如此有效，还用向别人求助吗？），因此要确信你原原本本告诉了他们问题的症状，而不是你的解释和理论；让黑客们来推测和诊断。如果你认为陈述自己的猜测很重要，清楚地说明这只是你的猜测，并描述为什么它们不起作用。</p><p><strong><em>蠢问题</em></strong></p><blockquote><p>我在编译内核时接连遇到 SIG11 错误，<br>我怀疑某条飞线搭在主板的走线上了，这种情况应该怎样检查最好？</p></blockquote><p><strong><em>聪明问题</em></strong></p><blockquote><p>我的组装电脑是 FIC-PA2007 主机板搭载 AMD K6/233 CPU（威盛 Apollo VP2 芯片组），<br>256MB Corsair PC133 SDRAM 内存，在编译内核时，从开机 20 分钟以后就频频产生 SIG11 错误，<br>但是在头 20 分钟内从没发生过相同的问题。重新启动也没有用，但是关机一晚上就又能工作 20 分钟。<br>所有内存都换过了，没有效果。相关部分的标准编译记录如下…。</p></blockquote><p>由于以上这点似乎让许多人觉得难以配合，这里有句话可以提醒你：<code>所有的诊断专家都来自密苏里州。</code> 美国国务院的官方座右铭则是：<code>让我看看</code>（出自国会议员 Willard D. Vandiver 在 1899 年时的讲话：<code>我来自一个出产玉米，棉花，牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。</code>） 针对诊断者而言，这并不是一种怀疑，而只是一种真实而有用的需求，以便让他们看到的是与你看到的原始证据尽可能一致的东西，而不是你的猜测与归纳的结论。所以，大方的展示给我们看吧！</p><h3 id="按发生时间先后列出问题症状"><a href="#按发生时间先后列出问题症状" class="headerlink" title="按发生时间先后列出问题症状"></a>按发生时间先后列出问题症状</h3><p>问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行脚本工具所生成的），并引用相关的若干行（如 20 行）记录会非常有帮助。</p><p>如果挂掉的程序有诊断选项（如 -v 的详述开关），试着选择这些能在记录中增加调试信息的选项。记住，<code>多</code>不等于<code>好</code>。试着选取适当的调试级别以便提供有用的信息而不是让读者淹没在垃圾中。</p><p>如果你的说明很长（如超过四个段落），在开头简述问题，接下来再按时间顺序详述会有所帮助。这样黑客们在读你的记录时就知道该注意哪些内容了。</p><h3 id="描述目标而不是过程"><a href="#描述目标而不是过程" class="headerlink" title="描述目标而不是过程"></a>描述目标而不是过程</h3><p>如果你想弄清楚如何做某事（而不是报告一个 Bug），在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。</p><p>经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。</p><p><strong>蠢问题</strong></p><blockquote><p>我怎样才能从某绘图程序的颜色选择器中取得十六进制的的 RGB 值？</p></blockquote><p><strong>聪明问题</strong></p><blockquote><p>我正试着用替换一幅图片的色码（color table）成自己选定的色码，我现在知道的唯一方法是编辑每个色码区块（table slot），<br>但却无法从某绘图程序的颜色选择器取得十六进制的的 RGB 值。</p></blockquote><p>第二种提问法比较聪明，你可能得到像是<code>建议采用另一个更合适的工具</code>的回复。</p><h3 id="别要求使用私人电邮回复"><a href="#别要求使用私人电邮回复" class="headerlink" title="别要求使用私人电邮回复"></a>别要求使用私人电邮回复</h3><p>黑客们认为问题的解决过程应该公开、透明，此过程中如果更有经验的人注意到不完整或者不当之处，最初的回复才能够、也应该被纠正。同时，作为提供帮助者可以得到一些奖励，奖励就是他的能力和学识被其他同行看到。</p><p>当你要求私下回复时，这个过程和奖励都被中止。别这样做，让<strong>回复者</strong>来决定是否私下回答 – 如果他真这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于对其它人没有兴趣。</p><p>这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么这个神奇的提问句会是<code>向我发电邮，我将为论坛归纳这些回复</code>。试着将邮件列表或新闻群组从洪水般的雷同回复中解救出来是非常有礼貌的 – 但你必须信守诺言。</p><h3 id="清楚明确的表达你的问题以及需求"><a href="#清楚明确的表达你的问题以及需求" class="headerlink" title="清楚明确的表达你的问题以及需求"></a>清楚明确的表达你的问题以及需求</h3><p>漫无边际的提问是近乎无休无止的时间黑洞。最有可能给你有用答案的人通常也正是最忙的人（他们忙是因为要亲自完成大部分工作）。这样的人对无节制的时间黑洞相当厌恶，所以他们也倾向于厌恶那些漫无边际的提问。</p><p>如果你明确表述需要回答者做什么（如提供指点、发送一段代码、检查你的补丁、或是其他等等），就最有可能得到有用的答案。因为这会定出一个时间和精力的上限，便于回答者能集中精力来帮你。这么做很棒。</p><p>要理解专家们所处的世界，请把专业技能想像为充裕的资源，而回复的时间则是稀缺的资源。你要求他们奉献的时间越少，你越有可能从真正专业而且很忙的专家那里得到解答。</p><p>所以，界定一下你的问题，使专家花在辨识你的问题和回答所需要付出的时间减到最少，这技巧对你有用答案相当有帮助 – 但这技巧通常和简化问题有所区别。因此，问<code>我想更好的理解 X，可否指点一下哪有好一点说明？</code>通常比问<code>你能解释一下 X 吗？</code>更好。如果你的代码不能运作，通常请别人看看哪里有问题，比要求别人替你改正要明智得多。</p><h3 id="询问有关代码的问题时"><a href="#询问有关代码的问题时" class="headerlink" title="询问有关代码的问题时"></a>询问有关代码的问题时</h3><p>别要求他人帮你调试有问题的代码，不提示一下应该从何入手。张贴几百行的代码，然后说一声：<code>它不能工作</code>会让你完全被忽略。只贴几十行代码，然后说一句：<code>在第七行以后，我期待它显示 &lt;x&gt;，但实际出现的是 &lt;y&gt;</code>比较有可能让你得到回应。</p><p>最有效描述程序问题的方法是提供最精简的 Bug 展示测试用例（bug-demonstrating test case）。什么是最精简的测试用例？那是问题的缩影；一小个程序片段能<strong>刚好</strong>展示出程序的异常行为，而不包含其他令人分散注意力的内容。怎么制作最精简的测试用例？如果你知道哪一行或哪一段代码会造成异常的行为，复制下来并加入足够重现这个状况的代码（例如，足以让这段代码能被编译/直译/被应用程序处理）。如果你无法将问题缩减到一个特定区块，就复制一份代码并移除不影响产生问题行为的部分。总之，测试用例越小越好（查看<a href="#话不在多而在精">话不在多而在精</a>一节）。</p><p>一般而言，要得到一段相当精简的测试用例并不太容易，但永远先尝试这样做的是种好习惯。这种方式可以帮助你了解如何自行解决这个问题 —- 而且即使你的尝试不成功，黑客们也会看到你在尝试取得答案的过程中付出了努力，这可以让他们更愿意与你合作。</p><p>如果你只是想让别人帮忙审查（Review）一下代码，在信的开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。</p><h3 id="别把自己家庭作业的问题贴上来"><a href="#别把自己家庭作业的问题贴上来" class="headerlink" title="别把自己家庭作业的问题贴上来"></a>别把自己家庭作业的问题贴上来</h3><p>黑客们很擅长分辨哪些问题是家庭作业式的问题；因为我们中的大多数都曾自己解决这类问题。同样，这些问题得由<strong>你</strong>来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。</p><p>如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在使用者群组，论坛或（最后一招）在项目的<strong>使用者</strong>邮件列表或论坛中提问。尽管黑客们<strong>会</strong>看出来，但一些有经验的使用者也许仍会给你一些提示。</p><h3 id="去掉无意义的提问句"><a href="#去掉无意义的提问句" class="headerlink" title="去掉无意义的提问句"></a>去掉无意义的提问句</h3><p>避免用无意义的话结束提问，例如<code>有人能帮我吗？</code>或者<code>这有答案吗？</code>。</p><p>首先：如果你对问题的描述不是很好，这样问更是画蛇添足。</p><p>其次：由于这样问是画蛇添足，黑客们会很厌烦你 – 而且通常会用逻辑上正确，但毫无意义的回答来表示他们的蔑视， 例如：<code>没错，有人能帮你</code>或者<code>不，没答案</code>。</p><p>一般来说，避免用 <code>是或否</code>、<code>对或错</code>、<code>有或没有</code>类型的问句，除非你想得到<a href="http://homepage.ntlworld.com./jonathan.deboynepollard/FGA/questions-with-yes-or-no-answers.html" target="_blank" rel="noopener">是或否类型的回答</a>。</p><h3 id="即使你很急也不要在标题写紧急"><a href="#即使你很急也不要在标题写紧急" class="headerlink" title="即使你很急也不要在标题写紧急"></a>即使你很急也不要在标题写<code>紧急</code></h3><p>这是你的问题，不是我们的。宣称<code>紧急</code>极有可能事与愿违：大多数黑客会直接删除无礼和自私地企图即时引起关注的问题。更严重的是，<code>紧急</code>这个字（或是其他企图引起关注的标题）通常会被垃圾信过滤器过滤掉 – 你希望能看到你问题的人可能永远也看不到。</p><p>有半个例外的情况是，如果你是在一些很高调，会使黑客们兴奋的地方，也许值得这样去做。在这种情况下，如果你有时间压力，也很有礼貌地提到这点，人们也许会有兴趣回答快一点。</p><p>当然，这风险很大，因为黑客们兴奋的点多半与你的不同。譬如从 NASA 国际空间站（International Space Station）发这样的标题没有问题，但用自我感觉良好的慈善行为或政治原因发肯定不行。事实上，张贴诸如<code>紧急：帮我救救这个毛绒绒的小海豹！</code>肯定让你被黑客忽略或惹恼他们，即使他们认为毛绒绒的小海豹很重要。</p><p>如果你觉得这点很不可思议，最好再把这份指南剩下的内容多读几遍，直到你弄懂了再发文。</p><h3 id="礼多人不怪，而且有时还很有帮助"><a href="#礼多人不怪，而且有时还很有帮助" class="headerlink" title="礼多人不怪，而且有时还很有帮助"></a>礼多人不怪，而且有时还很有帮助</h3><p>彬彬有礼，多用<code>请</code>和<code>谢谢您的关注</code>，或<code>谢谢你的关照</code>。让大家都知道你对他们花时间免费提供帮助心存感激。</p><p>坦白说，这一点并没有比清晰、正确、精准并合法语法和避免使用专用格式重要（也不能取而代之）。黑客们一般宁可读有点唐突但技术上鲜明的 Bug 报告，而不是那种有礼但含糊的报告。（如果这点让你不解，记住我们是按问题能教给我们什么来评价问题的价值的）</p><p>然而，如果你有一串的问题待解决，客气一点肯定会增加你得到有用回应的机会。</p><p>（我们注意到，自从本指南发布后，从资深黑客那里得到的唯一严重缺陷反馈，就是对预先道谢这一条。一些黑客觉得<code>先谢了</code>意味着事后就不用再感谢任何人的暗示。我们的建议是要么先说<code>先谢了</code>，<strong>然后</strong>事后再对回复者表示感谢，或者换种方式表达感激，譬如用<code>谢谢你的关注</code>或<code>谢谢你的关照</code>。）</p><h3 id="问题解决后，加个简短的补充说明"><a href="#问题解决后，加个简短的补充说明" class="headerlink" title="问题解决后，加个简短的补充说明"></a>问题解决后，加个简短的补充说明</h3><p>问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个说明比较恰当。</p><p>最理想的方式是向最初提问的话题回复此消息，并在标题中包含<code>已修正</code>，<code>已解决</code>或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见讨论串<code>问题 X</code>和<code>问题 X - 已解决</code>的潜在回复者就明白不用再浪费时间了（除非他个人觉得<code>问题 X</code>的有趣），因此可以利用此时间去解决其它问题。</p><p>补充说明不必很长或是很深入；简单的一句<code>你好，原来是网线出了问题！谢谢大家 – Bill</code>比什么也不说要来的好。事实上，除非结论真的很有技术含量，否则简短可爱的小结比长篇大论更好。说明问题是怎样解决的，但大可不必将解决问题的过程复述一遍。</p><p>对于有深度的问题，张贴调试记录的摘要是有帮助的。描述问题的最终状态，说明是什么解决了问题，在此<strong>之后</strong>才指明可以避免的盲点。避免盲点的部分应放在正确的解决方案和其它总结材料之后，而不要将此信息搞成侦探推理小说。列出那些帮助过你的名字，会让你交到更多朋友。</p><p>除了有礼貌和有内涵以外，这种类型的补充也有助于他人在邮件列表/新闻群组/论坛中搜索到真正解决你问题的方案，让他们也从中受益。</p><p>至少，这种补充有助于让每位参与协助的人因问题的解决而从中得到满足感。如果你自己不是技术专家或者黑客，那就相信我们，这种感觉对于那些你向他们求助的大师或者专家而言，是非常重要的。问题悬而未决会让人灰心；黑客们渴望看到问题被解决。好人有好报，满足他们的渴望，你会在下次提问时尝到甜头。</p><p>思考一下怎样才能避免他人将来也遇到类似的问题，自问写一份文件或加个常见问题（FAQ）会不会有帮助。如果是的话就将它们发给维护者。</p><p>在黑客中，这种良好的后继行动实际上比传统的礼节更为重要，也是你如何透过善待他人而赢得声誉的方式，这是非常有价值的资产。</p><h2 id="如何解读答案"><a href="#如何解读答案" class="headerlink" title="如何解读答案"></a>如何解读答案</h2><p><a id="RTFM"></a></p><h3 id="RTFM-和-STFW：如何知道你已完全搞砸了"><a href="#RTFM-和-STFW：如何知道你已完全搞砸了" class="headerlink" title="RTFM 和 STFW：如何知道你已完全搞砸了"></a>RTFM 和 STFW：如何知道你已完全搞砸了</h3><p>有一个古老而神圣的传统：如果你收到<code>RTFM （Read The Fucking Manual）</code>的回应，回答者认为你<strong>应该去读他妈的手册</strong>。当然，基本上他是对的，你应该去读一读。</p><p>RTFM 有一个年轻的亲戚。如果你收到<code>STFW（Search The Fucking Web）</code>的回应，回答者认为你<strong>应该到他妈的网上搜索</strong>过了。那人多半也是对的，去搜索一下吧。（更温和一点的说法是 <strong><a href="http://lmgtfy.com/" target="_blank" rel="noopener">Google 是你的朋友</a></strong>！）</p><p>在论坛，你也可能被要求去爬爬论坛的旧文。事实上，有人甚至可能热心地为你提供以前解决此问题的讨论串。但不要依赖这种关照，提问前应该先搜索一下旧文。</p><p>通常，用这两句之一回答你的人会给你一份包含你需要内容的手册或者一个网址，而且他们打这些字的时候也正在读着。这些答复意味着回答者认为</p><ul><li><strong>你需要的信息非常容易获得</strong>；</li><li><strong>你自己去搜索这些信息比灌给你，能让你学到更多</strong>。</li></ul><p>你不应该因此不爽；<strong>依照黑客的标准，他已经表示了对你一定程度的关注，而没有对你的要求视而不见</strong>。你应该对他祖母般的慈祥表示感谢。</p><h3 id="如果还是搞不懂"><a href="#如果还是搞不懂" class="headerlink" title="如果还是搞不懂"></a>如果还是搞不懂</h3><p>如果你看不懂回应，别立刻要求对方解释。像你以前试着自己解决问题时那样（利用手册，FAQ，网络，身边的高手），先试着去搞懂他的回应。如果你真的需要对方解释，记得表现出你已经从中学到了点什么。</p><p>比方说，如果我回答你：<code>看来似乎是 zentry 卡住了；你应该先清除它。</code>，然后，这是一个<strong>很糟的</strong>后续问题回应：<code>zentry 是什么？</code> <strong>好</strong>的问法应该是这样：<code>哦~~~我看过说明了但是只有 -z 和 -p 两个参数中提到了 zentries，而且还都没有清楚的解释如何清除它。你是指这两个中的哪一个吗？还是我看漏了什么？</code></p><h3 id="处理无礼的回应"><a href="#处理无礼的回应" class="headerlink" title="处理无礼的回应"></a>处理无礼的回应</h3><p>很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直接了当，一针见血式的交流风格，这种风格更注重解决问题，而不是使人感觉舒服而却模模糊糊。</p><p>如果你觉得被冒犯了，试着平静地反应。如果有人真的做了出格的事，邮件列表、新闻群组或论坛中的前辈多半会招呼他。如果这<strong>没有</strong>发生而你却发火了，那么你发火对象的言语可能在黑客社区中看起来是正常的，而<strong>你</strong>将被视为有错的一方，这将伤害到你获取信息或帮助的机会。</p><p>另一方面，你偶尔真的会碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击，用犀利的语言将其驳得体无完肤都是可以接受的。然而，在行事之前一定要非常非常的有根据。纠正无礼的言论与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外人，避开这种莽撞的机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘上以免冒险。</p><p>（有些人断言很多黑客都有轻度的自闭症或亚斯伯格综合症，缺少用于润滑人类社会<strong>正常</strong>交往所需的神经。这既可能是真也可能是假的。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我们的古怪行为。只管这么干好了，我们不在乎。我们<strong>喜欢</strong>我们现在这个样子，并且通常对病患标记都有站得住脚的怀疑）。</p><p>Jeff Bigler 的观察总结和这个相关也值得一读 (<strong><a href="http://www.mit.edu/~jcb/tact.html" target="_blank" rel="noopener">tact filters</a></strong>)。</p><p>在下一节，我们会谈到另一个问题，当<strong>你</strong>行为不当时所会受到的<code>冒犯</code>。</p><h2 id="如何避免扮演失败者"><a href="#如何避免扮演失败者" class="headerlink" title="如何避免扮演失败者"></a>如何避免扮演失败者</h2><p>在黑客社区的论坛中有那么几次你可能会搞砸 – 以本指南所描述到的或类似的方式。而你会在公开场合中被告知你是如何搞砸的，也许攻击的言语中还会带点夹七夹八的颜色。</p><p>这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被口头攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、忘了关马桶盖等等。相反地，你该这么做：</p><p>熬过去，这很正常。事实上，它是有益健康且合理的。</p><p>社区的标准不会自行维持，它们是通过参与者积极而<strong>公开地</strong>执行来维持的。不要哭嚎所有的批评都应该通过私下的邮件传送，它不是这样运作的。当有人评论你的一个说法有误或者提出不同看法时，坚持声称受到个人攻击也毫无益处，这些都是失败者的态度。</p><p>也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称<code>如果你不想帮助用户就闭嘴。</code> 结果造成有想法的参与者纷纷离开，这么做只会使它们沦为毫无意义的唠叨与无用的技术论坛。</p><p>夸张的讲法是：你要的是<strong>友善</strong>（以上述方式）还是有用？两个里面挑一个。</p><p>记着：当黑客说你搞砸了，并且（无论多么刺耳）告诉你别再这样做时，他正在为关心<strong>你</strong>和<strong>他的社区</strong>而行动。对他而言，不理你并将你从他的生活中滤掉更简单。如果你无法做到感谢，至少要表现得有点尊严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人像对待脆弱的洋娃娃那样对你。</p><p>有时候，即使你没有搞砸（或者只是在他的想像中你搞砸了），有些人也会无缘无故地攻击你本人。在这种情况下，抱怨倒是<strong>真的</strong>会把问题搞砸。</p><p>这些来找麻烦的人要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理专家。其它读者要么不理睬，要么用自己的方式对付他们。这些来找麻烦的人在给他们自己找麻烦，这点你不用操心。</p><p>也别让自己卷入口水战，最好不要理睬大多数的口水战 – 当然，这是在你检验它们只是口水战，并且未指出你有搞砸的地方，同时也没有巧妙地将问题真正的答案藏于其后（这也是有可能的）。</p><h2 id="不该问的问题"><a href="#不该问的问题" class="headerlink" title="不该问的问题"></a>不该问的问题</h2><p>以下是几个经典蠢问题，以及黑客没回答时心中所想的：</p><p>问题：<a href="#q1">我能在哪找到 X 程序或 X 资源？</a></p><p>问题：<a href="#q2">我怎样用 X 做 Y？</a></p><p>问题：<a href="#q3">如何设定我的 shell 提示？</a></p><p>问题：<a href="#q4">我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？</a></p><p>问题：<a href="#q5">我的程序/设定/SQL 语句没有用</a></p><p>问题：<a href="#q6">我的 Windows 电脑有问题，你能帮我吗？</a></p><p>问题：<a href="#q7">我的程序不会动了，我认为系统工具 X 有问题</a></p><p>问题：<a href="#q8">我在安装 Linux（或者 X ）时有问题，你能帮我吗？</a></p><p>问题：<a href="#q9">我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？</a></p><hr><p><a id="q1"></a></p><blockquote><p>问题：我能在哪找到 X 程序或 X 资源？</p></blockquote><p>回答：就在我找到它的地方啊，白痴 – 搜索引擎的那一头。天哪！难道还有人不会用 <a href="http://www.google.com" target="_blank" rel="noopener">Google</a> 吗？</p><p><a id="q2"></a></p><blockquote><p>问题：我怎样用 X 做 Y？</p></blockquote><p>回答：如果你想解决的是 Y ，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对 Y 要解决的问题糊涂，还被特定形势禁锢了思维。最好忽略这种人，等他们把问题搞清楚了再说。</p><p><a id="q3"></a></p><blockquote><p>问题：如何设定我的 shell 提示？？</p></blockquote><p>回答：如果你有足够的智慧提这个问题，你也该有足够的智慧去 <a href="#RTFM">RTFM</a>，然后自己去找出来。</p><p><a id="q4"></a></p><blockquote><p>问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？</p></blockquote><p>回答：试试看就知道了。如果你试过，你既知道了答案，就不用浪费我的时间了。</p><p><a id="q5"></a></p><blockquote><p>问题：我的{程序/设定/SQL 语句}不工作</p></blockquote><p>回答：这不算是问题吧，我对要我问你二十个问题才找得出你真正问题的问题没兴趣 – 我有更有意思的事要做呢。在看到这类问题的时候，我的反应通常不外如下三种</p><ul><li>你还有什么要补充的吗？</li><li>真糟糕，希望你能搞定。</li><li>这关我有什么屁事？</li></ul><p><a id="q6"></a></p><blockquote><p>问题：我的 Windows 电脑有问题，你能帮我吗？</p></blockquote><p>回答：能啊，扔掉微软的垃圾，换个像 Linux 或 BSD 的开放源代码操作系统吧。</p><p>注意：如果程序有官方版 Windows 或者与 Windows 有互动（如 Samba），你<strong>可以</strong>问与 Windows 相关的问题， 只是别对问题是由 Windows 操作系统而不是程序本身造成的回复感到惊讶， 因为 Windows 一般来说实在太烂，这种说法通常都是对的。</p><p><a id="q7"></a></p><blockquote><p>问题：我的程序不会动了，我认为系统工具 X 有问题</p></blockquote><p>回答：你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与函数库档案有明显缺陷的人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有清楚而详尽的缺陷说明文件作后盾。</p><p><a id="q8"></a></p><blockquote><p>问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？</p></blockquote><p>回答：不能，我只有亲自在你的电脑上动手才能找到毛病。还是去找你当地的 Linux 使用群组者寻求实际的指导吧（你能在<a href="http://www.linux.org/groups/index.html" target="_blank" rel="noopener">这儿</a>找到使用者群组的清单）。</p><p>注意：如果安装问题与某 Linux 的发行版有关，在它的邮件列表、论坛或本地使用者群组中提问也许是恰当的。此时，应描述问题的准确细节。在此之前，先用 <code>Linux</code> 和<strong>所有</strong>被怀疑的硬件作关键词仔细搜索。</p><p><a id="q9"></a></p><blockquote><p>问题：我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？</p></blockquote><p>回答：想要这样做，说明了你是个卑鄙小人；想找个黑客帮你，说明你是个白痴！</p><h2 id="好问题与蠢问题"><a href="#好问题与蠢问题" class="headerlink" title="好问题与蠢问题"></a>好问题与蠢问题</h2><p>最后，我将透过举一些例子，来说明怎样聪明的提问；同一个问题的两种问法被放在一起，一种是愚蠢的，另一种才是明智的。</p><p><strong><strong>蠢问题</strong></strong>：</p><blockquote><p>我可以在哪儿找到关于 Foonly Flurbamatic 的资料？</p></blockquote><p>这种问法无非想得到 <a href="#RTFM">STFW</a> 这样的回答。</p><p><strong><strong>聪明问题</strong></strong>：</p><blockquote><p>我用 Google 搜索过 “Foonly Flurbamatic 2600”，但是没找到有用的结果。谁知道上哪儿去找对这种设备编程的资料？</p></blockquote><p>这个问题已经 STFW 过了，看起来他真的遇到了麻烦。</p><p><strong><strong>蠢问题</strong></strong></p><blockquote><p>我从 foo 项目找来的源码没法编译。它怎么这么烂？</p></blockquote><p>他觉得都是别人的错，这个傲慢自大的提问者。</p><p><strong><strong>聪明问题</strong></strong></p><blockquote><p>foo 项目代码在 Nulix 6.2 版下无法编译通过。我读过了 FAQ，但里面没有提到跟 Nulix 有关的问题。这是我编译过程的记录，我有什么做的不对的地方吗？</p></blockquote><p>提问者已经指明了环境，也读过了 FAQ，还列出了错误，并且他没有把问题的责任推到别人头上，他的问题值得被关注。</p><p><strong><strong>蠢问题</strong></strong></p><blockquote><p>我的主机板有问题了，谁来帮我？</p></blockquote><p>某黑客对这类问题的回答通常是：<code>好的，还要帮你拍拍背和换尿布吗？</code>，然后按下删除键。</p><p><strong><strong>聪明问题</strong></strong></p><blockquote><p>我在 S2464 主机板上试过了 X 、 Y 和 Z ，但没什么作用，我又试了 A 、 B 和 C 。请注意当我尝试 C 时的奇怪现象。显然 florbish 正在 grommicking，但结果出人意料。通常在 Athlon MP 主机板上引起 grommicking 的原因是什么？有谁知道接下来我该做些什么测试才能找出问题？</p></blockquote><p>这个家伙，从另一个角度来看，值得去回答他。他表现出了解决问题的能力，而不是坐等天上掉答案。</p><p>在最后一个问题中，注意<code>告诉我答案</code>和<code>给我启示，指出我还应该做什么诊断工作</code>之间微妙而又重要的区别。</p><p>事实上，后一个问题源自于 2001 年 8 月在 Linux 内核邮件列表（lkml）上的一个真实的提问。我（Eric）就是那个提出问题的人。我在 Tyan S2464 主板上观察到了这种无法解释的锁定现象，列表成员们提供了解决这一问题的重要信息。</p><p>通过我的提问方法，我给了别人可以咀嚼玩味的东西；我设法让人们很容易参与并且被吸引进来。我显示了自己具备和他们同等的能力，并邀请他们与我共同探讨。通过告诉他们我所走过的弯路，以避免他们再浪费时间，我也表明了对他们宝贵时间的尊重。</p><p>事后，当我向每个人表示感谢，并且赞赏这次良好的讨论经历的时候， 一个 Linux 内核邮件列表的成员表示，他觉得我的问题得到解决并非由于我是这个列表中的<strong>名</strong>人，而是因为我用了正确的方式来提问。</p><p>黑客从某种角度来说是拥有丰富知识但缺乏人情味的家伙；我相信他是对的，如果我<strong>像</strong>个乞讨者那样提问，不论我是谁，一定会惹恼某些人或者被他们忽视。他建议我记下这件事，这直接导致了本指南的出现。</p><h2 id="如果得不到回答"><a href="#如果得不到回答" class="headerlink" title="如果得不到回答"></a>如果得不到回答</h2><p>如果仍得不到回答，请不要以为我们觉得无法帮助你。有时只是看到你问题的人不知道答案罢了。没有回应不代表你被忽视，虽然不可否认这种差别很难区分。</p><p>总的来说，简单的重复张贴问题是个很糟的点子。这将被视为无意义的喧闹。有点耐心，知道你问题答案的人可能生活在不同的时区，可能正在睡觉，也有可能你的问题一开始就没有组织好。</p><p>你可以通过其他渠道获得帮助，这些渠道通常更适合初学者的需要。</p><p>有许多网上的以及本地的使用者群组，由热情的软件爱好者（即使他们可能从没亲自写过任何软件）组成。通常人们组建这样的团体来互相帮助并帮助新手。</p><p>另外，你可以向很多商业公司寻求帮助，不论公司大还是小。别为要付费才能获得帮助而感到沮丧！毕竟，假使你的汽车发动机汽缸密封圈爆掉了– 完全可能如此 –你还得把它送到修车铺，并且为维修付费。就算软件没花费你一分钱，你也不能强求技术支持总是免费的。</p><p>对像是 Linux 这种大众化的软件，每个开发者至少会对应到上万名使用者。根本不可能由一个人来处理来自上万名使用者的求助电话。要知道，即使你要为这些协助付费，和你所购买的同类软件相比，你所付出的也是微不足道的（通常封闭源代码软件的技术支持费用比开放源代码软件的要高得多，且内容也没那么丰富）。</p><h2 id="如何更好地回答问题"><a href="#如何更好地回答问题" class="headerlink" title="如何更好地回答问题"></a>如何更好地回答问题</h2><p><strong>态度和善一点</strong>。问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。</p><p><strong>对初犯者私下回复</strong>。对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找常见问题都不知道。</p><p><strong>如果你不确定，一定要说出来</strong>！一个听起来权威的错误回复比没有还要糟，别因为听起来像个专家很好玩，就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。</p><p><strong>如果帮不了忙，也别妨碍他</strong>。不要在实际步骤上开玩笑，那样也许会毁了使用者的设置 –有些可怜的呆瓜会把它当成真的指令。</p><p><strong>试探性的反问以引出更多的细节</strong>。如果你做得好，提问者可以学到点东西 –你也可以。试试将蠢问题转变成好问题，别忘了我们都曾是新手。</p><p>尽管对那些懒虫抱怨一声 RTFM 是正当的，能指出文件的位置（即使只是建议个 Google 搜索关键词）会更好。</p><p><strong>如果你决定回答，就请给出好的答案</strong>。当别人正在用错误的工具或方法时别建议笨拙的权宜之计（wordaround），应推荐更好的工具，重新界定问题。</p><p><strong>正面的回答问题</strong>！如果这个提问者已经很深入的研究而且也表明已经试过 X 、 Y 、 Z 、 A 、 B 、 C 但没得到结果，回答 <code>试试看 A 或是 B</code> 或者 <code>试试 X 、 Y 、 Z 、 A 、 B 、 C</code> 并附上一个链接一点用都没有。</p><p><strong>帮助你的社区从问题中学习</strong>。当回复一个好问题时，问问自己<code>如何修改相关文件或常见问题文件以免再次解答同样的问题？</code>，接着再向文件维护者发一份补丁。</p><p>如果你是在研究一番后才做出的回答，<strong>展现你的技巧而不是直接端出结果</strong>。毕竟<code>授人以鱼不如授人以渔</code>。</p><h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><p>如果你需要个人电脑、Unix 系统和网络如何运作的基础知识，参阅 <a href="http://en.tldp.org/HOWTO/Unix-and-Internet-Fundamentals-HOWTO/" target="_blank" rel="noopener">Unix 系统和网络基本原理</a>。</p><p>当你发布软件或补丁时，试着按<a href="http://en.tldp.org/HOWTO/Software-Release-Practice-HOWTO/index.html" target="_blank" rel="noopener">软件发布实践</a>操作。</p><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>Evelyn Mitchel 贡献了一些愚蠢问题例子并启发了编写<code>如何更好地回答问题</code>这一节， Mikhail Ramendik 贡献了一些特别有价值的建议和改进。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;How To Ask Questions The Smart Way&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Copyright © 2001,2006,2014 Eric S. Raymond, Rick Moen&lt;/p&gt;
&lt;p&gt;本指南英文版版权为 Eric S. Raymond, Rick Moen 所有。&lt;/p&gt;
&lt;p&gt;原文网址：&lt;a href=&quot;http://www.catb.org/~esr/faqs/smart-questions.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.catb.org/~esr/faqs/smart-questions.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Copyleft 2001 by D.H.Grand(nOBODY/Ginux), 2010 by Gasolin, 2015 by Ryan Wu&lt;/p&gt;
&lt;p&gt;本中文指南是基于原文 3.10 版以及 2010 年由 &lt;a href=&quot;https://github.com/gasolin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Gasolin&lt;/a&gt; 所翻译版本的最新翻译；&lt;/p&gt;
    
    </summary>
    
      <category term="Tips" scheme="http://shadow000902.space/categories/Tips/"/>
    
    
      <category term="提问的智慧" scheme="http://shadow000902.space/tags/%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7/"/>
    
  </entry>
  
  <entry>
    <title>python小程序</title>
    <link href="http://shadow000902.space/2018/05/19/python%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>http://shadow000902.space/2018/05/19/python小程序/</id>
    <published>2018-05-19T09:53:52.000Z</published>
    <updated>2018-05-19T11:16:26.792Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>修改文件内容，并存入原文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fileinput</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fileinput.input(<span class="string">"test0"</span>, inplace=<span class="number">1</span>):</span><br><span class="line">    line = line.replace(<span class="string">".."</span>, <span class="string">"C:"</span>)</span><br><span class="line">    <span class="keyword">print</span> line</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>比较两个文件的差异，并输出HTML对比结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1.difflib的HtmlDiff类创建html表格用来展示文件差异，通过make_file方法</span></span><br><span class="line"><span class="string">2.make_file方法使用</span></span><br><span class="line"><span class="string">make_file(fromlines, tolines [, fromdesc][, todesc][, context][, numlines])</span></span><br><span class="line"><span class="string">用来生成一个包含表格的html文件，其内容是用来展示差异。</span></span><br><span class="line"><span class="string">fromlines和tolines,用于比较的内容，格式为字符串组成的列表</span></span><br><span class="line"><span class="string">fromdesc和todesc，可选参数，对应的fromlines,tolines的差异化文件的标题，默认为空字符串</span></span><br><span class="line"><span class="string">context 和 numlines，可选参数，context 为True时，只显示差异的上下文，为false，显示全文，numlines默认为5，</span></span><br><span class="line"><span class="string">当context为True时，控制展示上下文的行数，当context为false时,控制不同差异的高亮之间移动时“next”的开始位置</span></span><br><span class="line"><span class="string">3.使用argparse传入两个需要对比的文件</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> difflib</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建打开文件函数，并按换行符分割内容</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readfile</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename, <span class="string">'r'</span>) <span class="keyword">as</span> fileHandle:</span><br><span class="line">            text = fileHandle.read().splitlines()</span><br><span class="line">        <span class="keyword">return</span> text</span><br><span class="line">    <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"Read file Error:"</span>, e)</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较两个文件并输出到html文件中</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">diff_file</span><span class="params">(filename1, filename2)</span>:</span></span><br><span class="line">    text1_lines = readfile(filename1)</span><br><span class="line">    text2_lines = readfile(filename2)</span><br><span class="line">    d = difflib.HtmlDiff()</span><br><span class="line">    <span class="comment"># context=True时只显示差异的上下文，默认显示5行，由numlines参数控制，context=False显示全文，差异部分颜色高亮，默认为显示全文</span></span><br><span class="line">    result = d.make_file(text1_lines, text2_lines, filename1, filename2, context=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># 内容保存到result.html文件中</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'result.html'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> resultfile:</span><br><span class="line">        resultfile.write(result)</span><br><span class="line">    <span class="comment"># print(result)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 定义必须传入两个参数，使用格式-f1 filename1 -f2 filename</span></span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">"传入两个文件参数"</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'-f1'</span>, action=<span class="string">'store'</span>, dest=<span class="string">'filename1'</span>, required=<span class="keyword">True</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'-f2'</span>, action=<span class="string">'store'</span>, dest=<span class="string">'filename2'</span>, required=<span class="keyword">True</span>)</span><br><span class="line">    given_args = parser.parse_args()</span><br><span class="line">    filename1 = given_args.filename1</span><br><span class="line">    filename2 = given_args.filename2</span><br><span class="line">    diff_file(filename1, filename2)</span><br></pre></td></tr></table></figure></li><li><p>金额数值转大写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convertNumToChinese</span><span class="params">(totalPrice)</span>:</span></span><br><span class="line">    dictChinese = [<span class="string">u'零'</span>, <span class="string">u'壹'</span>, <span class="string">u'贰'</span>, <span class="string">u'叁'</span>, <span class="string">u'肆'</span>, <span class="string">u'伍'</span>, <span class="string">u'陆'</span>, <span class="string">u'柒'</span>, <span class="string">u'捌'</span>, <span class="string">u'玖'</span>]</span><br><span class="line">    unitChinese = [<span class="string">u''</span>, <span class="string">u'拾'</span>, <span class="string">u'佰'</span>, <span class="string">u'仟'</span>, <span class="string">''</span>, <span class="string">u'拾'</span>, <span class="string">u'佰'</span>, <span class="string">u'仟'</span>]</span><br><span class="line">    <span class="comment"># 将整数部分和小数部分区分开</span></span><br><span class="line">    partA = int(math.floor(totalPrice))</span><br><span class="line">    partB = round(totalPrice - partA, <span class="number">2</span>)</span><br><span class="line">    strPartA = str(partA)</span><br><span class="line">    strPartB = <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span> partB != <span class="number">0</span>:</span><br><span class="line">        strPartB = str(partB)[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">    singleNum = []</span><br><span class="line">    <span class="keyword">if</span> len(strPartA) != <span class="number">0</span>:</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; len(strPartA):</span><br><span class="line">            singleNum.append(strPartA[i])</span><br><span class="line">            i = i + <span class="number">1</span></span><br><span class="line">    <span class="comment"># 将整数部分先压再出，因为可以从后向前处理，好判断位数</span></span><br><span class="line">    tnumChinesePartA = []</span><br><span class="line">    numChinesePartA = []</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    bef = <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">if</span> len(strPartA) != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">while</span> j &lt; len(strPartA):</span><br><span class="line">            curr = singleNum.pop()</span><br><span class="line">            <span class="keyword">if</span> curr == <span class="string">'0'</span> <span class="keyword">and</span> bef != <span class="string">'0'</span>:</span><br><span class="line">                tnumChinesePartA.append(dictChinese[<span class="number">0</span>])</span><br><span class="line">                bef = curr</span><br><span class="line">            <span class="keyword">if</span> curr != <span class="string">'0'</span>:</span><br><span class="line">                tnumChinesePartA.append(unitChinese[j])</span><br><span class="line">                tnumChinesePartA.append(dictChinese[int(curr)])</span><br><span class="line">                bef = curr</span><br><span class="line">            <span class="keyword">if</span> j == <span class="number">3</span>:</span><br><span class="line">                tnumChinesePartA.append(<span class="string">u'萬'</span>)</span><br><span class="line">                bef = <span class="string">'0'</span></span><br><span class="line">            j = j + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(tnumChinesePartA)):</span><br><span class="line">            numChinesePartA.append(tnumChinesePartA.pop())</span><br><span class="line">    A = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> numChinesePartA:</span><br><span class="line">        A = A + i</span><br><span class="line">    <span class="comment"># 小数部分很简单，只要判断下角是否为零</span></span><br><span class="line">    B = <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span> len(strPartB) == <span class="number">1</span>:</span><br><span class="line">        B = dictChinese[int(strPartB[<span class="number">0</span>])] + <span class="string">u'角'</span></span><br><span class="line">    <span class="keyword">if</span> len(strPartB) == <span class="number">2</span> <span class="keyword">and</span> strPartB[<span class="number">0</span>] != <span class="string">'0'</span>:</span><br><span class="line">        B = dictChinese[int(strPartB[<span class="number">0</span>])] + <span class="string">u'角'</span> + dictChinese[int(strPartB[<span class="number">1</span>])] + <span class="string">u'分'</span></span><br><span class="line">    <span class="keyword">if</span> len(strPartB) == <span class="number">2</span> <span class="keyword">and</span> strPartB[<span class="number">0</span>] == <span class="string">'0'</span>:</span><br><span class="line">        B = dictChinese[int(strPartB[<span class="number">0</span>])] + dictChinese[int(strPartB[<span class="number">1</span>])] + <span class="string">u'分'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(strPartB) == <span class="number">0</span>:</span><br><span class="line">        S = A + <span class="string">u'圆整'</span></span><br><span class="line">    <span class="keyword">if</span> len(strPartB) != <span class="number">0</span>:</span><br><span class="line">        S = A + <span class="string">u'圆'</span> + B</span><br><span class="line">    <span class="keyword">return</span> S</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> convertNumToChinese(<span class="number">23001231.041</span>)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;修改文件内容，并存入原文件&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; fileinput&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; fileinput.input(&lt;span class=&quot;string&quot;&gt;&quot;test0&quot;&lt;/span&gt;, inplace=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    line = line.replace(&lt;span class=&quot;string&quot;&gt;&quot;..&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;C:&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; line&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Python" scheme="http://shadow000902.space/categories/Python/"/>
    
    
      <category term="python" scheme="http://shadow000902.space/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>测试用例设计思路总结</title>
    <link href="http://shadow000902.space/2018/04/29/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF%E6%80%BB%E7%BB%93/"/>
    <id>http://shadow000902.space/2018/04/29/测试用例设计思路总结/</id>
    <published>2018-04-28T18:21:42.000Z</published>
    <updated>2018-04-28T18:30:25.123Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>模块的层级不能太多，有必要的话可通过“2级模块1-3级模块1”的形式，减少模块的层级</p></li><li><p>模块下，分“字段校验”和“功能校验”，划分依据呢？</p></li></ol><p>建议：把可执行一个完整功能、业务功能的用例放在“功能校验”下，否则放在“字段校验”下，比如上面，添加帐号是一个需要实现的功能，而添加帐号页面中的姓名则只是实现该功能的需要的一个元素，如果只给定这个元素是无法完成添加操作的。这个划分可能需要多写用例才能拿捏得比较准。</p><ol start="3"><li>这样划分的好处是，比较能突出重点，特别是时间来不及的情况下，可能只执行“功能校验”的用例，当然也视情况而定，有些字段校验也很重要，属于重点测试内容。</li></ol><p>对于增加或修改，还有几个检查点：<br>1.打开这个弹出框的默认值检查；<br>2.连续点击确定按钮，看是否会重复生成记录；<br>3.取消功能测试；<br>4.账号的唯一性检查。还要注意并发操作；<br>5.多增加一些记录，覆盖不同字段的有效等价类；<br>6.session超时后，增加或修改；<br>7.填写内容与存入数据库实际值比较（可能数据库支持字符集与前端输入字符集不同导致问题）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;模块的层级不能太多，有必要的话可通过“2级模块1-3级模块1”的形式，减少模块的层级&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;模块下，分“字段校验”和“功能校验”，划分依据呢？&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;建议：把可执行一个完整功能、业务功能的用例放在
      
    
    </summary>
    
      <category term="TestTheory" scheme="http://shadow000902.space/categories/TestTheory/"/>
    
    
      <category term="测试用例" scheme="http://shadow000902.space/tags/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>接口测试用例设计总结</title>
    <link href="http://shadow000902.space/2018/04/23/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93/"/>
    <id>http://shadow000902.space/2018/04/23/接口测试用例设计总结/</id>
    <published>2018-04-23T12:09:10.000Z</published>
    <updated>2018-05-03T10:08:15.317Z</updated>
    
    <content type="html"><![CDATA[<h4 id="接口测试定义"><a href="#接口测试定义" class="headerlink" title="接口测试定义"></a>接口测试定义</h4><h4 id="接口测试主要验证点"><a href="#接口测试主要验证点" class="headerlink" title="接口测试主要验证点"></a>接口测试主要验证点</h4><ul><li>针对输入，可按照参数类型进行设计；</li><li>针对接口处理，可按照逻辑进行设计；</li><li><p>针对输出，可根据结果进行分析设计。</p><a id="more"></a></li></ul><h4 id="接口测试用例设计"><a href="#接口测试用例设计" class="headerlink" title="接口测试用例设计"></a>接口测试用例设计</h4><h5 id="针对输入设计"><a href="#针对输入设计" class="headerlink" title="针对输入设计"></a>针对输入设计</h5><ol><li>数值型（int, long, float, double等）<ul><li>如果参数规定了值的范围，则需要考虑等价类取值范围内、取值范围外，取值的边界，如有需要，可能会遍历取值范围内的各个值。</li><li>参数数据类型限制；<ul><li>逆向用例：针对每个参数都设计1条参数值类型不符的逆向用例</li></ul></li><li>参数数据类型自身的数据范围值限制<ul><li>正向用例：针对所有参数，设计1条每个参数的参数值在数据范围内为最大值的正向用例</li><li>逆向用例：针对每个参数(假设n个)，设计n条每个参数的参数值都超出数据范围最大值的逆向用例</li><li>逆向用例：针对每个参数(假设n个)，设计n条每个参数的参数值都小于数据范围最小值的逆向用例<br>常见问题和风险：</li></ul></li><li>特殊值处理不当导致程序异常退出；</li><li>类型边界溢出；</li><li>取值范围外值未返回正确的错误信息等</li></ul></li><li>字符串类型<ul><li>边界值：string的最大长度；</li><li>特殊值：空字符；</li><li>字符串内容可考虑类型：数字，非数字；</li><li>特殊字符</li><li>如果是用户输入且其他用户不可见的内容，则还需要考虑敏感字是否被正常过滤<br>可能出现的问题和风险：</li><li>传入非特定类型程序异常退出；</li><li>超长字符未进行处理，导致存储、显示等异常；</li><li>其他用户可见设置的敏感字</li></ul></li><li>数组或链表<ul><li>正常取值、范围外；</li><li>边界值；</li><li>特殊值：0个；</li><li>合法ID和不合法的；</li><li>重复的ID等<br>可能存在的问题和风险：</li><li>0个item时程序异常退出；</li><li>重复的item处理时未去重导致结果异常等</li></ul></li><li><p>结构体</p><ul><li>结构体(struct)是一些元素的结合，元素实际也是数值型，字符串型，数组或链表。</li></ul></li><li><p>是否满足前提条件</p><ul><li>有些接口需要满足前置条件，才可成功获取数据。常见的，需要登陆Token。<br>逆向用例：</li><li>针对是否满足前置条件(假设为n个条件)，设计0~n条用例</li></ul></li><li>是否携带默认值参数<ul><li>带默认值的参数都不填写、不传参，必填参数都填写正确且存在的“常规”值，其它不填写，设计1条用例；</li></ul></li><li>业务规则、功能需求<ul><li>这里根据实际情况，结合接口参数说明，可能需要设计n条正向用例和逆向用例</li></ul></li><li>参数是否必填<br>逆向用例：<ul><li>针对每个必填参数，都设计1条参数值为空的逆向用例</li></ul></li><li>参数之间是否存在关联<ul><li>有些参数彼此之间存在相互制约的关系<br>逆向用例：</li><li>根据实际情况，可能需要设计0~n条用例</li></ul></li></ol><p>以上几个方面考虑全的话，基本可以做到如下几个方面的覆盖：</p><ul><li>主流程测试用例：正常的主流程功能校验；</li><li>分支流测试用例：正常的分支流功能校验；</li><li>异常流测试用例：异常容错校验</li></ul><h5 id="针对逻辑设计"><a href="#针对逻辑设计" class="headerlink" title="针对逻辑设计"></a>针对逻辑设计</h5><ol><li>约束条件分析<ul><li>数值限制：</li><li>状态限制：登录状态等</li><li>关系限制：绑定的关系，好友关系等。<ul><li>例如，应该只能查询有关联关系的账号的信息。</li></ul></li><li>权限限制：需要对应权限才能操作对应的功能<br>用户进行操作时，在该操作的前端可以已经进行了约束条件的限制，故用户无法直接触发请求该接口。但是实际上，如果有其他手段：例如UI有bug或者通过技术手段直接调用接口，那么接口是否针对这些条件进行了限制就尤为重要。<br>常见的问题和风险：</li><li>约束条件判断不足，导致用户可通过特殊手段获取利益</li></ul></li><li>操作对象分析<ul><li>对象之间存在隔离，不能串<br>常见的问题和风险：</li><li>用户可访问非权限内的其他用户信息、敏感信息，从而利用这些信息谋取利益。</li></ul></li><li>状态转换分析<ul><li>状态之间转换存在严格定义，不能随意变换<br>常见的问题和风险：</li><li>可通过特殊手段达到原本不能的状态，从而谋取利益。</li></ul></li><li>时序分析<ul><li>客户端与服务端的交互用户可见的只有一次，期间存在着用户不可见的内部多次按顺序执行的调用逻辑，实际就是发起了一个有序的动作流，只有按照正确的顺序，才能得到正确的结果。<br>常见的问题和风险：</li><li>非顺序执行后，数据出现异常，可能还会出现程序其他异常</li><li>通过打乱顺序获取利益</li></ul></li></ol><h5 id="针对输出设计"><a href="#针对输出设计" class="headerlink" title="针对输出设计"></a>针对输出设计</h5><ol><li>针对输出结果<br>接口处理正确的结果可能只有一个，但是错误异常返回结果有很多情况很多值。如果知道返回结果有很多种，就可以针对不同结果设计用例。例如提交积分任务的时候我们通常能想到的是返回正确和错误，错误可能想到：无效任务，无效登录态，但是不一定能否完全覆盖所有错误码，而接口返回定义的返回码可以设计更多用例。<br>覆盖返回码也是用例设计的一种思路。<br>常见问题和风险：<ul><li>错误前端处理不足，导致前端异常；</li><li>错误提示处理不当，导致用户看到晦涩的错误码；</li><li>错误提示不当，导致用户不知道哪里出了问题，如何解决。</li></ul></li><li>接口超时<br>接口正常情况下是有返回的，那么如果接口不返回呢？也就是说接口超时后的处理也是测试需要考虑的部分。<br>常见的问题及风险：<ul><li>未进行超时处理，导致整个流程阻塞</li><li>超时后又收到接口返回，导致逻辑出现错乱</li></ul></li></ol><h4 id="其他测试设计"><a href="#其他测试设计" class="headerlink" title="其他测试设计"></a>其他测试设计</h4><h5 id="已废弃接口处理"><a href="#已废弃接口处理" class="headerlink" title="已废弃接口处理"></a>已废弃接口处理</h5><p>  已废弃协议，是指之前有定义，但是因为需求变更或其他原因，目前版本不用。这些接口虽然不再使用，但有可能代码并没有及时删除。如果利用技术手段调用这些接口，可能获取额外利益。<br>  新版本在考虑兼容旧版本的同时，还应做好相关废弃接口的检查，避免用户获得额外利益。</p><h5 id="接口设计合理性分析"><a href="#接口设计合理性分析" class="headerlink" title="接口设计合理性分析"></a>接口设计合理性分析</h5><ul><li>接口字段是否冗余；</li><li>接口是否冗余；</li><li>接口是否返回了调用方期望得到的信息；</li><li>接口定义是否可满足所有调用需求；</li><li>接口定义调用是否方便。</li></ul><h4 id="接口用例设计精简和优化"><a href="#接口用例设计精简和优化" class="headerlink" title="接口用例设计精简和优化"></a>接口用例设计精简和优化</h4><p>  在接口参数较多的情况下，如果每个参数都进行完整校验，将会是非常大的工作量，所以需要对接口用例进行精简和优化：</p><pre><code>① 根据接口的使用对象(外部，系统内部)，有选择的去、留部分用例  - 如果开发于系统内部调用的，开发过程中，开发者肯定需要调用这些接口，如果类型错了，他们也就获取不到预期的数据，这些错误，他们肯定可以发现，所以，他们传递的参数值一般能保证类型正确。  - 内部调用，参数值不是外部手动输入的，输入数据长度、值大小可控，当然如果数据一直增长，那再大的类型可能都无法保证不超出，比如自动增长的商铺id② 根据接口的是否核心接口，有选择的去、留部分用例  - 核心接口，每个字段都需要验证  - 非核心接口，接口核心字段验证完成就可以③ 根据参数说明，及实际情况，有选择的去、留部分用例  - 部分参数的参数值是自定义的，比如 订单时间类型，就那几种，除非传错了，不然不可能超出范围④ 尽量在一个用例中验证尽量多的参数形式，但又得想办法尽量让验证范围最大化</code></pre><p>转载与：<a href="https://cloud.tencent.com/developer/article/1022322" target="_blank" rel="noopener">接口测试用例设计</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;接口测试定义&quot;&gt;&lt;a href=&quot;#接口测试定义&quot; class=&quot;headerlink&quot; title=&quot;接口测试定义&quot;&gt;&lt;/a&gt;接口测试定义&lt;/h4&gt;&lt;h4 id=&quot;接口测试主要验证点&quot;&gt;&lt;a href=&quot;#接口测试主要验证点&quot; class=&quot;headerlink&quot; title=&quot;接口测试主要验证点&quot;&gt;&lt;/a&gt;接口测试主要验证点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;针对输入，可按照参数类型进行设计；&lt;/li&gt;
&lt;li&gt;针对接口处理，可按照逻辑进行设计；&lt;/li&gt;
&lt;li&gt;&lt;p&gt;针对输出，可根据结果进行分析设计。&lt;/p&gt;
    
    </summary>
    
      <category term="TestTheory" scheme="http://shadow000902.space/categories/TestTheory/"/>
    
    
      <category term="接口" scheme="http://shadow000902.space/tags/%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>Python版本管理工具pyenv使用小结</title>
    <link href="http://shadow000902.space/2018/04/10/Python%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7pyenv%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/"/>
    <id>http://shadow000902.space/2018/04/10/Python版本管理工具pyenv使用小结/</id>
    <published>2018-04-10T12:31:28.000Z</published>
    <updated>2018-05-05T07:33:07.335Z</updated>
    
    <content type="html"><![CDATA[<h5 id="安装brew"><a href="#安装brew" class="headerlink" title="安装brew"></a>安装<code>brew</code></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure>  <a id="more"></a><h5 id="安装pyenv"><a href="#安装pyenv" class="headerlink" title="安装pyenv"></a>安装<code>pyenv</code></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install pyenv</span><br></pre></td></tr></table></figure><h5 id="把pyenv加入环境变量"><a href="#把pyenv加入环境变量" class="headerlink" title="把pyenv加入环境变量"></a>把<code>pyenv</code>加入环境变量</h5><p>如果使用的终端是<code>bash</code>，则编辑<code>~/.bashrc</code>，如果使用的终端是<code>zsh</code>，则编辑<code>~/.zshrc</code>，在该文件的最开头加入语句：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv init -)</span>"</span></span><br></pre></td></tr></table></figure></p><h5 id="pyenv常用基本命令"><a href="#pyenv常用基本命令" class="headerlink" title="pyenv常用基本命令"></a><code>pyenv</code>常用基本命令</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pyenv install --list                            <span class="comment"># List all available versions</span></span><br><span class="line">pyenv install &lt;version&gt;                         <span class="comment"># install python</span></span><br><span class="line">pyenv global &lt;version&gt;                          <span class="comment"># 全局设置python版本为指定版本</span></span><br><span class="line">pyenv global 2.7.14 3.6.4                       <span class="comment"># 指定多个python版本为全局版本，有顺序</span></span><br><span class="line">pyenv <span class="built_in">local</span> &lt;version&gt;                           <span class="comment"># 设置当前路径下python版本为指定版本</span></span><br><span class="line">pyenv shell &lt;version&gt;                           <span class="comment"># 设置当前shell窗口使用的python版本为指定版本</span></span><br><span class="line">pyenv versions                                  <span class="comment"># 列举所有版本的python，打``*``的为当前指定的全局版本</span></span><br><span class="line">pyenv version                                   <span class="comment"># 列举已经安装的版本</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;安装brew&quot;&gt;&lt;a href=&quot;#安装brew&quot; class=&quot;headerlink&quot; title=&quot;安装brew&quot;&gt;&lt;/a&gt;安装&lt;code&gt;brew&lt;/code&gt;&lt;/h5&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/usr/bin/ruby -e &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Python" scheme="http://shadow000902.space/categories/Python/"/>
    
    
      <category term="pyenv" scheme="http://shadow000902.space/tags/pyenv/"/>
    
  </entry>
  
  <entry>
    <title>Python小技巧</title>
    <link href="http://shadow000902.space/2018/03/06/Python%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://shadow000902.space/2018/03/06/Python小技巧/</id>
    <published>2018-03-06T13:08:43.000Z</published>
    <updated>2018-05-05T08:55:28.563Z</updated>
    
    <content type="html"><![CDATA[<h4 id="pip使用技巧"><a href="#pip使用技巧" class="headerlink" title="pip使用技巧"></a>pip使用技巧</h4><h5 id="安装指定版本的第三方库"><a href="#安装指定版本的第三方库" class="headerlink" title="安装指定版本的第三方库"></a>安装指定版本的第三方库</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install robotframework==2.8.7</span><br></pre></td></tr></table></figure><p>要用<code>pip</code>安装指定版本的<code>Python</code>包，只需通过<code>==</code>操作符指定即可。</p>  <a id="more"></a><h5 id="在指定位置安装第三方"><a href="#在指定位置安装第三方" class="headerlink" title="在指定位置安装第三方"></a>在指定位置安装第三方</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -t /Users/taoyi/.pyenv/versions/2.7.14/lib/python2.7/site-packages lxml</span><br></pre></td></tr></table></figure><p><code>pip</code>安装的包不一定是用户想要的位置，此时可以用<code>-t</code>选项来指定位置。</p><h5 id="通过requirement-txt文件来管理pip的第三方库"><a href="#通过requirement-txt文件来管理pip的第三方库" class="headerlink" title="通过requirement.txt文件来管理pip的第三方库"></a>通过requirement.txt文件来管理pip的第三方库</h5><p>文件内容如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">robotframework==3.0.2</span><br><span class="line">robotframework-ride==1.5.2</span><br><span class="line">robotframework-appiumlibrary==1.4.6</span><br><span class="line">robotframework-DatabaseLibrary==1.0.1</span><br><span class="line">robotframework-Selenium2Library==3.0.0</span><br><span class="line">robotframework-requests==0.4.7</span><br><span class="line">robotframework-sshlibrary==2.1.3</span><br><span class="line">robotframework-HttpLibrary==0.4.2</span><br><span class="line">requests==2.18.4</span><br><span class="line">PyMySQL==0.8.0</span><br><span class="line">MySQL-python==1.2.5</span><br></pre></td></tr></table></figure></p><p>然后通过以下命令来批量安装第三方库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirement.txt</span><br></pre></td></tr></table></figure></p><h5 id="查看有更新的pip第三方库"><a href="#查看有更新的pip第三方库" class="headerlink" title="查看有更新的pip第三方库"></a>查看有更新的<code>pip</code>第三方库</h5><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TaoYi-Mac in ~ [16:27:56]</span></span><br><span class="line">$ pip list --outdate --trusted-host pypi.douban.com</span><br><span class="line">Package                   Version Latest  Type</span><br><span class="line">------------------------- ------- ------- -----</span><br><span class="line">robotframework-ride       1.5.2   1.5.2.1 sdist</span><br><span class="line">robotframework-sshlibrary 2.1.3   3.0.0   sdist</span><br><span class="line">setuptools                28.8.0  39.1.0  wheel</span><br></pre></td></tr></table></figure><h5 id="更新指定的第三方库"><a href="#更新指定的第三方库" class="headerlink" title="更新指定的第三方库"></a>更新指定的第三方库</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade robotframework-sshlibrary</span><br></pre></td></tr></table></figure><h5 id="查看第三方库的详细信息"><a href="#查看第三方库的详细信息" class="headerlink" title="查看第三方库的详细信息"></a>查看第三方库的详细信息</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip show robotframework-sshlibrary</span><br></pre></td></tr></table></figure><h5 id="pip配置文件更新"><a href="#pip配置文件更新" class="headerlink" title="pip配置文件更新"></a>pip配置文件更新</h5><p><code>pip</code>配置文件是<code>~/.pip/pip.conf</code>文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line">[global]                                              <span class="comment"># 设置pip的全局的源</span></span><br><span class="line">index-url = http://pypi.douban.com/simple</span><br><span class="line"></span><br><span class="line">[install]                                             <span class="comment"># pip install指定的安装源</span></span><br><span class="line">trusted-host=pypi.douban.com</span><br><span class="line"></span><br><span class="line">[list]                                                <span class="comment"># pip list命令接口的展示方式设置</span></span><br><span class="line">format=columns</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;pip使用技巧&quot;&gt;&lt;a href=&quot;#pip使用技巧&quot; class=&quot;headerlink&quot; title=&quot;pip使用技巧&quot;&gt;&lt;/a&gt;pip使用技巧&lt;/h4&gt;&lt;h5 id=&quot;安装指定版本的第三方库&quot;&gt;&lt;a href=&quot;#安装指定版本的第三方库&quot; class=&quot;headerlink&quot; title=&quot;安装指定版本的第三方库&quot;&gt;&lt;/a&gt;安装指定版本的第三方库&lt;/h5&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install robotframework==2.8.7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;要用&lt;code&gt;pip&lt;/code&gt;安装指定版本的&lt;code&gt;Python&lt;/code&gt;包，只需通过&lt;code&gt;==&lt;/code&gt;操作符指定即可。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://shadow000902.space/categories/Python/"/>
    
    
      <category term="python" scheme="http://shadow000902.space/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>《SQL必知必会》学习笔记</title>
    <link href="http://shadow000902.space/2018/02/26/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://shadow000902.space/2018/02/26/《SQL必知必会》学习笔记/</id>
    <published>2018-02-26T11:56:50.000Z</published>
    <updated>2018-02-26T12:07:33.874Z</updated>
    
    <content type="html"><![CDATA[<h4 id="数据库基础"><a href="#数据库基础" class="headerlink" title="数据库基础"></a>数据库基础</h4><p>DBMS：数据库管理系统。是一个数据库软件。<br>database：数据库。通过DBMS创建和操作的保存有组织的数据的容器（通常是一个文件或一组文件）。<br>table：表。某种特定类型数据的结构化清单。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;数据库基础&quot;&gt;&lt;a href=&quot;#数据库基础&quot; class=&quot;headerlink&quot; title=&quot;数据库基础&quot;&gt;&lt;/a&gt;数据库基础&lt;/h4&gt;&lt;p&gt;DBMS：数据库管理系统。是一个数据库软件。&lt;br&gt;database：数据库。通过DBMS创建和操作的保存有组织的数
      
    
    </summary>
    
      <category term="SQL" scheme="http://shadow000902.space/categories/SQL/"/>
    
    
      <category term="mysql" scheme="http://shadow000902.space/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>MAC下微信备份文件管理</title>
    <link href="http://shadow000902.space/2018/02/21/MAC%E4%B8%8B%E5%BE%AE%E4%BF%A1%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    <id>http://shadow000902.space/2018/02/21/MAC下微信备份文件管理/</id>
    <published>2018-02-21T04:59:56.000Z</published>
    <updated>2018-02-26T10:45:30.828Z</updated>
    
    <content type="html"><![CDATA[<h4 id="备份文件位置"><a href="#备份文件位置" class="headerlink" title="备份文件位置"></a>备份文件位置</h4><img src="/2018/02/21/MAC下微信备份文件管理/备份与恢复.png" title="备份与恢复">  <a id="more"></a><p>默认情况下，手机端聊天记录在备份后，备份记录会被储存在如下目录：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Users/taoyi/Library/Containers/com.tencent.xinWeChat/Data/Library/Application\ Support/com.tencent.xinWeChat/2.0b4.0.9/Backup/</span><br></pre></td></tr></table></figure></p><p>后面首先会是一个随机目录，比如：<code>98042dacf91c160514728c899d359b0c</code>，这个算是备份文件的主目录。<br>然后是第二级的一个随机目录，比如：<code>1F28B05B-D186-483D-AC39-23F54CC80811</code>，这里面就存放着备份文件，目录如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r--@ 1 taoyi  staff   177M  2 21 12:42 BAK_0_MEDIA</span><br><span class="line">-rw-r--r--@ 1 taoyi  staff   5.0M  2 21 12:41 BAK_0_TEXT</span><br><span class="line">-rw-r--r--@ 1 taoyi  staff   804K  2 21 12:42 Backup.db</span><br></pre></td></tr></table></figure></p><p>微信备份只有这一份数据，还原也只能从这一份数据还原。</p><h4 id="同一微信账号，多个备份管理"><a href="#同一微信账号，多个备份管理" class="headerlink" title="同一微信账号，多个备份管理"></a>同一微信账号，多个备份管理</h4><p>比如首先我们备份了一个比较重要的人的聊天记录出来，这时就可以把这一份备份记录剪切出来，放起来，然后这样直接在恢复里就看不到。<br>如果需要恢复，可以通过把这一份备份文件重新放回<code>Backup</code>目录中对应的位置，然后就又可以在备份文件管理里找到了，这样就可以单独恢复一个人的聊天记录。</p><h4 id="不同微信账号"><a href="#不同微信账号" class="headerlink" title="不同微信账号"></a>不同微信账号</h4><p>猜想不同微信账号，会在<code>Backup</code>目录下多一个随机目录，用来区分不同微信账号的备份记录。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;备份文件位置&quot;&gt;&lt;a href=&quot;#备份文件位置&quot; class=&quot;headerlink&quot; title=&quot;备份文件位置&quot;&gt;&lt;/a&gt;备份文件位置&lt;/h4&gt;&lt;img src=&quot;/2018/02/21/MAC下微信备份文件管理/备份与恢复.png&quot; title=&quot;备份与恢复&quot;&gt;
    
    </summary>
    
      <category term="Tips" scheme="http://shadow000902.space/categories/Tips/"/>
    
    
      <category term="微信" scheme="http://shadow000902.space/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>Python基础知识整理</title>
    <link href="http://shadow000902.space/2018/02/14/Python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
    <id>http://shadow000902.space/2018/02/14/Python基础知识整理/</id>
    <published>2018-02-14T10:40:37.000Z</published>
    <updated>2018-05-14T13:19:31.111Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基础方法"><a href="#基础方法" class="headerlink" title="基础方法"></a>基础方法</h4><p>  字符串大小写转换<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text.title()                <span class="comment"># 首字母转大写</span></span><br><span class="line">text.upper()                <span class="comment"># 字符串转大写</span></span><br><span class="line">text.lower()                <span class="comment"># 字符串转小写</span></span><br></pre></td></tr></table></figure></p>  <a id="more"></a><p> 对list进行排序<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br><span class="line">print(sorted(cars))                             <span class="comment"># 临时性字母正序排列</span></span><br><span class="line">print(sorted(cars, reverse=<span class="keyword">True</span>)                <span class="comment"># 临时性字母倒叙排列</span></span><br><span class="line">cars.sort()                                     <span class="comment"># 永久性字母正序排列</span></span><br><span class="line">cars.sort(reverse=<span class="keyword">True</span>)                         <span class="comment"># 永久性字母倒叙排列</span></span><br><span class="line">print(cars)                                     <span class="comment"># 默认排序</span></span><br></pre></td></tr></table></figure></p><p>  访问list元素<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br><span class="line">print(cars[<span class="number">0</span>])                                  <span class="comment"># 访问第一个元素</span></span><br><span class="line"><span class="comment"># 当访问的list长度总是会变的情况下，可以使用这种方式访问list最后一个元素</span></span><br><span class="line">print(cars[<span class="number">-1</span>])                                 <span class="comment"># 访问倒数第一个元素，即list最后一个元素</span></span><br></pre></td></tr></table></figure></p><p>  list中增删元素<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">'honda'</span>, <span class="string">'yamaha'</span>, <span class="string">'suzuki'</span>, <span class="string">'ducati'</span>]</span><br><span class="line">too_expensive = <span class="string">'ducati'</span></span><br><span class="line">motorcycles.remove(too_expensive)               <span class="comment"># 根据值删除元素</span></span><br><span class="line">motorcycles.append(too_expensive)               <span class="comment"># 增加元素，元素增加到末尾</span></span><br><span class="line">motorcycles.insert(<span class="number">0</span>, too_expensive)            <span class="comment"># 指定位置插入元素</span></span><br><span class="line"><span class="keyword">del</span> motorcycles[<span class="number">1</span>]                              <span class="comment"># 删除指定位置元素</span></span><br><span class="line">motorcycles.pop()                               <span class="comment"># 取出list中的最后一个元素</span></span><br><span class="line">print(motorcycles)</span><br></pre></td></tr></table></figure></p><p>  获取list长度<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">len(cars)</span><br></pre></td></tr></table></figure></p><p>  复制list<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_foods = [<span class="string">'pizza'</span>, <span class="string">'falafel'</span>, <span class="string">'carrot cake'</span>] </span><br><span class="line">friend_foods = my_foods[:]                      <span class="comment"># 复制整个列表以 [:] 来表示</span></span><br></pre></td></tr></table></figure></p><p>  检查特定值是否在list中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">banned_users = [<span class="string">'andrew'</span>, <span class="string">'carolina'</span>, <span class="string">'david'</span>]</span><br><span class="line">user1 = <span class="string">'andrew'</span></span><br><span class="line">user2 = <span class="string">'and'</span></span><br><span class="line">print(user1 <span class="keyword">in</span> banned_users)                    <span class="comment"># 返回true</span></span><br><span class="line">print(user2 <span class="keyword">not</span> <span class="keyword">in</span> banned_users)                <span class="comment"># 返回true</span></span><br><span class="line">print(user1 <span class="keyword">not</span> <span class="keyword">in</span> banned_users)                <span class="comment"># 返回false</span></span><br><span class="line">print(user2 <span class="keyword">in</span> banned_users)                    <span class="comment"># 返回false</span></span><br></pre></td></tr></table></figure></p><p>  <code>if</code>判断条件为<code>list</code>注意点<br>在判断条件为<code>list</code>时，如果<code>list</code>为空，即记过为<code>false</code>，只有在<code>list</code>有一个元素时，才为<code>true</code>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">requested_toppings = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> requested_toppings:</span><br><span class="line">    print(<span class="string">'requested_toppings not empty'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'requested_toppings is empty'</span>)</span><br></pre></td></tr></table></figure></p><p>这里实际执行的就是<code>else</code>中的语句，因为<code>requested_toppings</code>是空的，返回的<code>false</code>。</p><p>  多个<code>list</code>判断<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">available_toppings = [<span class="string">'mushrooms'</span>, <span class="string">'olives'</span>, <span class="string">'green peppers'</span>, <span class="string">'pepperoni'</span>, <span class="string">'pineapple'</span>, <span class="string">'extra cheese'</span>]</span><br><span class="line">requested_toppings = [<span class="string">'mushrooms'</span>, <span class="string">'french fries'</span>, <span class="string">'extra cheese'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> requested_topping <span class="keyword">in</span> requested_toppings:</span><br><span class="line">    <span class="keyword">if</span> requested_topping <span class="keyword">in</span> available_toppings:</span><br><span class="line">        print(<span class="string">"Adding "</span> + requested_topping + <span class="string">"."</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"Sorry, we don't have "</span> + requested_topping + <span class="string">"."</span>)</span><br><span class="line">    print(<span class="string">"\nFinished making your pizza!"</span>)</span><br></pre></td></tr></table></figure></p><p>  使用函数<code>range()</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">5</span>):                       <span class="comment"># 生成有序数值</span></span><br><span class="line">    print(value)                                <span class="comment"># 它只会打印4个数值，最后一个数值不会打印</span></span><br><span class="line">num = list(range(<span class="number">1</span>, <span class="number">6</span>))                         <span class="comment"># 创建数值列表</span></span><br><span class="line">print(num)                                      <span class="comment"># 结果：[1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line">even_num = list(range(<span class="number">2</span>, <span class="number">11</span>, <span class="number">2</span>))                <span class="comment"># 使用range()还可以指定步长</span></span><br><span class="line">print(even_num)                                 <span class="comment"># 结果：[2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure></p><p>  对数值列表执行简单的统计计算<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">digits = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>]</span><br><span class="line">min(digits)                                     <span class="comment"># 取最小值</span></span><br><span class="line">max(digits)                                     <span class="comment"># 取最大值</span></span><br><span class="line">sum(digits)                                     <span class="comment"># 求总和</span></span><br></pre></td></tr></table></figure></p><p>  <strong>列表解析</strong></p><h1 id="复杂模式1"><a href="#复杂模式1" class="headerlink" title="复杂模式1"></a>复杂模式1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">squares = []</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    square = value**<span class="number">2</span></span><br><span class="line">    squares.append(square)</span><br><span class="line">print(squares)</span><br></pre></td></tr></table></figure><h1 id="较复杂模式2"><a href="#较复杂模式2" class="headerlink" title="较复杂模式2"></a>较复杂模式2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">squares = []</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    squares.append(value**<span class="number">2</span>)</span><br><span class="line">print(squares)</span><br></pre></td></tr></table></figure><h1 id="列表解析"><a href="#列表解析" class="headerlink" title="列表解析"></a>列表解析</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">squares = [value**<span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line">print(squares)</span><br></pre></td></tr></table></figure><p>要使用这种语法，首先指定一个描述性的列表名，如<code>squares</code>；然后，指定一个左方括号，并定义一个表达式，用于生成你要存储到列表中的值。在这个示例中，表达式为<code>value**2</code>，它计算平方值。接下来，编写一个<code>for</code>循环，用于给表达式提供值，再加上右方括号。在这个示例中，<code>for</code>循环为<code>for value in range(1,11)</code>，它将值1~10提供给表达式<code>value**2</code>。请注意，这里的<code>for</code>语句末尾没有冒号。</p><p>  使用列表的一部分</p><p>  <code>tuple</code></p><p>  <code>dict</code></p><p>  grades[‘’]</p><ol start="13"><li><p>是否可迭代<code>Iterable</code></p></li><li><p>类似一个概念，实例才是可被CPU操作的，真实存在的东西。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">have_some_food</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Delicious!'</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hava_a_drink</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Thanks!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    me = People()</span><br><span class="line">    you = People()</span><br><span class="line">    me.have_some_food()</span><br><span class="line">    me.hava_a_drink()</span><br></pre></td></tr></table></figure><ol start="15"><li>封装  访问限制</li></ol><p>强制<strong>init</strong>(self, name, come_from)的属性不能被修改：<br>    <strong>name    </strong>come_from</p><ol start="16"><li><p>封装 将类的属性私有化</p></li><li><p>继承 </p></li><li><p>多态 多种状态，接口多种不同实现方式即为多态</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;基础方法&quot;&gt;&lt;a href=&quot;#基础方法&quot; class=&quot;headerlink&quot; title=&quot;基础方法&quot;&gt;&lt;/a&gt;基础方法&lt;/h4&gt;&lt;p&gt;  字符串大小写转换&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;text.title()                &lt;span class=&quot;comment&quot;&gt;# 首字母转大写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;text.upper()                &lt;span class=&quot;comment&quot;&gt;# 字符串转大写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;text.lower()                &lt;span class=&quot;comment&quot;&gt;# 字符串转小写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://shadow000902.space/categories/Python/"/>
    
    
      <category term="python" scheme="http://shadow000902.space/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python中正则表达式的应用</title>
    <link href="http://shadow000902.space/2018/01/11/Python%E4%B8%AD%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://shadow000902.space/2018/01/11/Python中正则表达式的应用/</id>
    <published>2018-01-11T09:36:53.000Z</published>
    <updated>2018-01-11T09:50:20.637Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简单字符串替换"><a href="#简单字符串替换" class="headerlink" title="简单字符串替换"></a>简单字符串替换</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re  </span><br><span class="line">urlp = <span class="string">"http://www.mypcera.com/star/mm/jiepaimeinv/942&#123;_page&#125;.html&amp;&#123;what&#125;&amp;&amp;&#123;come&#125;"</span></span><br><span class="line"><span class="comment"># 匹配出所有 &#123;.*?&#125; 的值，并取第一个匹配到的值</span></span><br><span class="line">pageParam = re.findall(<span class="string">'&#123;.*?&#125;'</span>, urlp)[<span class="number">0</span>]  </span><br><span class="line"><span class="comment"># 输出结果：&#123;_page&#125;</span></span><br><span class="line">print(pageParam)</span><br><span class="line"><span class="comment"># 匹配结果中的 page 替换为 3，并剔除匹配结果中的 &#123;&#125;</span></span><br><span class="line">pageParam = pageParam.replace(<span class="string">"page"</span>, <span class="string">"3"</span>).strip(<span class="string">"&#123;&#125;"</span>)  </span><br><span class="line"><span class="comment"># 输出结果：_3</span></span><br><span class="line">print(pageParam)  </span><br><span class="line"><span class="comment"># 对所有匹配到的结果进行替换操作</span></span><br><span class="line">result = re.sub(<span class="string">'&#123;.*?&#125;'</span>, pageParam, urlp)  </span><br><span class="line"><span class="comment"># 打印最后的结果：http://www.mypcera.com/star/mm/jiepaimeinv/942_3.html&amp;_3&amp;&amp;_3</span></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;简单字符串替换&quot;&gt;&lt;a href=&quot;#简单字符串替换&quot; class=&quot;headerlink&quot; title=&quot;简单字符串替换&quot;&gt;&lt;/a&gt;简单字符串替换&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
      <category term="Python" scheme="http://shadow000902.space/categories/Python/"/>
    
    
      <category term="正则表达式" scheme="http://shadow000902.space/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Python对文件内容的简单操作</title>
    <link href="http://shadow000902.space/2018/01/11/Python%E5%AF%B9%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/"/>
    <id>http://shadow000902.space/2018/01/11/Python对文件内容的简单操作/</id>
    <published>2018-01-10T16:08:41.000Z</published>
    <updated>2018-05-20T16:52:57.420Z</updated>
    
    <content type="html"><![CDATA[<h4 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打开文件    w会新建文件，有写的权限   r读   r+读写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#fo =open("file1.txt","w")</span></span><br><span class="line">fo =open(<span class="string">"file1.txt"</span>,<span class="string">"r+"</span>)</span><br><span class="line">print(fo)</span><br><span class="line">print(fo.read)</span><br><span class="line"></span><br><span class="line">fo.write(<span class="string">"bbbbbbbbbbbbbb"</span>)</span><br><span class="line"></span><br><span class="line">print(open(<span class="string">"file1.txt"</span>))</span><br><span class="line">fo.close() <span class="comment">#关闭之后数据才写到文件 中</span></span><br></pre></td></tr></table></figure>  <a id="more"></a><h4 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##读文件</span></span><br><span class="line"></span><br><span class="line">f1=open(<span class="string">"file1.txt"</span>)</span><br><span class="line"><span class="comment">#txt=f1.read();</span></span><br><span class="line"><span class="comment">#print(txt)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#读取所有行 []</span></span><br><span class="line"><span class="comment"># print(f1.readlines());</span></span><br><span class="line"><span class="comment">#读取一行    超出 会读空</span></span><br><span class="line">line=f1.readline();</span><br><span class="line">print(line);</span><br><span class="line">print(f1.readline());</span><br><span class="line">print(f1.readline());</span><br><span class="line"></span><br><span class="line"><span class="comment">#f1.next() 超出范围会停止</span></span><br></pre></td></tr></table></figure><h4 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###写文件</span></span><br><span class="line">l=[<span class="string">"one\n"</span>,<span class="string">"two\n"</span>,<span class="string">"three\n"</span>,<span class="string">"four\n"</span>]</span><br><span class="line"><span class="comment">#f2=open("file2.txt","a")</span></span><br><span class="line"><span class="comment">#f2.writelines(l) #换行的形式写到文件后面</span></span><br><span class="line"><span class="comment">#f2.close();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f2=open(<span class="string">"file2.txt"</span>,<span class="string">"r+"</span>) <span class="comment">#是以指针的形式</span></span><br><span class="line"><span class="comment">#f2.read() #先读出 在写 不会被覆盖</span></span><br><span class="line"><span class="comment">#f2.writelines(l) #换行的形式写到文件后面</span></span><br><span class="line"><span class="comment">#f2.close();</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"1:"</span>,f2.read())</span><br><span class="line">print(<span class="string">"2:"</span>,f2.read()) <span class="comment">#读完后 指针移到尾部了 就读不出来了 可以移动指针</span></span><br><span class="line">f2.seek(<span class="number">0</span>,<span class="number">0</span>) <span class="comment">##指针移动   0=头部  1=向后移动</span></span><br><span class="line">print(<span class="string">"3:"</span>,f2.read())</span><br><span class="line">f2.seek(<span class="number">0</span>,<span class="number">0</span>) </span><br><span class="line">f2.seek(<span class="number">0</span>,<span class="number">2</span>) <span class="comment">##指针移动  结尾  可以在结尾追加数据</span></span><br><span class="line">print(<span class="string">"4:"</span>,f2.read())</span><br><span class="line"></span><br><span class="line">f2.writelines(l) <span class="comment">#在写一次 不关闭是不保存的</span></span><br><span class="line">f2.flush() <span class="comment">#提交更新  没关闭 先把写入的数据保存</span></span><br></pre></td></tr></table></figure><h4 id="查找文件中的内容"><a href="#查找文件中的内容" class="headerlink" title="查找文件中的内容"></a>查找文件中的内容</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment">#查找文件中有多少个hello</span></span><br><span class="line"></span><br><span class="line">fp=open(<span class="string">"file3.txt"</span>,<span class="string">"r"</span>)</span><br><span class="line">count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> fp.readlines():</span><br><span class="line">    li=re.findall(<span class="string">"hello"</span>, s)</span><br><span class="line">    <span class="keyword">if</span> len(li)&gt;<span class="number">0</span>:</span><br><span class="line">        count=count+len(li)</span><br><span class="line">print(<span class="string">"search:"</span>,count,<span class="string">"&gt;&gt;&gt;hello"</span>)</span><br><span class="line">fp.close()</span><br></pre></td></tr></table></figure><h4 id="替换文件内容"><a href="#替换文件内容" class="headerlink" title="替换文件内容"></a>替换文件内容</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#把文件内容替换</span></span><br><span class="line"><span class="comment">#把file3.txt 的 hello 替换为 good,并保存到file3Back.txt</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">fp3=open(<span class="string">"file3.txt"</span>,<span class="string">"r"</span>)</span><br><span class="line">fp4=open(<span class="string">"file4.txt"</span>,<span class="string">"w"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> fp3.readlines():<span class="comment">#先读出来</span></span><br><span class="line">    fp4.write(s.replace(<span class="string">"hello"</span>,<span class="string">"goood"</span>)) <span class="comment">#替换 并写入</span></span><br><span class="line"></span><br><span class="line">fp3.close()</span><br><span class="line">fp4.close()</span><br></pre></td></tr></table></figure><h4 id="在原文件中替换文件内容"><a href="#在原文件中替换文件内容" class="headerlink" title="在原文件中替换文件内容"></a>在原文件中替换文件内容</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#写在原文件中</span></span><br><span class="line">fp3=open(<span class="string">"file3.txt"</span>,<span class="string">"r+"</span>) <span class="comment">#不用w w会清空数据</span></span><br><span class="line">s=fp3.read()<span class="comment">#读出</span></span><br><span class="line">fp3.seek(<span class="number">0</span>,<span class="number">0</span>) <span class="comment">#指针移到头  原来的数据还在 是替换 会存在一个问题 如果少   会替换不了全部数据，自已思考解决!!!</span></span><br><span class="line"><span class="comment">#从头写入</span></span><br><span class="line">fp3.write(s.replace(<span class="string">"hello"</span>,<span class="string">"good"</span>))</span><br><span class="line">fp3.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fileinput</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fileinput.input(<span class="string">"test0"</span>, inplace=<span class="number">1</span>):</span><br><span class="line">    line = line.replace(<span class="string">".."</span>, <span class="string">"C:"</span>)</span><br><span class="line">    <span class="keyword">print</span> line</span><br></pre></td></tr></table></figure><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>r</td><td>以读方式打开文件，可读取文件信息。</td></tr><tr><td>w</td><td>以写方式打开文件，可向文件写入信息。如文件存在，则清空该文件，再写入新内容</td></tr><tr><td>a</td><td>以追加模式打开文件（即一打开文件，文件指针自动移到文件末尾），如果文件不存在则创建</td></tr><tr><td>r+</td><td>以读写方式打开文件，可对文件进行读和写操作。</td></tr><tr><td>w+</td><td>消除文件内容，然后以读写方式打开文件。</td></tr><tr><td>a+</td><td>以读写方式打开文件，并把文件指针移到文件尾。</td></tr><tr><td>b</td><td>以二进制模式打开文件，而不是以文本模式。该模式只对Windows或Dos有效，类Unix的文件是用二进制模式进行操作的。</td></tr></tbody></table><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>f.close()</td><td>关闭文件，记住用open()打开文件后一定要记得关闭它，否则会占用系统的可打开文件句柄数。</td></tr><tr><td>f.fileno()</td><td>获得文件描述符，是一个数字</td></tr><tr><td>f.flush()</td><td>刷新输出缓存</td></tr><tr><td>f.isatty()</td><td>如果文件是一个交互终端，则返回True，否则返回False。</td></tr><tr><td>f.read([count])</td><td>读出文件，如果有count，则读出count个字节。</td></tr><tr><td>f.readline()</td><td>读出一行信息。</td></tr><tr><td>f.readlines()</td><td>读出所有行，也就是读出整个文件的信息。</td></tr><tr><td>f.seek(offset[,where])</td><td>把文件指针移动到相对于where的offset位置。where为0表示文件开始处，这是默认值 ；1表示当前位置；2表示文件结尾。</td></tr><tr><td>f.tell()</td><td>获得文件指针位置。</td></tr><tr><td>f.truncate([size])</td><td>截取文件，使文件的大小为size。</td></tr><tr><td>f.write(string)</td><td>把string字符串写入文件。</td></tr><tr><td>f.writelines(list)</td><td>把list中的字符串一行一行地写入文件，是连续写入文件，没有换行。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;打开文件&quot;&gt;&lt;a href=&quot;#打开文件&quot; class=&quot;headerlink&quot; title=&quot;打开文件&quot;&gt;&lt;/a&gt;打开文件&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#打开文件    w会新建文件，有写的权限   r读   r+读写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#fo =open(&quot;file1.txt&quot;,&quot;w&quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fo =open(&lt;span class=&quot;string&quot;&gt;&quot;file1.txt&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;r+&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(fo)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(fo.read)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fo.write(&lt;span class=&quot;string&quot;&gt;&quot;bbbbbbbbbbbbbb&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(open(&lt;span class=&quot;string&quot;&gt;&quot;file1.txt&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fo.close() &lt;span class=&quot;comment&quot;&gt;#关闭之后数据才写到文件 中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Python" scheme="http://shadow000902.space/categories/Python/"/>
    
    
      <category term="python" scheme="http://shadow000902.space/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Brew命令报错问题解决</title>
    <link href="http://shadow000902.space/2018/01/10/Brew%E5%91%BD%E4%BB%A4%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <id>http://shadow000902.space/2018/01/10/Brew命令报错问题解决/</id>
    <published>2018-01-10T07:33:52.000Z</published>
    <updated>2018-02-26T10:45:30.822Z</updated>
    
    <content type="html"><![CDATA[<h5 id="运行任何brew命令，都提示错误"><a href="#运行任何brew命令，都提示错误" class="headerlink" title="运行任何brew命令，都提示错误"></a>运行任何<code>brew</code>命令，都提示错误</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git: error: unable to find utility <span class="string">"git"</span>, not a developer tool or <span class="keyword">in</span> PATH</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang: error: unable to find utility <span class="string">"clang"</span>, not a developer tool or <span class="keyword">in</span> PATH</span><br></pre></td></tr></table></figure>  <a id="more"></a><p>原因主要是因为<code>xcode-select</code>的位置错误，需要修改指向的位置：<br>原来的位置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TaoYi-Mac in ~/Desktop/MySQL-python-1.2.5 [13:27:05] C:72</span></span><br><span class="line">$ xcode-select --<span class="built_in">print</span>-path</span><br><span class="line">/Applications/Xcode.app/Contents/Developer</span><br></pre></td></tr></table></figure></p><p>修改到另一个位置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># taoyi @ TaoYi-Mac in /Applications/Xcode.app/Contents/Developer [13:33:33] C:1</span></span><br><span class="line">$ sudo xcode-select --switch /Library/Developer/CommandLineTools</span><br><span class="line">Password:</span><br><span class="line"></span><br><span class="line"><span class="comment"># taoyi @ TaoYi-Mac in /Applications/Xcode.app/Contents/Developer [13:33:52] </span></span><br><span class="line">$ xcode-select --<span class="built_in">print</span>-path                                     </span><br><span class="line">/Library/Developer/CommandLineTools</span><br></pre></td></tr></table></figure></p><p>如此操作之后，再执行brew命令，就不会再报上面的错了</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;运行任何brew命令，都提示错误&quot;&gt;&lt;a href=&quot;#运行任何brew命令，都提示错误&quot; class=&quot;headerlink&quot; title=&quot;运行任何brew命令，都提示错误&quot;&gt;&lt;/a&gt;运行任何&lt;code&gt;brew&lt;/code&gt;命令，都提示错误&lt;/h5&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git: error: unable to find utility &lt;span class=&quot;string&quot;&gt;&quot;git&quot;&lt;/span&gt;, not a developer tool or &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; PATH&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;clang: error: unable to find utility &lt;span class=&quot;string&quot;&gt;&quot;clang&quot;&lt;/span&gt;, not a developer tool or &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; PATH&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="SolveProblem" scheme="http://shadow000902.space/categories/SolveProblem/"/>
    
    
      <category term="brew" scheme="http://shadow000902.space/tags/brew/"/>
    
  </entry>
  
  <entry>
    <title>Python通过SSH隧道连接MySQL数据库</title>
    <link href="http://shadow000902.space/2018/01/10/Python%E9%80%9A%E8%BF%87SSH%E9%9A%A7%E9%81%93%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://shadow000902.space/2018/01/10/Python通过SSH隧道连接MySQL数据库/</id>
    <published>2018-01-10T01:56:03.000Z</published>
    <updated>2018-02-26T10:45:30.833Z</updated>
    
    <content type="html"><![CDATA[<h4 id="方式一：通过MySQLdb模块"><a href="#方式一：通过MySQLdb模块" class="headerlink" title="方式一：通过MySQLdb模块"></a>方式一：通过<code>MySQLdb</code>模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">con_sshDb</span><span class="params">(self, sql)</span>:</span></span><br><span class="line"><span class="comment"># ssh的地址，端口，用户名，密码</span></span><br><span class="line"><span class="keyword">from</span> sshtunnel <span class="keyword">import</span> SSHTunnelForwarder</span><br><span class="line"><span class="keyword">with</span> SSHTunnelForwarder(</span><br><span class="line">(<span class="string">'XXX.XXX.XXX.XXX'</span>, <span class="number">22</span>),</span><br><span class="line">ssh_password=<span class="string">"XXXXXX"</span>,</span><br><span class="line">ssh_username=<span class="string">"XXXXXX"</span>,</span><br><span class="line">remote_bind_address=(<span class="string">'XXX.XXX'</span>, <span class="number">3306</span>)</span><br><span class="line">) <span class="keyword">as</span> server:</span><br><span class="line"><span class="comment"># 此处必须是是127.0.0.1</span></span><br><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line">conn = MySQLdb.connect(host=<span class="string">'127.0.0.1'</span>,</span><br><span class="line">   port=server.local_bind_port,</span><br><span class="line">   <span class="comment"># Navicat常规处的链接用户名和密码，以及连接数据库名称</span></span><br><span class="line">   user=<span class="string">'XXXXXX'</span>,</span><br><span class="line">   passwd=<span class="string">'XXXXXX'</span>,</span><br><span class="line">   db=<span class="string">'XXXXXX'</span>)</span><br><span class="line"><span class="comment"># .cursor()用来获得python执行Mysql命令的方法</span></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">select = sql</span><br><span class="line"><span class="comment"># .execute()执行mysql语句</span></span><br><span class="line">cursor.execute(select)</span><br><span class="line"><span class="comment"># fetchall()则是接收全部的返回结果行</span></span><br><span class="line">data = cursor.fetchall()</span><br><span class="line"><span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>  <a id="more"></a><h4 id="方式二：通过paramiko模块"><a href="#方式二：通过paramiko模块" class="headerlink" title="方式二：通过paramiko模块"></a>方式二：通过<code>paramiko</code>模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">con_sshDb</span><span class="params">(self, sql)</span>:</span></span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line">ssh = paramiko.SSHClient()</span><br><span class="line">ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">ssh.connect(<span class="string">"XXX.XXX.XXX.XXX"</span>, <span class="number">22</span>, <span class="string">"ssh_username"</span>, <span class="string">"ssh_password"</span>)</span><br><span class="line">       select = sql</span><br><span class="line">stdin, stdout, stderr = ssh.exec_command(<span class="string">"mysql -u user -p passwd -D mysql -e 'select'"</span>)</span><br><span class="line"><span class="keyword">print</span> stdout.readlines()</span><br><span class="line">ssh.close()</span><br></pre></td></tr></table></figure><h4 id="方式二：通过sqlalchemy模块"><a href="#方式二：通过sqlalchemy模块" class="headerlink" title="方式二：通过sqlalchemy模块"></a>方式二：通过<code>sqlalchemy</code>模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">con_sshDb</span><span class="params">(self, sql)</span>:</span></span><br><span class="line"><span class="keyword">from</span> sshtunnel <span class="keyword">import</span> SSHTunnelForwarder</span><br><span class="line"><span class="keyword">with</span> SSHTunnelForwarder(</span><br><span class="line">(<span class="string">'XXX.XXX.XXX.XXX'</span>, <span class="number">22</span>),</span><br><span class="line">ssh_password=<span class="string">"XXXXXX"</span>,</span><br><span class="line">ssh_username=<span class="string">"XXXXXX"</span>,</span><br><span class="line">remote_bind_address=(<span class="string">'XXX.XXX'</span>, <span class="number">3306</span>)</span><br><span class="line">) <span class="keyword">as</span> server:</span><br><span class="line">server.start()  <span class="comment"># start ssh sever</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Server connected via SSH'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># connect to PostgreSQL</span></span><br><span class="line">local_port = str(server.local_bind_port)</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line">engine = create_engine(<span class="string">'postgresql://&lt;db_user&gt;:&lt;db_pwd&gt;@127.0.0.1:'</span> + local_port +<span class="string">'/&lt;db_name&gt;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line">Session = sessionmaker(bind=engine)</span><br><span class="line">session = Session()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Database session created'</span></span><br><span class="line"></span><br><span class="line">select = sql</span><br><span class="line">data = session.execute(select)</span><br><span class="line"><span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;方式一：通过MySQLdb模块&quot;&gt;&lt;a href=&quot;#方式一：通过MySQLdb模块&quot; class=&quot;headerlink&quot; title=&quot;方式一：通过MySQLdb模块&quot;&gt;&lt;/a&gt;方式一：通过&lt;code&gt;MySQLdb&lt;/code&gt;模块&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;con_sshDb&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, sql)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;# ssh的地址，端口，用户名，密码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; sshtunnel &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; SSHTunnelForwarder&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; SSHTunnelForwarder(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			(&lt;span class=&quot;string&quot;&gt;&#39;XXX.XXX.XXX.XXX&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ssh_password=&lt;span class=&quot;string&quot;&gt;&quot;XXXXXX&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ssh_username=&lt;span class=&quot;string&quot;&gt;&quot;XXXXXX&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			remote_bind_address=(&lt;span class=&quot;string&quot;&gt;&#39;XXX.XXX&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3306&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; server:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;# 此处必须是是127.0.0.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; MySQLdb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		conn = MySQLdb.connect(host=&lt;span class=&quot;string&quot;&gt;&#39;127.0.0.1&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;							   port=server.local_bind_port,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;							   &lt;span class=&quot;comment&quot;&gt;# Navicat常规处的链接用户名和密码，以及连接数据库名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;							   user=&lt;span class=&quot;string&quot;&gt;&#39;XXXXXX&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;							   passwd=&lt;span class=&quot;string&quot;&gt;&#39;XXXXXX&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;							   db=&lt;span class=&quot;string&quot;&gt;&#39;XXXXXX&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;# .cursor()用来获得python执行Mysql命令的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cursor = conn.cursor()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		select = sql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;# .execute()执行mysql语句&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cursor.execute(select)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;# fetchall()则是接收全部的返回结果行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		data = cursor.fetchall()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; data&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="python" scheme="http://shadow000902.space/categories/python/"/>
    
    
      <category term="ssh" scheme="http://shadow000902.space/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Robot-Framework的几点总结</title>
    <link href="http://shadow000902.space/2017/12/16/Robot-Framework%E7%9A%84%E5%87%A0%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://shadow000902.space/2017/12/16/Robot-Framework的几点总结/</id>
    <published>2017-12-16T13:59:38.000Z</published>
    <updated>2018-05-05T07:56:50.056Z</updated>
    
    <content type="html"><![CDATA[<h5 id="命令行执行RF用例"><a href="#命令行执行RF用例" class="headerlink" title="命令行执行RF用例"></a>命令行执行RF用例</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行整个项目下的所有用例</span></span><br><span class="line">pybot /opt/robotframework/</span><br><span class="line"><span class="comment"># 执行某个suite中的所有用例</span></span><br><span class="line">pybot /opt/robotframework/rf.robot</span><br><span class="line"><span class="comment"># 执行具体的某个用例</span></span><br><span class="line">pybot --<span class="built_in">test</span> case_1 /opt/robotframework/rf.robot</span><br><span class="line"><span class="comment"># 执行项目中指定标签的用例</span></span><br><span class="line">pybot --include tagName /opt/robotframework/</span><br></pre></td></tr></table></figure>  <a id="more"></a><h5 id="IDE设置命令行执行RF用例"><a href="#IDE设置命令行执行RF用例" class="headerlink" title="IDE设置命令行执行RF用例"></a>IDE设置命令行执行RF用例</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行单条用例</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/pybot -d results -t testcase001 ./</span><br></pre></td></tr></table></figure><img src="/2017/12/16/Robot-Framework的几点总结/SingleTestCase.png" title="SingleTestCase"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行单个suite</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/pybot -d results testsuite001.robot</span><br></pre></td></tr></table></figure><img src="/2017/12/16/Robot-Framework的几点总结/TestSuite.png" title="TestSuite"><h5 id="指定RF用例执行后日志的保存位置"><a href="#指定RF用例执行后日志的保存位置" class="headerlink" title="指定RF用例执行后日志的保存位置"></a>指定RF用例执行后日志的保存位置</h5><p>其实上面的<code>-d</code>参数就是用来指定Log的保存位置的，默认<code>-d results</code>指定日志保存在运行命令的目录的<code>results</code>文件夹下。<br>在<code>ride</code>中的<code>run</code>标签下，<code>Arguments</code>中填入<code>-d results</code>也能达到同样的效果。</p><h5 id="重新运行上一轮Fail的Case"><a href="#重新运行上一轮Fail的Case" class="headerlink" title="重新运行上一轮Fail的Case"></a>重新运行上一轮<code>Fail</code>的<code>Case</code></h5><p>使用<code>-R</code>参数，同<code>--rerunfailed output</code>，后面跟前次执行生成的<code>results/output.xml</code>，这样就只会运行上次失败了的Case。</p><h5 id="List中的字典循环"><a href="#List中的字典循环" class="headerlink" title="List中的字典循环"></a>List中的字典循环</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">*** Test Cases ***</span><br><span class="line">takeValueFromCircle</span><br><span class="line"># 从返回结果中提取出List</span><br><span class="line">@&#123;items&#125;=    set variable    $&#123;json[&quot;data&quot;][&quot;items&quot;]&#125;</span><br><span class="line"># 循环List中的item</span><br><span class="line">: FOR    $&#123;params&#125;    IN    @&#123;items&#125;</span><br><span class="line"># 把item中的一个参数（每个参数都是一个字典）转化为Str格式，顺便去除 &quot;u&quot; 标识</span><br><span class="line">\    $&#123;params&#125;    Dumps    $&#123;params&#125;</span><br><span class="line"># 把字典转化为json</span><br><span class="line">\    $&#123;params&#125;    to json    $&#123;params&#125;</span><br><span class="line">#\    Log    $&#123;params[&quot;carId&quot;]&#125;</span><br><span class="line"># 对每个item取出来的字典中的某个字段进行判断，如果是需要的值，就把另一个需要的值取出来，并打印出来</span><br><span class="line">\    RUN KEYWORD IF    &quot;$&#123;params[&quot;carInfo&quot;][&quot;status&quot;]&#125;&quot;==&quot;评估中&quot;    Log    $&#123;params[&quot;carId&quot;]&#125;</span><br></pre></td></tr></table></figure><h5 id="wait-until-keyword-succeeds关键字使用"><a href="#wait-until-keyword-succeeds关键字使用" class="headerlink" title="wait until keyword succeeds关键字使用"></a>wait until keyword succeeds关键字使用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">*** Test Cases ***</span><br><span class="line">&quot;Wait until ...&quot; with normal error</span><br><span class="line">    # Keyword is run multiple times, until timeout. Each run gives an exception</span><br><span class="line">    # traceback.</span><br><span class="line">    Wait Until Keyword Succeeds    1 sec    0.5    Keyword With Normal Error</span><br><span class="line"></span><br><span class="line">&quot;Wait until ...&quot; with AttributeError</span><br><span class="line">    # Keyword is run only once, even if there is time left until the timeout.</span><br><span class="line">    # There is no exception traceback like above.</span><br><span class="line">    Wait Until Keyword Succeeds    1 sec    0.5    Keyword With AttributeError</span><br><span class="line"></span><br><span class="line">*** Keywords ***</span><br><span class="line">Keyword With Normal Error</span><br><span class="line">    $&#123;obj&#125; =    Evaluate    &quot;foo&quot;</span><br><span class="line">    Should Be Equal As Strings    $&#123;obj&#125;    &quot;bar&quot;</span><br><span class="line"></span><br><span class="line">Keyword With AttributeError</span><br><span class="line">    # In real life, this would get an object and use some of its (valid) attributes.</span><br><span class="line">    # In case of an error, and in Teardown context (continue-on-failure), a None object</span><br><span class="line">    # is returned instead causing the next keyword to create an AttributeError.</span><br><span class="line">    $&#123;obj&#125; =    Evaluate    &quot;foo&quot;</span><br><span class="line">    Should Be Equal As Strings    $&#123;obj.bad_attr&#125;    &quot;foo&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">*** Test Cases ***</span><br><span class="line">003.导出进度-/pc/export/taizhangaction/progress.json</span><br><span class="line">    wait until keyword succeeds    3 min    5 sec    导出进度-/pc/export/taizhangaction/progress.json</span><br><span class="line">    </span><br><span class="line">*** Keywords ***</span><br><span class="line">导出进度-/pc/export/taizhangaction/progress.json</span><br><span class="line">    $&#123;params&#125;=    Create Dictionary    jobId=$&#123;jobId&#125;</span><br><span class="line">    &amp;&#123;json&#125;=    Rest.Post    /pc/export/taizhangaction/progress.json    $&#123;params&#125;    form    $&#123;hosts[&quot;erp-online&quot;]&#125;</span><br><span class="line">    Should Be True    $&#123;json[&quot;success&quot;]&#125;</span><br><span class="line">should be equal as strings    $&#123;json[&quot;data&quot;][&quot;progress&quot;]&#125;    100</span><br><span class="line">$&#123;URL&#125;=    set variable    $&#123;json[&quot;data&quot;][&quot;url&quot;]&#125;</span><br></pre></td></tr></table></figure><p>5秒执行一次关键字，如果<code>${json[&quot;data&quot;][&quot;progress&quot;]}!=100</code>，执行一次关键字，直到相等时，执行一次关键字中的最后一行代码。</p><h5 id="一个完整的独立case"><a href="#一个完整的独立case" class="headerlink" title="一个完整的独立case"></a>一个完整的独立case</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">*** Test Cases ***</span><br><span class="line">登录</span><br><span class="line">    $&#123;dict&#125;=    Create Dictionary    Content-Type=application/x-www-form-urlencoded</span><br><span class="line">    Create Session    _session    http://dfc.souche.com    $&#123;dict&#125;</span><br><span class="line">    $&#123;params&#125;=    Create Dictionary    loginName=15558135526    password=souche2015    jPushId=jpushid001</span><br><span class="line">    $&#123;response&#125;=    Post Request    _session    /rest/account/login    params=$&#123;params&#125;    headers=$&#123;dict&#125;</span><br><span class="line">    Should Be Equal As Strings    $&#123;response.status_code&#125;    200</span><br><span class="line">    &amp;&#123;json&#125;=    Set Variable    $&#123;response.json()&#125;</span><br><span class="line">    Should Be True    &amp;&#123;json&#125;[success]</span><br><span class="line">    Log    &amp;&#123;json&#125;[success]</span><br></pre></td></tr></table></figure><h5 id="对请求proxy、tag、headers、session、response的整体封装"><a href="#对请求proxy、tag、headers、session、response的整体封装" class="headerlink" title="对请求proxy、tag、headers、session、response的整体封装"></a>对请求proxy、tag、headers、session、response的整体封装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">*** Keywords ***</span><br><span class="line">Rest.Post</span><br><span class="line">    [Arguments]    $&#123;uri&#125;    $&#123;params&#125;    $&#123;type&#125;=form    $&#123;cur_host&#125;=$&#123;EMPTY&#125;</span><br><span class="line">    #设置代理服务器，这样方便调试代码</span><br><span class="line">    &amp;&#123;proxy&#125;=    Create Dictionary    http=http://127.0.0.1:8888</span><br><span class="line">    #根据tag来区分请求应使用哪个host</span><br><span class="line">    $&#123;host&#125;=    Set Variable    \ \ $&#123;EMPTY&#125;</span><br><span class="line">    : FOR    $&#123;tag&#125;    IN    @&#123;TEST TAGS&#125;</span><br><span class="line">    \    $&#123;host&#125;=    Evaluate    $hosts.get($tag,&quot;&quot;)</span><br><span class="line">    \    Run Keyword If    &quot;$&#123;host&#125;&quot;!=&quot;&quot;    Exit For Loop</span><br><span class="line">    #创建session,跨域模式，不需要维护Session</span><br><span class="line">    Run Keyword If    &quot;$&#123;cur_host&#125;&quot;!=&quot;&quot;    Create Session    _session    $&#123;cur_host&#125;    proxies=$&#123;proxy&#125;</span><br><span class="line">    ...    ELSE    Create Session    _session    $&#123;host&#125;    proxies=$&#123;proxy&#125;</span><br><span class="line">    #已登录的用户在请求中带上token</span><br><span class="line">    Run Keyword If    &quot;$&#123;token&#125;&quot;!=&quot;&quot;    Set To Dictionary    $&#123;params&#125;    token=$&#123;token&#125;</span><br><span class="line">    Log    $&#123;token&#125;</span><br><span class="line">    #根据请求数据的类型设置header</span><br><span class="line">    &amp;&#123;headers&#125;=    Run Keyword If    &quot;$&#123;type&#125;&quot;==&quot;form&quot;    Create Dictionary    Content-Type=application/x-www-form-urlencoded    TT=$&#123;token&#125;</span><br><span class="line">    ...    ELSE IF    &quot;$&#123;type&#125;&quot;==&quot;json&quot;    Create Dictionary    Content-Type=application/json    TT=$&#123;token&#125;</span><br><span class="line">    $&#123;response&#125;=    Post Request    _session    $&#123;uri&#125;    $&#123;params&#125;    headers=&amp;&#123;headers&#125;</span><br><span class="line">    Should Be Equal As Strings    $&#123;response.status_code&#125;    200</span><br><span class="line">    &amp;&#123;json&#125;=    Set Variable    $&#123;response.json()&#125;</span><br><span class="line">    [Return]    &amp;&#123;json&#125;</span><br></pre></td></tr></table></figure><h5 id="所有的安装内容"><a href="#所有的安装内容" class="headerlink" title="所有的安装内容"></a>所有的安装内容</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pip install robotframework</span><br><span class="line">pip install robotframework-ride</span><br><span class="line">pip install robotframework-appiumlibrary</span><br><span class="line">pip install robotframework-selenium2library</span><br><span class="line">pip install robotframework-databaselibrary</span><br><span class="line">pip install robotframework-sshlibrary</span><br><span class="line">pip install robotframework-requests</span><br><span class="line">pip install robotframework-HttpLibrary</span><br><span class="line">pip install robotframework-difflibrary</span><br><span class="line">pip install requests</span><br><span class="line">pip install PyMySQL</span><br><span class="line">pip install MySQL-python</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;命令行执行RF用例&quot;&gt;&lt;a href=&quot;#命令行执行RF用例&quot; class=&quot;headerlink&quot; title=&quot;命令行执行RF用例&quot;&gt;&lt;/a&gt;命令行执行RF用例&lt;/h5&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 执行整个项目下的所有用例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pybot /opt/robotframework/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 执行某个suite中的所有用例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pybot /opt/robotframework/rf.robot&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 执行具体的某个用例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pybot --&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; case_1 /opt/robotframework/rf.robot&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 执行项目中指定标签的用例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pybot --include tagName /opt/robotframework/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="RobotFramework" scheme="http://shadow000902.space/categories/RobotFramework/"/>
    
    
      <category term="robotframework" scheme="http://shadow000902.space/tags/robotframework/"/>
    
  </entry>
  
  <entry>
    <title>账号体系测试总结</title>
    <link href="http://shadow000902.space/2017/12/11/%E8%B4%A6%E5%8F%B7%E4%BD%93%E7%B3%BB%E6%B5%8B%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    <id>http://shadow000902.space/2017/12/11/账号体系测试总结/</id>
    <published>2017-12-11T05:15:18.000Z</published>
    <updated>2017-12-23T16:43:18.509Z</updated>
    
    <content type="html"><![CDATA[<h4 id="管理后台账号"><a href="#管理后台账号" class="headerlink" title="管理后台账号"></a>管理后台账号</h4><h4 id="客户端账号"><a href="#客户端账号" class="headerlink" title="客户端账号"></a>客户端账号</h4><h4 id="客户端账号需要登录后台管理"><a href="#客户端账号需要登录后台管理" class="headerlink" title="客户端账号需要登录后台管理"></a>客户端账号需要登录后台管理</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;管理后台账号&quot;&gt;&lt;a href=&quot;#管理后台账号&quot; class=&quot;headerlink&quot; title=&quot;管理后台账号&quot;&gt;&lt;/a&gt;管理后台账号&lt;/h4&gt;&lt;h4 id=&quot;客户端账号&quot;&gt;&lt;a href=&quot;#客户端账号&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="WorkSummary" scheme="http://shadow000902.space/categories/WorkSummary/"/>
    
    
      <category term="worksummary" scheme="http://shadow000902.space/tags/worksummary/"/>
    
  </entry>
  
  <entry>
    <title>TESTER面试官</title>
    <link href="http://shadow000902.space/2017/12/10/TESTER%E9%9D%A2%E8%AF%95%E5%AE%98/"/>
    <id>http://shadow000902.space/2017/12/10/TESTER面试官/</id>
    <published>2017-12-09T16:42:50.000Z</published>
    <updated>2017-12-11T05:27:19.286Z</updated>
    
    <content type="html"><![CDATA[<h5 id="筛选简历"><a href="#筛选简历" class="headerlink" title="筛选简历"></a>筛选简历</h5><ol><li>首先看学历和专业，这样就可以pass掉好多简历了。</li><li>再看工作岗位，项目经验。项目经验则需要和简历上的工作技能结合着一起看。一般项目经验里有的才是真实使用的。没有的话，就需要在面试时沟通，看是自学的，还是掺水了。</li><li><p>如果工作经验符合要求，技能和项目经验过关就可以约面了。</p><a id="more"></a></li></ol><h5 id="面试问题"><a href="#面试问题" class="headerlink" title="面试问题"></a>面试问题</h5><ol><li>项目介绍，工作内容介绍，说的条理清楚的，说明工作中用心总结了，第一印象比较重要。</li><li>简历上写的技能，工作中是怎么使用的？</li><li>工作中遇到困难，怎么处理的？遇到难复现的bug？与开发沟通不畅？项目紧急无法推动等等？这个主要是看面试者平时工作中解决问题的能力和沟通能力。</li><li>上份工作有哪些成长，优势有哪些？</li><li>除了工作中用到的，平时有没有其他方面的学习？这个是考察自主学习能力的。</li><li>离职原因？主要是看面试者的稳定性如何</li><li>觉得自己目前的能力与在这个工作年限应该具备的能力相符么？</li></ol><h5 id="对项目经验描述的建议"><a href="#对项目经验描述的建议" class="headerlink" title="对项目经验描述的建议"></a>对项目经验描述的建议</h5><ol><li>什么类型项目，解决什么问题，针对的用户群，用户量级，项目业务流概述等。</li><li>主要负责什么内容，有哪些技术手段去保证质量。</li><li>什么语言，什么部署环境。</li><li>项目团队成员结构、人员占比等。</li></ol><h5 id="简历意见"><a href="#简历意见" class="headerlink" title="简历意见"></a>简历意见</h5><ol><li>基本信息中，添加关键字，简单、直接的提炼出自己的核心能力和技能。</li><li>自我评价中，尽可能的提炼自己掌握的测试相关技能，简单、直接，<code>不写自己不熟悉的技能，不要给自己挖坑</code>。后面加上几段话，用精炼的语句描述自己的核心价值，也可简要说明在上架公司的核心职责。</li><li>工作经验，不要拖沓写一堆，要用精炼的语言描述清楚产品的情况，然后分点说明自己的具体职责。</li><li>简历一般两页就够了，排版要干练清爽，不要花哨。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;筛选简历&quot;&gt;&lt;a href=&quot;#筛选简历&quot; class=&quot;headerlink&quot; title=&quot;筛选简历&quot;&gt;&lt;/a&gt;筛选简历&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;首先看学历和专业，这样就可以pass掉好多简历了。&lt;/li&gt;
&lt;li&gt;再看工作岗位，项目经验。项目经验则需要和简历上的工作技能结合着一起看。一般项目经验里有的才是真实使用的。没有的话，就需要在面试时沟通，看是自学的，还是掺水了。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果工作经验符合要求，技能和项目经验过关就可以约面了。&lt;/p&gt;
    
    </summary>
    
      <category term="TestTheory" scheme="http://shadow000902.space/categories/TestTheory/"/>
    
    
  </entry>
  
  <entry>
    <title>TESTER的核心价值</title>
    <link href="http://shadow000902.space/2017/12/08/TESTER%E7%9A%84%E6%A0%B8%E5%BF%83%E4%BB%B7%E5%80%BC/"/>
    <id>http://shadow000902.space/2017/12/08/TESTER的核心价值/</id>
    <published>2017-12-08T12:04:50.000Z</published>
    <updated>2017-12-11T05:27:19.230Z</updated>
    
    <content type="html"><![CDATA[<p>我认为当前测试人员的核心价值是加速整个项目的反馈以及对产品的快速验证。</p><p>这两项价值中又各自有三项主要工作：</p>  <a id="more"></a><img src="/2017/12/08/TESTER的核心价值/TESTER的核心价值.png" title="TESTER的核心价值"><h5 id="加速反馈"><a href="#加速反馈" class="headerlink" title="加速反馈"></a>加速反馈</h5><ol><li><p>促进沟通<br>测试人员在整个交付团队里至关重要的工作就是促进整个项目的沟通，需要和产品团队一起工作做需求的定义，和开发团队一起工作写自动化的验证，保障项目组之间对于目标和实现都能够达成一致。<br>在这项工作中，最重要的能力是热情，看起来很虚，但是只有充满热情的人员才可能实现足够的沟通，同时高效的沟通能力也是非常重要的能力，这方面需要一些思维和沟通的工具和训练。<br>还有一个重要的能力就是能够想到一些促进项目组沟通的办法（例如交换三色卡片），这个算是一种灵气吧，但相信也和热情有很大关系。</p></li><li><p>持续交付基础设施的搭建<br>测试人员应该主持团队持续交付基础设施的搭建，从集成开始到环境自动部署，提交测试验收测试的自动触发，运行，结构展示等等，总之就是持续交付整套基础设施。<br>本着不重复造轮子的原则，这项工作的主要能力就是对业界相关工具的掌握和使用的能力，当然整合可能涉及到一些二次开发或者自己搭个WEB。并且能够像一个产品经理对产品负责一样，能够及时看到项目组使用这套基础设施的实际需求和问题并能够持续改进。<br>这里面的主要需要的能力是技术视野、工具使用的能力，以及英文文档的阅档（基本上能看的说明文档都是英文的官方文档）和平台搭建的能力。</p></li><li><p>全流程反馈规则的制定<br>除了基础设施和高效的沟通，在整个团队工作过程中还是需要制定很多各种有益的规则来促进反馈（例如对产品需求的要求，单元测试覆盖的要求，代码规范的要求等等等等）。<br>规则应该和项目组的实际情况相结合，而且很多规则并不是所有人都一开始能欣然接受，所以一方面要能够看到目前的问题和瓶颈来制定相关规则来改善更重要的是能够说服项目组的能力（当然这个能力不是说舌战群儒的说话术，更多是技术上能够说得明白，自己能够先做一些实践来证明有效等）</p></li></ol><h5 id="快速验证"><a href="#快速验证" class="headerlink" title="快速验证"></a>快速验证</h5><ol><li><p>整体角度考虑对其他部分的影响<br>测试人员的工作效率取决于他对软件和项目的理解，而不是他掌握的测试技术。（理解产品、理解用户期望、理解产品架构、了解产品元素，项目团队）在迭代中开发更关注当前功能，而测试需要做的是实时考虑对系统其它部分、相关系统的影响。<br>因此测试最应该维护的是系统当前的全貌、架构、模块调用以及核心用例。因此对项目整体的熟悉程度是测试人员不变的核心能力之一。</p></li><li><p>风险，优先级选择<br>这一项其实算是测试人员的看家本领。整个测试分析体系的知识中，最重要的基础之一就是“取舍”，选择更高优先级，更有代表性的case来减少整体case的执行数量，这个技能之于测试相当于算法的掌握之于开发。<br>在快速迭代的过程中对于优先级的选择重要性更高，因为很多时候要承担更多风险来追求交付速度，风险和速度之间的平衡才是最见功力的。这里主要是测试分析能力，RBT测试的掌握等等这些基本能力。<br>测试人员应该积累多种测试技术，综合应用它们，把一个“网”织的更密的性价比远低于用各种不同的“网”来防护。</p></li><li><p>自动化回归<br>自动化回归作为整个持续交付中的核心，重要性不用多说，怎么做好自动化回归是个很大的话题，另外找机会总结。这里只提我的一个观点。要做好和维护好一个真正有效的自动化回归，对于case和数据的设计&gt;自动化的架构&gt;编码能力。所以坚决反对不是本团队的人，不了解整个产品的人来做，也坚决反对简单按模块分解给不同的人，用case堆砌的模式做。<br>同核心用例一样，要以整体视角来做你的自动化回归，好的实践有狠多，还是另找机会总结。</p></li></ol><p>结论：<br>在持续交付的团队中，测试人员最重要的能力是对项目整体的掌握程度，技术视野以及热情。然后厚实的编码能力和测试分析能力也是必不可少的基础。反省一下，之前在招人过程中只注意了后面两项，最重要的能力项没有设计很好的题目和方法来考察。不过感觉前面的能力不光和人本身有关，团队氛围也是能够影响前面能力表达的重要因素。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我认为当前测试人员的核心价值是加速整个项目的反馈以及对产品的快速验证。&lt;/p&gt;
&lt;p&gt;这两项价值中又各自有三项主要工作：&lt;/p&gt;
    
    </summary>
    
      <category term="TestTheory" scheme="http://shadow000902.space/categories/TestTheory/"/>
    
    
  </entry>
  
  <entry>
    <title>如何做好一个执行者</title>
    <link href="http://shadow000902.space/2017/12/04/%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E5%9F%BA%E7%A1%80%E7%9A%84%E6%89%A7%E8%A1%8C%E8%80%85/"/>
    <id>http://shadow000902.space/2017/12/04/如何做好基础的执行者/</id>
    <published>2017-12-03T16:28:42.000Z</published>
    <updated>2017-12-11T05:27:19.291Z</updated>
    
    <content type="html"><![CDATA[<h5 id="如何做好基础的执行者"><a href="#如何做好基础的执行者" class="headerlink" title="如何做好基础的执行者"></a>如何做好基础的执行者</h5><ol><li>对于安排的任务，及时跟进，及时了解，及时产出结果，主动同步结果给leader。</li><li>有好的工作习惯，每天工作结束，对于项目情况有一个简单的总结，并能主动同步给leader。</li><li><p>遇到阻塞流程的问题，能够及时寻找帮助，寻找解决问题的办法。</p><a id="more"></a><p>如果遇到问题只知道自己琢磨，那就会浪费很多时间，导致项目延期；<br>如果不能及时沟通，遇到项目临时出现变故，需要紧急协调资源，你只会束手无策，不知所以；<br>职场是一个需要与人沟通的环境，如果只是单纯的基础执行者，独立模块的功能你也许能够很好的解决，对于多方合作的项目你将束手无策，当然也就不会混的太好。<br>所以有问题，主动沟通，不用怕，不用担心，不用害羞，迈出了第一步，才会有第二步。<br>做到如上，很简单，只要把心思放在工作上，任何人都可以搞定。</p></li></ol><h5 id="如何晋级为一个优秀的执行者"><a href="#如何晋级为一个优秀的执行者" class="headerlink" title="如何晋级为一个优秀的执行者"></a>如何晋级为一个优秀的执行者</h5><ol><li>工作中，能够主动思考，更好的解决方案，并善于总结。</li><li>对于工作中遇到的棘手问题解决后，能够梳理成自己的方法论，并分享给同事，共同进步。</li><li>时刻思考着，如何去通过改善流程，或者去引入小的工具，提高工作效率，更高效的执行，节省资源。<br>如上，一样可以轻松胜任，不需要什么核心技术，只要你想，都可以做到。</li></ol><h5 id="基础执行者的核心竞争力"><a href="#基础执行者的核心竞争力" class="headerlink" title="基础执行者的核心竞争力"></a>基础执行者的核心竞争力</h5><ol><li>养成好的工作习惯，善于总结，建立自己的知识体系。<br>如果单纯只是不断的执行，没有积累总结，那永远只是一个执行者，不求上进，也就只能是低级的执行者（都不能算初级执行者，初级是满足职位要求，低级连岗位需求都做不好），久而久之，只能被淘汰。</li><li>对于交代的任务，能够主动沟通，主要推进，促使任务顺畅完成。</li><li>能够不骄不躁，把简单的事情，做到极致。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;如何做好基础的执行者&quot;&gt;&lt;a href=&quot;#如何做好基础的执行者&quot; class=&quot;headerlink&quot; title=&quot;如何做好基础的执行者&quot;&gt;&lt;/a&gt;如何做好基础的执行者&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;对于安排的任务，及时跟进，及时了解，及时产出结果，主动同步结果给leader。&lt;/li&gt;
&lt;li&gt;有好的工作习惯，每天工作结束，对于项目情况有一个简单的总结，并能主动同步给leader。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;遇到阻塞流程的问题，能够及时寻找帮助，寻找解决问题的办法。&lt;/p&gt;
    
    </summary>
    
      <category term="TestTheory" scheme="http://shadow000902.space/categories/TestTheory/"/>
    
    
  </entry>
  
  <entry>
    <title>测试人员需要的数据库知识</title>
    <link href="http://shadow000902.space/2017/12/03/%E6%B5%8B%E8%AF%95%E4%BA%BA%E5%91%98%E9%9C%80%E8%A6%81%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9F%A5%E8%AF%86/"/>
    <id>http://shadow000902.space/2017/12/03/测试人员需要的数据库知识/</id>
    <published>2017-12-03T14:28:34.000Z</published>
    <updated>2017-12-11T05:27:19.272Z</updated>
    
    <content type="html"><![CDATA[<h5 id="第一阶段、基础需求"><a href="#第一阶段、基础需求" class="headerlink" title="第一阶段、基础需求"></a>第一阶段、基础需求</h5><ol><li><p>知道常用的数据库类型<br>MySQL、MSSQL、Oracle、Memcached、Redis、MongoDB</p></li><li><p>数据库的安装、部署，基础使用<br>至少得会自己在服务器或自己电脑上安装个数据库</p><a id="more"></a></li><li><p>常用的数据库连接工具<br>WorkBench、Navicat、Sequel Pro等</p></li><li><p>数据库的基本配置<br>修改密码，添加用户等</p></li><li><p>库/表操作<br>创建库/表，删除库/表，查看库/表</p></li><li><p>基本命令<br>基本的增删改查语句</p></li></ol><h5 id="第二阶段、一些对数据有强需求的业务测试"><a href="#第二阶段、一些对数据有强需求的业务测试" class="headerlink" title="第二阶段、一些对数据有强需求的业务测试"></a>第二阶段、一些对数据有强需求的业务测试</h5><ol><li><p>备份、还原数据库</p></li><li><p>稍微复杂点的SQL<br>多表查询、子查询 等等</p></li><li><p>存储过程 、视图 等</p></li><li><p>数据导入、导出数据 等</p></li><li><p>造数据<br>实际测试过程中，经常需要通过数据库造一些测试数据</p></li></ol><h5 id="第三阶段、数据库的一些优化知识安全知识"><a href="#第三阶段、数据库的一些优化知识安全知识" class="headerlink" title="第三阶段、数据库的一些优化知识安全知识"></a>第三阶段、数据库的一些优化知识安全知识</h5><p>如慢sql 、sql优化、使用规范等，主要是方便定位问题、性能优化 等</p><p>待补充~</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;第一阶段、基础需求&quot;&gt;&lt;a href=&quot;#第一阶段、基础需求&quot; class=&quot;headerlink&quot; title=&quot;第一阶段、基础需求&quot;&gt;&lt;/a&gt;第一阶段、基础需求&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;知道常用的数据库类型&lt;br&gt;MySQL、MSSQL、Oracle、Memcached、Redis、MongoDB&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据库的安装、部署，基础使用&lt;br&gt;至少得会自己在服务器或自己电脑上安装个数据库&lt;/p&gt;
    
    </summary>
    
      <category term="TestTheory" scheme="http://shadow000902.space/categories/TestTheory/"/>
    
    
  </entry>
  
  <entry>
    <title>安卓无线ADB连接</title>
    <link href="http://shadow000902.space/2017/11/04/%E5%AE%89%E5%8D%93%E6%97%A0%E7%BA%BFADB%E8%BF%9E%E6%8E%A5/"/>
    <id>http://shadow000902.space/2017/11/04/安卓无线ADB连接/</id>
    <published>2017-11-04T14:00:31.000Z</published>
    <updated>2017-12-11T05:18:23.498Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>在手机上安装<code>QPython</code><br>GitHub上的<a href="https://github.com/qpython-android/qpython/releases" target="_blank" rel="noopener">下载链接</a></p></li><li><p>在手机上打开<code>QPython</code>软件的<code>Terminal</code>，安装<code>uiautomator2</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Since uiautomator2 is still developing, you have to add --pre to install development version</span></span><br><span class="line">pip install --pre uiautomator2</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>在手机上安装<code>app-uiautomator.apk</code><br>最新版<a href="https://github.com/openatx/android-uiautomator-server/releases" target="_blank" rel="noopener">下载链接</a></p></li><li><p>导入最新版的<code>atx-agent</code>到手机中<br>最新版<a href="https://github.com/openatx/atx-agent/releases" target="_blank" rel="noopener">下载地址</a><br>下载以<code>linux_armv7.tar.gz</code>结尾的二进制包。绝大部分手机都是linux-arm架构的。<br>解压出<code>atx-agent</code>文件，导入到手机中并启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb push atx-agent /data/<span class="built_in">local</span>/tmp</span><br><span class="line">adb shell chmod 755 /data/<span class="built_in">local</span>/tmp/atx-agent</span><br><span class="line"><span class="comment"># launch atx-agent in daemon mode</span></span><br><span class="line">adb shell /data/<span class="built_in">local</span>/tmp/atx-agent -d</span><br><span class="line"><span class="comment"># example: server started, listening on 192.168.28.230:7912</span></span><br></pre></td></tr></table></figure></li></ol><p>假设手机的地址是<code>$DEVICE_URL</code>(eg: <code>http://192.168.28.230:7912</code>)</p><ol start="5"><li><p>无线访问手机系统</p><ol><li><p>获取当前程序版本</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="variable">$DEVICE_URL</span>/version</span><br><span class="line"><span class="comment"># expect example: 0.0.7</span></span><br></pre></td></tr></table></figure></li><li><p>安装应用</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -d url=<span class="string">"http://some-host/some.apk"</span> <span class="variable">$DEVICE_URL</span>/install</span><br><span class="line"><span class="comment"># expect example: install id</span></span><br></pre></td></tr></table></figure> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get install progress</span></span><br><span class="line">curl -X GET <span class="variable">$DEVICE_URL</span>/install/1</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"1"</span>,<span class="string">"totalSize"</span>:985435,<span class="string">"copiedSize"</span>:16951,<span class="string">"message"</span>:<span class="string">"downloading"</span>&#125;</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"1"</span>,<span class="string">"totalSize"</span>:985435,<span class="string">"copiedSize"</span>:985435,<span class="string">"message"</span>:<span class="string">"success installed"</span>&#125;</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"1"</span>,<span class="string">"totalSize"</span>:985435,<span class="string">"copiedSize"</span>:342641,<span class="string">"message"</span>:<span class="string">"error install"</span>,<span class="string">"error"</span>:<span class="string">"exit status 1"</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>上传文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上传到/sdcard目录下 (url以/结尾)</span></span><br><span class="line">curl -F <span class="string">"file=@somefile.txt"</span> <span class="variable">$DEVICE_URL</span>/upload/sdcard/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传到/sdcard/tmp.txt</span></span><br><span class="line">curl -F <span class="string">"file=@somefile.txt"</span> <span class="variable">$DEVICE_URL</span>/upload/sdcard/tmp.txt</span><br></pre></td></tr></table></figure></li><li><p>程序自升级<br> 升级程序从gihub releases里面直接下载，升级完后自动重启</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 升级到最新版</span></span><br><span class="line">curl 10.0.0.1:7912/upgrade</span><br></pre></td></tr></table></figure> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定升级的版本</span></span><br><span class="line">curl <span class="string">"<span class="variable">$DEVICE_URL</span>/upgrade?version=0.0.7"</span></span><br></pre></td></tr></table></figure></li><li><p><code>ATX Log Path</code></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sdcard/atx-agent.log</span><br></pre></td></tr></table></figure></li></ol></li></ol><p>RESOURCE:<br>    <a href="https://testerhome.com/topics/10361" target="_blank" rel="noopener">testerhome_10361</a><br>    <a href="https://testerhome.com/topics/10298" target="_blank" rel="noopener">testerhome_10298</a><br>    <a href="https://github.com/openatx/uiautomator2" target="_blank" rel="noopener">github_uiautomator2</a><br>    <a href="https://github.com/openatx/android-uiautomator-server" target="_blank" rel="noopener">github_android-uiautomator-server</a><br>    <a href="https://github.com/openatx/atx-agent" target="_blank" rel="noopener">github_atx-agent</a><br>    <a href="https://github.com/qpython-android/qpython" target="_blank" rel="noopener">github_qpython</a></p>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;在手机上安装&lt;code&gt;QPython&lt;/code&gt;&lt;br&gt;GitHub上的&lt;a href=&quot;https://github.com/qpython-android/qpython/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载链接&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在手机上打开&lt;code&gt;QPython&lt;/code&gt;软件的&lt;code&gt;Terminal&lt;/code&gt;，安装&lt;code&gt;uiautomator2&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Since uiautomator2 is still developing, you have to add --pre to install development version&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip install --pre uiautomator2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="http://shadow000902.space/categories/Android/"/>
    
    
      <category term="adb" scheme="http://shadow000902.space/tags/adb/"/>
    
  </entry>
  
</feed>
