<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shadow&#39;S Site</title>
  <subtitle>谁当声震人间，必长久深自缄默。谁当划破闪电，必长久如云漂泊。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://shadow000902.space/"/>
  <updated>2017-06-24T07:10:46.000Z</updated>
  <id>http://shadow000902.space/</id>
  
  <author>
    <name>shadow</name>
    <email>shadow000902@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Jenkins中slave的设置</title>
    <link href="http://shadow000902.space/2017/06/24/Jenkins%E4%B8%ADslave%E7%9A%84%E8%AE%BE%E7%BD%AE/"/>
    <id>http://shadow000902.space/2017/06/24/Jenkins中slave的设置/</id>
    <published>2017-06-24T05:02:12.000Z</published>
    <updated>2017-06-24T07:10:46.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="在Jenkins中配置从节点"><a href="#在Jenkins中配置从节点" class="headerlink" title="在Jenkins中配置从节点"></a>在Jenkins中配置从节点</h5><img src="/2017/06/24/Jenkins中slave的设置/配置从节点.png" alt="配置从节点" title="配置从节点">
<p>增加节点后，实际并没有直接连上，还需要在节点服务器上进行相应的配置</p>
<pre><code>&lt;!--more--&gt;
</code></pre><h5 id="在从节点服务器的host中的加入配置"><a href="#在从节点服务器的host中的加入配置" class="headerlink" title="在从节点服务器的host中的加入配置"></a>在从节点服务器的host中的加入配置</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/hosts</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">111.111.111.111 jenkins.shadow.com						<span class="comment"># 前部分IP为Jenkins的内网地址，后部分为Jenkins的对外访问域名</span></div></pre></td></tr></table></figure>
<h5 id="从节点服务器上配置Jenkins节点配置"><a href="#从节点服务器上配置Jenkins节点配置" class="headerlink" title="从节点服务器上配置Jenkins节点配置"></a>从节点服务器上配置Jenkins节点配置</h5><img src="/2017/06/24/Jenkins中slave的设置/从节点配置要点.png" alt="从节点配置要点" title="从节点配置要点">
<p>点击上图中的<code>slave.jar</code>的链接，下载该文件，放在上方指定的<code>Jenkins</code>工作目录下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">test</span>@<span class="built_in">test</span>-devtesting-00001:~/jenkins$ ll</div><div class="line">total 760</div><div class="line">drwxrwxr-x  3 <span class="built_in">test</span> <span class="built_in">test</span>   4096 Jun 23 16:04 ./</div><div class="line">drwx------ 18 <span class="built_in">test</span> <span class="built_in">test</span>   4096 Jun 24 13:47 ../</div><div class="line">-rw-rw-r--  1 <span class="built_in">test</span> <span class="built_in">test</span>   7623 Jun 23 16:04 maven33-agent.jar</div><div class="line">-rw-rw-r--  1 <span class="built_in">test</span> <span class="built_in">test</span>  19971 Jun 23 16:04 maven33-interceptor.jar</div><div class="line">-rw-rw-r--  1 <span class="built_in">test</span> <span class="built_in">test</span>   6764 Jun 23 16:04 maven3-interceptor-commons.jar</div><div class="line">-rw-rw-r--  1 <span class="built_in">test</span> <span class="built_in">test</span>    738 Jun  8 16:52 slave-agent.jnlp</div><div class="line">-rw-rw-r--  1 <span class="built_in">test</span> <span class="built_in">test</span> 717563 May  2 17:29 slave.jar								<span class="comment"># 上方下载的slave.jar文件</span></div><div class="line">-rwxrwxr-x  1 <span class="built_in">test</span> <span class="built_in">test</span>    114 Jun  6 19:28 start_jenkins.sh*						<span class="comment"># 启动Jenkinsslave的脚本</span></div><div class="line">drwxrwxr-x 14 <span class="built_in">test</span> <span class="built_in">test</span>   4096 Jun 24 12:43 workspace/								<span class="comment"># Jenkins项目的工作目录</span></div></pre></td></tr></table></figure></p>
<p>将提示中的启动<code>Jenkins</code>的脚本写入文件<code>start_jenkins.sh</code>中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar slave.jar -jnlpUrl http://jenkins.shadow.com/computer/test-devtesting-00001/slave-agent.jnlp 2&gt;&amp;1 &amp;</div></pre></td></tr></table></figure></p>
<p>赋予<code>start_jenkins.sh</code>执行权限<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod a+x start_jenkins.sh</div></pre></td></tr></table></figure></p>
<p>启动slave<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./start_jenkins.sh</div></pre></td></tr></table></figure></p>
<p>回到Jenkins节点列表，查看添加的节点，状态如图就说明启动成功了。<br><img src="/2017/06/24/Jenkins中slave的设置/节点列表.png" alt="节点列表" title="节点列表"></p>
<p>至此，slave节点就配置并启动完毕了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;在Jenkins中配置从节点&quot;&gt;&lt;a href=&quot;#在Jenkins中配置从节点&quot; class=&quot;headerlink&quot; title=&quot;在Jenkins中配置从节点&quot;&gt;&lt;/a&gt;在Jenkins中配置从节点&lt;/h5&gt;&lt;img src=&quot;/2017/06/24/Jen
    
    </summary>
    
      <category term="Jenkins" scheme="http://shadow000902.space/categories/Jenkins/"/>
    
    
      <category term="jenkins" scheme="http://shadow000902.space/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Maven-Web实例从服务器部署到Jenkins集成</title>
    <link href="http://shadow000902.space/2017/06/24/Maven-Web%E5%AE%9E%E4%BE%8B%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%E5%88%B0Jenkins%E9%9B%86%E6%88%90/"/>
    <id>http://shadow000902.space/2017/06/24/Maven-Web实例从服务器部署到Jenkins集成/</id>
    <published>2017-06-24T04:48:41.000Z</published>
    <updated>2017-06-24T07:10:46.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Jenkins环境准备"><a href="#Jenkins环境准备" class="headerlink" title="Jenkins环境准备"></a>Jenkins环境准备</h5><ol>
<li>Jenkins安装，这个就不说了</li>
<li><p>Jenkins环境配置</p>
<p> 进入 系统管理-Global Tool Configuration<br> 配置JDK：建议放到用户可操作的目录下，如：/home/test/devtool/jdk1.8.0_91<br> 配置MVN：建议放到用户可操作的目录下，如：/home/test/devtool/apache-maven-3.3.9</p>
 <a id="more"></a>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">test</span>@<span class="built_in">test</span>-devtesting-00001:~/devtool$ ll</div><div class="line">total 8308</div><div class="line">drwxrwxr-x  3 <span class="built_in">test</span> <span class="built_in">test</span>    4096 Jun 23 16:18 ./</div><div class="line">drwx------ 18 <span class="built_in">test</span> <span class="built_in">test</span>    4096 Jun 24 12:43 ../</div><div class="line">drwxrwxr-x  6 <span class="built_in">test</span> <span class="built_in">test</span>    4096 Jun  6 21:39 apache-maven-3.3.9/</div><div class="line">lrwxrwxrwx  1 <span class="built_in">test</span> <span class="built_in">test</span>      25 Jun 23 16:18 jdk1.8.0_91/</div></pre></td></tr></table></figure>
<h5 id="服务器环境准备"><a href="#服务器环境准备" class="headerlink" title="服务器环境准备"></a>服务器环境准备</h5><ol>
<li>首先需要把服务器加入到Jenkins的slave中，即配置Jenkins的从节点</li>
<li>服务器环境配置：建议<strong>配置完全同Jenkins中的环境配置</strong>，包括JDK和MVN，不然会有很多让人头痛无法解决的问题</li>
</ol>
<h5 id="服务器部署WEB实例"><a href="#服务器部署WEB实例" class="headerlink" title="服务器部署WEB实例"></a>服务器部署WEB实例</h5><ol>
<li><p>在用户目录下新建两个目录，一个用来存放源代码，一个用来存放Web实例</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">test</span>@<span class="built_in">test</span>-devtesting-00001:~$ ll</div><div class="line">total 144</div><div class="line">drwx------ 18 <span class="built_in">test</span> <span class="built_in">test</span>  4096 Jun 24 12:43 ./</div><div class="line">drwxr-xr-x  7 root root  4096 May 24 17:55 ../</div><div class="line">drwxrwxr-x  3 <span class="built_in">test</span> <span class="built_in">test</span>  4096 Jun 23 16:18 devtool/						<span class="comment"># 环境配置</span></div><div class="line">drwxrwxr-x  3 <span class="built_in">test</span> <span class="built_in">test</span>  4096 Jun 23 16:04 jenkins/						<span class="comment"># Jenkins工作目录</span></div><div class="line">drwxr-xr-x 12 <span class="built_in">test</span> <span class="built_in">test</span>  4096 Jun 20 10:58 projects/					<span class="comment"># 源代码目录</span></div><div class="line">drwxrwxr-x 16 <span class="built_in">test</span> <span class="built_in">test</span>  4096 Jun 23 14:52 tomcats/						<span class="comment"># Web实例目录</span></div></pre></td></tr></table></figure>
<p> 在projects目录下，每个项目会有一个源代码的git目录；每个源代码的git目录会对应一个Web实例地址，即一个tomcat实例</p>
</li>
<li><p>使用<code>git clone git-address</code>命令拉取源代码到<code>projects</code>目录下</p>
</li>
<li>在<code>tomcats</code>目录下新建一个tomcat实例，命名为自己需要的名称，最好从名称就比较好辨识</li>
<li><p>修改<code>tomcat</code>目录下的<code>conf</code>目录下的<code>server.xml</code>文件，修改本地和远程端口映射</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;Server port="22221" shutdown="SHUTDOWN"&gt;</div><div class="line">&lt;!--该port也需要修改，不可重复--&gt;</div><div class="line">  &lt;Listener className="org.apache.catalina.startup.VersionLoggerListener" /&gt;</div><div class="line">...</div><div class="line">...</div><div class="line">    &lt;Connector port="10021" protocol="HTTP/1.1"</div><div class="line">    &lt;!--这里的port对应服务器上的端口，不可重复，否知会引起冲突，无法部署成功--&gt;</div><div class="line">               connectionTimeout="20000"</div><div class="line">               redirectPort="11121" URIEncoding="utf-8"</div><div class="line">               &lt;!--这里的redirectPort也需要修改，不可重复--&gt;</div><div class="line">               maxPostSize="0" maxHttpHeaderSize="81920"/&gt;</div></pre></td></tr></table></figure>
<p> 如果只是部署在本地，也需要确保端口不冲突</p>
</li>
<li><p>编写部署的脚本<code>deploy.sh</code>，放到<code>tomcat</code>目录下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line">set -m</div><div class="line">#set var</div><div class="line">dir_src=&quot;/home/test/projects/git-file&quot;</div><div class="line">dir_tomcat_home=&quot;/home/test/tomcats/test-tomcat&quot;</div><div class="line">file_war=&quot;ROOT.war&quot;</div><div class="line">file_catalina_out=$dir_tomcat_home&quot;/logs/catalina.out&quot;</div><div class="line"></div><div class="line">echo &quot;----update code from git begin&quot;</div><div class="line">cd $dir_src																				# 进入源代码目录</div><div class="line">git checkout develop																	# checkout需要的分支</div><div class="line">#git checkout master</div><div class="line">git pull</div><div class="line">echo &quot;----update code from git end&quot;</div><div class="line"></div><div class="line">echo &quot;----build project begin&quot;</div><div class="line">mvn clean install -U -DskipTests=true													# maven编译war包</div><div class="line">echo &quot;----build project end&quot;</div><div class="line"></div><div class="line">echo &quot;----shutdown tomcat&quot;</div><div class="line">ps -ef | grep $dir_tomcat_home | awk &apos;&#123; print $2 &#125;&apos; | xargs kill -9						# kill当前tomcat进程</div><div class="line">sleep 1s</div><div class="line"></div><div class="line">echo &quot;----reset war file&quot;</div><div class="line">rm -r $dir_tomcat_home/webapps/ROOT</div><div class="line">cp -r $dir_src/module-name/target/$file_war $dir_tomcat_home/webapps/ROOT.war			# 拷贝新的war包到$dir_tomcat_home/webapps目录下，并命名为ROOT.war</div><div class="line"></div><div class="line">echo &quot;----start tomcat &quot;</div><div class="line">cd $dir_tomcat_home</div><div class="line">touch logs/catalina.out</div><div class="line">sh bin/startup.sh &amp;																		# 启动tomcat，并自动部署war包</div><div class="line"></div><div class="line">echo &quot;----show pid&quot;</div><div class="line">tail -f logs/catalina.out																# 实时日志输出</div></pre></td></tr></table></figure>
</li>
<li><p>部署服务<br> 进入<code>tomcat</code>目录下<br> 赋予脚本可执行权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod a+x deploy.sh</div></pre></td></tr></table></figure>
<p> 执行脚本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./deploy.sh</div></pre></td></tr></table></figure>
<p> 至此，即可完成在服务器上的Web实例部署。</p>
</li>
</ol>
<h5 id="Jenkins集成Web实例部署"><a href="#Jenkins集成Web实例部署" class="headerlink" title="Jenkins集成Web实例部署"></a>Jenkins集成Web实例部署</h5><ol>
<li>新建一个<code>Jenkins</code>项目<br> 因为我们的Web项目是从maven进行编译的，所以在新建项目时，选择<code>构建一个maven项目</code></li>
<li><p><code>Jenkins</code>项目配置<br> 勾选<code>参数化构建过程</code></p>
<img src="/2017/06/24/Maven-Web实例从服务器部署到Jenkins集成/参数化构建过程.png" alt="参数化构建过程" title="参数化构建过程">
<p> 指定服务器</p>
<img src="/2017/06/24/Maven-Web实例从服务器部署到Jenkins集成/指定slave.png" alt="指定slave" title="指定slave">
<p> 配置源代码地址，设置分支变量获取</p>
<img src="/2017/06/24/Maven-Web实例从服务器部署到Jenkins集成/配置git地址.png" alt="配置git地址" title="配置git地址">
<p> 配置项目构建名称<code>构建次数-分支名</code></p>
<img src="/2017/06/24/Maven-Web实例从服务器部署到Jenkins集成/设置项目构建名称.png" alt="设置项目构建名称" title="设置项目构建名称">
<p> Maven编译配置，有些git项目可能<code>pom.xml</code>文件并不在项目根目录下，需要手动指定，且是相对路径</p>
<img src="/2017/06/24/Maven-Web实例从服务器部署到Jenkins集成/maven编译配置.png" alt="maven编译配置" title="maven编译配置">
<p> 最后增加<code>Execute shell</code>，完成war包部署</p>
<img src="/2017/06/24/Maven-Web实例从服务器部署到Jenkins集成/部署代码配置.png" alt="部署代码配置" title="部署代码配置">
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">set -o errexit</div><div class="line">set -o xtrace</div><div class="line"></div><div class="line">export BUILD_ID=pleaseDontKillMe																		# 该项设置，可以避免Jenkins部署实例的时候，部署结束，进程就被kill</div><div class="line"></div><div class="line">dir_tomcat_home=&quot;/home/test/tomcats/test-tomcat&quot;														# 设置tomcat实例变量</div><div class="line">file_war=&quot;ROOT.war&quot;																						# 代码打出的war包名称，需要自己先手动打包一次知道名称后再指定</div><div class="line">file_catalina_out=$&#123;dir_tomcat_home&#125;&quot;/logs/catalina.out&quot;												# 设置实时日志输出目录变量</div><div class="line"></div><div class="line">echo &quot;----shutdown tomcat&quot;</div><div class="line"></div><div class="line"># ps -ef | grep $&#123;dir_tomcat_home&#125; | awk &apos;&#123; print $2 &#125;&apos; | xargs kill -9</div><div class="line">ps auxwww | grep java | grep $&#123;dir_tomcat_home&#125; | awk &apos;&#123;print $2&#125;&apos; | xargs kill -9 2&gt;/dev/null;			# 获取并kill当前tomcat进程，如果当前进程存在的话</div><div class="line">sleep 1s</div><div class="line"></div><div class="line">echo &quot;----reset war file&quot;</div><div class="line">rm -rf $&#123;dir_tomcat_home&#125;/webapps/ROOT;																	# 移除war包解压后的目录</div><div class="line">rm -rf $&#123;dir_tomcat_home&#125;/webapps/ROOT.war;																# 移除前一次部署的war包</div><div class="line">cp -r $&#123;WORKSPACE&#125;/module-name/target/$file_war $&#123;dir_tomcat_home&#125;/webapps/ROOT.war						# 拷贝新的war包到$&#123;dir_tomcat_home&#125;/webapps目录下，并命名为ROOT.war</div><div class="line"></div><div class="line">echo &quot;----start tomcat&quot;</div><div class="line">sh $&#123;dir_tomcat_home&#125;/bin/startup.sh;																	# 启动tomcat，自动部署war包</div><div class="line"></div><div class="line">#echo &quot;----show pid&quot;</div><div class="line">#tail -f $&#123;dir_tomcat_home&#125;/logs/catalina.out</div></pre></td></tr></table></figure>
<p> 至此<code>Jenkins</code>项目配置完成，保存即可。</p>
</li>
<li>执行构建<img src="/2017/06/24/Maven-Web实例从服务器部署到Jenkins集成/分支构建.png" alt="分支构建" title="分支构建">
</li>
</ol>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;Jenkins环境准备&quot;&gt;&lt;a href=&quot;#Jenkins环境准备&quot; class=&quot;headerlink&quot; title=&quot;Jenkins环境准备&quot;&gt;&lt;/a&gt;Jenkins环境准备&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;Jenkins安装，这个就不说了&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jenkins环境配置&lt;/p&gt;
&lt;p&gt; 进入 系统管理-Global Tool Configuration&lt;br&gt; 配置JDK：建议放到用户可操作的目录下，如：/home/test/devtool/jdk1.8.0_91&lt;br&gt; 配置MVN：建议放到用户可操作的目录下，如：/home/test/devtool/apache-maven-3.3.9&lt;/p&gt;
    
    </summary>
    
      <category term="Jenkins" scheme="http://shadow000902.space/categories/Jenkins/"/>
    
    
      <category term="jenkins" scheme="http://shadow000902.space/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Mac下Redis环境搭建</title>
    <link href="http://shadow000902.space/2017/06/18/Mac%E4%B8%8BRedis%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://shadow000902.space/2017/06/18/Mac下Redis环境搭建/</id>
    <published>2017-06-18T10:08:44.000Z</published>
    <updated>2017-06-24T07:10:46.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h5><p>下载稳定版本的安装包<a href="http://download.redis.io/redis-stable.tar.gz" target="_blank" rel="external">redis-stable</a></p>
<h5 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">tar -xvf redis-stable.tar.gz</div><div class="line">cp ./redis-stable /opt/</div><div class="line"><span class="built_in">cd</span> /opt/redis-stable</div><div class="line">sudo make <span class="built_in">test</span></div><div class="line">sudo make install</div></pre></td></tr></table></figure>
<pre><code>&lt;!--more--&gt;
</code></pre><h5 id="配置Redis"><a href="#配置Redis" class="headerlink" title="配置Redis"></a>配置Redis</h5><ol>
<li><p>创建需要的目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir bin</div><div class="line">mkdir etc</div><div class="line">mkdir db</div></pre></td></tr></table></figure>
</li>
<li><p>拷贝安装好的<code>redis</code>文件到创建的<code>bin</code>目录下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp /usr/bin/redis-* /opt/redis-stable/bin/</div></pre></td></tr></table></figure>
<p> 结果<code>/opt/redis-stable/bin/</code>目录下的内容如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">╭─taoyi at TaoYi-Mac <span class="keyword">in</span> /opt/redis-stable/bin using ‹› 17-06-18 - 18:06:48</div><div class="line">╰─○ ll</div><div class="line">total 6648</div><div class="line">-rwxr-xr-x  1 taoyi  staff    98K  6 18 18:06 redis-benchmark</div><div class="line">-rwxr-xr-x  1 taoyi  staff    14K  6 18 18:06 redis-check-aof</div><div class="line">-rwxr-xr-x  1 taoyi  staff   1.0M  6 18 18:06 redis-check-rdb</div><div class="line">-rwxr-xr-x  1 taoyi  staff   159K  6 18 18:06 redis-cli</div><div class="line">-rwxr-xr-x  1 taoyi  staff   1.0M  6 18 18:06 redis-sentinel</div><div class="line">-rwxr-xr-x  1 taoyi  staff   1.0M  6 18 18:06 redis-server</div></pre></td></tr></table></figure>
</li>
<li><p>拷贝安装目录<code>src</code>目录下的<code>mkreleasehdr.sh</code>到安装目录下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp /opt/redis-stable/src/mkreleasehdr.sh /opt/redis-stable/</div></pre></td></tr></table></figure>
</li>
<li><p>拷贝安装目录下的<code>redis.conf</code>到创建的<code>etc</code>目录下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp /opt/redis-stable/redis.conf /opt/redis-stable/etc/</div></pre></td></tr></table></figure>
</li>
<li><p>修改<code>redis.conf</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#修改为守护模式</span></div><div class="line">daemonize yes</div><div class="line"><span class="comment">#设置进程锁文件</span></div><div class="line">pidfile /opt/redis-stable/redis.pid</div><div class="line"><span class="comment">#端口</span></div><div class="line">port 6379</div><div class="line"><span class="comment">#客户端超时时间</span></div><div class="line">timeout 300</div><div class="line"><span class="comment">#日志级别</span></div><div class="line">loglevel debug</div><div class="line"><span class="comment">#日志文件位置</span></div><div class="line">logfile /opt/redis-stable/<span class="built_in">log</span>-redis.log</div><div class="line"><span class="comment">#设置数据库的数量，默认数据库为0，可以使用SELECT &lt;dbid&gt;命令在连接上指定数据库id</span></div><div class="line">databases 8</div><div class="line"><span class="comment">##指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</span></div><div class="line"><span class="comment">#save &lt;seconds&gt; &lt;changes&gt;</span></div><div class="line"><span class="comment">#Redis默认配置文件中提供了三个条件：</span></div><div class="line">save 900 1</div><div class="line">save 300 10</div><div class="line">save 60 10000</div><div class="line"><span class="comment">#指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，</span></div><div class="line"><span class="comment">#可以关闭该#选项，但会导致数据库文件变的巨大</span></div><div class="line">rdbcompression yes</div><div class="line"><span class="comment">#指定本地数据库文件名</span></div><div class="line">dbfilename dump.rdb</div><div class="line"><span class="comment">#指定本地数据库路径</span></div><div class="line">dir /opt/redis-stable/db/</div><div class="line"><span class="comment">#指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能</span></div><div class="line"><span class="comment">#会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有</span></div><div class="line"><span class="comment">#的数据会在一段时间内只存在于内存中</span></div><div class="line">appendonly no</div><div class="line"><span class="comment">#指定更新日志条件，共有3个可选值：</span></div><div class="line"><span class="comment">#no：表示等操作系统进行数据缓存同步到磁盘（快）</span></div><div class="line"><span class="comment">#always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）</span></div><div class="line"><span class="comment">#everysec：表示每秒同步一次（折衷，默认值）</span></div><div class="line">appendfsync everysec</div></pre></td></tr></table></figure>
</li>
<li><p>修改<code>redis</code>目录的所有者</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chown -R taoyi /opt/redis-stable</div></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="启动Redis服务"><a href="#启动Redis服务" class="headerlink" title="启动Redis服务"></a>启动Redis服务</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./opt/redis-stable/bin/redis-server ./opt/redis-stable/etc/redis.conf</div></pre></td></tr></table></figure>
<h5 id="访问Redis服务"><a href="#访问Redis服务" class="headerlink" title="访问Redis服务"></a>访问Redis服务</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./opt/redis-stable/bin/redis-cli</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;下载安装包&quot;&gt;&lt;a href=&quot;#下载安装包&quot; class=&quot;headerlink&quot; title=&quot;下载安装包&quot;&gt;&lt;/a&gt;下载安装包&lt;/h5&gt;&lt;p&gt;下载稳定版本的安装包&lt;a href=&quot;http://download.redis.io/redis-stable.t
    
    </summary>
    
      <category term="Redis" scheme="http://shadow000902.space/categories/Redis/"/>
    
    
      <category term="redis" scheme="http://shadow000902.space/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Mac上MySQL的简单使用</title>
    <link href="http://shadow000902.space/2017/06/03/Mac%E4%B8%8AMySQL%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://shadow000902.space/2017/06/03/Mac上MySQL的简单使用/</id>
    <published>2017-06-03T09:20:13.000Z</published>
    <updated>2017-06-24T07:10:46.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p>启动、停止、重启MySQL服务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo /usr/<span class="built_in">local</span>/MySQL/support-files/mysql.server start</div><div class="line">sudo /usr/<span class="built_in">local</span>/mysql/support-files/mysql.server stop</div><div class="line">sudo /usr/<span class="built_in">local</span>/mysql/support-files/mysql.server restart</div></pre></td></tr></table></figure>
 <a id="more"></a>
</li>
<li><p>登录MySQL数据库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -h 地址 -P 端口 -u 用户名 -p 密码</div></pre></td></tr></table></figure>
</li>
<li><p>查看数据库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show databases;</div></pre></td></tr></table></figure>
</li>
<li><p>查看当前库的所有表</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show tables;</div></pre></td></tr></table></figure>
</li>
<li><p>字符匹配查询</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select * from database <span class="built_in">where</span> Attributes like <span class="string">"%SQL%"</span>;								<span class="comment"># 查询 Attributes 中包含 SQL 字符的数据</span></div><div class="line">select * from database <span class="built_in">where</span> Attributes like <span class="string">"a%b"</span>;									<span class="comment"># 查询 Attributes 中以 a 开头以 b 结尾的字符串数据</span></div><div class="line">select * from database <span class="built_in">where</span> Attributes like <span class="string">"m_n"</span>;									<span class="comment"># 查询 Attributes 中以 m 开头以 n 结尾的3个字符的数据，中间 _ 只能代表一个字符</span></div></pre></td></tr></table></figure>
</li>
<li><p>多条件查询</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">select * from database <span class="built_in">where</span> Attributes1=a and Attributes2 like <span class="string">"My_SQL"</span>;</div><div class="line">select * from database <span class="built_in">where</span> Attributes1=a or Attributes2 like <span class="string">"My_SQL"</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>去除结果中的重复行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select distinct Attributes from database;</div></pre></td></tr></table></figure>
</li>
<li><p>对查询结果进行排序</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">select * from database orderby id desc;												<span class="comment"># 倒叙排列</span></div><div class="line">select * from database orderby id asc;												<span class="comment"># 正序排列</span></div></pre></td></tr></table></figure>
</li>
<li><p>分组查询</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">select name,id from database GROUP BY id;</div><div class="line">select name,id from database GROUP BY name,id;										<span class="comment"># 当id字段的值相等时，再按照name字段分组</span></div></pre></td></tr></table></figure>
</li>
<li><p>限制查询结果的数量</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">select * from database orderby id asc <span class="built_in">limit</span> 2,3;									<span class="comment"># 取两条数据，正序，从第三条开始</span></div><div class="line">select * from database orderby id desc <span class="built_in">limit</span> 2,3;									<span class="comment"># 取两条数据，倒序，从倒数第三条结束，只显示倒数前两条</span></div></pre></td></tr></table></figure></li>
</ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;启动、停止、重启MySQL服务&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/MySQL/support-files/mysql.server start&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/mysql/support-files/mysql.server stop&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/mysql/support-files/mysql.server restart&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://shadow000902.space/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://shadow000902.space/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mac切换Terminal为zsh</title>
    <link href="http://shadow000902.space/2017/05/18/Mac%E5%88%87%E6%8D%A2Terminal%E4%B8%BAzsh/"/>
    <id>http://shadow000902.space/2017/05/18/Mac切换Terminal为zsh/</id>
    <published>2017-05-18T09:17:39.000Z</published>
    <updated>2017-06-24T07:10:46.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="下载一个-oh-my-zsh-配置"><a href="#下载一个-oh-my-zsh-配置" class="headerlink" title="下载一个 .oh-my-zsh 配置"></a>下载一个 .oh-my-zsh 配置</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</div></pre></td></tr></table></figure>
<pre><code>&lt;!--more--&gt;
</code></pre><h5 id="创建新的配置"><a href="#创建新的配置" class="headerlink" title="创建新的配置"></a>创建新的配置</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cp ~/.zshrc ~/.zshrc.orig                                   <span class="comment"># 如果已经有一个 .zshrc 文件，备份一下</span></div><div class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</div></pre></td></tr></table></figure>
<h5 id="更新新的配置文件"><a href="#更新新的配置文件" class="headerlink" title="更新新的配置文件"></a>更新新的配置文件</h5><p>如果有些环境变量配置在<code>~/.bash_profile</code>的话，需要在新的配置里进行刷新<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="built_in">export</span> ZSH=~/.oh-my-zsh/</div><div class="line">...</div><div class="line">ZSH_THEME=<span class="string">"fino-time"</span>                   <span class="comment"># 设置选择的主题。默认是robbyrussell</span></div><div class="line">...</div><div class="line">...</div><div class="line"><span class="built_in">source</span> <span class="variable">$ZSH</span>/oh-my-zsh.sh</div><div class="line"><span class="built_in">source</span> ~/.bash_profile</div><div class="line">...</div></pre></td></tr></table></figure></p>
<h5 id="优化-terminal-样式"><a href="#优化-terminal-样式" class="headerlink" title="优化 terminal 样式"></a>优化 terminal 样式</h5><img src="/2017/05/18/Mac切换Terminal为zsh/终端样式修改.png" alt="终端样式修改" title="终端样式修改">
<h5 id="切换-Terminal-到-zsh"><a href="#切换-Terminal-到-zsh" class="headerlink" title="切换 Terminal 到 zsh"></a>切换 Terminal 到 zsh</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chsh <span class="_">-s</span> /bin/zsh</div></pre></td></tr></table></figure>
<p>重启一下 Terminal 之后，就生效了。</p>
<h5 id="效果如图"><a href="#效果如图" class="headerlink" title="效果如图"></a>效果如图</h5><img src="/2017/05/18/Mac切换Terminal为zsh/Terminal效果图.png" alt="Terminal效果图" title="Terminal效果图">
<h5 id="如果使用-fino-time-主题"><a href="#如果使用-fino-time-主题" class="headerlink" title="如果使用 fino-time 主题"></a>如果使用 fino-time 主题</h5><p>如果使用该主题的话，会遇到一个错误：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">zsh: <span class="built_in">command</span> not found: rvm-prompt</div><div class="line">╭─taoyi at TaoYi-Mac <span class="keyword">in</span> ~ using ‹› 17-05-18 - 20:44:28</div><div class="line">╰─○</div></pre></td></tr></table></figure></p>
<p>每次一条命令前都会有这条报错。<br>主要原因就是该主题依赖于<code>rvm-prompt</code>，这样的话，就需要安装上该组件。<br>安装步骤：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install gnupg gnupg2</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3</div><div class="line">\curl <span class="_">-s</span>SL https://get.rvm.io | bash <span class="_">-s</span> stable</div></pre></td></tr></table></figure>
<p>在<code>~/.zshrc</code>文件中加入支持：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">alias</span> rvm-prompt=<span class="variable">$HOME</span>/.rvm/bin/rvm-prompt</div></pre></td></tr></table></figure></p>
<p>这样后，就完美了，不会再有这个报错了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;下载一个-oh-my-zsh-配置&quot;&gt;&lt;a href=&quot;#下载一个-oh-my-zsh-配置&quot; class=&quot;headerlink&quot; title=&quot;下载一个 .oh-my-zsh 配置&quot;&gt;&lt;/a&gt;下载一个 .oh-my-zsh 配置&lt;/h5&gt;&lt;figure cla
    
    </summary>
    
      <category term="Terminal" scheme="http://shadow000902.space/categories/Terminal/"/>
    
    
      <category term="terminal" scheme="http://shadow000902.space/tags/terminal/"/>
    
  </entry>
  
  <entry>
    <title>Robot-Framework踩坑总结</title>
    <link href="http://shadow000902.space/2017/05/15/Robot-Framework%E8%B8%A9%E5%9D%91%E6%80%BB%E7%BB%93/"/>
    <id>http://shadow000902.space/2017/05/15/Robot-Framework踩坑总结/</id>
    <published>2017-05-15T12:16:55.000Z</published>
    <updated>2017-06-24T07:10:45.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="List中的字典循环"><a href="#List中的字典循环" class="headerlink" title="List中的字典循环"></a>List中的字典循环</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">*** Test Cases ***</div><div class="line">takeValueFromCircle</div><div class="line">	# 从返回结果中提取出List</div><div class="line">	@&#123;items&#125;=    set variable    $&#123;json[&quot;data&quot;][&quot;items&quot;]&#125;</div><div class="line">	# 循环List中的item</div><div class="line">	: FOR    $&#123;params&#125;    IN    @&#123;items&#125;</div><div class="line">	# 把item中的一个参数（每个参数都是一个字典）转化为Str格式，顺便去除 &quot;u&quot; 标识</div><div class="line">	\    $&#123;params&#125;    Dumps    $&#123;params&#125;</div><div class="line">	# 把字典转化为json</div><div class="line">	\    $&#123;params&#125;    to json    $&#123;params&#125;</div><div class="line">	#\    Log    $&#123;params[&quot;carId&quot;]&#125;</div><div class="line">	# 对每个item取出来的字典中的某个字段进行判断，如果是需要的值，就把另一个需要的值取出来，并打印出来</div><div class="line">	\    RUN KEYWORD IF    &quot;$&#123;params[&quot;carInfo&quot;][&quot;status&quot;]&#125;&quot;==&quot;评估中&quot;    Log    $&#123;params[&quot;carId&quot;]&#125;</div></pre></td></tr></table></figure>
<pre><code>&lt;!--more--&gt;
</code></pre><h5 id="wait-until-keyword-succeeds关键字使用"><a href="#wait-until-keyword-succeeds关键字使用" class="headerlink" title="wait until keyword succeeds关键字使用"></a>wait until keyword succeeds关键字使用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">*** Test Cases ***</div><div class="line">&quot;Wait until ...&quot; with normal error</div><div class="line">    # Keyword is run multiple times, until timeout. Each run gives an exception</div><div class="line">    # traceback.</div><div class="line">    Wait Until Keyword Succeeds    1 sec    0.5    Keyword With Normal Error</div><div class="line"></div><div class="line">&quot;Wait until ...&quot; with AttributeError</div><div class="line">    # Keyword is run only once, even if there is time left until the timeout.</div><div class="line">    # There is no exception traceback like above.</div><div class="line">    Wait Until Keyword Succeeds    1 sec    0.5    Keyword With AttributeError</div><div class="line"></div><div class="line">*** Keywords ***</div><div class="line">Keyword With Normal Error</div><div class="line">    $&#123;obj&#125; =    Evaluate    &quot;foo&quot;</div><div class="line">    Should Be Equal As Strings    $&#123;obj&#125;    &quot;bar&quot;</div><div class="line"></div><div class="line">Keyword With AttributeError</div><div class="line">    # In real life, this would get an object and use some of its (valid) attributes.</div><div class="line">    # In case of an error, and in Teardown context (continue-on-failure), a None object</div><div class="line">    # is returned instead causing the next keyword to create an AttributeError.</div><div class="line">    $&#123;obj&#125; =    Evaluate    &quot;foo&quot;</div><div class="line">    Should Be Equal As Strings    $&#123;obj.bad_attr&#125;    &quot;foo&quot;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">*** Test Cases ***</div><div class="line">003.导出进度-/pc/export/taizhangaction/progress.json</div><div class="line">    wait until keyword succeeds    3 min    5 sec    导出进度-/pc/export/taizhangaction/progress.json</div><div class="line">    </div><div class="line">*** Keywords ***</div><div class="line">导出进度-/pc/export/taizhangaction/progress.json</div><div class="line">    $&#123;params&#125;=    Create Dictionary    jobId=$&#123;jobId&#125;</div><div class="line">    &amp;&#123;json&#125;=    Rest.Post    /pc/export/taizhangaction/progress.json    $&#123;params&#125;    form    $&#123;hosts[&quot;erp-online&quot;]&#125;</div><div class="line">    Should Be True    $&#123;json[&quot;success&quot;]&#125;</div><div class="line">	should be equal as strings    $&#123;json[&quot;data&quot;][&quot;progress&quot;]&#125;    100</div><div class="line">	$&#123;URL&#125;=    set variable    $&#123;json[&quot;data&quot;][&quot;url&quot;]&#125;</div></pre></td></tr></table></figure>
<p>5秒执行一次关键字，如果<code>${json[&quot;data&quot;][&quot;progress&quot;]}!=100</code>，执行一次关键字，直到相等时，执行一次关键字中的最后一行代码。</p>
<h5 id="一个完整的独立case"><a href="#一个完整的独立case" class="headerlink" title="一个完整的独立case"></a>一个完整的独立case</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">*** Test Cases ***</div><div class="line">登录</div><div class="line">    $&#123;dict&#125;=    Create Dictionary    Content-Type=application/x-www-form-urlencoded</div><div class="line">    Create Session    _session    http://dfc.souche.com    $&#123;dict&#125;</div><div class="line">    $&#123;params&#125;=    Create Dictionary    loginName=15558135526    password=souche2015    jPushId=jpushid001</div><div class="line">    $&#123;response&#125;=    Post Request    _session    /rest/account/login    params=$&#123;params&#125;    headers=$&#123;dict&#125;</div><div class="line">    Should Be Equal As Strings    $&#123;response.status_code&#125;    200</div><div class="line">    &amp;&#123;json&#125;=    Set Variable    $&#123;response.json()&#125;</div><div class="line">    Should Be True    &amp;&#123;json&#125;[success]</div><div class="line">    Log    &amp;&#123;json&#125;[success]</div></pre></td></tr></table></figure>
<h5 id="对请求proxy、tag、headers、session、response的整体封装"><a href="#对请求proxy、tag、headers、session、response的整体封装" class="headerlink" title="对请求proxy、tag、headers、session、response的整体封装"></a>对请求proxy、tag、headers、session、response的整体封装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">*** Keywords ***</div><div class="line">Rest.Post</div><div class="line">    [Arguments]    $&#123;uri&#125;    $&#123;params&#125;    $&#123;type&#125;=form    $&#123;cur_host&#125;=$&#123;EMPTY&#125;</div><div class="line">    #设置代理服务器，这样方便调试代码</div><div class="line">    &amp;&#123;proxy&#125;=    Create Dictionary    http=http://127.0.0.1:8888</div><div class="line">    #根据tag来区分请求应使用哪个host</div><div class="line">    $&#123;host&#125;=    Set Variable    \ \ $&#123;EMPTY&#125;</div><div class="line">    : FOR    $&#123;tag&#125;    IN    @&#123;TEST TAGS&#125;</div><div class="line">    \    $&#123;host&#125;=    Evaluate    $hosts.get($tag,&quot;&quot;)</div><div class="line">    \    Run Keyword If    &quot;$&#123;host&#125;&quot;!=&quot;&quot;    Exit For Loop</div><div class="line">    #创建session,跨域模式，不需要维护Session</div><div class="line">    Run Keyword If    &quot;$&#123;cur_host&#125;&quot;!=&quot;&quot;    Create Session    _session    $&#123;cur_host&#125;    proxies=$&#123;proxy&#125;</div><div class="line">    ...    ELSE    Create Session    _session    $&#123;host&#125;    proxies=$&#123;proxy&#125;</div><div class="line">    #已登录的用户在请求中带上token</div><div class="line">    Run Keyword If    &quot;$&#123;token&#125;&quot;!=&quot;&quot;    Set To Dictionary    $&#123;params&#125;    token=$&#123;token&#125;</div><div class="line">    Log    $&#123;token&#125;</div><div class="line">    #根据请求数据的类型设置header</div><div class="line">    &amp;&#123;headers&#125;=    Run Keyword If    &quot;$&#123;type&#125;&quot;==&quot;form&quot;    Create Dictionary    Content-Type=application/x-www-form-urlencoded    TT=$&#123;token&#125;</div><div class="line">    ...    ELSE IF    &quot;$&#123;type&#125;&quot;==&quot;json&quot;    Create Dictionary    Content-Type=application/json    TT=$&#123;token&#125;</div><div class="line">    $&#123;response&#125;=    Post Request    _session    $&#123;uri&#125;    $&#123;params&#125;    headers=&amp;&#123;headers&#125;</div><div class="line">    Should Be Equal As Strings    $&#123;response.status_code&#125;    200</div><div class="line">    &amp;&#123;json&#125;=    Set Variable    $&#123;response.json()&#125;</div><div class="line">    [Return]    &amp;&#123;json&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;List中的字典循环&quot;&gt;&lt;a href=&quot;#List中的字典循环&quot; class=&quot;headerlink&quot; title=&quot;List中的字典循环&quot;&gt;&lt;/a&gt;List中的字典循环&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t
    
    </summary>
    
      <category term="Robot-Framework" scheme="http://shadow000902.space/categories/Robot-Framework/"/>
    
    
      <category term="robot-framework" scheme="http://shadow000902.space/tags/robot-framework/"/>
    
  </entry>
  
  <entry>
    <title>Charles常用的九大功能</title>
    <link href="http://shadow000902.space/2017/04/25/Charles%E5%B8%B8%E7%94%A8%E7%9A%84%E4%B9%9D%E5%A4%A7%E5%8A%9F%E8%83%BD/"/>
    <id>http://shadow000902.space/2017/04/25/Charles常用的九大功能/</id>
    <published>2017-04-25T09:57:15.000Z</published>
    <updated>2017-06-24T07:10:46.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="过滤网络请求"><a href="#过滤网络请求" class="headerlink" title="过滤网络请求"></a>过滤网络请求</h5><h6 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h6><p>在主界面的中部的 Filter 栏中填入需要过滤出来的关键字。</p>
<h6 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h6><p>在 Charles 的菜单栏选择 <code>“Proxy”-&gt;”Recording Settings”</code>，然后选择 Include 栏，选择添加一个项目，然后填入需要监控的协议，主机地址，端口号。这样就可以只截取目标网站的封包了。</p>
<pre><code>&lt;!--more--&gt;
</code></pre><img src="/2017/04/25/Charles常用的九大功能/过滤网络请求.png" alt="过滤网络请求" title="过滤网络请求">
<p>通常情况下，我们使用方法一做一些临时性的封包过滤，使用方法二做一些经常性的封包过滤。</p>
<h6 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h6><p>在想过滤的网络请求上右击，选择 “Focus”，之后在 Filter 一栏勾选上 Focussed 一项，这种方式可以临时性的，快速地过滤出一些没有通过关键字的一类网络请求。</p>
<h5 id="截取客户端上的网络请求"><a href="#截取客户端上的网络请求" class="headerlink" title="截取客户端上的网络请求"></a>截取客户端上的网络请求</h5><h6 id="Charles上的设置"><a href="#Charles上的设置" class="headerlink" title="Charles上的设置"></a>Charles上的设置</h6><p>打开Charles代理功能。在 Charles 的菜单栏上选择 “Proxy”-&gt;”Proxy Settings”，填入代理端口 8888，并且勾上 “Enable transparent HTTP proxying” 就完成了在 Charles 上的设置<br><img src="/2017/04/25/Charles常用的九大功能/打开Charles代理功能.png" alt="打开Charles代理功能" title="打开Charles代理功能"></p>
<h6 id="客户端上设置网络代理"><a href="#客户端上设置网络代理" class="headerlink" title="客户端上设置网络代理"></a>客户端上设置网络代理</h6><img src="/2017/04/25/Charles常用的九大功能/客户端上代理设置.png" alt="客户端上代理设置" title="客户端上代理设置">
<p>设置好之后，我们打开 客户端 上的任意需要网络通讯的程序，就可以看到 Charles 弹出 客户端 请求连接的确认菜单（如下图所示），点击 “Allow” 即可完成设置。<br><img src="/2017/04/25/Charles常用的九大功能/同意请求.png" alt="同意请求" title="同意请求"></p>
<h5 id="抓取-Https-请求"><a href="#抓取-Https-请求" class="headerlink" title="抓取 Https 请求"></a>抓取 Https 请求</h5><h6 id="客户端安装证书"><a href="#客户端安装证书" class="headerlink" title="客户端安装证书"></a>客户端安装证书</h6><p>点击 Charles 的顶部菜单，选择 “Help” -&gt; “SSL Proxying” -&gt; “Install Charles Root Certificate on a Mobile Device or Remote Browser”<br><img src="/2017/04/25/Charles常用的九大功能/安装证书链接.png" alt="安装证书链接" title="安装证书链接"><br>按照我们之前说的教程，在设备上设置好 Charles 为代理后，在手机浏览器中访问地址：chls.pro/ssl，即可打开证书安装的界面，安装完证书后，就可以截取手机上的 Https 通讯内容了。不过同样需要注意，默认情况下 Charles 并不做截取，你还需要在要截取的网络请求上右击，选择 SSL proxy 菜单项。<br><img src="/2017/04/25/Charles常用的九大功能/要抓取HTTPS请求的域名.png" alt="要抓取HTTPS请求的域名" title="要抓取HTTPS请求的域名"><br>还可以直接在对应的 HTTPS 请求上右键，选择<code>Enable SSL Proxying</code>。</p>
<h5 id="模拟慢速网络"><a href="#模拟慢速网络" class="headerlink" title="模拟慢速网络"></a>模拟慢速网络</h5><p>在做移动开发的时候，我们常常需要模拟慢速网络或者高延迟的网络，以测试在移动网络下，应用的表现是否正常。Charles 对此需求提供了很好的支持。<br>在 Charles 的菜单上，选择 “Proxy”-&gt;”Throttle Setting” 项，在之后弹出的对话框中，我们可以勾选上 “Enable Throttling”，并且可以设置 Throttle Preset 的类型。如下图所示：<br><img src="/2017/04/25/Charles常用的九大功能/慢速网络设置.png" alt="慢速网络设置" title="慢速网络设置"><br>如果我们只想模拟指定网站的慢速网络，可以再勾选上图中的 “Only for selected hosts” 项，然后在对话框的下半部分设置中增加指定的 hosts 项即可。</p>
<h5 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h5><p>我们可以使用 Charles 的 Repeat 功能来简单地测试服务器的并发处理能力，方法如下。<br>我们在想打压的网络请求上（POST 或 GET 请求均可）右击，然后选择 「Repeat Advanced」菜单项，接着我们就可以在弹出的对话框中，选择打压的并发线程数以及打压次数，确定之后，即可开始打压。<br><img src="/2017/04/25/Charles常用的九大功能/压力测试.png" alt="压力测试" title="压力测试"></p>
<h5 id="修改服务器返回内容"><a href="#修改服务器返回内容" class="headerlink" title="修改服务器返回内容"></a>修改服务器返回内容</h5><p>有些时候我们想让服务器返回一些指定的内容，方便我们调试一些特殊情况。例如列表页面为空的情况，数据异常的情况，部分耗时的网络请求超时的情况等。如果没有 Charles，要服务器配合构造相应的数据显得会比较麻烦。这个时候，使用 Charles 相关的功能就可以满足我们的需求。<br>根据具体的需求，Charles 提供了 Map 功能、 Rewrite 功能以及 Breakpoints 功能，都可以达到修改服务器返回内容的目的。这三者在功能上的差异是：<br>Map 功能适合长期地将某一些请求重定向到另一个网络地址或本地文件。<br>Rewrite 功能适合对网络请求进行一些正则替换。<br>Breakpoints 功能适合做一些临时性的修改。</p>
<h5 id="Map-重定向功能"><a href="#Map-重定向功能" class="headerlink" title="Map 重定向功能"></a>Map 重定向功能</h5><p>Charles 的 Map 功能分 Map Remote 和 Map Local 两种，顾名思义，Map Remote 是将指定的网络请求重定向到另一个网址请求地址，Map Local 是将指定的网络请求重定向到本地文件。<br>在 Charles 的菜单中，选择 “Tools”-&gt;”Map Remote” 或 “Map Local” 即可进入到相应功能的设置页面。</p>
<h6 id="Map-Remote"><a href="#Map-Remote" class="headerlink" title="Map Remote"></a>Map Remote</h6><p>对于 Map Remote 功能，我们需要分别填写网络重定向的源地址和目的地址，对于不需要限制的条件，可以留空。<br><img src="/2017/04/25/Charles常用的九大功能/MapRemote.png" alt="MapRemote" title="MapRemote"></p>
<h6 id="Map-Local"><a href="#Map-Local" class="headerlink" title="Map Local"></a>Map Local</h6><p>对于 Map Local 功能，我们需要填写的重定向的源地址和本地的目标文件。对于有一些复杂的网络请求结果，我们可以先使用 Charles 提供的 “Save Response…” 功能，将请求结果保存到本地（如下图所示），然后稍加修改，成为我们的目标映射文件。</p>
<h5 id="Rewrite-功能"><a href="#Rewrite-功能" class="headerlink" title="Rewrite 功能"></a>Rewrite 功能</h5><p>Rewrite 功能功能适合对某一类网络请求进行一些正则替换，以达到修改结果的目的。<br><img src="/2017/04/25/Charles常用的九大功能/RewriteRule.png" alt="RewriteRule" title="RewriteRule"><br>设置完后，每次请求到对应的值就会被替代。</p>
<h5 id="Breakpoints-功能"><a href="#Breakpoints-功能" class="headerlink" title="Breakpoints 功能"></a>Breakpoints 功能</h5><p>上面提供的 Rewrite 功能最适合做批量和长期的替换，但是很多时候，我们只是想临时修改一次网络请求结果，这个时候，使用 Rewrite 功能虽然也可以达到目的，但是过于麻烦，对于临时性的修改，我们最好使用 Breakpoints 功能。<br>Breakpoints 功能类似我们在 Xcode 中设置的断点一样，当指定的网络请求发生时，Charles 会截获该请求，这个时候，我们可以在 Charles 中临时修改网络请求的返回内容。</p>
<h6 id="breakpoints⭐️-方法实践过程"><a href="#breakpoints⭐️-方法实践过程" class="headerlink" title="breakpoints⭐️ 方法实践过程"></a>breakpoints⭐️ 方法实践过程</h6><p>在charless上要mock数据的url上右点击，弹出的列表选中breakpoint，要点击两次 Excute 才能完成一次 HTTP 请求，原因是，Charles 的断点功能分别提供了修改 HTTP Request 和 Response 的机会映射本地文件。<br><img src="/2017/04/25/Charles常用的九大功能/EditRequest.png" alt="EditRequest" title="EditRequest"><br><img src="/2017/04/25/Charles常用的九大功能/EditResponse.png" alt="EditResponse" title="EditResponse"><br>通过修改 response 就可以修改请求的结果成为自己想要的结果，从而在客户端上查看效果。</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;过滤网络请求&quot;&gt;&lt;a href=&quot;#过滤网络请求&quot; class=&quot;headerlink&quot; title=&quot;过滤网络请求&quot;&gt;&lt;/a&gt;过滤网络请求&lt;/h5&gt;&lt;h6 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一
    
    </summary>
    
      <category term="Charles" scheme="http://shadow000902.space/categories/Charles/"/>
    
    
      <category term="charles" scheme="http://shadow000902.space/tags/charles/"/>
    
  </entry>
  
  <entry>
    <title>vim的基本使用</title>
    <link href="http://shadow000902.space/2017/03/14/vim%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://shadow000902.space/2017/03/14/vim的基本使用/</id>
    <published>2017-03-14T15:22:02.000Z</published>
    <updated>2017-06-24T07:10:46.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">i                        # 进入插入模式  </div><div class="line">:q                       # 退出vim  </div><div class="line">:w                       # 保存  </div><div class="line">:wq                      # 保存并退出  </div><div class="line">:set syn=c               # 设置c风格的语法高亮</div></pre></td></tr></table></figure>
<pre><code>&lt;!--more--&gt;
</code></pre><h4 id="vim编辑器配置"><a href="#vim编辑器配置" class="headerlink" title="vim编辑器配置"></a>vim编辑器配置</h4><p>配置vim的配置文件【Mac】<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~&gt; vim ~/.vimrc                     <span class="comment"># 默认不存在该文件，需要新建。该文件中不允许出现中文的空格和符合</span></div></pre></td></tr></table></figure></p>
<p>添加如下内容<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">syntax on                           "开启语法高亮  </div><div class="line">set tabstop=4                       "设置tab为4个字符</div><div class="line">set softtabstop=4</div><div class="line">set shiftwidth=4                    "缩进宽度  </div><div class="line">set autoindent                      "自动缩进  </div><div class="line">set cindent                         "c风格缩进  </div><div class="line">set nu                              "显示行号  </div><div class="line">set vb t_vb=  "close the bell       "关闭vim响铃</div></pre></td></tr></table></figure></p>
<h4 id="移动光标类命令"><a href="#移动光标类命令" class="headerlink" title="移动光标类命令"></a>移动光标类命令</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">h                        # 光标左移一个字符</div><div class="line">l                        # 光标右移一个字符</div><div class="line">space                    # 光标右移一个字符</div><div class="line">Backspace                # 光标左移一个字符</div><div class="line">k或Ctrl+p                 # 光标上移一行 </div><div class="line">j或Ctrl+n                 # 光标下移一行 </div><div class="line">Enter                    # 光标下移一行 </div><div class="line">w或W                      # 光标右移一个字至字首 </div><div class="line">b或B                      # 光标左移一个字至字首 </div><div class="line">e或E                     # 光标右移一个字至字尾 </div><div class="line">)                       # 光标移至句尾 </div><div class="line">(                       # 光标移至句首 </div><div class="line">&#125;                       # 光标移至段落开头 </div><div class="line">&#123;                       # 光标移至段落结尾 </div><div class="line">nG                      # 光标移至第n行首 </div><div class="line">n+                      # 光标下移n行 </div><div class="line">n-                      # 光标上移n行 </div><div class="line">n$                      # 光标移至第n行尾 </div><div class="line">H                       # 光标移至屏幕顶行 </div><div class="line">M                       # 光标移至屏幕中间行 </div><div class="line">L                       # 光标移至屏幕最后行 </div><div class="line">0                       # （注意是数字零）光标移至当前行首 </div><div class="line">$                       # 光标移至当前行尾</div></pre></td></tr></table></figure>
<h4 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">x                        # 删除一个字符</div><div class="line">dd                       # 删除一行</div><div class="line">ndd                      # 删除光标所在行向下 n 行</div><div class="line">d1G                      # 删除光标所在行到第一行的所有数据</div><div class="line">dG                       # 删除光标所在行到最后一行的所有数据</div><div class="line">ctrl+v                   # 移动键盘上的“上下左右”键，将要删除的字符串选中，然后使用d就删除了</div></pre></td></tr></table></figure>
<h4 id="撤销命令"><a href="#撤销命令" class="headerlink" title="撤销命令"></a>撤销命令</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">u                        # 恢复一次删除，恢复多次可以按多次u</div><div class="line">ctrl+r                   # 恢复后又想删除</div></pre></td></tr></table></figure>
<h4 id="复制命令"><a href="#复制命令" class="headerlink" title="复制命令"></a>复制命令</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">yy                       # 复制光标所在的那一行</div><div class="line">nyy                      # 复制光标所在行向下 n 行</div><div class="line">y1G                      # 复制光标所在行到第一行的所有数据</div><div class="line">yG                       # 复制光标所在行到最后一行的所有数据</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; title=&quot;基本使用&quot;&gt;&lt;/a&gt;基本使用&lt;/h4&gt;&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
    
    </summary>
    
      <category term="Vim" scheme="http://shadow000902.space/categories/Vim/"/>
    
    
      <category term="vim" scheme="http://shadow000902.space/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Top 8 Diagrams for Understanding Java</title>
    <link href="http://shadow000902.space/2017/03/14/Top-8-Diagrams-for-Understanding-Java/"/>
    <id>http://shadow000902.space/2017/03/14/Top-8-Diagrams-for-Understanding-Java/</id>
    <published>2017-03-14T09:10:45.000Z</published>
    <updated>2017-06-24T07:10:45.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="String-Immutability【字符串不变性】"><a href="#String-Immutability【字符串不变性】" class="headerlink" title="String Immutability【字符串不变性】"></a>String Immutability【字符串不变性】</h4><p>The following diagram shows what happens for the following code:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String s = <span class="string">"abcd"</span>;</div><div class="line">s = s.concat(<span class="string">"ef"</span>);</div></pre></td></tr></table></figure></p>
<pre><code>&lt;!--more--&gt;
</code></pre><img src="/2017/03/14/Top-8-Diagrams-for-Understanding-Java/string-immutability.jpeg" alt="string-immutability" title="string-immutability">
<h4 id="The-equals-and-hashCode-Contract【equals-方法、hashCode-方法的区别】"><a href="#The-equals-and-hashCode-Contract【equals-方法、hashCode-方法的区别】" class="headerlink" title="The equals() and hashCode() Contract【equals()方法、hashCode()方法的区别】"></a>The equals() and hashCode() Contract【equals()方法、hashCode()方法的区别】</h4><p>HashCode is designed to improve performance. The contract between equals() and hasCode() is that:</p>
<ol>
<li>If two objects are equal, then they must have the same hash code.</li>
<li>If two objects have the same hashcode, they may or may not be equal.<img src="/2017/03/14/Top-8-Diagrams-for-Understanding-Java/java-hashcode.jpeg" alt="java-hashcode" title="java-hashcode">
</li>
</ol>
<h4 id="Java-Exception-Class-Hierarchy【Java异常类的层次结构】"><a href="#Java-Exception-Class-Hierarchy【Java异常类的层次结构】" class="headerlink" title="Java Exception Class Hierarchy【Java异常类的层次结构】"></a>Java Exception Class Hierarchy【Java异常类的层次结构】</h4><p>Red colored are checked exceptions which must either be caught or declared in the method’s throws clause.<br><img src="/2017/03/14/Top-8-Diagrams-for-Understanding-Java/Exception-Hierarchy-Diagram.jpeg" alt="Exception-Hierarchy-Diagram" title="Exception-Hierarchy-Diagram"></p>
<h4 id="Collections-Class-Hierarchy【集合类的层次结构】"><a href="#Collections-Class-Hierarchy【集合类的层次结构】" class="headerlink" title="Collections Class Hierarchy【集合类的层次结构】"></a>Collections Class Hierarchy【集合类的层次结构】</h4><p>Note the difference between Collections and Collection.<br><img src="/2017/03/14/Top-8-Diagrams-for-Understanding-Java/Collections.jpeg" alt="Collections" title="Collections"><br><img src="/2017/03/14/Top-8-Diagrams-for-Understanding-Java/java-collection-hierarchy.jpeg" alt="java-collection-hierarchy" title="java-collection-hierarchy"></p>
<h4 id="Java-synchronization【Java同步】"><a href="#Java-synchronization【Java同步】" class="headerlink" title="Java synchronization【Java同步】"></a>Java synchronization【Java同步】</h4><p>Java synchronization mechanism can be illustrated by an analogy to a building.<br><img src="/2017/03/14/Top-8-Diagrams-for-Understanding-Java/Java-Monitor.jpg" alt="Java-Monitor" title="Java-Monitor"></p>
<h4 id="Aliasing【别名】"><a href="#Aliasing【别名】" class="headerlink" title="Aliasing【别名】"></a>Aliasing【别名】</h4><p>Aliasing means there are multiple aliases to a location that can be updated, and these aliases have different types.<br><img src="/2017/03/14/Top-8-Diagrams-for-Understanding-Java/JavaAliasing.jpeg" alt="JavaAliasing" title="JavaAliasing"></p>
<h4 id="Stack-and-Heap【堆和栈】"><a href="#Stack-and-Heap【堆和栈】" class="headerlink" title="Stack and Heap【堆和栈】"></a>Stack and Heap【堆和栈】</h4><p>This diagram shows where methods and objects are in run-time memory.<br><img src="/2017/03/14/Top-8-Diagrams-for-Understanding-Java/Java-array-in-memory.png" alt="Java-array-in-memory" title="Java-array-in-memory"></p>
<h4 id="JVM-Run-Time-Data-Areas【Java虚拟机运行时数据区域】"><a href="#JVM-Run-Time-Data-Areas【Java虚拟机运行时数据区域】" class="headerlink" title="JVM Run-Time Data Areas【Java虚拟机运行时数据区域】"></a>JVM Run-Time Data Areas【Java虚拟机运行时数据区域】</h4><img src="/2017/03/14/Top-8-Diagrams-for-Understanding-Java/JVM-runtime-data-area.jpg" alt="JVM-runtime-data-area" title="JVM-runtime-data-area">
<hr>
<p><em>原文链接： programcreek 翻译： ImportNew.com - era_misa</em><br><em>译文链接： <a href="http://www.importnew.com/11725.html" target="_blank" rel="external">http://www.importnew.com/11725.html</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;String-Immutability【字符串不变性】&quot;&gt;&lt;a href=&quot;#String-Immutability【字符串不变性】&quot; class=&quot;headerlink&quot; title=&quot;String Immutability【字符串不变性】&quot;&gt;&lt;/a&gt;Strin
    
    </summary>
    
      <category term="Java" scheme="http://shadow000902.space/categories/Java/"/>
    
    
      <category term="java" scheme="http://shadow000902.space/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>应用重签名工具re-sign.jar使用</title>
    <link href="http://shadow000902.space/2017/03/05/%E5%BA%94%E7%94%A8%E9%87%8D%E7%AD%BE%E5%90%8D%E5%B7%A5%E5%85%B7re-sign-jar%E4%BD%BF%E7%94%A8/"/>
    <id>http://shadow000902.space/2017/03/05/应用重签名工具re-sign-jar使用/</id>
    <published>2017-03-05T06:46:33.000Z</published>
    <updated>2017-06-24T07:10:46.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="下载-re-sign-jar"><a href="#下载-re-sign-jar" class="headerlink" title="下载 re-sign.jar"></a>下载 re-sign.jar</h4><p><a href="http://download.csdn.net/download/christopher_lv/8569477" target="_blank" rel="external">下载地址</a></p>
<h4 id="应用-re-sign-jar"><a href="#应用-re-sign-jar" class="headerlink" title="应用 re-sign.jar"></a>应用 re-sign.jar</h4><h5 id="把-re-sign-jar-放到-android-文件夹下"><a href="#把-re-sign-jar-放到-android-文件夹下" class="headerlink" title="把 re-sign.jar 放到 .android 文件夹下"></a>把 re-sign.jar 放到 .android 文件夹下</h5><pre><code>&lt;!--more--&gt;
</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  .android ll</div><div class="line">total 216</div><div class="line">-rw-r--r--   1 taoyi  staff   2.1K  7  5  2016 debug.keystore</div><div class="line">-rw-r--r--@  1 taoyi  staff    47K  3  4 22:35 re-sign.jar</div></pre></td></tr></table></figure>
<h5 id="运行-re-sign-jar"><a href="#运行-re-sign-jar" class="headerlink" title="运行 re-sign.jar"></a>运行 re-sign.jar</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> .android</div><div class="line">java -jar re-sign.jar</div></pre></td></tr></table></figure>
<h5 id="把应用拖放到窗口进行重签名"><a href="#把应用拖放到窗口进行重签名" class="headerlink" title="把应用拖放到窗口进行重签名"></a>把应用拖放到窗口进行重签名</h5><img src="/2017/03/05/应用重签名工具re-sign-jar使用/重签名工具使用.png" alt="重签名工具使用" title="重签名工具使用">
<p>重签名成功<br><img src="/2017/03/05/应用重签名工具re-sign-jar使用/重签名成功.png" alt="重签名成功" title="重签名成功"><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">➜  .android java -jar re-sign.jar                   </div><div class="line">Running jarsigner</div><div class="line">Command line: /Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/bin/jarsigner -keystore /Users/taoyi/.android/debug.keystore -storepass android -keypass android /var/folders/6c/t0zm0zy90p12fjr77h9qtktr0000gp/T/resigner3271202971406261445.apk androiddebugkey</div><div class="line">jarsigner finished with following output:</div><div class="line">jar å·²ç­¾åã</div><div class="line"></div><div class="line">è­¦å:</div><div class="line">æªæä¾ -tsa æ -tsacert, æ­¤ jar æ²¡ææ¶é´æ³ãå¦ææ²¡ææ¶é´æ³, åå¨ç­¾åèè¯ä¹¦çå°ææ¥æ (2046-06-28) æä»¥åçä»»ä½æ¤éæ¥æä¹å, ç¨æ·å¯è½æ æ³éªè¯æ­¤ jarã</div><div class="line">Running zipalign</div><div class="line">Command line: /opt/android-sdk-macosx/tools/zipalign <span class="_">-f</span> 4 /var/folders/6c/t0zm0zy90p12fjr77h9qtktr0000gp/T/resigner3271202971406261445.apk /Users/taoyi/git_projects/dfcAppium/res/app/android/fengche_debug.apk</div><div class="line">zipalign finished with following output:</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;下载-re-sign-jar&quot;&gt;&lt;a href=&quot;#下载-re-sign-jar&quot; class=&quot;headerlink&quot; title=&quot;下载 re-sign.jar&quot;&gt;&lt;/a&gt;下载 re-sign.jar&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://downlo
    
    </summary>
    
      <category term="重签名" scheme="http://shadow000902.space/categories/%E9%87%8D%E7%AD%BE%E5%90%8D/"/>
    
    
      <category term="重签名" scheme="http://shadow000902.space/tags/%E9%87%8D%E7%AD%BE%E5%90%8D/"/>
    
      <category term="re-sign.jar" scheme="http://shadow000902.space/tags/re-sign-jar/"/>
    
  </entry>
  
  <entry>
    <title>app-inspector元素定位工具使用介绍</title>
    <link href="http://shadow000902.space/2017/02/13/app-inspector%E5%85%83%E7%B4%A0%E5%AE%9A%E4%BD%8D%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/"/>
    <id>http://shadow000902.space/2017/02/13/app-inspector元素定位工具使用介绍/</id>
    <published>2017-02-12T16:00:45.000Z</published>
    <updated>2017-06-24T07:10:45.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="前置安装配置，包括如下："><a href="#前置安装配置，包括如下：" class="headerlink" title="前置安装配置，包括如下："></a>前置安装配置，包括如下：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">info AppiumDoctor  ✔ The Node.js binary was found at: /usr/<span class="built_in">local</span>/bin/node</div><div class="line">info AppiumDoctor  ✔ Node version is 6.9.0</div><div class="line">info AppiumDoctor  ✔ Xcode is installed at: /Applications/Xcode.app/Contents/Developer</div><div class="line">info AppiumDoctor  ✔ Xcode Command Line Tools are installed.</div><div class="line">info AppiumDoctor  ✔ DevToolsSecurity is enabled.</div><div class="line">info AppiumDoctor  ✔ The Authorization DB is <span class="built_in">set</span> up properly.</div><div class="line">info AppiumDoctor  ✔ Carthage was found at: /usr/<span class="built_in">local</span>/bin/carthage</div><div class="line">info AppiumDoctor  ✔ HOME is <span class="built_in">set</span> to: /Users/taoyi</div><div class="line">info AppiumDoctor  ✔ ANDROID_HOME is <span class="built_in">set</span> to: /opt/android-sdk-macosx</div><div class="line">info AppiumDoctor  ✔ JAVA_HOME is <span class="built_in">set</span> to: /Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home</div><div class="line">info AppiumDoctor  ✔ adb exists at: /opt/android-sdk-macosx/platform-tools/adb</div><div class="line">info AppiumDoctor  ✔ android exists at: /opt/android-sdk-macosx/tools/android</div><div class="line">info AppiumDoctor  ✔ emulator exists at: /opt/android-sdk-macosx/tools/emulator</div><div class="line">info AppiumDoctor  ✔ B<span class="keyword">in</span> directory of <span class="variable">$JAVA_HOME</span> is <span class="built_in">set</span></div></pre></td></tr></table></figure>
<pre><code>&lt;!--more--&gt;
</code></pre><h5 id="安装app-inspector"><a href="#安装app-inspector" class="headerlink" title="安装app-inspector"></a>安装app-inspector</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g app-inspector</div></pre></td></tr></table></figure>
<h5 id="获取设备UDID"><a href="#获取设备UDID" class="headerlink" title="获取设备UDID"></a>获取设备UDID</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb devices                 <span class="comment"># android</span></div><div class="line">xcrun simctl list           <span class="comment"># IOS</span></div></pre></td></tr></table></figure>
<h5 id="启动app-inspector"><a href="#启动app-inspector" class="headerlink" title="启动app-inspector"></a>启动app-inspector</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app-inspector -u YOUR-DEVICE-ID</div></pre></td></tr></table></figure>
<p>启动成功<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">➜  ~ app-inspector -u 0862E662-79FE-4831-9EF7-D0D0D1055FFF</div><div class="line">&gt;&gt; xctest-client start with port: 8900</div><div class="line">&gt;&gt; WebDriverAgent version: 1.0.41</div><div class="line">&gt;&gt; iOS device started: 0862E662-79FE-4831-9EF7-D0D0D1055FFF</div><div class="line">&gt;&gt; inspector start at: http://192.168.31.20:5678</div><div class="line">  &lt;-- GET /</div><div class="line">  --&gt; GET / 200</div><div class="line">  ...</div></pre></td></tr></table></figure></p>
<p>浏览器查看结果如图：<br><img src="/2017/02/13/app-inspector元素定位工具使用介绍/app-inspector获取IOS元素示例.png" alt="app-inspector获取IOS元素示例" title="app-inspector获取IOS元素示例"></p>
<p>ANDROID启动成功<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">➜  ~ app-inspector -u 127.0.0.1:62001</div><div class="line">INSTRUMENTATION_STATUS: numtests=1</div><div class="line">&gt;&gt; socket server ready</div><div class="line">&gt;&gt; socket client ready</div><div class="line">&gt;&gt; Android device started: 127.0.0.1:62001</div><div class="line">&gt;&gt; inspector start at: http://172.16.8.99:5678</div><div class="line">  &lt;-- GET /</div><div class="line">recive: &#123;<span class="string">"cmd"</span>:<span class="string">"getSource"</span>,<span class="string">"args"</span>:&#123;&#125;&#125;</div><div class="line"></div><div class="line"><span class="built_in">return</span>: &#123;<span class="string">"data"</span>:&#123;<span class="string">"value"</span>:<span class="literal">true</span>,<span class="string">"status"</span>:0&#125;,<span class="string">"success"</span>:<span class="literal">true</span>&#125;</div><div class="line"></div><div class="line">&gt;&gt; Dump Android XML success, save to /usr/<span class="built_in">local</span>/lib/node_modules/app-inspector/.temp/android.json</div><div class="line">  --&gt; GET / 200</div><div class="line">  &lt;-- GET /</div><div class="line">  ···</div></pre></td></tr></table></figure></p>
<p>浏览器查看结果如图：<br><img src="/2017/02/13/app-inspector元素定位工具使用介绍/app-inspector获取ANDROID元素示例.png" alt="app-inspector获取ANDROID元素示例" title="app-inspector获取ANDROID元素示例"></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;前置安装配置，包括如下：&quot;&gt;&lt;a href=&quot;#前置安装配置，包括如下：&quot; class=&quot;headerlink&quot; title=&quot;前置安装配置，包括如下：&quot;&gt;&lt;/a&gt;前置安装配置，包括如下：&lt;/h5&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;t
    
    </summary>
    
      <category term="App-inspector" scheme="http://shadow000902.space/categories/App-inspector/"/>
    
    
      <category term="app-inspector" scheme="http://shadow000902.space/tags/app-inspector/"/>
    
  </entry>
  
  <entry>
    <title>Extent测试报告使用</title>
    <link href="http://shadow000902.space/2017/01/18/Extent%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A%E4%BD%BF%E7%94%A8/"/>
    <id>http://shadow000902.space/2017/01/18/Extent测试报告使用/</id>
    <published>2017-01-17T16:13:28.000Z</published>
    <updated>2017-06-24T07:10:46.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装MongoDB数据库"><a href="#安装MongoDB数据库" class="headerlink" title="安装MongoDB数据库"></a>安装MongoDB数据库</h4><ol>
<li>下载<a href="https://fastdl.mongodb.org/osx/mongodb-osx-x86_64-3.4.1.tgz" target="_blank" rel="external">MongoDB</a></li>
<li><p>安装<code>MongoDB</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tar -zxvf mongodb-osx-x86_64-3.4.1.tgz</div><div class="line">mv mongodb-osx-x86_64-3.4.1 /opt/mongodb-3.4.1/</div></pre></td></tr></table></figure>
 <a id="more"></a>
</li>
<li><p>把<code>MongoDB</code>加入环境变量</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim ~/.bash_profile</div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> PATH=/opt/mongodb-3.4.1/bin:<span class="variable">$PATH</span></div></pre></td></tr></table></figure>
<ol>
<li><p>创建<code>MongoDB</code>数据库存放数据的目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir /data/mongodb</div></pre></td></tr></table></figure>
</li>
<li><p>启动<code>MongoDB</code>数据库，并把目录指向指定的目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --dbpath /data/mongodb/</div></pre></td></tr></table></figure>
</li>
</ol>
<p>默认方式启动<code>MongoDB</code>的话，目录会默认指向<code>/data/db/</code>目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod          <span class="comment"># 默认方式启动</span></div></pre></td></tr></table></figure></p>
<ol>
<li>启动成功的日志<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">➜  ~ mongod --dbpath /data/mongodb/</div><div class="line">2017-01-22T00:25:23.191+0800 I CONTROL  [initandlisten] MongoDB starting : pid=2411 port=27017 dbpath=/data/mongodb/ 64-bit host=TaoYi-Mac.local</div><div class="line">2017-01-22T00:25:23.192+0800 I CONTROL  [initandlisten] db version v3.4.1</div><div class="line">2017-01-22T00:25:23.192+0800 I CONTROL  [initandlisten] git version: 5e103c4f5583e2566a45d740225dc250baacfbd7</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="安装ExtentX服务"><a href="#安装ExtentX服务" class="headerlink" title="安装ExtentX服务"></a>安装ExtentX服务</h4><h5 id="下载ExtentX代码"><a href="#下载ExtentX代码" class="headerlink" title="下载ExtentX代码"></a>下载<code>ExtentX</code>代码</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/anshooarora/extentx.git</div></pre></td></tr></table></figure>
<h5 id="启动ExtentX服务"><a href="#启动ExtentX服务" class="headerlink" title="启动ExtentX服务"></a>启动<code>ExtentX</code>服务</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> extentx</div><div class="line">node app.js</div></pre></td></tr></table></figure>
<h5 id="启动成功的日志"><a href="#启动成功的日志" class="headerlink" title="启动成功的日志"></a>启动成功的日志</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">➜  extentx git:(master) node app.js</div><div class="line">info:</div><div class="line">info:                .-..-.</div><div class="line">info:</div><div class="line">info:    Sails              &lt;|    .-..-.</div><div class="line">info:    v0.12.4             |\</div><div class="line">info:                       /|.\</div><div class="line">info:                      / || \</div><div class="line">info:                    ,<span class="string">'  |'</span>  \</div><div class="line">info:                 .-<span class="string">'.-==|/_--'</span></div><div class="line">info:                 --<span class="string">'-------'</span></div><div class="line">info:    __---___--___---___--___---___--___</div><div class="line">info:  ____---___--___---___--___---___--___-__</div><div class="line">info:</div><div class="line">info: Server lifted <span class="keyword">in</span> `/Users/taoyi/git_projects/ExtentX`</div><div class="line">info: To see your app, visit http://localhost:1337</div><div class="line">info: To shut down Sails, press &lt;CTRL&gt; + C at any time.</div><div class="line"></div><div class="line">debug: -------------------------------------------------------</div><div class="line">debug: :: Sun Jan 22 2017 00:27:28 GMT+0800 (CST)</div><div class="line"></div><div class="line">debug: Environment : development</div><div class="line">debug: Port        : 1337</div><div class="line">debug: -------------------------------------------------------</div></pre></td></tr></table></figure>
<p>启动<code>ExtentX</code>服务时，可能会报一些错，是因为少一些依赖的包，使用<code>npm install 错误提示的包名</code>安装好需要的依赖，之后就可以正常启动了</p>
<h5 id="ExtentX服务默认的用户名和密码"><a href="#ExtentX服务默认的用户名和密码" class="headerlink" title="ExtentX服务默认的用户名和密码"></a><code>ExtentX</code>服务默认的用户名和密码</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">user:       root</div><div class="line">password:   password</div></pre></td></tr></table></figure>
<h4 id="测试框架集成extent测试报告框架"><a href="#测试框架集成extent测试报告框架" class="headerlink" title="测试框架集成extent测试报告框架"></a>测试框架集成extent测试报告框架</h4><h5 id="pom-xml文件中增加依赖"><a href="#pom-xml文件中增加依赖" class="headerlink" title="pom.xml文件中增加依赖"></a><code>pom.xml</code>文件中增加依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.relevantcodes<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>extentreports<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.41.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="testng-xml文件中修改listeners"><a href="#testng-xml文件中修改listeners" class="headerlink" title="testng.xml文件中修改listeners"></a><code>testng.xml</code>文件中修改<code>listeners</code></h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">listeners</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- extent报告 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">listener</span> <span class="attr">class-name</span>=<span class="string">"com.souche.dfcAppium.plugins.extentReporter.ExtentTestNGITestListener"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">listeners</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="加载报告插件"><a href="#加载报告插件" class="headerlink" title="加载报告插件"></a>加载报告插件</h5><img src="/2017/01/18/Extent测试报告使用/报告插件存放位置.png" alt="报告插件存放位置" title="报告插件存放位置">]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;安装MongoDB数据库&quot;&gt;&lt;a href=&quot;#安装MongoDB数据库&quot; class=&quot;headerlink&quot; title=&quot;安装MongoDB数据库&quot;&gt;&lt;/a&gt;安装MongoDB数据库&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;下载&lt;a href=&quot;https://fastdl.mongodb.org/osx/mongodb-osx-x86_64-3.4.1.tgz&quot;&gt;MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装&lt;code&gt;MongoDB&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;tar -zxvf mongodb-osx-x86_64-3.4.1.tgz&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mv mongodb-osx-x86_64-3.4.1 /opt/mongodb-3.4.1/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="测试报告" scheme="http://shadow000902.space/categories/%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="测试报告" scheme="http://shadow000902.space/tags/%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>web.py数据库操作介绍</title>
    <link href="http://shadow000902.space/2017/01/11/web-py%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%E4%BB%8B%E7%BB%8D/"/>
    <id>http://shadow000902.space/2017/01/11/web-py数据库操作介绍/</id>
    <published>2017-01-11T12:35:36.000Z</published>
    <updated>2017-06-24T07:10:46.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装MySQL数据库"><a href="#安装MySQL数据库" class="headerlink" title="安装MySQL数据库"></a>安装MySQL数据库</h4><h5 id="本地数据库的安装MySQL"><a href="#本地数据库的安装MySQL" class="headerlink" title="本地数据库的安装MySQL"></a>本地数据库的安装<a href="http://dev.mysql.com/downloads/mysql/" target="_blank" rel="external">MySQL</a></h5><p>安装完后，会给出一个默认密码：</p>
<pre><code>&lt;!--more--&gt;
</code></pre><img src="/2017/01/11/web-py数据库操作介绍/初始化密码.png" alt="初始化密码" title="初始化密码">
<h5 id="启动本机上的MySQL"><a href="#启动本机上的MySQL" class="headerlink" title="启动本机上的MySQL"></a>启动本机上的MySQL</h5><img src="/2017/01/11/web-py数据库操作介绍/启动MySQL-1.png" alt="启动MySQL-1" title="启动MySQL-1">
<img src="/2017/01/11/web-py数据库操作介绍/启动MySQL-2.png" alt="启动MySQL-2" title="启动MySQL-2">
<img src="/2017/01/11/web-py数据库操作介绍/启动MySQL-3.png" alt="启动MySQL-3" title="启动MySQL-3">
<h5 id="修改MySQL默认密码"><a href="#修改MySQL默认密码" class="headerlink" title="修改MySQL默认密码"></a>修改MySQL默认密码</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">➜  ~ mysql -u root -p       </div><div class="line">Enter password:         <span class="comment"># 输入刚才安装后生成的密码</span></div><div class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</div><div class="line">Your MySQL connection id is 18</div><div class="line">Server version: 5.7.17 MySQL Community Server (GPL)</div><div class="line"></div><div class="line">Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.</div><div class="line"></div><div class="line">Oracle is a registered trademark of Oracle Corporation and/or its</div><div class="line">affiliates. Other names may be trademarks of their respective</div><div class="line">owners.</div><div class="line"></div><div class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> help. Type <span class="string">'\c'</span> to clear the current input statement.</div><div class="line"></div><div class="line">mysql&gt; SET PASSWORD = PASSWORD(<span class="string">'123456'</span>);           <span class="comment"># 重置密码</span></div></pre></td></tr></table></figure>
<p>这样就把MySQL的登录密码设置成了<code>123456</code></p>
<h4 id="安装Web-py及相关数据库操作模块"><a href="#安装Web-py及相关数据库操作模块" class="headerlink" title="安装Web.py及相关数据库操作模块"></a>安装Web.py及相关数据库操作模块</h4><ol>
<li><p>安装<code>web.py</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">easy_install web.py</div></pre></td></tr></table></figure>
</li>
<li><p>安装<code>MySQLdb</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">easy_install MySQLdb</div></pre></td></tr></table></figure>
</li>
<li><p>安装<code>psycopg2</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">easy_install psycopg2</div></pre></td></tr></table></figure>
</li>
<li><p>安装<code>DBUtils</code>，用于连接池<code>database pool</code>功能</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">easy_install DBUtiles</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="web-py操作数据库"><a href="#web-py操作数据库" class="headerlink" title="web.py操作数据库"></a>web.py操作数据库</h4><h5 id="导入模块，定义数据库连接db"><a href="#导入模块，定义数据库连接db" class="headerlink" title="导入模块，定义数据库连接db"></a>导入模块，定义数据库连接<code>db</code></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import web</div><div class="line">db = web.database(dbn = <span class="string">'mysql'</span>, db = <span class="string">'mytable'</span>, user = <span class="string">'root'</span>, pw = <span class="string">'123456'</span>)</div><div class="line"><span class="comment"># dbn 用于指定数据库类型</span></div></pre></td></tr></table></figure>
<h5 id="select查询"><a href="#select查询" class="headerlink" title="select查询"></a><code>select</code>查询</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查询表</span></div><div class="line">entries = db.select(<span class="string">'mytable'</span>)</div><div class="line"></div><div class="line"><span class="comment"># where 条件</span></div><div class="line">myvar = dict(name = <span class="string">"Bob"</span>)</div><div class="line">results = db.select(<span class="string">'mytable'</span>, myvar, where = <span class="string">"name = $name"</span>)</div><div class="line">results = db.select(<span class="string">'mytable'</span>, where = <span class="string">"id&gt;100"</span>)</div><div class="line"></div><div class="line"><span class="comment"># 查询具体列</span></div><div class="line">results = db.select(<span class="string">'mytable'</span>, what = <span class="string">"id, name"</span>)</div><div class="line"></div><div class="line"><span class="comment"># order by</span></div><div class="line">results = db.select(<span class="string">'mytable'</span>, order = <span class="string">"post_date DESC"</span>)</div><div class="line"></div><div class="line"><span class="comment"># group</span></div><div class="line">results = db.select(<span class="string">'mytable'</span>, group = <span class="string">"color"</span>)</div><div class="line"></div><div class="line"><span class="comment"># limit</span></div><div class="line">results = db.select(<span class="string">'mytable'</span>, limit = <span class="number">10</span>)</div><div class="line"></div><div class="line"><span class="comment"># offset</span></div><div class="line">results = db.select(<span class="string">'mytable'</span>, offset = <span class="number">10</span>)</div></pre></td></tr></table></figure>
<h5 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">db.insert(<span class="string">'user'</span>, name = <span class="string">'TY'</span>, age = <span class="number">28</span>, passwd = <span class="string">'123456'</span>, email = <span class="string">'526077432@qq.com'</span>)</div><div class="line"><span class="comment"># 插入利用了Python的**kw提供字段值，非常方便</span></div></pre></td></tr></table></figure>
<h5 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">db.update(<span class="string">'mytable'</span>, where = <span class="string">"id = 10"</span>, value1 = <span class="string">"foo"</span>)</div><div class="line">db.update(<span class="string">'user'</span>, where = <span class="string">'id = $id'</span>, vars = &#123;<span class="string">'id'</span> : <span class="number">100</span>&#125;, name = <span class="string">'TY001'</span>, age = <span class="number">29</span>)</div><div class="line"><span class="comment"># update也充分利用了Python的**kw参数，只有传入的**kw才被update，其他字段保持不变。</span></div><div class="line"><span class="comment"># where和vars负责where语句的生成和绑定参数</span></div></pre></td></tr></table></figure>
<h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">db.delete(<span class="string">'mytable'</span>, where = <span class="string">"id = 10"</span>)</div><div class="line">db.delete(<span class="string">'user'</span>, where = <span class="string">'id = $id'</span>, vars = &#123;<span class="string">'id'</span>:<span class="number">100</span>&#125;)</div></pre></td></tr></table></figure>
<h5 id="复杂查询"><a href="#复杂查询" class="headerlink" title="复杂查询"></a>复杂查询</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># count</span></div><div class="line">results = db.query(<span class="string">"SELECT COUNT(*) AS total_users FROM users"</span>)</div><div class="line"><span class="keyword">print</span> results[<span class="number">0</span>].total_users</div><div class="line"></div><div class="line"><span class="comment"># join</span></div><div class="line">results = db.query(<span class="string">"SELECT * FROM entries JOIN users WHERE entries.author_id = users.id"</span>)</div><div class="line"></div><div class="line"><span class="comment"># 防止SQL注入</span></div><div class="line">results = db.query(<span class="string">"SELECT * FROM entries WHERE id = $id"</span>, vars = &#123;<span class="string">'id'</span>:<span class="number">10</span>&#125;)</div></pre></td></tr></table></figure>
<h5 id="多数据库操作（web-py大于0-3）"><a href="#多数据库操作（web-py大于0-3）" class="headerlink" title="多数据库操作（web.py大于0.3）"></a>多数据库操作（web.py大于0.3）</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">db1 = web.database(dbn = <span class="string">'mysql'</span>, db = <span class="string">'dbname1'</span>, user = <span class="string">'foo'</span>)</div><div class="line">db2 = web.database(dbn = <span class="string">'mysql'</span>, db = <span class="string">'dbname2'</span>, user = <span class="string">'foo'</span>)</div><div class="line"></div><div class="line"><span class="keyword">print</span> db1.select(<span class="string">'foo'</span>, where = <span class="string">'id = 1'</span>)</div><div class="line"><span class="keyword">print</span> db2.select(<span class="string">'bar'</span>, where = <span class="string">'id = 5'</span>)</div></pre></td></tr></table></figure>
<h5 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">t = db.transaction()</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    db.insert(<span class="string">'person'</span>, name = <span class="string">'foo'</span>)</div><div class="line">    db.insert(<span class="string">'person'</span>, name = <span class="string">'bar'</span>)</div><div class="line"><span class="keyword">except</span>:</div><div class="line">    t.rollback()</div><div class="line">    <span class="keyword">raise</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    t.commit()</div><div class="line"></div><div class="line"><span class="comment"># Python 2.5+ 可以用with</span></div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> with_statement</div><div class="line"><span class="keyword">with</span> db.transaction():</div><div class="line">    db.insert(<span class="string">'person'</span>, name = <span class="string">'foo'</span>)</div><div class="line">    db.insert(<span class="string">'person'</span>, name = <span class="string">'bar'</span>)</div></pre></td></tr></table></figure>
<p>和Java比，web.py的db操作非常简单，这主要得益于python的**kw参数和内建的dict支持（对应Java的Map）。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;安装MySQL数据库&quot;&gt;&lt;a href=&quot;#安装MySQL数据库&quot; class=&quot;headerlink&quot; title=&quot;安装MySQL数据库&quot;&gt;&lt;/a&gt;安装MySQL数据库&lt;/h4&gt;&lt;h5 id=&quot;本地数据库的安装MySQL&quot;&gt;&lt;a href=&quot;#本地数据库的安装
    
    </summary>
    
      <category term="Web.py" scheme="http://shadow000902.space/categories/Web-py/"/>
    
      <category term="数据库" scheme="http://shadow000902.space/categories/Web-py/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="web.py" scheme="http://shadow000902.space/tags/web-py/"/>
    
      <category term="数据库" scheme="http://shadow000902.space/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>八大排序算法的Python实现</title>
    <link href="http://shadow000902.space/2017/01/02/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84Python%E5%AE%9E%E7%8E%B0/"/>
    <id>http://shadow000902.space/2017/01/02/八大排序算法的Python实现/</id>
    <published>2017-01-02T08:00:21.000Z</published>
    <updated>2017-06-24T07:10:46.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(lists)</span>:</span></div><div class="line">    <span class="comment"># 冒泡排序</span></div><div class="line">    count = len(lists)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, count):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, count):</div><div class="line">            <span class="keyword">if</span> lists[i] &gt; lists[j]:</div><div class="line">                lists[i], lists[j] = lists[j], lists[i]</div><div class="line">    <span class="keyword">return</span> lists</div></pre></td></tr></table></figure></p>
<pre><code>&lt;!--more--&gt;
</code></pre><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(lists, left, right)</span>:</span></div><div class="line">    <span class="comment"># 快速排序</span></div><div class="line">    <span class="keyword">if</span> left &gt;= right:</div><div class="line">        <span class="keyword">return</span> lists</div><div class="line">    key = lists[left]</div><div class="line">    low = left</div><div class="line">    high = right</div><div class="line">    <span class="keyword">while</span> left &lt; right:</div><div class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> lists[right] &gt;= key:</div><div class="line">            right -= <span class="number">1</span></div><div class="line">        lists[left] = lists[right]</div><div class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> lists[left] &lt;= key:</div><div class="line">            left += <span class="number">1</span></div><div class="line">        lists[right] = lists[left]</div><div class="line">    lists[right] = key</div><div class="line">    quick_sort(lists, low, left - <span class="number">1</span>)</div><div class="line">    quick_sort(lists, left + <span class="number">1</span>, high)</div><div class="line">    <span class="keyword">return</span> lists</div></pre></td></tr></table></figure></p>
<h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><p>插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序，时间复杂度为O(n^2)。是稳定的排序方法。插入算法把要排序的数组分成两部分：第一部分包含了这个数组的所有元素，但将最后一个元素除外（让数组多一个空间才有插入的位置），而第二部分就只包含这一个元素（即待插入元素）。在第一部分排序完成后，再将这个最后元素插入到已排好序的第一部分中。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(lists)</span>:</span></div><div class="line">    <span class="comment"># 插入排序</span></div><div class="line">    count = len(lists)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, count):</div><div class="line">        key = lists[i]</div><div class="line">        j = i - <span class="number">1</span></div><div class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span>:</div><div class="line">            <span class="keyword">if</span> lists[j] &gt; key:</div><div class="line">                lists[j + <span class="number">1</span>] = lists[j]</div><div class="line">                lists[j] = key</div><div class="line">            j -= <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> lists</div></pre></td></tr></table></figure></p>
<h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h4><p>希尔排序(Shell Sort)是插入排序的一种。也称缩小增量排序，是直接插入排序算法的一种更高效的改进版本。希尔排序是非稳定排序算法。该方法因DL．Shell于1959年提出而得名。 希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_sort</span><span class="params">(lists)</span>:</span></div><div class="line">    <span class="comment"># 希尔排序</span></div><div class="line">    count = len(lists)</div><div class="line">    step = <span class="number">2</span></div><div class="line">    group = count / step</div><div class="line">    <span class="keyword">while</span> group &gt; <span class="number">0</span>:</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, group):</div><div class="line">            j = i + group</div><div class="line">            <span class="keyword">while</span> j &lt; count:</div><div class="line">                k = j - group</div><div class="line">                key = lists[j]</div><div class="line">                <span class="keyword">while</span> k &gt;= <span class="number">0</span>:</div><div class="line">                    <span class="keyword">if</span> lists[k] &gt; key:</div><div class="line">                        lists[k + group] = lists[k]</div><div class="line">                        lists[k] = key</div><div class="line">                    k -= group</div><div class="line">                j += group</div><div class="line">        group /= step</div><div class="line">    <span class="keyword">return</span> lists</div></pre></td></tr></table></figure></p>
<h4 id="直接选择排序"><a href="#直接选择排序" class="headerlink" title="直接选择排序"></a>直接选择排序</h4><p>基本思想：第1趟，在待排序记录r1 ~ r[n]中选出最小的记录，将它与r1交换；第2趟，在待排序记录r2 ~ r[n]中选出最小的记录，将它与r2交换；以此类推，第i趟在待排序记录r[i] ~ r[n]中选出最小的记录，将它与r[i]交换，使有序序列不断增长直到全部排序完毕。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span><span class="params">(lists)</span>:</span></div><div class="line">    <span class="comment"># 选择排序</span></div><div class="line">    count = len(lists)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, count):</div><div class="line">        min = i</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, count):</div><div class="line">            <span class="keyword">if</span> lists[min] &gt; lists[j]:</div><div class="line">                min = j</div><div class="line">        lists[min], lists[i] = lists[i], lists[min]</div><div class="line">    <span class="keyword">return</span> lists</div></pre></td></tr></table></figure></p>
<h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><p>堆排序(Heapsort)是指利用堆积树（堆）这种数据结构所设计的一种排序算法，它是选择排序的一种。可以利用数组的特点快速定位指定索引的元素。堆分为大根堆和小根堆，是完全二叉树。大根堆的要求是每个节点的值都不大于其父节点的值，即A[PARENT[i]] &gt;= A[i]。在数组的非降序排序中，需要使用的就是大根堆，因为根据大根堆的要求可知，最大的值一定在堆顶。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 调整堆</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">adjust_heap</span><span class="params">(lists, i, size)</span>:</span></div><div class="line">    lchild = <span class="number">2</span> * i + <span class="number">1</span></div><div class="line">    rchild = <span class="number">2</span> * i + <span class="number">2</span></div><div class="line">    max = i</div><div class="line">    <span class="keyword">if</span> i &lt; size / <span class="number">2</span>:</div><div class="line">        <span class="keyword">if</span> lchild &lt; size <span class="keyword">and</span> lists[lchild] &gt; lists[max]:</div><div class="line">            max = lchild</div><div class="line">        <span class="keyword">if</span> rchild &lt; size <span class="keyword">and</span> lists[rchild] &gt; lists[max]:</div><div class="line">            max = rchild</div><div class="line">        <span class="keyword">if</span> max != i:</div><div class="line">            lists[max], lists[i] = lists[i], lists[max]</div><div class="line">            adjust_heap(lists, max, size)</div><div class="line"><span class="comment"># 创建堆</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_heap</span><span class="params">(lists, size)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, (size/<span class="number">2</span>))[::<span class="number">-1</span>]:</div><div class="line">        adjust_heap(lists, i, size)</div><div class="line"><span class="comment"># 堆排序</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span><span class="params">(lists)</span>:</span></div><div class="line">    size = len(lists)</div><div class="line">    build_heap(lists, size)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, size)[::<span class="number">-1</span>]:</div><div class="line">        lists[<span class="number">0</span>], lists[i] = lists[i], lists[<span class="number">0</span>]</div><div class="line">        adjust_heap(lists, <span class="number">0</span>, i)</div></pre></td></tr></table></figure></p>
<h4 id="归并排序算法"><a href="#归并排序算法" class="headerlink" title="归并排序算法"></a>归并排序算法</h4><p>描述：归并排序是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。<br>归并过程为：比较a[i]和a[j]的大小，若a[i]≤a[j]，则将第一个有序表中的元素a[i]复制到r[k]中，并令i和k分别加上1；否则将第二个有序表中的元素a[j]复制到r[k]中，并令j和k分别加上1，如此循环下去，直到其中一个有序表取完，然后再将另一个有序表中剩余的元素复制到r中从下标k到下标t的单元。归并排序的算法我们通常用递归实现，先把待排序区间[s,t]以中点二分，接着把左边子区间排序，再把右边子区间排序，最后把左区间和右区间用一次归并操作合并成有序的区间[s,t]。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(left, right)</span>:</span></div><div class="line">    i, j = <span class="number">0</span>, <span class="number">0</span></div><div class="line">    result = []</div><div class="line">    <span class="keyword">while</span> i &lt; len(left) <span class="keyword">and</span> j &lt; len(right):</div><div class="line">        <span class="keyword">if</span> left[i] &lt;= right[j]:</div><div class="line">            result.append(left[i])</div><div class="line">            i += <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            result.append(right[j])</div><div class="line">            j += <span class="number">1</span></div><div class="line">    result += left[i:]</div><div class="line">    result += right[j:]</div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(lists)</span>:</span></div><div class="line">    <span class="comment"># 归并排序</span></div><div class="line">    <span class="keyword">if</span> len(lists) &lt;= <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> lists</div><div class="line">    num = len(lists) / <span class="number">2</span></div><div class="line">    left = merge_sort(lists[:num])</div><div class="line">    right = merge_sort(lists[num:])</div><div class="line">    <span class="keyword">return</span> merge(left, right)</div></pre></td></tr></table></figure></p>
<h4 id="基数排序算法"><a href="#基数排序算法" class="headerlink" title="基数排序算法"></a>基数排序算法</h4><p>基数排序（radix sort）属于“分配式排序”（distribution sort），又称“桶子法”（bucket sort）或bin sort，顾名思义，它是透过键值的部份资讯，将要排序的元素分配至某些“桶”中，藉以达到排序的作用，基数排序法是属于稳定性的排序，其时间复杂度为O (nlog(r)m)，其中r为所采取的基数，而m为堆数，在某些时候，基数排序法的效率高于其它的稳定性排序法。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> math</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">radix_sort</span><span class="params">(lists, radix=<span class="number">10</span>)</span>:</span></div><div class="line">    k = int(math.ceil(math.log(max(lists), radix)))</div><div class="line">    bucket = [[] <span class="keyword">for</span> i <span class="keyword">in</span> range(radix)]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, k+<span class="number">1</span>):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> lists:</div><div class="line">            bucket[j/(radix**(i<span class="number">-1</span>)) % (radix**i)].append(j)</div><div class="line">        <span class="keyword">del</span> lists[:]</div><div class="line">        <span class="keyword">for</span> z <span class="keyword">in</span> bucket:</div><div class="line">            lists += z</div><div class="line">            <span class="keyword">del</span> z[:]</div><div class="line">    <span class="keyword">return</span> lists</div></pre></td></tr></table></figure></p>
<h4 id="各种算法的时间复杂度"><a href="#各种算法的时间复杂度" class="headerlink" title="各种算法的时间复杂度"></a>各种算法的时间复杂度</h4>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h4&gt;&lt;p&gt;它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交
    
    </summary>
    
      <category term="Python" scheme="http://shadow000902.space/categories/Python/"/>
    
      <category term="排序" scheme="http://shadow000902.space/categories/Python/%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="python" scheme="http://shadow000902.space/tags/python/"/>
    
      <category term="排序" scheme="http://shadow000902.space/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>八大排序算法的Java实现</title>
    <link href="http://shadow000902.space/2017/01/02/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84Java%E5%AE%9E%E7%8E%B0/"/>
    <id>http://shadow000902.space/2017/01/02/八大排序算法的Java实现/</id>
    <published>2017-01-02T06:46:07.000Z</published>
    <updated>2017-06-24T07:10:45.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>　　冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。<br>　　冒泡排序的<strong>示例</strong>：<br><img src="http://upload-images.jianshu.io/upload_images/196518-49509183dfb68c64.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<pre><code>&lt;!--more--&gt;
</code></pre><p>冒泡排序的<strong>算法实现</strong>如下:【排序后，数组从小到大排列】</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 冒泡排序</div><div class="line"> * 比较相邻的元素。如果第一个比第二个大，就交换他们两个。  </div><div class="line"> * 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。  </div><div class="line"> * 针对所有的元素重复以上的步骤，除了最后一个。</div><div class="line"> * 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</div><div class="line"> * <span class="doctag">@param</span> numbers 需要排序的整型数组</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] numbers)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> size = numbers.length;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; size-<span class="number">1</span>; i ++)</div><div class="line">    &#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ;j &lt; size-<span class="number">1</span>-i ; j++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(numbers[j] &gt; numbers[j+<span class="number">1</span>])  <span class="comment">//交换两数位置</span></div><div class="line">        &#123;</div><div class="line">        temp = numbers[j];</div><div class="line">        numbers[j] = numbers[j+<span class="number">1</span>];</div><div class="line">        numbers[j+<span class="number">1</span>] = temp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p><strong>快速排序的基本思想</strong>：<br>      通过一趟排序将待排序记录分割成独立的两部分，其中一部分记录的关键字均比另一部分关键字小，则分别对这两部分继续进行排序，直到整个序列有序。<br>快速排序的<strong>示例</strong>：<br>（a）一趟排序的过程：<br><img src="http://upload-images.jianshu.io/upload_images/196518-d8f8ad1138df64c7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>（b）排序的全过程：<br><img src="http://upload-images.jianshu.io/upload_images/196518-d7667720de515784.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>　　把整个序列看做一个数组，把第零个位置看做中轴，和最后一个比，如果比它小交换，比它大不做任何处理；交换了以后再和小的那端比，比它小不交换，比他大交换。这样循环往复，一趟排序完成，左边就是比中轴小的，右边就是比中轴大的，然后再用分治法，分别对这两个独立的数组进行排序。</p>
<p>代码实现如下：</p>
<h5 id="查找中轴（最低位作为中轴）所在位置："><a href="#查找中轴（最低位作为中轴）所在位置：" class="headerlink" title="查找中轴（最低位作为中轴）所在位置："></a>查找中轴（最低位作为中轴）所在位置：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 查找出中轴（默认是最低位low）的在numbers数组排序后所在位置</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> numbers 带查找数组</div><div class="line"> * <span class="doctag">@param</span> low   开始位置</div><div class="line"> * <span class="doctag">@param</span> high  结束位置</div><div class="line"> * <span class="doctag">@return</span>  中轴所在位置</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMiddle</span><span class="params">(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> temp = numbers[low]; <span class="comment">//数组的第一个作为中轴</span></div><div class="line">    <span class="keyword">while</span>(low &lt; high)</div><div class="line">    &#123;</div><div class="line">    <span class="keyword">while</span>(low &lt; high &amp;&amp; numbers[high] &gt; temp)</div><div class="line">    &#123;</div><div class="line">        high--;</div><div class="line">    &#125;</div><div class="line">    numbers[low] = numbers[high];<span class="comment">//比中轴小的记录移到低端</span></div><div class="line">    <span class="keyword">while</span>(low &lt; high &amp;&amp; numbers[low] &lt; temp)</div><div class="line">    &#123;</div><div class="line">        low++;</div><div class="line">    &#125;</div><div class="line">    numbers[high] = numbers[low] ; <span class="comment">//比中轴大的记录移到高端</span></div><div class="line">    &#125;</div><div class="line">    numbers[low] = temp ; <span class="comment">//中轴记录到尾</span></div><div class="line">    <span class="keyword">return</span> low ; <span class="comment">// 返回中轴的位置</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="递归形式的分治排序算法："><a href="#递归形式的分治排序算法：" class="headerlink" title="递归形式的分治排序算法："></a>递归形式的分治排序算法：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> numbers 带排序数组</div><div class="line"> * <span class="doctag">@param</span> low  开始位置</div><div class="line"> * <span class="doctag">@param</span> high 结束位置</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] numbers,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(low &lt; high)</div><div class="line">    &#123;</div><div class="line">    　　<span class="keyword">int</span> middle = getMiddle(numbers,low,high); <span class="comment">//将numbers数组进行一分为二</span></div><div class="line">    　　quickSort(numbers, low, middle-<span class="number">1</span>);   <span class="comment">//对低字段表进行递归排序</span></div><div class="line">    　　quickSort(numbers, middle+<span class="number">1</span>, high); <span class="comment">//对高字段表进行递归排序</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="快速排序提供方法调用："><a href="#快速排序提供方法调用：" class="headerlink" title="快速排序提供方法调用："></a>快速排序提供方法调用：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 快速排序</div><div class="line"> * <span class="doctag">@param</span> numbers 带排序数组</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quick</span><span class="params">(<span class="keyword">int</span>[] numbers)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(numbers.length &gt; <span class="number">0</span>)   <span class="comment">//查看数组是否为空</span></div><div class="line">    &#123;</div><div class="line">    quickSort(numbers, <span class="number">0</span>, numbers.length-<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>分析：</strong><br>快速排序是通常被认为在同数量级（O(nlog2n)）的排序方法中平均性能最好的。但若初始序列按关键码有序或基本有序时，快排序反而蜕化为冒泡排序。为改进之，通常以“三者取中法”来选取基准记录，即将排序区间的两个端点与中点三个记录关键码居中的调整为支点记录。快速排序是一个不稳定的排序方法。</p>
<h5 id="方法测试"><a href="#方法测试" class="headerlink" title="方法测试"></a>方法测试</h5><p>打印函数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArr</span><span class="params">(<span class="keyword">int</span>[] numbers)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; numbers.length ; i ++ )</div><div class="line">    &#123;</div><div class="line">    System.out.print(numbers[i] + <span class="string">","</span>);</div><div class="line">    &#125;</div><div class="line">    System.out.println(<span class="string">""</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span>[] numbers = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">1</span>,-<span class="number">5</span>,<span class="number">55</span>&#125;;</div><div class="line">    System.out.print(<span class="string">"排序前："</span>);</div><div class="line">    printArr(numbers);</div><div class="line"></div><div class="line">    bubbleSort(numbers);</div><div class="line">    System.out.print(<span class="string">"冒泡排序后："</span>);</div><div class="line">    printArr(numbers);</div><div class="line"></div><div class="line"></div><div class="line">    quick(numbers);</div><div class="line">    System.out.print(<span class="string">"快速排序后："</span>);</div><div class="line">    printArr(numbers);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果：</p>
<pre><code>排序前：10,20,15,0,6,7,2,1,-5,55,
冒泡排序后：-5,0,1,2,6,7,10,15,20,55,
快速排序后：-5,0,1,2,6,7,10,15,20,55,
</code></pre><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p>　　<strong>1、基本思想</strong>：在要排序的一组数中，选出最小的一个数与第一个位置的数交换；然后在剩下的数当中再找最小的与第二个位置的数交换，如此循环到倒数第二个数和最后一个数比较为止。<br>　　<strong>2、实例</strong>：<br><img src="http://upload-images.jianshu.io/upload_images/196518-d78721e606ac9113.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>　　<strong>3、算法实现</strong>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line"> * 选择排序算法</div><div class="line"> * 在未排序序列中找到最小元素，存放到排序序列的起始位置  </div><div class="line"> * 再从剩余未排序元素中继续寻找最小元素，然后放到排序序列末尾。</div><div class="line"> * 以此类推，直到所有元素均排序完毕。</div><div class="line"> * <span class="doctag">@param</span> numbers</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] numbers)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> size = numbers.length; <span class="comment">//数组长度</span></div><div class="line"><span class="keyword">int</span> temp = <span class="number">0</span> ; <span class="comment">//中间变量</span></div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; size ; i++)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> k = i;   <span class="comment">//待确定的位置</span></div><div class="line">    <span class="comment">//选择出应该在第i个位置的数</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = size -<span class="number">1</span> ; j &gt; i ; j--)</div><div class="line">    &#123;</div><div class="line">    <span class="keyword">if</span>(numbers[j] &lt; numbers[k])</div><div class="line">    &#123;</div><div class="line">        k = j;</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//交换两个数</span></div><div class="line">    temp = numbers[i];</div><div class="line">    numbers[i] = numbers[k];</div><div class="line">    numbers[k] = temp;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><p>　　<strong>1、基本思想</strong>：每步将一个待排序的记录，按其顺序码大小插入到前面已经排序的字序列的合适位置（从后向前找到合适位置后），直到全部插入排序完为止。<br>　　<strong>2、实例</strong>：<br><img src="http://upload-images.jianshu.io/upload_images/196518-d3c35e80e0474225.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>　　<strong>3、算法实现</strong>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**  </span></div><div class="line"> * 插入排序</div><div class="line"> *</div><div class="line"> * 从第一个元素开始，该元素可以认为已经被排序</div><div class="line"> * 取出下一个元素，在已经排序的元素序列中从后向前扫描</div><div class="line"> * 如果该元素（已排序）大于新元素，将该元素移到下一位置  </div><div class="line"> * 重复步骤3，直到找到已排序的元素小于或者等于新元素的位置  </div><div class="line"> * 将新元素插入到该位置中  </div><div class="line"> * 重复步骤2  </div><div class="line"> * <span class="doctag">@param</span> numbers  待排序数组</div><div class="line"> */  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] numbers)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> size = numbers.length;</div><div class="line"><span class="keyword">int</span> temp = <span class="number">0</span> ;</div><div class="line"><span class="keyword">int</span> j =  <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; size ; i++)</div><div class="line">&#123;</div><div class="line">    temp = numbers[i];</div><div class="line">    <span class="comment">//假如temp比前面的值小，则将前面的值后移</span></div><div class="line">    <span class="keyword">for</span>(j = i ; j &gt; <span class="number">0</span> &amp;&amp; temp &lt; numbers[j-<span class="number">1</span>] ; j --)</div><div class="line">    &#123;</div><div class="line">    numbers[j] = numbers[j-<span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">    numbers[j] = temp;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　<strong>4、效率</strong>：<br>时间复杂度：O（n^2）.</p>
<h4 id="希尔算法"><a href="#希尔算法" class="headerlink" title="希尔算法"></a>希尔算法</h4><p><strong>1、基本思想：</strong><br>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。<br><strong>2、操作方法：</strong></p>
<p>1、选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；</p>
<p>2、按增量序列个数k，对序列进行k 趟排序；</p>
<p>3、每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</p>
<p>希尔排序的示例：<br><img src="http://upload-images.jianshu.io/upload_images/196518-9ba273ecfd05bd93.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br> <strong>3、**</strong>算法实现：**<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**希尔排序的原理:根据需求，如果你想要结果从大到小排列，它会首先将数组进行分组，然后将较大值移到前面，较小值</span></div><div class="line"> * 移到后面，最后将整个数组进行插入排序，这样比起一开始就用插入排序减少了数据交换和移动的次数，可以说希尔排序是加强</div><div class="line"> * 版的插入排序</div><div class="line"> * 拿数组5, 2, 8, 9, 1, 3，4来说，数组长度为7，当increment为3时，数组分为两个序列</div><div class="line"> * 5，2，8和9，1，3，4，第一次排序，9和5比较，1和2比较，3和8比较，4和比其下标值小increment的数组值相比较</div><div class="line"> * 此例子是按照从大到小排列，所以大的会排在前面，第一次排序后数组为9, 2, 8, 5, 1, 3，4</div><div class="line"> * 第一次后increment的值变为3/2=1,此时对数组进行插入排序，</div><div class="line"> *实现数组从大到小排</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] data)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</div><div class="line">    <span class="comment">//每次将步长缩短为原来的一半</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> increment = data.length / <span class="number">2</span>; increment &gt; <span class="number">0</span>; increment /= <span class="number">2</span>)</div><div class="line">    &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = increment; i &lt; data.length; i++)</div><div class="line">    &#123;</div><div class="line">        temp = data[i];</div><div class="line">        <span class="keyword">for</span> (j = i; j &gt;= increment; j -= increment)</div><div class="line">        &#123;</div><div class="line">        <span class="keyword">if</span>(temp &gt; data[j - increment])<span class="comment">//如想从小到大排只需修改这里</span></div><div class="line">        &#123;   </div><div class="line">            data[j] = data[j - increment];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        data[j] = temp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>4、效率</strong>：<br>时间复杂度：O（n^2）.</p>
<h4 id="归并排序算法"><a href="#归并排序算法" class="headerlink" title="归并排序算法"></a>归并排序算法</h4><p><strong>基本思想：</strong><br>　　归并（Merge）排序法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。<br>归并排序示例：<br><img src="http://upload-images.jianshu.io/upload_images/196518-4281c79eb1d8bbd2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>合并方法：</strong><br>设r[i…n]由两个有序子表r[i…m]和r[m+1…n]组成，两个子表长度分别为n-i +1、n-m。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">1、j=m+1；k=i；i=i; //置两个子表的起始下标及辅助数组的起始下标</div><div class="line">2、若i&gt;m 或j&gt;n，转⑷ //其中一个子表已合并完，比较选取结束</div><div class="line">3、//选取r[i]和r[j]较小的存入辅助数组rf</div><div class="line">        如果r[i]&lt;r[j]，rf[k]=r[i]； i++； k++； 转⑵</div><div class="line">        否则，rf[k]=r[j]； j++； k++； 转⑵</div><div class="line">4、//将尚未处理完的子表中元素存入rf</div><div class="line">        如果i&lt;=m，将r[i…m]存入rf[k…n] //前一子表非空</div><div class="line">        如果j&lt;=n ,  将r[j…n] 存入rf[k…n] //后一子表非空</div><div class="line">5、合并结束。</div></pre></td></tr></table></figure></p>
<p><strong>算法实现：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line"> * 归并排序</div><div class="line"> * 简介:将两个（或两个以上）有序表合并成一个新的有序表 即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列</div><div class="line"> * 时间复杂度为O(nlogn)</div><div class="line"> * 稳定排序方式</div><div class="line"> * <span class="doctag">@param</span> nums 待排序数组</div><div class="line"> * <span class="doctag">@return</span> 输出有序数组</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> low, <span class="keyword">int</span> high) &#123;</div><div class="line">    <span class="keyword">int</span> mid = (low + high) / <span class="number">2</span>;</div><div class="line">    <span class="keyword">if</span> (low &lt; high) &#123;</div><div class="line">        <span class="comment">// 左边</span></div><div class="line">        sort(nums, low, mid);</div><div class="line">        <span class="comment">// 右边</span></div><div class="line">        sort(nums, mid + <span class="number">1</span>, high);</div><div class="line">        <span class="comment">// 左右归并</span></div><div class="line">        merge(nums, low, mid, high);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> nums;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 将数组中low到high位置的数进行排序</div><div class="line"> * <span class="doctag">@param</span> nums 待排序数组</div><div class="line"> * <span class="doctag">@param</span> low 待排的开始位置</div><div class="line"> * <span class="doctag">@param</span> mid 待排中间位置</div><div class="line"> * <span class="doctag">@param</span> high 待排结束位置</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> low, <span class="keyword">int</span> mid, <span class="keyword">int</span> high)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[high - low + <span class="number">1</span>];</div><div class="line">    <span class="keyword">int</span> i = low;<span class="comment">// 左指针</span></div><div class="line">    <span class="keyword">int</span> j = mid + <span class="number">1</span>;<span class="comment">// 右指针</span></div><div class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 把较小的数先移到新数组中</span></div><div class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= high) &#123;</div><div class="line">        <span class="keyword">if</span> (nums[i] &lt; nums[j]) &#123;</div><div class="line">            temp[k++] = nums[i++];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            temp[k++] = nums[j++];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 把左边剩余的数移入数组</span></div><div class="line">    <span class="keyword">while</span> (i &lt;= mid) &#123;</div><div class="line">        temp[k++] = nums[i++];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 把右边边剩余的数移入数组</span></div><div class="line">    <span class="keyword">while</span> (j &lt;= high) &#123;</div><div class="line">        temp[k++] = nums[j++];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 把新数组中的数覆盖nums数组</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k2 = <span class="number">0</span>; k2 &lt; temp.length; k2++) &#123;</div><div class="line">        nums[k2 + low] = temp[k2];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="堆排序算法"><a href="#堆排序算法" class="headerlink" title="堆排序算法"></a>堆排序算法</h4><p><strong>1、基本思想：</strong><br>　　堆排序是一种树形选择排序，是对直接选择排序的有效改进。<br>　　堆的定义下：具有n个元素的序列 （h1,h2,…,hn),当且仅当满足（hi&gt;=h2i,hi&gt;=2i+1）或（hi&lt;=h2i,hi&lt;=2i+1） (i=1,2,…,n/2)时称之为堆。在这里只讨论满足前者条件的堆。由堆的定义可以看出，堆顶元素（即第一个元素）必为最大项（大顶堆）。完全二 叉树可以很直观地表示堆的结构。堆顶为根，其它为左子树、右子树。<br>　　思想:初始时把要排序的数的序列看作是一棵顺序存储的二叉树，调整它们的存储序，使之成为一个 堆，这时堆的根节点的数最大。然后将根节点与堆的最后一个节点交换。然后对前面(n-1)个数重新调整使之成为堆。依此类推，直到只有两个节点的堆，并对 它们作交换，最后得到有n个节点的有序序列。从算法描述来看，堆排序需要两个过程，一是建立堆，二是堆顶与堆的最后一个元素交换位置。所以堆排序有两个函数组成。一是建堆的渗透函数，二是反复调用渗透函数实现排序的函数。<br><strong>2、实例：</strong><br>初始序列：46,79,56,38,40,84<br>　　建堆：<br><img src="http://upload-images.jianshu.io/upload_images/196518-65ab0a125c803bd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br> 　　交换，从堆中踢出最大数：<br><img src="http://upload-images.jianshu.io/upload_images/196518-aaffe2862da0c322.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>依次类推：最后堆中剩余的最后两个结点交换，踢出一个，排序完成。<br><strong>3.算法实现：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] a=&#123;<span class="number">49</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>,<span class="number">13</span>,<span class="number">27</span>,<span class="number">49</span>,<span class="number">78</span>,<span class="number">34</span>,<span class="number">12</span>,<span class="number">64</span>&#125;;</div><div class="line">        <span class="keyword">int</span> arrayLength=a.length;  </div><div class="line">        <span class="comment">//循环建堆  </span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arrayLength-<span class="number">1</span>;i++)&#123;  </div><div class="line">            <span class="comment">//建堆  </span></div><div class="line">            buildMaxHeap(a,arrayLength-<span class="number">1</span>-i);  </div><div class="line">            <span class="comment">//交换堆顶和最后一个元素  </span></div><div class="line">            swap(a,<span class="number">0</span>,arrayLength-<span class="number">1</span>-i);  </div><div class="line">            System.out.println(Arrays.toString(a));  </div><div class="line">        &#125;  </div><div class="line">    &#125;</div><div class="line">    <span class="comment">//对data数组从0到lastIndex建大顶堆</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buildMaxHeap</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> lastIndex)</span></span>&#123;</div><div class="line">         <span class="comment">//从lastIndex处节点（最后一个节点）的父节点开始</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=(lastIndex-<span class="number">1</span>)/<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</div><div class="line">            <span class="comment">//k保存正在判断的节点</span></div><div class="line">            <span class="keyword">int</span> k=i;</div><div class="line">            <span class="comment">//如果当前k节点的子节点存在  </span></div><div class="line">            <span class="keyword">while</span>(k*<span class="number">2</span>+<span class="number">1</span>&lt;=lastIndex)&#123;</div><div class="line">                <span class="comment">//k节点的左子节点的索引</span></div><div class="line">                <span class="keyword">int</span> biggerIndex=<span class="number">2</span>*k+<span class="number">1</span>;</div><div class="line">                <span class="comment">//如果biggerIndex小于lastIndex，即biggerIndex+1代表的k节点的右子节点存在</span></div><div class="line">                <span class="keyword">if</span>(biggerIndex&lt;lastIndex)&#123;  </div><div class="line">                    <span class="comment">//若果右子节点的值较大  </span></div><div class="line">                    <span class="keyword">if</span>(data[biggerIndex]&lt;data[biggerIndex+<span class="number">1</span>])&#123;  </div><div class="line">                        <span class="comment">//biggerIndex总是记录较大子节点的索引  </span></div><div class="line">                        biggerIndex++;  </div><div class="line">                    &#125;  </div><div class="line">                &#125;  </div><div class="line">                <span class="comment">//如果k节点的值小于其较大的子节点的值  </span></div><div class="line">                <span class="keyword">if</span>(data[k]&lt;data[biggerIndex])&#123;  </div><div class="line">                    <span class="comment">//交换他们  </span></div><div class="line">                    swap(data,k,biggerIndex);  </div><div class="line">                    <span class="comment">//将biggerIndex赋予k，开始while循环的下一次循环，重新保证k节点的值大于其左右子节点的值  </span></div><div class="line">                    k=biggerIndex;  </div><div class="line">                &#125;<span class="keyword">else</span>&#123;  </div><div class="line">                    <span class="keyword">break</span>;  </div><div class="line">                &#125;  </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//交换</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;  </div><div class="line">        <span class="keyword">int</span> tmp=data[i];  </div><div class="line">        data[i]=data[j];  </div><div class="line">        data[j]=tmp;  </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="各种算法的时间复杂度"><a href="#各种算法的时间复杂度" class="headerlink" title="各种算法的时间复杂度"></a>各种算法的时间复杂度</h4><p><img src="http://upload-images.jianshu.io/upload_images/196518-584a80a392639ce7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h4&gt;&lt;p&gt;　　冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列
    
    </summary>
    
      <category term="Java" scheme="http://shadow000902.space/categories/Java/"/>
    
      <category term="排序" scheme="http://shadow000902.space/categories/Java/%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="java" scheme="http://shadow000902.space/tags/java/"/>
    
      <category term="排序" scheme="http://shadow000902.space/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>docker学习笔记</title>
    <link href="http://shadow000902.space/2016/12/08/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://shadow000902.space/2016/12/08/docker学习笔记/</id>
    <published>2016-12-08T02:16:51.000Z</published>
    <updated>2016-12-11T03:33:14.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>无法删除docker镜像时，处理方法<br>有依赖该image的container，先删除container再删除image<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker ps -a | grep &quot;Exited&quot; | awk &apos;&#123;print $1 &#125;&apos;|xargs docker stop</div><div class="line">docker ps -a | grep &quot;Exited&quot; | awk &apos;&#123;print $1 &#125;&apos;|xargs docker rm</div><div class="line">docker images|grep none|awk &apos;&#123;print $3 &#125;&apos;|xargs docker rmi</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这样清空掉残余的容器后，再删除images就没有异常的提示了。</p>
<ol>
<li><p>安装<code>docker&amp;boot2docker</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install boot2docker</div></pre></td></tr></table></figure>
</li>
<li><p><code>Docker images</code>存放位置<br><code>Docker for Mac</code>版本，所有的docker images 保存在下面这个文件里：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/Users/&#123;YourUserName&#125;/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/Docker.qcow2</div></pre></td></tr></table></figure>
</li>
</ol>
<p>到目前为止，还是没有办法指定<code>images</code>和<code>Container</code>的保存路径，你只能任由<code>docker</code>吃掉你的主盘。</p>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;无法删除docker镜像时，处理方法&lt;br&gt;有依赖该image的container，先删除container再删除image&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;d
    
    </summary>
    
      <category term="Docker" scheme="http://shadow000902.space/categories/Docker/"/>
    
    
      <category term="docker" scheme="http://shadow000902.space/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>MAC系统空间清理</title>
    <link href="http://shadow000902.space/2016/11/29/MAC%E7%B3%BB%E7%BB%9F%E7%A9%BA%E9%97%B4%E6%B8%85%E7%90%86/"/>
    <id>http://shadow000902.space/2016/11/29/MAC系统空间清理/</id>
    <published>2016-11-29T10:03:51.000Z</published>
    <updated>2017-06-24T07:10:45.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p>删除Emacs——可以节省出60MB+的硬盘空间</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo rm -rf /usr/share/emacs/</div></pre></td></tr></table></figure>
</li>
<li><p>移除系统嗓音文件——可以节省出500MB-3GB+硬盘空间</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /System/Library/Speech/</div><div class="line">sudo rm -rf Voices/*</div></pre></td></tr></table></figure>
 <a id="more"></a>
</li>
<li><p>删除所有系统日志——可以节省出100MB-2GB硬盘空间</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo rm -rf /private/var/log/*</div></pre></td></tr></table></figure>
</li>
<li><p>删除快速查看生成的缓存文件——可以节省出100MB-300MB硬盘空间</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo rm -rf /private/var/folders/</div></pre></td></tr></table></figure>
</li>
<li><p>禁用SafeSleep休眠模式——能节省出4GB-16GB空间</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sudo pmset -a hibernatemode 0                           # 禁用SafeSleep功能</div><div class="line">cd /private/var/vm/</div><div class="line">sudo rm sleepimage</div><div class="line">touch sleepimage                                        # 要防止OS X继续创建该文件，所以我们需要下面的命令生成一个无法被替换的空文件</div><div class="line">chmod 000 /private/var/vm/sleepimage</div><div class="line">sudo pmset -a hibernatemode 3                           # 重新开启SafeSleep功能</div><div class="line">sudo rm /private/var/vm/sleepimage</div></pre></td></tr></table></figure>
</li>
<li><p>清除缓存文件——可以节省1GB-10GB硬盘空间</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/Library/Caches/</div><div class="line">rm -rf ~/Library/Caches/*</div></pre></td></tr></table></figure>
</li>
<li><p>删除临时文件——可以节省500MB-5GB硬盘空间</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /private/var/tmp/</div><div class="line">rm -rf TM*</div></pre></td></tr></table></figure>
</li>
</ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;删除Emacs——可以节省出60MB+的硬盘空间&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo rm -rf /usr/share/emacs/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;移除系统嗓音文件——可以节省出500MB-3GB+硬盘空间&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;cd /System/Library/Speech/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo rm -rf Voices/*&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Mac" scheme="http://shadow000902.space/categories/Mac/"/>
    
    
      <category term="mac" scheme="http://shadow000902.space/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>UBUNTU服务器设置局域网远程访问</title>
    <link href="http://shadow000902.space/2016/11/29/UBUNTU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%BE%E7%BD%AE%E5%B1%80%E5%9F%9F%E7%BD%91%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/"/>
    <id>http://shadow000902.space/2016/11/29/UBUNTU服务器设置局域网远程访问/</id>
    <published>2016-11-29T08:18:35.000Z</published>
    <updated>2017-06-24T07:10:45.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="安装ssh"><a href="#安装ssh" class="headerlink" title="安装ssh"></a>安装<code>ssh</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install openssh-server</div></pre></td></tr></table></figure>
<h5 id="查看ssh服务是否启动"><a href="#查看ssh服务是否启动" class="headerlink" title="查看ssh服务是否启动"></a>查看<code>ssh</code>服务是否启动</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps -ef | grep ssh</div></pre></td></tr></table></figure>
<pre><code>&lt;!--more--&gt;
</code></pre><h5 id="如果ssh服务没有启动，启动ssh服务"><a href="#如果ssh服务没有启动，启动ssh服务" class="headerlink" title="如果ssh服务没有启动，启动ssh服务"></a>如果<code>ssh</code>服务没有启动，启动<code>ssh</code>服务</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service ssh start</div></pre></td></tr></table></figure>
<h5 id="修改ssh配置文件"><a href="#修改ssh配置文件" class="headerlink" title="修改ssh配置文件"></a>修改<code>ssh</code>配置文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/ssh/sshd_config</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Authentication:</div><div class="line">LoginGraceTime 120</div><div class="line">#PermitRootLogin without-password               # 该行首加一个“#”注释掉该行</div><div class="line">PermitRootLogin yes                             # 添加该行，增加一个配置项</div><div class="line">StrictModes yes</div></pre></td></tr></table></figure>
<h5 id="局域网远程访问"><a href="#局域网远程访问" class="headerlink" title="局域网远程访问"></a>局域网远程访问</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ssh root@192.168.0.1</div><div class="line"># root 远程服务器访问用户名</div><div class="line"># 192.168.0.1 远程服务器局域网IP</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;安装ssh&quot;&gt;&lt;a href=&quot;#安装ssh&quot; class=&quot;headerlink&quot; title=&quot;安装ssh&quot;&gt;&lt;/a&gt;安装&lt;code&gt;ssh&lt;/code&gt;&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
    
    </summary>
    
      <category term="Ubuntu" scheme="http://shadow000902.space/categories/Ubuntu/"/>
    
      <category term="局域网" scheme="http://shadow000902.space/categories/Ubuntu/%E5%B1%80%E5%9F%9F%E7%BD%91/"/>
    
    
      <category term="ubuntu" scheme="http://shadow000902.space/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Appium-WebView测试</title>
    <link href="http://shadow000902.space/2016/11/21/Appium-WebView%E6%B5%8B%E8%AF%95/"/>
    <id>http://shadow000902.space/2016/11/21/Appium-WebView测试/</id>
    <published>2016-11-20T17:07:09.000Z</published>
    <updated>2017-06-24T07:10:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在多数App都是混合型的，有原生的也包含WebView的，appium测试的时候就需要在原生和WebView之间切换才能完成测试。</p>
<h5 id="查看所有context"><a href="#查看所有context" class="headerlink" title="查看所有context"></a>查看所有context</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Set&lt;String&gt; contextNames = driver.getContextHandles();</div><div class="line">System.print(contextNames);</div></pre></td></tr></table></figure>
<pre><code>&lt;!--more--&gt;
</code></pre><p>结果包含目前所有打开的app<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[NATIVE_APP, WEBVIEW_com.test.android, WEBVIEW_com.estrongs.android.pop, WEBVIEW_com.xxxxx.sjj]</div></pre></td></tr></table></figure></p>
<p>NATIVE_APP就是我的被测应用原生界面<br>WEBVIEW_com.test.android 是我的被测应用打开的WebView<br>另外两个一个是ES， 一个其他的应用（混合型的）</p>
<h5 id="切换到WebView"><a href="#切换到WebView" class="headerlink" title="切换到WebView"></a>切换到WebView</h5><p>我们可以通过context方法切换到指定的应用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;pre name=<span class="string">"code"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"java"</span>&gt;driver.context(<span class="string">"WEBVIEW_com.test.android"</span>);</div><div class="line">driver.findElementByID(<span class="string">"wd"</span>);</div></pre></td></tr></table></figure></p>
<p>切换完成后就可以像测试web应用一样测试了，所有的定位和web相同。</p>
<h5 id="切换到NativeApp"><a href="#切换到NativeApp" class="headerlink" title="切换到NativeApp"></a>切换到NativeApp</h5><p>测试完web应用，需要操作原生应用的时候就需要切换回NATIVE_APP<br>我们可以通过context方法切换到原生应用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;pre name=<span class="string">"code"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"java"</span>&gt;driver.context(<span class="string">"NATIVE_APP"</span>);</div></pre></td></tr></table></figure></p>
<p>这样之后的操作就都是原生应用的操作了</p>
<h5 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">/**</span></div><div class="line">     * Switch to NATIVE_APP or WEBVIEW</div><div class="line">     * <span class="doctag">@param</span> sWindow window name</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">switchToWindow</span><span class="params">(String sWindow)</span> </span>&#123;</div><div class="line">        LogManager.getLogger(<span class="keyword">this</span>.getClass()).info(<span class="string">"Swith to window: "</span> + sWindow);</div><div class="line">        Set&lt;String&gt; contextNames = driver.getContextHandles();</div><div class="line">        LogManager.getLogger(<span class="keyword">this</span>.getClass()).info(<span class="string">"Exists windows: "</span> + contextNames.toString());</div><div class="line">        <span class="keyword">for</span> (String contextName : contextNames) &#123;</div><div class="line">            <span class="keyword">if</span> (contextName.contains(sWindow)) &#123;</div><div class="line">                driver.context(contextName);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">switchToWindow(<span class="string">"WEBVIEW_com.test.android"</span>);</div><div class="line">switchToWindow(<span class="string">"NATIVE_APP"</span>);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在多数App都是混合型的，有原生的也包含WebView的，appium测试的时候就需要在原生和WebView之间切换才能完成测试。&lt;/p&gt;
&lt;h5 id=&quot;查看所有context&quot;&gt;&lt;a href=&quot;#查看所有context&quot; class=&quot;headerlink&quot; tit
    
    </summary>
    
      <category term="Appium" scheme="http://shadow000902.space/categories/Appium/"/>
    
    
      <category term="appium" scheme="http://shadow000902.space/tags/appium/"/>
    
      <category term="webview" scheme="http://shadow000902.space/tags/webview/"/>
    
  </entry>
  
  <entry>
    <title>Logcat日志过滤与解析</title>
    <link href="http://shadow000902.space/2016/11/21/Logcat%E6%97%A5%E5%BF%97%E8%BF%87%E6%BB%A4%E4%B8%8E%E8%A7%A3%E6%9E%90/"/>
    <id>http://shadow000902.space/2016/11/21/Logcat日志过滤与解析/</id>
    <published>2016-11-20T16:15:48.000Z</published>
    <updated>2017-06-24T07:10:45.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="logcat指定某APP輸出ERROR以上級別的日誌，显示同一个进程的所有输出"><a href="#logcat指定某APP輸出ERROR以上級別的日誌，显示同一个进程的所有输出" class="headerlink" title="logcat指定某APP輸出ERROR以上級別的日誌，显示同一个进程的所有输出"></a><code>logcat</code>指定<code>某APP</code>輸出<code>ERROR</code>以上級別的日誌，<code>显示同一个进程的所有输出</code></h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh  </div><div class="line">echo 本腳本實現顯示指定包名APP的ERROR以上級別的日誌，建議崩潰之後，重新開啓此腳本  </div><div class="line">package_name=$1  </div><div class="line">pid=`adb shell ps | grep $package_name |awk '&#123;print $2&#125;'`  </div><div class="line">adb logcat -v time *:E | grep -E --color=auto $pid</div></pre></td></tr></table></figure>
<pre><code>&lt;!--more--&gt;
</code></pre><h5 id="只显示需要的输出，白名单"><a href="#只显示需要的输出，白名单" class="headerlink" title="只显示需要的输出，白名单"></a>只显示需要的输出，白名单</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">adb logcat | grep MyApp</div><div class="line">adb logcat | grep -i myapp <span class="comment">#忽略大小写。</span></div><div class="line">adb logcat | grep --color=auto -i  myapp <span class="comment">#设置匹配字符串颜色。更多设置请查看 grep 帮助。</span></div></pre></td></tr></table></figure>
<p>仅显示 Error 级别 tag 为 MyApp 的输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb logcat | grep &quot;^E.MyApp&quot;</div></pre></td></tr></table></figure></p>
<p>也可以匹配多个，使用 | 分割多个匹配表达式，要加转义符。例如要匹配 tag 为 MyApp 和 MyActivity 的输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb logcat | grep &quot;^..MyApp\|^..MyActivity&quot;</div><div class="line">adb logcat | grep -E &quot;^..MyApp|^..MyActivity&quot;  #使用 egrep 无须转义符</div></pre></td></tr></table></figure></p>
<h5 id="过滤不需要的输出，黑名单"><a href="#过滤不需要的输出，黑名单" class="headerlink" title="过滤不需要的输出，黑名单"></a>过滤不需要的输出，黑名单</h5><p>还是使用 grep，用法也跟上面的一样，加一个 -v 即可。例如要过滤 tag 为 MyApp 和 MyActivity 的输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb logcat | grep -v &quot;^..MyApp\|^..MyActivity&quot;</div><div class="line">adb logcat | grep -vE &quot;^..MyApp|^..MyActivity&quot;  #使用 egrep 无须转义符</div></pre></td></tr></table></figure></p>
<h5 id="从当前开始显示"><a href="#从当前开始显示" class="headerlink" title="从当前开始显示"></a>从当前开始显示</h5><p>logcat 有缓存，如果仅需要查看当前开始的 log，需要清空之前的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb logcat -c &amp;&amp; adb logcat</div></pre></td></tr></table></figure></p>
<h5 id="过滤log文件"><a href="#过滤log文件" class="headerlink" title="过滤log文件"></a>过滤<code>log</code>文件</h5><p>有时需要分析 log 文件，过滤 log 文件还是使用 grep。例如 log 文件为 myapp.log，要匹配 tag 为 MyApp 和 MyActivity 的输出，然后输出到 newmyapp.log：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat myapp.log | grep &quot;^..MyApp\|^..MyActivity&quot; &gt; newmyapp.log</div></pre></td></tr></table></figure></p>
<h5 id="logcat-详细用法"><a href="#logcat-详细用法" class="headerlink" title="logcat 详细用法"></a>logcat 详细用法</h5><h6 id="日志输出优先级"><a href="#日志输出优先级" class="headerlink" title="日志输出优先级"></a>日志输出优先级</h6><p>优先级有下列集中，是按照从低到高顺利排列的:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">V — Verbose (lowest priority)</div><div class="line">D — Debug</div><div class="line">I — Info</div><div class="line">W — Warning</div><div class="line">E — Error</div><div class="line">F — Fatal</div><div class="line">S — Silent (highest priority, on which nothing is ever printed)</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb logcat ActivityManager:I MyApp:D *:S</div><div class="line">adb logcat *:W                                                                  # 输出日志等级高于``Warning``的日志</div></pre></td></tr></table></figure>
<h6 id="日志输出的格式"><a href="#日志输出的格式" class="headerlink" title="日志输出的格式"></a>日志输出的格式</h6><p>日志信息包括了许多元数据域包括标签和优先级。可以修改日志的输出格式，所以可以显示出特 定的元数据域。可以通过 -v 选项得到格式化输出日志的相关信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">brief — Display priority/tag and PID of originating process (the default format).</div><div class="line">process — Display PID only.</div><div class="line">tag — Display the priority/tag only.</div><div class="line">thread — Display process:thread and priority/tag only.</div><div class="line">raw — Display the raw log message, with no other metadata fields.</div><div class="line">time — Display the date, invocation time, priority/tag, and PID of the originating process.</div><div class="line">long — Display all metadata fields and separate messages with a blank lines.</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb logcat -v thread</div></pre></td></tr></table></figure>
<p>只能通过 <code>-v</code>选项来规定输出格式 <code>option</code></p>
<h6 id="查看可用日志的缓冲区"><a href="#查看可用日志的缓冲区" class="headerlink" title="查看可用日志的缓冲区"></a>查看可用日志的缓冲区</h6><p>Android日志系统有循环缓冲区，并不是所有的日志系统都有默认循环缓冲区。为了得到 日志信息，你需要通过-b 选项来启动logcat 。如果要使用循环缓冲区，你需要查看剩余的 循环缓冲期:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">radio — 查看缓冲区的相关的信息.</div><div class="line">events — 查看和事件相关的的缓冲区.</div><div class="line">main — 查看主要的日志缓冲区</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb logcat -b radio</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;logcat指定某APP輸出ERROR以上級別的日誌，显示同一个进程的所有输出&quot;&gt;&lt;a href=&quot;#logcat指定某APP輸出ERROR以上級別的日誌，显示同一个进程的所有输出&quot; class=&quot;headerlink&quot; title=&quot;logcat指定某APP輸出
    
    </summary>
    
      <category term="Logcat" scheme="http://shadow000902.space/categories/Logcat/"/>
    
    
      <category term="adb" scheme="http://shadow000902.space/tags/adb/"/>
    
      <category term="logcat" scheme="http://shadow000902.space/tags/logcat/"/>
    
  </entry>
  
</feed>
